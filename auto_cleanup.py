#!/usr/bin/env python3
"""
üßπ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –£–°–¢–ê–†–ï–í–®–ò–• –§–ê–ô–õ–û–í GopiAI
==================================================

–°–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ, –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç 3 –∏—é–Ω—è 2025 –≥.

–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞!
"""

import os
import shutil
import sys
from datetime import datetime

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
CLEANUP_LIST = [
    # –ü—É—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    "gopiai_mockup_interface.py",
    "gopiai_interface_with_stubs.py", 
    "gopiai_integrated_interface.py",
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Å—Ç—ã
    "test_svg_rendering.py",
    "test_lucide_direct.py",
    "test_icon_adapter.py",
    "test_icons_themes.py",
    "simple_icon_test.py",
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    "icon_manager.py",
    "simple_icon_manager.py",
    "simple_icon_adapter.py",
    "integrated_theme_manager.py",
    "local_titlebar_with_menu.py",
    "module_connector.py",
    "simple_module_connector.py",
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    "diagnose_icons_themes.py",
    "cleanup_old_files.py",
    "ui_debug.log",
    
    # Node.js –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    "package-lock.json",
    "package.json",
    "node_modules",
    
    # –ö–∞—Ç–∞–ª–æ–≥–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    "imports_reports",
    "marked_code_reports", 
    "logs",
    "__pycache__",
    
    # –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ RAG —Å–∏—Å—Ç–µ–º–µ
    "rag_memory_system/project_sync",
]

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
KEEP_LIST = [
    "gopiai_standalone_interface.py",
    "icon_mapping.py",
    "icon_mapping_extraction_report.md",
    "test_icon_mapping.py",
    "productivity_extension.py",
    "sync_to_rag.py",
    "PROJECT_CLEANUP_ANALYSIS.md",
    "CLEANUP_REPORT.md",
    "CLEAN_MODULAR.md",
]

def log_action(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_safety():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ"""
    log_action("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    missing_files = []
    for file in KEEP_LIST:
        file_path = os.path.join(ROOT_DIR, file)
        if not os.path.exists(file_path):
            missing_files.append(file)
    
    if missing_files:
        log_action(f"‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {missing_files}", "ERROR")
        return False
    
    log_action("‚úÖ –í—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def get_file_size(path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞/–∫–∞—Ç–∞–ª–æ–≥–∞"""
    if os.path.isfile(path):
        return os.path.getsize(path)
    elif os.path.isdir(path):
        total = 0
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    total += os.path.getsize(fp)
        return total
    return 0

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    
    return f"{size_bytes:.1f} TB"

def cleanup_files(dry_run=True):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    log_action("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    if dry_run:
        log_action("üîç –†–ï–ñ–ò–ú –°–ò–ú–£–õ–Ø–¶–ò–ò - —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
    
    deleted_count = 0
    total_size_freed = 0
    errors = []
    
    for item in CLEANUP_LIST:
        item_path = os.path.join(ROOT_DIR, item)
        
        if os.path.exists(item_path):
            try:
                size = get_file_size(item_path)
                size_str = format_size(size)
                
                if dry_run:
                    if os.path.isdir(item_path):
                        log_action(f"üóëÔ∏è [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –ö–∞—Ç–∞–ª–æ–≥: {item} ({size_str})")
                    else:
                        log_action(f"üóëÔ∏è [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –§–∞–π–ª: {item} ({size_str})")
                else:
                    if os.path.isdir(item_path):
                        shutil.rmtree(item_path)
                        log_action(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–∞—Ç–∞–ª–æ–≥: {item} ({size_str})")
                    else:
                        os.remove(item_path)
                        log_action(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item} ({size_str})")
                
                deleted_count += 1
                total_size_freed += size
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {item}: {e}"
                errors.append(error_msg)
                log_action(error_msg, "ERROR")
        else:
            log_action(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {item}", "WARN")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log_action("=" * 50)
    if dry_run:
        log_action(f"üìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:")
    else:
        log_action(f"üìä –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
    
    log_action(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {deleted_count}")
    log_action(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(total_size_freed)}")
    
    if errors:
        log_action(f"   –û—à–∏–±–æ–∫: {len(errors)}")
        for error in errors:
            log_action(f"     - {error}")
    
    return deleted_count, total_size_freed, errors

def create_backup_list():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞"""
    backup_file = os.path.join(ROOT_DIR, f"cleanup_backup_list_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write("# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö —É–¥–∞–ª–µ–Ω–∏—é\n")
        f.write(f"# –°–æ–∑–¥–∞–Ω: {datetime.now()}\n\n")
        
        for item in CLEANUP_LIST:
            item_path = os.path.join(ROOT_DIR, item)
            if os.path.exists(item_path):
                size = get_file_size(item_path)
                f.write(f"{item} ({format_size(size)})\n")
    
    log_action(f"üìù –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –±—ç–∫–∞–ø–∞: {backup_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ GopiAI Project Cleanup Tool")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not check_safety():
        log_action("‚ùå –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "ERROR")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
    create_backup_list()
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    mode = input("\nü§î –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - –°–∏–º—É–ª—è—Ü–∏—è (–ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)\n2 - –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ\n\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
    
    if mode == "1":
        cleanup_files(dry_run=True)
        print("\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º 2")
    elif mode == "2":
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û!")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
        
        if confirm in ['yes', 'y', '–¥–∞', '–¥']:
            cleanup_files(dry_run=False)
            log_action("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            log_action("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    else:
        log_action("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã—Ö–æ–¥.", "ERROR")

if __name__ == "__main__":
    main()
