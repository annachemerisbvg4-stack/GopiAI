#!/usr/bin/env python3
"""
üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê
===================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:
- –ü—É—Å—Ç—ã—Ö –∏–ª–∏ –ø–æ—á—Ç–∏ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
- –ù–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
from pathlib import Path

def analyze_suspicious_files():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    base_path = Path(".")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    python_files = list(base_path.glob("*.py"))
    
    suspicious_files = []
    empty_files = []
    small_files = []
    
    print("üìã –ê–Ω–∞–ª–∏–∑ Python —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ:\n")
    
    for file_path in python_files:
        if file_path.is_file():
            size = file_path.stat().st_size
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    lines = len(content.split('\n')) if content else 0
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                status = "‚úÖ"
                notes = []
                
                if size == 0:
                    status = "‚ùå"
                    notes.append("–ü–£–°–¢–û–ô –§–ê–ô–õ")
                    empty_files.append(file_path.name)
                elif size < 100:
                    status = "‚ö†Ô∏è"
                    notes.append("–û–ß–ï–ù–¨ –ú–ê–õ–ï–ù–¨–ö–ò–ô")
                    small_files.append(file_path.name)
                elif lines < 10:
                    status = "‚ö†Ô∏è"
                    notes.append("–ú–ê–õ–û –°–¢–†–û–ö")
                    small_files.append(file_path.name)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                if "interface" in file_path.name and file_path.name != "gopiai_standalone_interface_modular.py":
                    if file_path.name != "gopiai_standalone_interface.py":  # –û—Ä–∏–≥–∏–Ω–∞–ª –æ—Å—Ç–∞–≤–ª—è–µ–º
                        status = "üîÑ"
                        notes.append("–í–û–ó–ú–û–ñ–ù–´–ô –î–£–ë–õ–¨")
                        suspicious_files.append(file_path.name)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                if file_path.name.startswith("test_") and "modular" not in file_path.name:
                    status = "üß™"
                    notes.append("–°–¢–ê–†–´–ô –¢–ï–°–¢")
                    suspicious_files.append(file_path.name)
                
                print(f"{status} {file_path.name:40} | {size:6} bytes | {lines:3} lines | {', '.join(notes) if notes else 'OK'}")
                
            except Exception as e:
                print(f"‚ùå {file_path.name:40} | ERROR: {e}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    
    if empty_files:
        print(f"\n‚ùå –ü–£–°–¢–´–ï –§–ê–ô–õ–´ ({len(empty_files)}):")
        for file in empty_files:
            print(f"   ‚Ä¢ {file}")
    
    if small_files:
        print(f"\n‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ú–ê–õ–ï–ù–¨–ö–ò–ï –§–ê–ô–õ–´ ({len(small_files)}):")
        for file in small_files:
            print(f"   ‚Ä¢ {file}")
    
    if suspicious_files:
        print(f"\nüîÑ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –î–£–ë–õ–ò/–°–¢–ê–†–´–ï –§–ê–ô–õ–´ ({len(suspicious_files)}):")
        for file in suspicious_files:
            print(f"   ‚Ä¢ {file}")
    
    # –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\nüìÅ –î–†–£–ì–ò–ï –§–ê–ô–õ–´ –í –ö–û–†–ù–ï:")
    other_files = [f for f in base_path.iterdir() if f.is_file() and not f.name.endswith('.py')]
    
    for file_path in other_files:
        if file_path.name.startswith('.'):
            continue
            
        size = file_path.stat().st_size
        
        if file_path.suffix in ['.png', '.jpg', '.jpeg']:
            print(f"üñºÔ∏è {file_path.name:40} | {size:6} bytes | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        elif file_path.suffix in ['.json']:
            print(f"üìÑ {file_path.name:40} | {size:6} bytes | JSON")
        elif file_path.suffix in ['.md']:
            print(f"üìö {file_path.name:40} | {size:6} bytes | –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        else:
            print(f"‚ùì {file_path.name:40} | {size:6} bytes | {file_path.suffix}")
    
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if empty_files:
        print("‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã")
    
    if small_files:
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å")
    
    if suspicious_files:
        print("‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
    
    print("‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É tests/")
    print("‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫—É docs/")

def get_file_details(filename):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        file_path = Path(filename)
        if not file_path.exists():
            return f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        size = file_path.stat().st_size
        
        if filename.endswith('.py'):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = len(content.split('\n'))
                
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            has_classes = 'class ' in content
            has_functions = 'def ' in content
            has_imports = 'import ' in content or 'from ' in content
            
            analysis = []
            if has_classes:
                analysis.append("—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã")
            if has_functions:
                analysis.append("—Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏")
            if has_imports:
                analysis.append("–∏–º–µ–µ—Ç –∏–º–ø–æ—Ä—Ç—ã")
            
            return f"""
üìÑ {filename}:
   ‚Ä¢ –†–∞–∑–º–µ—Ä: {size} bytes
   ‚Ä¢ –°—Ç—Ä–æ–∫: {lines}
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑: {', '.join(analysis) if analysis else '–≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π/—à–∞–±–ª–æ–Ω'}
   ‚Ä¢ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:
{content[:200]}...
"""
        else:
            return f"üìÑ {filename}: {size} bytes"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filename}: {e}"

if __name__ == "__main__":
    analyze_suspicious_files()
