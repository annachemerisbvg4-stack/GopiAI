#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π —á–∞—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–≤—è–∑–∫–µ: Backend + UI
"""

import sys
import os
import time

print("üöÄ === –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –£–õ–£–ß–®–ï–ù–ò–ô –ß–ê–¢–ê ===")
print("=" * 60)

def test_backend_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º backend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    print("\nüîß === –¢–ï–°–¢ BACKEND –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
    backend_path = r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI"
    if backend_path not in sys.path:
        sys.path.append(backend_path)
    
    try:
        # –¢–µ—Å—Ç ResponseFormatter
        from tools.gopiai_integration.response_formatter import ResponseFormatter
        formatter = ResponseFormatter()
        
        test_response = {
            "response": "–ü—Ä–∏–≤–µ—Ç! ```json {'tool': 'terminal'} ``` –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
            "analysis": {"executed_commands": 1}
        }
        
        formatted = formatter.format_for_chat(test_response)
        print(f"‚úÖ ResponseFormatter: {len(formatted['user_content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç HTMLSanitizer
        from tools.gopiai_integration.html_sanitizer import HTMLSanitizer
        sanitizer = HTMLSanitizer()
        
        test_html = "<p>–¢–µ–∫—Å—Ç —Å <script>alert('test')</script> —Ç–µ–≥–∞–º–∏</p>"
        clean = sanitizer.sanitize_for_file_export(test_html)
        print(f"‚úÖ HTMLSanitizer: –æ—á–∏—â–µ–Ω–æ –æ—Ç HTML")
        
        # –¢–µ—Å—Ç SmartDelegator
        from tools.gopiai_integration.smart_delegator import SmartDelegator
        delegator = SmartDelegator()
        
        has_formatter = hasattr(delegator, 'response_formatter') and delegator.response_formatter
        has_executor = hasattr(delegator, 'command_executor') and delegator.command_executor
        
        print(f"‚úÖ SmartDelegator: ResponseFormatter={'‚úÖ' if has_formatter else '‚ùå'}, CommandExecutor={'‚úÖ' if has_executor else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Backend —Ç–µ—Å—Ç: {e}")
        return False

def test_ui_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    print("\nüñ•Ô∏è === –¢–ï–°–¢ UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ UI
    ui_path = r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-UI"
    if ui_path not in sys.path:
        sys.path.append(ui_path)
    
    try:
        # –¢–µ—Å—Ç OptimizedChatWidget (–±–µ–∑ Qt –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º OptimizedChatWidget...")
        ui_file = os.path.join(ui_path, "gopiai", "ui", "components", "optimized_chat_widget.py")
        if os.path.exists(ui_file):
            print("‚úÖ OptimizedChatWidget —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå OptimizedChatWidget —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç ImprovedAsyncChatHandler
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ImprovedAsyncChatHandler...")
        handler_file = os.path.join(ui_path, "gopiai", "ui", "components", "improved_async_chat_handler.py")
        if os.path.exists(handler_file):
            print("‚úÖ ImprovedAsyncChatHandler —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå ImprovedAsyncChatHandler —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ ChatWidget
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ ChatWidget...")
        chat_file = os.path.join(ui_path, "gopiai", "ui", "components", "chat_widget.py")
        if os.path.exists(chat_file):
            with open(chat_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            checks = [
                ("OptimizedChatWidget –∏–º–ø–æ—Ä—Ç", "from .optimized_chat_widget import OptimizedChatWidget" in content),
                ("ImprovedAsyncChatHandler –∏–º–ø–æ—Ä—Ç", "from .improved_async_chat_handler import ImprovedAsyncChatHandler" in content),
                ("OptimizedChatWidget –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "self.history = OptimizedChatWidget" in content),
                ("ImprovedAsyncChatHandler –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "self.async_handler = ImprovedAsyncChatHandler" in content),
                ("Partial response handler", "_handle_partial_response" in content)
            ]
            
            for check_name, result in checks:
                print(f"{'‚úÖ' if result else '‚ùå'} {check_name}")
                
            return all(result for _, result in checks)
        else:
            print("‚ùå ChatWidget —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
    except Exception as e:
        print(f"‚ùå UI —Ç–µ—Å—Ç: {e}")
        return False

def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ === –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í ===")
    
    files_to_check = [
        # Backend —Ñ–∞–π–ª—ã
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI\tools\gopiai_integration\response_formatter.py", "ResponseFormatter"),
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI\tools\gopiai_integration\html_sanitizer.py", "HTMLSanitizer"),
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI\tools\gopiai_integration\command_executor.py", "CommandExecutor"),
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI\tools\gopiai_integration\smart_delegator.py", "SmartDelegator (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)"),
        
        # UI —Ñ–∞–π–ª—ã
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-UI\gopiai\ui\components\optimized_chat_widget.py", "OptimizedChatWidget"),
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-UI\gopiai\ui\components\improved_async_chat_handler.py", "ImprovedAsyncChatHandler"),
        (r"C:\Users\crazy\GOPI_AI_MODULES\GopiAI-UI\gopiai\ui\components\chat_widget.py", "ChatWidget (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)")
    ]
    
    all_exist = True
    
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {description}: {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {description}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def run_integration_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("Backend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_backend_components),
        ("UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_ui_components)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç: {test_name}")
            result = test_func()
            results.append((test_name, result))
            print(f"{'‚úÖ –£–°–ü–ï–•' if result else '‚ùå –û–®–ò–ë–ö–ê'}: {test_name}")
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(tests)}")
    
    if passed == len(tests):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ:")
        print("  ‚úÖ ResponseFormatter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è JSON –∏ HTML")
        print("  ‚úÖ HTMLSanitizer - —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("  ‚úÖ OptimizedChatWidget - –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∏ streaming")
        print("  ‚úÖ ImprovedAsyncChatHandler - —É–ª—É—á—à–µ–Ω–Ω—ã–π polling")
        print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ ChatWidget - –ø–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        print("  ‚úÖ CommandExecutor - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Gemini")
        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–±—Ä—ã–≤–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, JSON –º—É—Å–æ—Ä–∞ –∏ HTML –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤!")
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´: {len(tests) - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return passed == len(tests)

if __name__ == "__main__":
    success = run_integration_test()
    
    if success:
        print("\nüéä –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    sys.exit(0 if success else 1)
