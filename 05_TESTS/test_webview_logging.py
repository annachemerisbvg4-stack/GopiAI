#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è WebView –∫–æ–Ω—Å–æ–ª–∏
===============================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤ JavaScript –∫–æ–Ω—Å–æ–ª–∏
–∏ –∏—Ö –ø–µ—Ä–µ–¥–∞—á—É –≤ Python –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebView.
"""

import sys
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "GopiAI-UI"))
sys.path.insert(0, str(Path(__file__).parent / "GopiAI-WebView"))

from PySide6.QtWidgets import QApplication, QVBoxLayout, QWidget, QPushButton, QTextEdit, QLabel
from PySide6.QtCore import Qt, QTimer


class WebViewLoggingTest(QWidget):
    """–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è WebView"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GopiAI WebView Logging Test")
        self.setGeometry(100, 100, 1200, 800)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_label = QLabel("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è WebView –∫–æ–Ω—Å–æ–ª–∏")
        info_label.setStyleSheet("font-size: 14px; font-weight: bold; padding: 10px;")
        layout.addWidget(info_label)
        
        # WebView —á–∞—Ç
        self.chat_widget = ()
        layout.addWidget(self.chat_widget, stretch=3)
        
        # –ü–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
        logs_label = QLabel("üìã JavaScript Console Logs:")
        logs_label.setStyleSheet("font-weight: bold; margin-top: 10px;")
        layout.addWidget(logs_label)
        
        self.logs_display = QTextEdit()
        self.logs_display.setMaximumHeight(200)
        self.logs_display.setStyleSheet("""
            background-color: #1e1e1e; 
            color: #ffffff; 
            font-family: 'Courier New', monospace; 
            font-size: 11px;
        """)
        layout.addWidget(self.logs_display, stretch=1)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_buttons_layout = QVBoxLayout()
        
        test_log_btn = QPushButton("üß™ –¢–µ—Å—Ç console.log")
        test_log_btn.clicked.connect(self.test_console_log)
        test_buttons_layout.addWidget(test_log_btn)
        
        test_error_btn = QPushButton("üö® –¢–µ—Å—Ç console.error")
        test_error_btn.clicked.connect(self.test_console_error)
        test_buttons_layout.addWidget(test_error_btn)
        
        test_puter_btn = QPushButton("üåê –¢–µ—Å—Ç puter.js –∑–∞–≥—Ä—É–∑–∫–∏")
        test_puter_btn.clicked.connect(self.test_puter_loading)
        test_buttons_layout.addWidget(test_puter_btn)
        
        clear_logs_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_logs_btn.clicked.connect(self.clear_logs)
        test_buttons_layout.addWidget(clear_logs_btn)
        
        layout.addLayout(test_buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging_connections()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_log("info", "üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è WebView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "test")
    
    def setup_logging_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ signal –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript –∫–æ–Ω—Å–æ–ª–∏
            if hasattr(self.chat_widget.bridge, 'js_console_log'):
                self.chat_widget.bridge.js_console_log.connect(self.on_js_log_received)
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ js_console_log signal")
            else:
                print("‚ö†Ô∏è js_console_log signal –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º signals
            if hasattr(self.chat_widget.bridge, 'error_occurred'):
                self.chat_widget.bridge.error_occurred.connect(
                    lambda msg: self.add_log("error", msg, "bridge")
                )
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ error_occurred signal")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ logging connections: {e}")
            self.add_log("error", f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "test")
    
    def on_js_log_received(self, level: str, message: str, source: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ—Ç JavaScript"""
        self.add_log(level, message, source)
    
    def add_log(self, level: str, message: str, source: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –ø–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
        color_map = {
            "error": "#ff4444",
            "warn": "#ffaa00", 
            "info": "#00aaff",
            "debug": "#888888",
            "log": "#ffffff"
        }
        
        # –ò–∫–æ–Ω–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é
        icon_map = {
            "error": "‚ùå",
            "warn": "‚ö†Ô∏è",
            "info": "‚ÑπÔ∏è",
            "debug": "üêõ",
            "log": "üìù"
        }
        
        color = color_map.get(level, "#ffffff")
        icon = icon_map.get(level, "üìù")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        timestamp = time.strftime("%H:%M:%S")
        source_part = f" [{source}]" if source else ""
        
        formatted_message = f'<span style="color: {color};">[{timestamp}] {icon} {message.replace("<", "&lt;").replace(">", "&gt;")}{source_part}</span>'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–∂–µ—Ç
        self.logs_display.append(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        cursor = self.logs_display.textCursor()
        cursor.movePosition(cursor.End)
        self.logs_display.setTextCursor(cursor)
    
    def test_console_log(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ console.log"""
        self.add_log("info", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç console.log...", "test")
        
        script = """
        console.log('üß™ Test console.log message from WebView');
        console.log('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
        """
        
        self.chat_widget.web_view.page().runJavaScript(script)
    
    def test_console_error(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ console.error"""
        self.add_log("info", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç console.error...", "test")
        
        script = """
        console.error('üö® Test console.error message from WebView');
        console.warn('‚ö†Ô∏è Test console.warn message');
        """
        
        self.chat_widget.web_view.page().runJavaScript(script)
    
    def test_puter_loading(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ puter.js"""
        self.add_log("info", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è puter.js...", "test")
        
        script = """
        if (typeof puter !== 'undefined') {
            console.log('‚úÖ puter.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('–í–µ—Ä—Å–∏—è puter:', puter.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        } else {
            console.warn('‚ö†Ô∏è puter.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat –æ–±—ä–µ–∫—Ç–∞
        if (typeof window.chat !== 'undefined') {
            console.log('‚úÖ Chat –æ–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.warn('‚ö†Ô∏è Chat –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º bridge
        if (typeof bridge !== 'undefined') {
            console.log('‚úÖ Bridge –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è Bridge –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        """
        
        self.chat_widget.web_view.page().runJavaScript(script)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤"""
        self.logs_display.clear()
        self.add_log("info", "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "test")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    app.setStyleSheet("""
        QWidget {
            background-color: #2d2d2d;
            color: #ffffff;
        }
        QPushButton {
            background-color: #0078d4;
            color: #ffffff;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #106ebe;
        }
        QPushButton:pressed {
            background-color: #005a9e;
        }
        QLabel {
            color: #ffffff;
        }
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_window = WebViewLoggingTest()
    test_window.show()
    
    print("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ WebView –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ")
    print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("   1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤")
    print("   2. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ª–æ–≥–∏ JavaScript –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ Python")
    print("   4. –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å Python")
    
    return app.exec()

if __name__ == "__main__":
    sys.exit(main())