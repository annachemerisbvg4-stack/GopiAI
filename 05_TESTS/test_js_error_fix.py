#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JavaScript –æ—à–∏–±–∫–∏ toolsList.tools.find
"""

import sys
import json
import subprocess
import os

def test_javascript_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript —Ñ–∞–π–ª–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript...")
    
    js_file = "GopiAI-WebView/gopiai/webview/assets/chat.js"
    
    if not os.path.exists(js_file):
        print(f"‚ùå –§–∞–π–ª {js_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —á–µ—Ä–µ–∑ Node.js
        result = subprocess.run(
            ['node', '-c', js_file],
            capture_output=True,
            text=True,
            cwd='.'
        )
        
        if result.returncode == 0:
            print("‚úÖ JavaScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False

def test_method_presence():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ JavaScript —Ñ–∞–π–ª–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤...")
    
    js_file = "GopiAI-WebView/gopiai/webview/assets/chat.js"
    
    try:
        with open(js_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'getClaudeToolsList',
            'checkMemoryAvailability',
            'searchMemory'
        ]
        
        for method in required_methods:
            if f'async {method}(' in content or f'{method}(' in content:
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def test_error_handling():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    js_file = "GopiAI-WebView/gopiai/webview/assets/chat.js"
    
    try:
        with open(js_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ toolsList
        if 'toolsList.tools' in content and 'Array.isArray(toolsList.tools)' in content:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Array.isArray –¥–ª—è toolsList.tools")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Array.isArray")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ç–≤–µ—Ç–∞
        if 'toolsList.result' in content and 'toolsList.data' in content:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ç–≤–µ—Ç–∞")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º try-catch –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        if 'try {' in content and 'catch (error)' in content:
            print("‚úÖ Try-catch –±–ª–æ–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç try-catch –±–ª–æ–∫–∏")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JavaScript –æ—à–∏–±–æ–∫\n")
    
    tests = [
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript", test_javascript_syntax),
        ("–ù–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤", test_method_presence),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print('='*50)
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! JavaScript –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)