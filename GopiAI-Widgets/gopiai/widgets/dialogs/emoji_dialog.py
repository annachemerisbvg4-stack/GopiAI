import json
from gopiai.core.logging import get_logger
logger = get_logger().logger
import os
from pathlib import Path

from PySide6.QtCore import QSize, Qt, QTimer, Signal
from PySide6.QtGui import QColor, QFont, QFontDatabase, QIcon, QPainter, QPixmap
from PySide6.QtWidgets import (
    QDialog,
    QGridLayout,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QTabWidget,
    QVBoxLayout,    QWidget,
)

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
def tr(key, default_text=None):
    return default_text if default_text else key

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∫–æ–Ω–æ–∫ Lucide
def get_lucide_icon(name, size=24):
    from PySide6.QtGui import QIcon
    return QIcon()

logger = get_logger().logger


class EmojiButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏."""

    def __init__(self, emoji, parent=None, emoji_font=None):
        super().__init__(emoji, parent)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if emoji_font:
            font = QFont(emoji_font, 12)  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å 14 –¥–æ 12
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏
            font = QFont("Segoe UI Emoji", 12)  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å 14 –¥–æ 12

        self.setFont(font)
        self.setFixedSize(24, 24)  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ —Å 34x34 –¥–æ 24x24
        self.setCursor(Qt.PointingHandCursor)
        self.setToolTip(emoji)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π
        self.setStyleSheet(
            """
            QPushButton {
                border: 1px solid #cccccc;
                border-radius: 0px;
                background-color: #f8f8f8;
                margin: 1px;
                padding: 0px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
                border: 1px solid #aaaaaa;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
                border: 1px solid #888888;
            }
            """
        )


class EmojiDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏."""

    emoji_selected = Signal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(tr("emoji_dialog.title", "Select Emoji"))
        self.setFixedSize(225, 225)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä 225x225
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏: —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º WindowStaysOnTopHint
        self.setWindowFlags(
            (self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            | Qt.WindowStaysOnTopHint
        )

        # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º —ç–º–æ–¥–∑–∏
        self.emoji_data_path = self._get_emoji_data_path()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
        self.emoji_categories = {}
        self.emoji_fonts = []
        self.load_emoji_data()

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç —ç–º–æ–¥–∑–∏
        self.emoji_font = self._find_available_emoji_font()
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —ç–º–æ–¥–∑–∏: {self.emoji_font}")

        self.setup_ui()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏
        if hasattr(self, "search_input"):
            self.search_input.setFocus()

    def _get_emoji_data_path(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏."""
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        app_dir = Path(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
        emoji_data_path = app_dir / "assets" / "emoji" / "emoji_data.json"

        if not emoji_data_path.exists():
            logger.warning(
                f"–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {emoji_data_path}"
            )

        return emoji_data_path

    def load_emoji_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            if self.emoji_data_path.exists():
                with open(self.emoji_data_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.emoji_categories = data.get("categories", {})
                    self.emoji_fonts = data.get("fonts", [])
                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.emoji_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–º–æ–¥–∑–∏ –∏ {len(self.emoji_fonts)} —à—Ä–∏—Ñ—Ç–æ–≤"
                )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–±–µ–∑ JSON —Ñ–∞–π–ª–∞)")
                self.emoji_categories = {
                    "–°–º–∞–π–ª—ã": ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£"],
                    "–õ—é–¥–∏": ["üë∂", "üëß", "üßí", "üë¶", "üë©", "üßë", "üë®"],
                    "–ñ–∏–≤–æ—Ç–Ω—ã–µ": ["üêµ", "üêí", "ü¶ç", "ü¶ß", "üê∂", "üêï"],
                    "–°–∏–º–≤–æ–ª—ã": ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú"],
                }
                self.emoji_fonts = [
                    "Segoe UI Emoji",
                    "Segoe UI Symbol",
                    "Arial Unicode MS",
                ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏: {e}")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.emoji_categories = {
                "–°–º–∞–π–ª—ã": ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£"],
                "–õ—é–¥–∏": ["üë∂", "üëß", "üßí", "üë¶", "üë©", "üßë", "üë®"],
                "–ñ–∏–≤–æ—Ç–Ω—ã–µ": ["üêµ", "üêí", "ü¶ç", "ü¶ß", "üê∂", "üêï"],
                "–°–∏–º–≤–æ–ª—ã": ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú"],
            }
            self.emoji_fonts = ["Segoe UI Emoji", "Segoe UI Symbol", "Arial Unicode MS"]

    def _find_available_emoji_font(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏."""
        available_fonts = QFontDatabase().families()
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã: {available_fonts[:10]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for font in self.emoji_fonts:
            if any(f == font or f.startswith(font) for f in available_fonts):
                logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç: {font}")
                return font

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å —ç–º–æ–¥–∑–∏
        fallback_fonts = ["Segoe UI", "Arial", "Times New Roman"]
        for font in fallback_fonts:
            if any(f == font or f.startswith(font) for f in available_fonts):
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —à—Ä–∏—Ñ—Ç: {font}")
                return font

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π")
        return ""

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞."""
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(4)  # –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–æ 4
        main_layout.setContentsMargins(4, 4, 4, 4)  # –£–º–µ–Ω—å—à–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã –¥–æ 4

        # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_layout.setSpacing(2)  # –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –¥–æ 2
        search_label = QLabel(tr("emoji_dialog.search", "Search:"))
        search_label.setFixedWidth(40)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText(
            tr("emoji_dialog.search_placeholder", "Enter emoji or category...")
        )
        self.search_input.setClearButtonEnabled(True)
        self.search_input.setToolTip(
            tr("emoji_dialog.search_tooltip", "–ü–æ–∏—Å–∫ –ø–æ —ç–º–æ–¥–∑–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        )
        self.search_input.textChanged.connect(self.search_emoji)
        search_icon = QPushButton()
        search_icon.setIcon(get_lucide_icon("search"))
        search_icon.setToolTip(tr("emoji_dialog.search_btn_tooltip", "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"))
        search_icon.setFixedSize(20, 20)  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–æ 20x20
        search_icon.setFocusPolicy(Qt.NoFocus)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input, 1)
        search_layout.addWidget(search_icon)
        main_layout.addLayout(search_layout)

        # –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–º–æ–¥–∑–∏
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet(
            """
            QTabWidget::pane {
                border: 1px solid #ccc;
                border-radius: 3px;
                padding: 2px;
            }
            QTabBar::tab {
                background: #f0f0f0;
                border: 1px solid #ccc;
                border-bottom: none;
                border-top-left-radius: 3px;
                border-top-right-radius: 3px;
                padding: 3px 6px;
                margin-right: 1px;
                font-size: 10px;
            }
            QTabBar::tab:selected {
                background: #fff;
                border-bottom: 1px solid #fff;
            }
            QTabBar::tab:hover {
                background: #e0e0e0;
            }
        """
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category, emojis in self.emoji_categories.items():
            tab = QWidget()
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            scroll_area.setStyleSheet(
                """
                QScrollArea {
                    border: none;
                    background: transparent;
                }
                QScrollBar:vertical {
                    border: none;
                    background: #f0f0f0;
                    width: 6px;
                    border-radius: 3px;
                }
                QScrollBar::handle:vertical {
                    background: #ccc;
                    border-radius: 3px;
                }
            """
            )
            scroll_content = QWidget()

            grid_layout = QGridLayout(scroll_content)
            grid_layout.setSpacing(1)  # –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ —ç–º–æ–¥–∑–∏ –¥–æ 1
            grid_layout.setContentsMargins(1, 1, 1, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —Å–µ—Ç–∫–∏

            # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ
            row, col = 0, 0
            max_cols = 12  # –£–≤–µ–ª–∏—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ 12

            for emoji in emojis:
                button = EmojiButton(emoji, emoji_font=self.emoji_font)
                button.clicked.connect(
                    lambda checked=False, e=emoji: self.on_emoji_clicked(e)
                )
                grid_layout.addWidget(button, row, col)
                col += 1
                if col >= max_cols:
                    col = 0
                    row += 1

            scroll_area.setWidget(scroll_content)
            tab_layout = QVBoxLayout(tab)
            tab_layout.setContentsMargins(0, 0, 0, 0)
            tab_layout.addWidget(scroll_area)

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            icon = (
                get_lucide_icon(category.lower())
                if category.lower() in ["smile", "users", "activity", "heart"]
                else None
            )
            tab_name = tr(f"emoji_dialog.category.{category.lower()}", category)

            if icon:
                self.tabs.addTab(tab, icon, tab_name)
            else:
                # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                self.tabs.addTab(
                    tab,
                    self._create_emoji_icon(emojis[0] if emojis else "üòÄ"),
                    tab_name,
                )

            idx = self.tabs.indexOf(tab)
            self.tabs.setTabToolTip(idx, tab_name)

        main_layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–∏–∞–ª–æ–≥–∞
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(2)  # –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ 2
        close_button = QPushButton(get_lucide_icon("x"), tr("dialogs.close", "Close"))
        close_button.setToolTip(
            tr("dialogs.close_tooltip", "Close emoji selection dialog")
        )
        close_button.setFixedHeight(20)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ 20
        close_button.setStyleSheet(
            "font-size: 10px;"
        )  # –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        close_button.clicked.connect(self.reject)
        buttons_layout.addStretch()
        buttons_layout.addWidget(close_button)
        main_layout.addLayout(buttons_layout)

    def _create_emoji_icon(self, emoji):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ–¥–∑–∏."""
        # –°–æ–∑–¥–∞–µ–º –ø–∏–∫—Å–º–∞–ø
        pixmap = QPixmap(16, 16)  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ —Å 24x24 –¥–æ 16x16
        pixmap.fill(Qt.transparent)

        # –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –ø–∏–∫—Å–º–∞–ø–µ
        painter = QPainter(pixmap)
        font = QFont(self.emoji_font, 10)  # –£–º–µ–Ω—å—à–µ–Ω —à—Ä–∏—Ñ—Ç —Å 14 –¥–æ 10
        painter.setFont(font)
        painter.setPen(QColor(0, 0, 0))
        painter.drawText(pixmap.rect(), Qt.AlignCenter, emoji)
        painter.end()

        return QIcon(pixmap)

    def on_emoji_clicked(self, emoji):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–º–æ–¥–∑–∏."""
        logger.debug(f"–í—ã–±—Ä–∞–Ω —ç–º–æ–¥–∑–∏: {emoji}")
        self.emoji_selected.emit(emoji)
        self.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º Accepted

    def search_emoji(self, text):
        """–ü–æ–∏—Å–∫ —ç–º–æ–¥–∑–∏ –ø–æ —Ç–µ–∫—Å—Ç—É."""
        found = False

        if not text:
            # –ï—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–º–æ–¥–∑–∏
            for cat_idx in range(self.tabs.count()):
                self.tabs.setTabVisible(cat_idx, True)
                tab = self.tabs.widget(cat_idx)
                scroll_area = self._find_scroll_area(tab)
                if scroll_area and scroll_area.widget():
                    grid_layout = scroll_area.widget().layout()
                    for i in range(grid_layout.count()):
                        widget = grid_layout.itemAt(i).widget()
                        if widget:
                            widget.setVisible(True)
            return

        text = text.lower()

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —ç–º–æ–¥–∑–∏
        for cat_idx, (category, emojis) in enumerate(self.emoji_categories.items()):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_name = tr(f"emoji_dialog.category.{category.lower()}", category)
            category_match = text in category_name.lower()

            # –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_has_matches = False

            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –∏ –∏—â–µ–º QScrollArea
            tab = self.tabs.widget(cat_idx)
            scroll_area = self._find_scroll_area(tab)

            if scroll_area and scroll_area.widget():
                grid_layout = scroll_area.widget().layout()

                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for i in range(grid_layout.count()):
                    widget = grid_layout.itemAt(i).widget()
                    if widget and isinstance(widget, EmojiButton):
                        emoji = widget.text()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–º–æ–¥–∑–∏ –∏—Å–∫–æ–º—ã–π —Ç–µ–∫—Å—Ç
                        emoji_match = text in emoji.lower()

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
                        widget.setVisible(category_match or emoji_match)

                        if emoji_match:
                            category_has_matches = True
                            found = True

            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç,
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É, –∏–Ω–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º
            self.tabs.setTabVisible(cat_idx, category_match or category_has_matches)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
        if not found and hasattr(self, "search_input"):
            original_placeholder = tr(
                "emoji_dialog.search_placeholder", "Enter emoji or category..."
            )
            not_found_placeholder = tr(
                "emoji_dialog.search.not_found", "No emoji found"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫
            if not hasattr(self, "_original_placeholder"):
                self._original_placeholder = self.search_input.placeholderText()

            # –ú–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            self.search_input.setPlaceholderText(not_found_placeholder)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(
                2000,
                lambda: self.search_input.setPlaceholderText(
                    self._original_placeholder
                    if hasattr(self, "_original_placeholder")
                    else original_placeholder
                ),
            )

    def _find_scroll_area(self, tab):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ QScrollArea –Ω–∞ –≤–∫–ª–∞–¥–∫–µ."""
        if not tab:
            return None

        # –ò—â–µ–º QScrollArea
        for i in range(tab.layout().count()):
            widget = tab.layout().itemAt(i).widget()
            if isinstance(widget, QScrollArea):
                return widget

        return None

    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞."""
        super().showEvent(event)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏
        if not self.emoji_font:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏")
            QMessageBox.warning(
                self,
                tr("emoji_dialog.font_warning_title", "Font Warning"),
                tr(
                    "emoji_dialog.font_warning_text",
                    "No emoji font found. Emojis may not display correctly. "
                    "Consider installing a font with emoji support like 'Segoe UI Emoji' or 'Noto Color Emoji'.",
                ),
            )

    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à."""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        if event.key() == Qt.Key_Escape:
            logger.info("Escape key pressed, closing emoji dialog")
            self.reject()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
            if self.search_input.hasFocus() and hasattr(self, "tabs"):
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
                current_tab = self.tabs.currentWidget()
                scroll_area = self._find_scroll_area(current_tab)

                if scroll_area and scroll_area.widget():
                    grid_layout = scroll_area.widget().layout()

                    for i in range(grid_layout.count()):
                        widget = grid_layout.itemAt(i).widget()
                        if (
                            widget
                            and isinstance(widget, EmojiButton)
                            and widget.isVisible()
                        ):
                            # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–º–æ–¥–∑–∏
                            self.on_emoji_clicked(widget.text())
                            return

        # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É
        super().keyPressEvent(event)


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys

    from PySide6.QtWidgets import QApplication

    app = QApplication(sys.argv)
    dialog = EmojiDialog()

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    dialog.emoji_selected.connect(lambda emoji: print(f"Selected emoji: {emoji}"))

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = dialog.exec()
    print(
        f"Dialog result: {result} ({QDialog.Accepted if result == QDialog.Accepted else QDialog.Rejected})"
    )

    sys.exit(app.exec())
