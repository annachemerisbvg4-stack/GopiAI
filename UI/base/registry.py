#!/usr/bin/env python3
"""
UI Registry - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω –∏ –º–µ–Ω—é
================================================

–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∫–æ–Ω –∏ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.

–ê–≤—Ç–æ—Ä: Crazy Coder
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
"""

import os
import sys
import importlib
import importlib.util
import inspect
from typing import Dict, List, Optional, Type, Any, Union
from pathlib import Path
import traceback

from .base_window import BaseWindow


class WindowRegistry:
    """–†–µ–µ—Å—Ç—Ä –æ–∫–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."""
    
    def __init__(self):
        self.windows: Dict[str, Type[BaseWindow]] = {}
        self.menu_structure: Dict[str, List[Dict[str, Any]]] = {}
        self.discovered_modules: List[str] = []
        
    def discover_windows(self, search_paths: Optional[List[str]] = None) -> None:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ–∫–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö.
        
        Args:
            search_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - UI/windows –∏ UI/dialogs
        """
        if search_paths is None:
            ui_root = Path(__file__).parent.parent
            search_paths = [
                str(ui_root / "windows"),
                str(ui_root / "dialogs"),
                str(ui_root / "components")  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–∞–º —Ç–æ–∂–µ –µ—Å—Ç—å –æ–∫–Ω–∞
            ]
            
        print(f"üîç –ü–æ–∏—Å–∫ –æ–∫–æ–Ω –≤ –ø–∞–ø–∫–∞—Ö: {search_paths}")
        
        for search_path in search_paths:
            if not os.path.exists(search_path):
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {search_path}")
                continue
                
            self._scan_directory(search_path)
            
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫–æ–Ω: {len(self.windows)}")
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é: {len(self.menu_structure)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
    def _scan_directory(self, directory: str) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Python-—Ñ–∞–π–ª–æ–≤ —Å –æ–∫–Ω–∞–º–∏."""
        for root, dirs, files in os.walk(directory):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å __pycache__
            dirs[:] = [d for d in dirs if not d.startswith('__pycache__')]
            
            for file in files:
                if file.endswith('.py') and not file.startswith('__'):
                    file_path = os.path.join(root, file)
                    self._scan_file(file_path)
                    
    def _scan_file(self, file_path: str) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç Python-—Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–ª–∞—Å—Å–æ–≤ –æ–∫–æ–Ω."""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –º–æ–¥—É–ª—å
            relative_path = os.path.relpath(file_path, os.path.dirname(__file__))
            module_path = relative_path.replace(os.sep, '.').replace('.py', '')
            
            # –£–±–∏—Ä–∞–µ–º '..' –∏–∑ –ø—É—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º UI.
            if module_path.startswith('..'):
                module_path = 'UI' + module_path[2:]
            
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –º–æ–¥—É–ª—å: {module_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            spec = importlib.util.spec_from_file_location(module_path, file_path)
            if spec is None or spec.loader is None:
                return
                
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç BaseWindow
            for name, obj in inspect.getmembers(module, inspect.isclass):
                if (obj != BaseWindow and 
                    issubclass(obj, BaseWindow) and 
                    hasattr(obj, 'window_metadata')):
                    
                    self._register_window(obj)
                    self.discovered_modules.append(module_path)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {e}")
            traceback.print_exc()
            
    def _register_window(self, window_class: Type[BaseWindow]) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –æ–∫–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ."""
        metadata = getattr(window_class, 'window_metadata', {})
        window_name = metadata.get('window_name', window_class.__name__)
        
        print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –æ–∫–Ω–æ: {window_name} ({window_class.__name__})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä
        self.windows[window_name] = window_class
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        menu_title = metadata.get('menu_title')
        if menu_title:
            category = metadata.get('menu_category', '–ü—Ä–æ—á–µ–µ')
            if category not in self.menu_structure:
                self.menu_structure[category] = []
                
            menu_item = {
                'title': menu_title,
                'window_name': window_name,
                'window_class': window_class,
                'icon': metadata.get('menu_icon'),
                'shortcut': metadata.get('menu_shortcut'),
                'order': metadata.get('menu_order', 999),
                'enabled': metadata.get('menu_enabled', True),
                'tooltip': metadata.get('tooltip', '')
            }
            
            self.menu_structure[category].append(menu_item)
            
    def get_window_class(self, window_name: str) -> Optional[Type[BaseWindow]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å –æ–∫–Ω–∞ –ø–æ –∏–º–µ–Ω–∏."""
        return self.windows.get(window_name)
        
    def get_menu_structure(self) -> Dict[str, List[Dict[str, Any]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ –ø–æ—Ä—è–¥–∫—É."""
        sorted_structure = {}
        
        for category, items in self.menu_structure.items():
            sorted_items = sorted(items, key=lambda x: x['order'])
            sorted_structure[category] = sorted_items
            
        return sorted_structure
        
    def get_all_windows(self) -> Dict[str, Type[BaseWindow]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–∫–Ω–∞."""
        return self.windows.copy()
        
    def create_window(self, window_name: str, parent=None, **kwargs) -> Optional[BaseWindow]:
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–∫–Ω–∞ –ø–æ –∏–º–µ–Ω–∏."""
        window_class = self.get_window_class(window_name)
        if window_class:
            try:
                return window_class(parent=parent, **kwargs)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ {window_name}: {e}")
                traceback.print_exc()
                return None
        else:
            print(f"‚ùå –û–∫–Ω–æ {window_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
            return None
            
    def print_registry(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–∫–Ω–∞—Ö."""
        print("\n" + "="*50)
        print("üìã –†–ï–ï–°–¢–† –û–ö–û–ù")
        print("="*50)
        
        print(f"\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(self.discovered_modules)}")
        for module in sorted(self.discovered_modules):
            print(f"  - {module}")
            
        print(f"\nüìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–æ–Ω: {len(self.windows)}")
        for name, cls in sorted(self.windows.items()):
            metadata = getattr(cls, 'window_metadata', {})
            print(f"  - {name} ({cls.__name__})")
            print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {metadata.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            if metadata.get('menu_title'):
                print(f"    –ú–µ–Ω—é: {metadata.get('menu_category', '–ü—Ä–æ—á–µ–µ')} -> {metadata['menu_title']}")
                
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é: {len(self.menu_structure)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        for category, items in sorted(self.menu_structure.items()):
            print(f"\n  üìÅ {category}:")
            for item in sorted(items, key=lambda x: x['order']):
                print(f"    - {item['title']} ({item['window_name']})")
                if item.get('shortcut'):
                    print(f"      –°–æ—á–µ—Ç–∞–Ω–∏–µ: {item['shortcut']}")
                    
        print("="*50)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞
registry = WindowRegistry()


def get_registry() -> WindowRegistry:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞."""
    return registry


def auto_discover_windows(search_paths: Optional[List[str]] = None) -> WindowRegistry:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ–∫–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä.
    
    Args:
        search_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–∫–æ–Ω
    """
    registry.discover_windows(search_paths)
    return registry


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∫–æ–Ω...")
    
    # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –æ–∫–Ω–∞
    test_registry = auto_discover_windows()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    test_registry.print_registry()
