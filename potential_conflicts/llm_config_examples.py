#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏: rpd, deprecated, base_score
"""

from llm_rotation_config import (
    LLM_MODELS_CONFIG,
    get_active_models,
    get_models_by_intelligence,
    update_model_deprecated_status,
    get_model_usage_stats,
    select_llm_model_safe,
    rate_limit_monitor
)

def demo_new_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM")
    print("=" * 50)
    
    # 1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    active_models = get_active_models()
    for model in active_models:
        print(f"  - {model['name']} (base_score: {model['base_score']}, deprecated: {model['deprecated']})")
    
    # 2. –ú–æ–¥–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
    print("\nüß† –ú–æ–¥–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º (base_score >= 0.7):")
    smart_models = get_models_by_intelligence(0.7)
    if smart_models:
        for model in smart_models:
            print(f"  - {model['name']} (base_score: {model['base_score']})")
    else:
        print("  –ù–µ—Ç –º–æ–¥–µ–ª–µ–π —Å base_score >= 0.7")
    
    # 3. –ü–æ–º–µ—Ç–∏—Ç—å –º–æ–¥–µ–ª—å –∫–∞–∫ deprecated
    print("\n‚ö†Ô∏è –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ deprecated:")
    result = update_model_deprecated_status("gemini/gemma-3", deprecated=True)
    if result:
        print("  –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # 4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:")
    for model in LLM_MODELS_CONFIG[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
        stats = get_model_usage_stats(model["id"])
        if stats:
            print(f"  {model['name']}:")
            print(f"    RPM: {stats['rpm_used']}/{stats['rpm_limit']}")
            print(f"    TPM: {stats['tpm_used']}/{stats['tpm_limit']}")
            print(f"    Base Score: {stats['base_score']}")
            print(f"    Deprecated: {stats['deprecated']}")
    
    # 5. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    print("\nüéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ 'dialog':")
    
    # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    normal_choice = select_llm_model_safe("dialog", tokens=1000)
    print(f"  –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä: {normal_choice}")
    
    # –í—ã–±–æ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    smart_choice = select_llm_model_safe("dialog", tokens=1000, intelligence_priority=True)
    print(f"  –° –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: {smart_choice}")

def demo_advanced_scoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å base_score –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    
    print("\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ base_score –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º base_score –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    model_scores = {
        "gemini/gemma-3": 0.3,          # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å
        "gemini/gemma-3n": 0.4,         # –ß—É—Ç—å –ª—É—á—à–µ
        "gemini/gemini-1.5-flash": 0.6,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        "gemini/gemini-2.0-flash-lite": 0.7,  # –•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å
        "gemini/gemini-2.5-flash-lite-preview": 0.8,  # –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è
        "gemini/gemini-2.5-flash": 0.9,  # –¢–æ–ø–æ–≤–∞—è –º–æ–¥–µ–ª—å
        "gemini/gemini-embedding-experimental": 0.5  # –î–ª—è embedding
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    for model in LLM_MODELS_CONFIG:
        if model["id"] in model_scores:
            model["base_score"] = model_scores[model["id"]]
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω base_score –¥–ª—è {model['name']}: {model['base_score']}")

def demo_rpd_limits():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ (RPD)"""
    
    print("\nüìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (RPD)")
    print("=" * 50)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    rpd_limits = {
        "gemini/gemma-3": 1000,         # –ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
        "gemini/gemma-3n": 800,         
        "gemini/gemini-1.5-flash": 500,  
        "gemini/gemini-2.0-flash-lite": 300,  
        "gemini/gemini-2.5-flash-lite-preview": 200,  
        "gemini/gemini-2.5-flash": 100,  # –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ—Ä–æ–≥–æ–π –º–æ–¥–µ–ª–∏
        "gemini/gemini-embedding-experimental": 2000  # –ú–Ω–æ–≥–æ –¥–ª—è embedding
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    for model in LLM_MODELS_CONFIG:
        if model["id"] in rpd_limits:
            model["rpd"] = rpd_limits[model["id"]]
            print(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω RPD –ª–∏–º–∏—Ç –¥–ª—è {model['name']}: {model['rpd']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")

def demo_environment_keys():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç/–ø—Ä–æ–¥"""
    
    print("\nüîë –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç/–ø—Ä–æ–¥")
    print("=" * 50)
    
    import os
    from llm_rotation_config import get_api_key_for_provider
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–∏
    print("–¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–∞:", os.getenv("ENVIRONMENT", "production"))
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—ã
    for env in ["test", "production", None]:
        os.environ["ENVIRONMENT"] = env if env else ""
        key = get_api_key_for_provider("google")
        suffix = "_TEST" if env == "test" else ""
        expected_var = f"GEMINI_API_KEY{suffix}"
        print(f"  –°—Ä–µ–¥–∞ '{env}': –∏—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {expected_var}")
        if key:
            print(f"    ‚úÖ –ö–ª—é—á –Ω–∞–π–¥–µ–Ω: {key[:10]}...")
        else:
            print(f"    ‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    try:
        demo_new_features()
        demo_advanced_scoring()
        demo_rpd_limits()
        demo_environment_keys()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
