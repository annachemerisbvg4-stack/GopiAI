#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π GopiAI-CrewAI
"""

import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_txtai_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç txtai"""
    try:
        from txtai.embeddings import Embeddings
        logger.info("‚úÖ txtai —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ txtai: {e}")
        return False

def test_crewai_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç CrewAI"""
    try:
        from crewai import Agent, Task, Crew, Process
        logger.info("‚úÖ CrewAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CrewAI: {e}")
        return False

def test_mcp_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç MCP"""
    try:
        from mcp.client.streamable_http import streamablehttp_client
        from mcp.types import JSONRPCRequest, JSONRPCResponse
        logger.info("‚úÖ MCP –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MCP: {e}")
        return False

def test_rag_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É"""
    try:
        from rag_system import get_rag_system
        rag = get_rag_system()
        logger.info(f"‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {rag is not None}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_smart_delegator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SmartDelegator"""
    try:
        from tools.gopiai_integration.smart_delegator import SmartDelegator
        from rag_system import get_rag_system
        
        rag = get_rag_system()
        delegator = SmartDelegator(rag_system=rag)
        logger.info(f"‚úÖ SmartDelegator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {delegator is not None}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmartDelegator: {e}")
        return False

def test_mcp_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    try:
        from tools.gopiai_integration.mcp_integration import get_mcp_tools_manager
        manager = get_mcp_tools_manager()
        logger.info(f"‚úÖ MCP –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {manager is not None}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π GopiAI-CrewAI")
    logger.info("=" * 60)
    
    tests = [
        ("txtai –∏–º–ø–æ—Ä—Ç", test_txtai_import),
        ("CrewAI –∏–º–ø–æ—Ä—Ç", test_crewai_import),
        ("MCP –∏–º–ø–æ—Ä—Ç", test_mcp_import),
        ("RAG —Å–∏—Å—Ç–µ–º–∞", test_rag_system),
        ("SmartDelegator", test_smart_delegator),
        ("MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_mcp_integration),
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
        logger.info("-" * 40)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    logger.info("=" * 60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info("-" * 40)
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    logger.info(f"–ü—Ä–æ—à–ª–æ: {passed}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        logger.error(f"‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return 1

if __name__ == "__main__":
    sys.exit(main())