#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
=================================
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤–æ–π simple_rag_server.py
"""

import sys
import time
import requests
import subprocess
from pathlib import Path

def test_memory_initializer():
    """–¢–µ—Å—Ç memory_initializer.py"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º memory_initializer.py...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ UI –º–æ–¥—É–ª—é
        ui_path = Path("GopiAI-UI")
        if ui_path.exists():
            sys.path.insert(0, str(ui_path))
        
        from gopiai.ui.memory_initializer import init_memory_system, get_memory_status
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("  - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
        success = init_memory_system(silent=False)
        
        if success:
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = get_memory_status()
            print(f"  üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            return True
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è memory_initializer: {e}")
        return False

def test_rag_api():
    """–¢–µ—Å—Ç RAG API endpoints"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG API...")
    
    base_url = "http://127.0.0.1:8080"
    
    try:
        # –¢–µ—Å—Ç health check
        print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ /health...")
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            print(f"  ‚úÖ Health check: {response.json()}")
        else:
            print(f"  ‚ùå Health check failed: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        print("  - –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
        session_data = {
            "title": "Test Session",
            "project_context": "test",
            "tags": ["test", "integration"]
        }
        response = requests.post(f"{base_url}/sessions", json=session_data, timeout=5)
        if response.status_code == 200:
            session_id = response.json()["session_id"]
            print(f"  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        message_data = {
            "role": "user",
            "content": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            "metadata": {"test": True}
        }
        response = requests.post(f"{base_url}/sessions/{session_id}/messages", json=message_data, timeout=5)
        if response.status_code == 200:
            print("  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("  - –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...")
        response = requests.get(f"{base_url}/search", params={"q": "—Ç–µ—Å—Ç–æ–≤–æ–µ", "limit": 3}, timeout=5)
        if response.status_code == 200:
            results = response.json()["results"]
            print(f"  ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            if results:
                print(f"     –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results[0]['matched_content'][:50]}...")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        response = requests.get(f"{base_url}/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            print(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def test_chat_memory():
    """–¢–µ—Å—Ç chat_memory.py"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º chat_memory.py...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ WebView –º–æ–¥—É–ª—é
        webview_path = Path("GopiAI-WebView")
        if webview_path.exists():
            sys.path.insert(0, str(webview_path))
        
        from gopiai.webview.chat_memory import create_memory_manager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
        memory_manager = create_memory_manager()
        print("  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        test_message = "–ö–∞–∫ –¥–µ–ª–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π RAG?"
        enriched = memory_manager.enrich_message(test_message)
        print(f"  ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(enriched)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
        success = memory_manager.save_chat_exchange(
            "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
        )
        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞: {success}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = memory_manager.get_memory_stats()
        print(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏: {stats}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è chat_memory: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://127.0.0.1:8080/health", timeout=2)
        if response.status_code == 200:
            print("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except:
        print("üöÄ RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
        if not test_memory_initializer():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å RAG —Å–µ—Ä–≤–µ—Ä")
            return
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("RAG API", test_rag_api),
        ("Chat Memory", test_chat_memory),
    ]
    
    results = {}
    for test_name, test_func in tests:
        print(f"\n{'‚îÄ' * 20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'=' * 50}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    all_passed = all(results.values())
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RAG —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")

if __name__ == "__main__":
    main()