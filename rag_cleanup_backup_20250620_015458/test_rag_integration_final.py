#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ GopiAI
==============================================================
"""

import requests
import json
import sys
from pathlib import Path

def test_rag_server_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        response = requests.get("http://127.0.0.1:8080/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            print(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = requests.get("http://127.0.0.1:8080/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   –°–µ—Å—Å–∏–∏: {stats.get('conversations', 0)}")
            print(f"   Chunk-–∏: {stats.get('chunks', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def test_session_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_data = {
            "title": "Test Session",
            "project_context": "GopiAI Integration Test",
            "tags": ["test", "integration"]
        }
        
        response = requests.post("http://127.0.0.1:8080/sessions", 
                               params=session_data, timeout=5)
        
        if response.status_code == 200:
            session_info = response.json()
            session_id = session_info.get("session_id")
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
            return session_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return None

def test_message_saving(session_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏ {session_id}...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {
            "content": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é RAG —Å–∏—Å—Ç–µ–º—ã —Å GopiAI?",
            "role": "user",
            "metadata": {"test": True}
        }
        
        response = requests.post(f"http://127.0.0.1:8080/sessions/{session_id}/messages",
                               json=user_message, timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_message = {
            "content": "–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API endpoints, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å memory_initializer.py",
            "role": "assistant",
            "metadata": {"test": True}
        }
        
        response = requests.post(f"http://127.0.0.1:8080/sessions/{session_id}/messages",
                               json=ai_message, timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ...")
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        search_params = {
            "q": "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RAG",
            "limit": 3
        }
        
        response = requests.get("http://127.0.0.1:8080/search",
                              params=search_params, timeout=5)
        
        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results.get('results', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(results.get('results', [])[:2]):
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {result.get('content', '')[:100]}...")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def test_memory_initializer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory_initializer.py"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory_initializer.py...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ GopiAI-UI
        ui_path = Path("GopiAI-UI")
        if ui_path.exists():
            sys.path.insert(0, str(ui_path))
            
            from gopiai.ui.memory_initializer import get_memory_status
            
            status = get_memory_status()
            print("‚úÖ memory_initializer.py —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            return True
        else:
            print("‚ö†Ô∏è GopiAI-UI –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è memory_initializer: {e}")
        return False

def test_chat_memory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ chat_memory.py"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ chat_memory.py...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ GopiAI-WebView
        webview_path = Path("GopiAI-WebView")
        if webview_path.exists():
            sys.path.insert(0, str(webview_path))
            
            from gopiai.webview.chat_memory import create_memory_manager
            
            memory_manager = create_memory_manager()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏?"
            enriched = memory_manager.enrich_message(test_message)
            
            print("‚úÖ chat_memory.py —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
            print(f"   –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ: {len(enriched)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            saved = memory_manager.save_chat_exchange(
                "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", 
                "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
            )
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'‚úÖ' if saved else '‚ùå'}")
            
            return True
        else:
            print("‚ö†Ô∏è GopiAI-WebView –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è chat_memory: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò RAG –°–ò–°–¢–ï–ú–´ –° GOPIAI")
    print("=" * 60)
    
    tests_passed = 0
    total_tests = 6
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞
    if test_rag_server_health():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    session_id = test_session_creation()
    if session_id:
        tests_passed += 1
        
        # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if test_message_saving(session_id):
            tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫
    if test_search_functionality():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 5: memory_initializer
    if test_memory_initializer():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 6: chat_memory
    if test_chat_memory():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RAG —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)