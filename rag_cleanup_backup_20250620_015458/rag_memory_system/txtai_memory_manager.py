"""
üß† TxtAI Memory Manager –¥–ª—è GopiAI
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import json
import uuid
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Any, Optional, Union
import logging

try:
    from txtai import Embeddings
    from txtai.pipeline import Segmentation
except ImportError:
    raise ImportError(
        "‚ùå txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai>=7.0.0 sentence-transformers>=2.2.0"
    )

from .models import ConversationSession, Message, MessageRole
from .config import MemoryConfig

logger = logging.getLogger(__name__)

class TxtAIMemoryManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai –¥–ª—è GopiAI
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - üöÄ Embedded —Ä–µ–∂–∏–º (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
    - üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ txtai
    - üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON + txtai –∏–Ω–¥–µ–∫—Å
    - üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    - üîÑ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
    """
    
    def __init__(self, config: Optional[MemoryConfig] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏"""
        self.config = config or MemoryConfig()
        self.data_dir = Path(self.config.data_directory)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.sessions_file = self.data_dir / "sessions.json"
        self.messages_file = self.data_dir / "messages.json"
        self.index_dir = self.data_dir / "txtai_index"
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
        self.sessions: Dict[str, ConversationSession] = {}
        self.messages: Dict[str, Message] = {}
        
        # TxtAI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.embeddings: Optional[Embeddings] = None
        self.segmentation = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º txtai
        self._load_data()
        self._initialize_txtai()
        
        logger.info("‚úÖ TxtAI Memory Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_txtai(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è txtai –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è txtai
            config = {
                "path": "sentence-transformers/all-MiniLM-L6-v2",  # –õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å
                "content": True,  # –í–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                "objects": True,  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
            }
            
            # –°–æ–∑–¥–∞–µ–º embeddings
            self.embeddings = Embeddings(config)
            
            # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            self.segmentation = Segmentation(sentences=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if self.index_dir.exists():
                try:
                    self.embeddings.load(str(self.index_dir))
                    logger.info("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π txtai –∏–Ω–¥–µ–∫—Å")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
                    self._rebuild_index()
            else:
                self._rebuild_index()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ txtai: {e}")
            raise
    
    def _rebuild_index(self):
        """–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ txtai –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.embeddings:
            return
        
        logger.info("üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ txtai –∏–Ω–¥–µ–∫—Å–∞...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            documents = []
            for message in self.messages.values():
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_text = f"{message.content}"
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "message_id": message.message_id,
                    "session_id": message.session_id,
                    "role": message.role.value,
                    "timestamp": message.timestamp.isoformat(),
                }
                
                documents.append((message.message_id, doc_text, metadata))
            
            # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
            if documents:
                self.embeddings.index(documents)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
                self.index_dir.mkdir(exist_ok=True)
                self.embeddings.save(str(self.index_dir))
                
                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è {len(documents)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                logger.info("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
        if self.sessions_file.exists():
            try:
                with open(self.sessions_file, "r", encoding="utf-8") as f:
                    sessions_data = json.load(f)
                    for session_data in sessions_data:
                        session = ConversationSession.from_dict(session_data)
                        self.sessions[session.session_id] = session
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sessions)} —Å–µ—Å—Å–∏–π")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.messages_file.exists():
            try:
                with open(self.messages_file, "r", encoding="utf-8") as f:
                    messages_data = json.load(f)
                    for message_data in messages_data:
                        message = Message.from_dict(message_data)
                        self.messages[message.message_id] = message
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª—ã"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
            sessions_data = [session.to_dict() for session in self.sessions.values()]
            with open(self.sessions_file, "w", encoding="utf-8") as f:
                json.dump(sessions_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_data = [message.to_dict() for message in self.messages.values()]
            with open(self.messages_file, "w", encoding="utf-8") as f:
                json.dump(messages_data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def create_session(
        self, 
        title: str, 
        project_context: str = "GopiAI",
        tags: Optional[List[str]] = None
    ) -> ConversationSession:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        session = ConversationSession(
            session_id=str(uuid.uuid4()),
            title=title,
            project_context=project_context,
            tags=tags or [],
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        
        self.sessions[session.session_id] = session
        self._save_data()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session.session_id} - {title}")
        return session
    
    def add_message(
        self,
        session_id: str,
        role: Union[MessageRole, str],
        content: str,
        metadata: Optional[Dict[str, Any]] = None
    ) -> Message:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é"""
        if session_id not in self.sessions:
            raise ValueError(f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ MessageRole –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(role, str):
            role = MessageRole(role.lower())
        
        message = Message(
            message_id=str(uuid.uuid4()),
            session_id=session_id,
            role=role,
            content=content,
            timestamp=datetime.now(timezone.utc),
            metadata=metadata or {}
        )
        
        self.messages[message.message_id] = message
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        self.sessions[session_id].updated_at = message.timestamp
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ txtai –∏–Ω–¥–µ–∫—Å
        self._add_to_index(message)
        
        self._save_data()
        
        logger.debug(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message_id}")
        return message
    
    def _add_to_index(self, message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ txtai –∏–Ω–¥–µ–∫—Å"""
        if not self.embeddings:
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_text = message.content
            metadata = {
                "message_id": message.message_id,
                "session_id": message.session_id,
                "role": message.role.value,
                "timestamp": message.timestamp.isoformat(),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å
            document = (message.message_id, doc_text, metadata)
            self.embeddings.upsert([document])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            if self.index_dir.exists():
                self.embeddings.save(str(self.index_dir))
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å: {e}")
    
    def search_conversations(
        self, 
        query: str, 
        limit: int = 10,
        session_id: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            session_id: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
        """
        if not self.embeddings:
            logger.warning("‚ö†Ô∏è txtai –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return []
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            results = self.embeddings.search(query, limit * 2)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            formatted_results = []
            for result in results:
                if len(formatted_results) >= limit:
                    break
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                message_id = result.get("id")
                if not message_id or message_id not in self.messages:
                    continue
                
                message = self.messages[message_id]
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏–∏
                if session_id and message.session_id != session_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
                session = self.sessions.get(message.session_id)
                
                formatted_result = {
                    "message_id": message.message_id,
                    "session_id": message.session_id,
                    "session_title": session.title if session else "Unknown",
                    "role": message.role.value,
                    "content": message.content,
                    "timestamp": message.timestamp.isoformat(),
                    "score": result.get("score", 0.0),
                    "metadata": message.metadata
                }
                
                formatted_results.append(formatted_result)
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return formatted_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_session(self, session_id: str) -> Optional[ConversationSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID"""
        return self.sessions.get(session_id)
    
    def get_session_messages(
        self, 
        session_id: str, 
        limit: Optional[int] = None
    ) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏"""
        session_messages = [
            msg for msg in self.messages.values() 
            if msg.session_id == session_id
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        session_messages.sort(key=lambda m: m.timestamp)
        
        if limit:
            session_messages = session_messages[-limit:]
        
        return session_messages
    
    def get_all_sessions(self) -> List[ConversationSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        sessions = list(self.sessions.values())
        sessions.sort(key=lambda s: s.updated_at, reverse=True)
        return sessions
    
    def delete_session(self, session_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if session_id not in self.sessions:
            return False
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        message_ids_to_delete = [
            msg_id for msg_id, msg in self.messages.items()
            if msg.session_id == session_id
        ]
        
        for msg_id in message_ids_to_delete:
            del self.messages[msg_id]
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        del self.sessions[session_id]
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å
        self._rebuild_index()
        self._save_data()
        
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {session_id} –∏ {len(message_ids_to_delete)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return True
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        return {
            "total_sessions": len(self.sessions),
            "total_messages": len(self.messages),
            "txtai_enabled": self.embeddings is not None,
            "data_directory": str(self.data_dir),
            "index_directory": str(self.index_dir) if self.index_dir.exists() else None,
            "last_updated": datetime.now(timezone.utc).isoformat()
        }
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
    
    def enrich_message(self, message_content: str, context: str = "") -> str:
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏
        –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
        """
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            search_query = f"{message_content} {context}".strip()
            results = self.search_conversations(search_query, limit=3)
            
            if not results:
                return message_content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            for result in results:
                context_parts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {result['content'][:200]}...")
            
            enriched = f"{message_content}\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n" + "\n".join(context_parts)
            return enriched
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return message_content
    
    def save_chat_exchange(
        self, 
        session_id: str,
        user_message: str,
        ai_response: str,
        metadata: Optional[Dict] = None
    ) -> tuple[Message, Message]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –ò–ò)
        –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_msg = self.add_message(
            session_id=session_id,
            role=MessageRole.USER,
            content=user_message,
            metadata=metadata
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        ai_msg = self.add_message(
            session_id=session_id,
            role=MessageRole.ASSISTANT,
            content=ai_response,
            metadata=metadata
        )
        
        return user_msg, ai_msg
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        try:
            self._save_data()
        except:
            pass