#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π RAG —Å–µ—Ä–≤–µ—Ä –±–µ–∑ ChromaDB
===============================
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ chunk-–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
"""
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from typing import List, Optional, Dict, Any
import uvicorn
import json
import uuid
from datetime import datetime
from pathlib import Path
from pydantic import BaseModel

app = FastAPI(
    title="GopiAI Simple RAG API", 
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π RAG API –±–µ–∑ ChromaDB",
    version="1.0.0"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
conversations = {}
chunks_storage = []

@app.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ü—Ä–æ—Å—Ç–∞—è –ø–∞–Ω–µ–ª—å"""
    stats = {
        "conversations": len(conversations),
        "chunks": len(chunks_storage)
    }
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head><title>Simple RAG Dashboard</title></head>
    <body>
        <h1>üß† Simple RAG Memory</h1>
        <p>Conversations: {stats['conversations']}</p>
        <p>Chunks: {stats['chunks']}</p>
    </body>
    </html>
    """
    return html

class SessionCreate(BaseModel):
    title: str
    project_context: str = ""
    tags: List[str] = []

@app.post("/sessions")
async def create_session(session_data: SessionCreate):
    """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"""
    session_id = str(uuid.uuid4())
    conversations[session_id] = {
        "id": session_id,
        "title": session_data.title,
        "project_context": session_data.project_context,
        "tags": session_data.tags,
        "created_at": datetime.now().isoformat(),
        "messages": []
    }
    return {"session_id": session_id}

@app.post("/sessions/{session_id}/messages")
async def add_message(session_id: str, message: Dict[str, Any]):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if session_id not in conversations:
        raise HTTPException(404, "Session not found")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    conversations[session_id]["messages"].append({
        "role": message.get("role", "user"),
        "content": message.get("content", ""),
        "metadata": message.get("metadata", {}),
        "created_at": datetime.now().isoformat()
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chunk –¥–ª—è –ø–æ–∏—Å–∫–∞
    chunks_storage.append({
        "session_id": session_id,
        "content": message.get("content", ""),
        "metadata": message.get("metadata", {}),
        "created_at": datetime.now().isoformat()
    })
    
    return {"status": "added"}

@app.get("/search")
async def search_memory(q: str, limit: int = 5):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
    results = []
    query_lower = q.lower()
    
    for chunk in chunks_storage:
        if query_lower in chunk["content"].lower():
            # –§–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å claude_tools_handler.py –∏ chat_memory.py
            results.append({
                "session_id": chunk["session_id"],
                "title": f"Conversation from {chunk['created_at'][:10]}",
                "relevance_score": 0.8,  # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ - –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
                "matched_content": chunk["content"][:300] + "..." if len(chunk["content"]) > 300 else chunk["content"],
                "context_preview": chunk["content"][:200] + "..." if len(chunk["content"]) > 200 else chunk["content"],
                "timestamp": chunk["created_at"],
                "tags": chunk["metadata"].get("tags", []),
                "content": chunk["content"][:500] + "..." if len(chunk["content"]) > 500 else chunk["content"],
                "metadata": chunk["metadata"]
            })
            
        if len(results) >= limit:
            break
    
    return {"results": results}

@app.get("/sessions")
async def list_sessions():
    """–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π"""
    return {"sessions": list(conversations.values())}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "Simple RAG server is running"}

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    return {
        "conversations": len(conversations),
        "chunks": len(chunks_storage),
        "total_content_size": sum(len(c["content"]) for c in chunks_storage)
    }

def save_to_files():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã"""
    data_dir = Path("simple_rag_data")
    data_dir.mkdir(exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º conversations
    with open(data_dir / "conversations.json", "w", encoding="utf-8") as f:
        json.dump(conversations, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chunks
    with open(data_dir / "chunks.json", "w", encoding="utf-8") as f:
        json.dump(chunks_storage, f, ensure_ascii=False, indent=2)

def load_from_files():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    global conversations, chunks_storage
    data_dir = Path("simple_rag_data")
    
    try:
        if (data_dir / "conversations.json").exists():
            with open(data_dir / "conversations.json", "r", encoding="utf-8") as f:
                conversations = json.load(f)
        
        if (data_dir / "chunks.json").exists():
            with open(data_dir / "chunks.json", "r", encoding="utf-8") as f:
                chunks_storage = json.load(f)
                
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(conversations)} —Å–µ—Å—Å–∏–π, {len(chunks_storage)} chunk-–æ–≤")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    load_from_files()

@app.on_event("shutdown") 
async def shutdown_event():
    """–ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    save_to_files()

if __name__ == "__main__":
    import sys
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 8080
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Simple RAG —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://127.0.0.1:{port}")
    print(f"üìä Dashboard: http://127.0.0.1:{port}")
    
    try:
        uvicorn.run(app, host="127.0.0.1", port=port)
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        save_to_files()