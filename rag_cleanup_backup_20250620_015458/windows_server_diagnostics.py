#!/usr/bin/env python3
"""
Windows Server Diagnostics
==========================
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤ Windows
"""
import socket
import subprocess
import sys
import os
from pathlib import Path

def check_port_available(port, host='127.0.0.1'):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((host, port))
            return True
    except OSError:
        return False

def check_listening_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –ø–æ—Ä—Ç—ã —Å–ª—É—à–∞—é—Ç"""
    try:
        result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
        listening = [line for line in result.stdout.split('\n') if 'LISTENING' in line]
        return listening[:10]  # –ü–µ—Ä–≤—ã–µ 10
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞: {e}"]

def check_firewall_rules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ –¥–ª—è Python"""
    try:
        result = subprocess.run([
            'netsh', 'advfirewall', 'firewall', 'show', 'rule', 
            'name=Python', 'dir=in'
        ], capture_output=True, text=True)
        return result.stdout
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞: {e}"

def test_simple_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä"""
    ports_to_test = [8080, 8000, 9999, 3000, 5000]
    
    for port in ports_to_test:
        if check_port_available(port):
            print(f"‚úÖ –ü–æ—Ä—Ç {port} –¥–æ—Å—Ç—É–ø–µ–Ω")
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä
                import http.server
                import socketserver
                import threading
                import time
                
                class TestHandler(http.server.SimpleHTTPRequestHandler):
                    def do_GET(self):
                        self.send_response(200)
                        self.send_header('Content-type', 'text/html')
                        self.end_headers()
                        self.wfile.write(b'Test server works!')
                
                httpd = socketserver.TCPServer(("", port), TestHandler)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                server_thread = threading.Thread(target=httpd.serve_forever)
                server_thread.daemon = True
                server_thread.start()
                
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
                import urllib.request
                try:
                    response = urllib.request.urlopen(f'http://localhost:{port}')
                    if response.status == 200:
                        print(f"üéâ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        httpd.shutdown()
                        return port
                except Exception as e:
                    print(f"‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
                
                httpd.shutdown()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        else:
            print(f"‚ùå –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return None

def check_windows_specific():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º UAC
    try:
        import ctypes
        if ctypes.windll.shell32.IsUserAnAdmin():
            issues.append("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å")
        else:
            issues.append("‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω")
    except:
        issues.append("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows Defender
    try:
        result = subprocess.run([
            'powershell', '-Command', 
            'Get-MpPreference | Select-Object -ExpandProperty DisableRealtimeMonitoring'
        ], capture_output=True, text=True)
        
        if 'False' in result.stdout:
            issues.append("‚ö†Ô∏è  Windows Defender –≤–∫–ª—é—á–µ–Ω - –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã")
        else:
            issues.append("‚úÖ Windows Defender –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç")
    except:
        issues.append("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Windows Defender")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    proxy_vars = ['HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy']
    for var in proxy_vars:
        if os.environ.get(var):
            issues.append(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Å–∏: {var}={os.environ[var]}")
    
    return issues

def main():
    print("üîç Windows Server Diagnostics")
    print("=" * 50)
    
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤:")
    working_port = test_simple_server()
    
    print("\n2. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
    listening = check_listening_ports()
    for line in listening:
        print(f"  {line}")
    
    print("\n3. –ü—Ä–∞–≤–∏–ª–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞:")
    firewall = check_firewall_rules()
    print(firewall[:500] + "..." if len(firewall) > 500 else firewall)
    
    print("\n4. Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    issues = check_windows_specific()
    for issue in issues:
        print(f"  {issue}")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if working_port:
        print(f"‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç {working_port} –¥–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞")
    else:
        print("‚ùå –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") 
        print("   - –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    
    print("\n–î–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞:")
    print(f"1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.py –∏–ª–∏ run_server.py")
    print(f"2. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç –Ω–∞ {working_port or '9999'}")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

if __name__ == "__main__":
    main()