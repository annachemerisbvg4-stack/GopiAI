#!/usr/bin/env python
# -*- coding: utf-8 -*-
# üìÖ TODO_STUB_SEARCH: –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π grep -r 'TODO_STUB' .

"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º –∞–≥–µ–Ω—Ç–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤.
"""

import asyncio

from PySide6.QtCore import QObject, Signal, Slot
from gopiai.app.agent.agent_manager import AgentManager
from gopiai.app.agent.orchestrator import get_orchestrator
from gopiai.core.logging import get_logger
logger = get_logger().logger
from gopiai.app.logic.agent_controller import AgentController
from gopiai.app.tool.serena_memory_tool import get_orchestration_tools


class OrchestrationController(QObject):
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º –∞–≥–µ–Ω—Ç–æ–≤.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤.
    """
    
    # –°–∏–≥–Ω–∞–ª—ã
    agent_created = Signal(str)  # agent_id
    agent_monitored = Signal(str, bool)  # agent_id, has_guidance
    project_indexed = Signal(bool)  # success
    
    def __init__(self, agent_controller=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            agent_controller: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
        """
        super().__init__()
        self.agent_controller = agent_controller or AgentController.instance()
        self.orchestrator = get_orchestrator()
        self.specialized_components = {}  # component_id -> agent_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤
        self._add_orchestration_tools()
    
    def _add_orchestration_tools(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
            orchestration_tools = get_orchestration_tools()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤
            for tool in orchestration_tools:
                self.agent_controller.add_tool(tool)
                
            logger.info("Orchestration tools added to agent controller")
        except Exception as e:
            logger.error(f"Error adding orchestration tools: {str(e)}")
    
    @Slot(str)
    def index_project(self, project_path):
        """
        –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç.
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._run_async_task(self._index_project(project_path))
    
    async def _index_project(self, project_path):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç.
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        """
        try:
            logger.info(f"Indexing project: {project_path}")
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
            success = await self.orchestrator.index_project(project_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            self.project_indexed.emit(success)
            
            logger.info(f"Project indexed: {success}")
        except Exception as e:
            logger.error(f"Error indexing project: {str(e)}")
            self.project_indexed.emit(False)
    
    @Slot(str, str, str, str)
    def create_specialized_agent(self, component_id, agent_id, agent_type, task_description):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            agent_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
            agent_type: –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "coding", "browser_specialized", "react")
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._run_async_task(self._create_specialized_agent(component_id, agent_id, agent_type, task_description))
    
    async def _create_specialized_agent(self, component_id, agent_id, agent_type, task_description):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            agent_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
            agent_type: –¢–∏–ø –∞–≥–µ–Ω—Ç–∞
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        """
        try:
            logger.info(f"Creating specialized agent {agent_id} of type {agent_type} for component {component_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            agent = await self.orchestrator.create_specialized_agent(agent_id, agent_type, task_description)
            
            if agent:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –∞–≥–µ–Ω—Ç–æ–≤
                self.agent_controller.register_agent(component_id, agent)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –∏ –∞–≥–µ–Ω—Ç–æ–º
                self.specialized_components[component_id] = agent_id
                
                # –ï—Å–ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if agent_type == "browser_specialized":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
                    browser_widget = self._find_browser_widget(component_id)
                    if browser_widget:
                        logger.info(f"Connecting browser specialized agent {agent_id} to browser widget")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Å–≤—è–∑–∏ –∞–≥–µ–Ω—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
                self.agent_created.emit(agent_id)
                
                logger.info(f"Specialized agent {agent_id} created and registered for component {component_id}")
            else:
                logger.error(f"Failed to create specialized agent {agent_id}")
        except Exception as e:
            logger.error(f"Error creating specialized agent: {str(e)}")
            
    def _find_browser_widget(self, component_id):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–∂–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
        Returns:
            QWidget: –í–∏–¥–∂–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∏–¥–∂–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: –¢—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∏–¥–∂–µ—Ç–∞
            # –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            return None
        except Exception as e:
            logger.error(f"Error finding browser widget: {str(e)}")
            return None
    
    @Slot(str)
    def monitor_agent(self, component_id):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        agent_id = self.specialized_components.get(component_id)
        
        if not agent_id:
            logger.warning(f"No specialized agent found for component {component_id}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._run_async_task(self._monitor_agent(component_id, agent_id))
    
    async def _monitor_agent(self, component_id, agent_id):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            agent_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
        """
        try:
            logger.info(f"Monitoring agent {agent_id} for component {component_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = self.orchestrator.specialized_agents.get(agent_id)
            
            if not agent:
                logger.warning(f"Agent {agent_id} not found")
                self.agent_monitored.emit(agent_id, False)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            state = self.orchestrator._get_agent_state(agent)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
            guidance = self.orchestrator._analyze_agent_state(state, agent_id)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
            if guidance:
                logger.info(f"Providing guidance to agent {agent_id}: {guidance}")
                
                if hasattr(agent, "receive_guidance"):
                    await agent.receive_guidance(guidance)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ Serena, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if hasattr(self.orchestrator.agent_manager, "mcp_client") and self.orchestrator.agent_manager.mcp_client:
                    await self.orchestrator.store_agent_guidance(agent_id, {
                        "timestamp": self.orchestrator._get_timestamp(),
                        "state": state,
                        "guidance": guidance
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
                self.agent_monitored.emit(agent_id, True)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
                self.agent_monitored.emit(agent_id, False)
                
            logger.info(f"Agent {agent_id} monitored successfully")
        except Exception as e:
            logger.error(f"Error monitoring agent: {str(e)}")
            self.agent_monitored.emit(agent_id, False)
    
    @Slot(str, str)
    def process_query_with_orchestration(self, component_id, query):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–µ–π.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"Processing query with orchestration for component {component_id}: {query[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            agent_id = self.specialized_components.get(component_id)
            
            if not agent_id:
                logger.warning(f"No specialized agent found for component {component_id}, using standard processing")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                self.agent_controller.process_query(component_id, query)
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            self._run_async_task(self._monitor_before_query(component_id, agent_id, query))
        except Exception as e:
            logger.error(f"Error processing query with orchestration: {str(e)}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.agent_controller.process_query(component_id, query)
    
    async def _monitor_before_query(self, component_id, agent_id, query):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∞–≥–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            component_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            agent_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
            query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∞–≥–µ–Ω—Ç–∞
            await self._monitor_agent(component_id, agent_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.agent_controller.process_query(component_id, query)
        except Exception as e:
            logger.error(f"Error monitoring before query: {str(e)}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.agent_controller.process_query(component_id, query)
    
    def _run_async_task(self, coro):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        
        Args:
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
            loop = asyncio.new_event_loop()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
            loop.run_until_complete(coro)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
            loop.close()
        except Exception as e:
            logger.error(f"Error running async task: {str(e)}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
_orchestration_controller_instance = None

def get_orchestration_controller():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Returns:
        OrchestrationController: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
    """
    global _orchestration_controller_instance
    if _orchestration_controller_instance is None:
        _orchestration_controller_instance = OrchestrationController()
    return _orchestration_controller_instance
