import sys

from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QPainter, QPen, QColor, QPainterPath
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QScrollArea, QFrame, QApplication, QDialog, QSizePolicy, QMessageBox
)
# üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: from gopiai.core.agent_stubs import BaseAgentStub
# from gopiai.app.flow.base import BaseFlow  # üíÄ –¶–ò–ö–õ–ò–ß–ï–°–ö–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –£–ù–ò–ß–¢–û–ñ–ï–ù–ê!
from gopiai.widgets.core.icon_adapter import get_icon
from gopiai.widgets.managers.theme_manager import ThemeManager

from .i18n.translator import tr


class FlowNodeWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —É–∑–µ–ª –ø–æ—Ç–æ–∫–∞."""

    def __init__(self, name, node_type="agent", parent=None):
        super().__init__(parent)
        self.name = name
        self.node_type = node_type
        self.connections = []

        self.setFrameShape(QFrame.StyledPanel)
        self.setFrameShadow(QFrame.Raised)
        self.setLineWidth(2)

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
        theme_manager = ThemeManager.instance()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
        self.setMinimumHeight(60)
        self.setMaximumHeight(60)
        self.setMinimumWidth(120)

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
        node_colors = {
            "agent": theme_manager.get_color("accent"),
            "tool": theme_manager.get_color("success"),
            "flow": theme_manager.get_color("warning"),
            "default": theme_manager.get_color("background")
        }
        background = node_colors.get(node_type, node_colors["default"])
        self.setStyleSheet(f"background-color: {background};")

        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI –≤–∏–¥–∂–µ—Ç–∞ —É–∑–ª–∞."""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)

        # –ú–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∑–ª–∞
        name_label = QLabel(self.name)
        name_label.setAlignment(Qt.AlignCenter)
        name_label.setStyleSheet("font-weight: bold;")

        # –ú–µ—Ç–∫–∞ —Å —Ç–∏–ø–æ–º —É–∑–ª–∞
        type_key = f"flow_visualizer.node.{self.node_type}"
        type_label = QLabel(tr(type_key, self.node_type.capitalize()))
        type_label.setAlignment(Qt.AlignCenter)
        type_label.setStyleSheet("font-style: italic;")

        layout.addWidget(name_label)
        layout.addWidget(type_label)

    def add_connection(self, node):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º —É–∑–ª–æ–º."""
        self.connections.append(node)


class FlowVisualizer(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞ (Flow)."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.nodes = []
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel(tr("flow_visualizer.header", "Flow Structure Visualization"))
        header_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        header_label.setAlignment(Qt.AlignCenter)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π
        self.drawing_area = FlowDrawingArea()
        self.drawing_area.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.drawing_area)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.main_layout.addWidget(header_label)
        self.main_layout.addWidget(scroll_area)

    def set_flow(self, flow):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        self.clear()
        if isinstance(flow, BaseFlow):
            self._analyze_flow(flow)
            self.drawing_area.update()

    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é."""
        self.nodes = []
        self.drawing_area.nodes = []
        self.drawing_area.update()

    def _analyze_flow(self, flow):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ç–æ–∫–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–∑–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º flow –∫–∞–∫ —É–∑–µ–ª
        flow_node = FlowNodeWidget(flow.name, "flow")
        self.nodes.append(flow_node)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é—â–∏–π –ø–æ—Ç–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        if hasattr(flow, 'agents'):
            for agent_name, agent in flow.agents.items():
                if isinstance(agent, BaseAgent):
                    agent_node = FlowNodeWidget(agent_name, "agent")
                    self.nodes.append(agent_node)
                    flow_node.add_connection(agent_node)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
                    if hasattr(agent, 'available_tools') and hasattr(agent.available_tools, 'tools'):
                        for tool in agent.available_tools.tools:
                            tool_node = FlowNodeWidget(tool.name, "tool")
                            self.nodes.append(tool_node)
                            agent_node.add_connection(tool_node)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±–ª–∞—Å—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è —É–∑–ª–∞–º–∏
        self.drawing_area.nodes = self.nodes


class FlowDrawingArea(QWidget):
    """–û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π –ø–æ—Ç–æ–∫–∞."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.nodes = []

    def paintEvent(self, event):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —É–∑–ª—ã –∏ —Å–≤—è–∑–∏."""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # –ï—Å–ª–∏ —É–∑–ª–æ–≤ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∏—Å—É–µ–º
        if not self.nodes:
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.setMinimumSize(800, 600)

        # –†–∞–∑–º–µ—â–∞–µ–º —É–∑–ª—ã
        self._layout_nodes()

        # –†–∏—Å—É–µ–º —Å–≤—è–∑–∏
        self._draw_connections(painter)

        # –†–∏—Å—É–µ–º —É–∑–ª—ã
        for node in self.nodes:
            node.show()

    def _layout_nodes(self):
        """–†–∞–∑–º–µ—â–∞–µ—Ç —É–∑–ª—ã –Ω–∞ –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è."""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–∑–ª—ã
        for node in self.nodes:
            node.setParent(None)

        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –Ω–∞ –æ–±–ª–∞—Å—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        for node in self.nodes:
            node.setParent(self)

        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤ - –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –≤–≤–µ—Ä—Ö—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∏–∂–µ
        if not self.nodes:
            return

        # –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª (flow) —Ä–∞–∑–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
        root_node = self.nodes[0]
        root_node.setGeometry(self.width() // 2 - 70, 20, 140, 60)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É–∑–ª—ã —Ä–∞–∑–º–µ—â–∞–µ–º —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∏–∂–µ
        # –ù–∞—Ö–æ–¥–∏–º —É–∑–ª—ã –∞–≥–µ–Ω—Ç–æ–≤ (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)
        agent_nodes = [node for node in self.nodes if node.node_type == "agent"]
        agent_count = len(agent_nodes)

        if agent_count > 0:
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
            if agent_count == 1:
                agent_spacing = 0
            else:
                agent_spacing = min(200, (self.width() - 200) // max(1, agent_count - 1))

            # –ù–∞—á–∞–ª—å–Ω–∞—è x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            start_x = max(20, (self.width() - (agent_count * 140 + (agent_count - 1) * agent_spacing)) // 2)

            # –†–∞–∑–º–µ—â–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            for i, agent_node in enumerate(agent_nodes):
                x = start_x + i * (140 + agent_spacing)
                agent_node.setGeometry(x, 120, 140, 60)

            # –†–∞–∑–º–µ—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
            for agent_node in agent_nodes:
                tool_nodes = [node for node in self.nodes
                              if node.node_type == "tool" and agent_node in self.nodes and node in agent_node.connections]
                tool_count = len(tool_nodes)

                if tool_count > 0:
                    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                    if tool_count == 1:
                        tool_spacing = 0
                    else:
                        tool_spacing = min(160, (self.width() - 160) // max(1, tool_count - 1))

                    # –ù–∞—á–∞–ª—å–Ω–∞—è x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    agent_center_x = agent_node.x() + agent_node.width() // 2
                    start_x = max(20, agent_center_x - ((tool_count * 140 + (tool_count - 1) * tool_spacing) // 2))

                    # –†–∞–∑–º–µ—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    for i, tool_node in enumerate(tool_nodes):
                        x = start_x + i * (140 + tool_spacing)
                        tool_node.setGeometry(x, 220, 140, 60)

    def _draw_connections(self, painter):
        """–†–∏—Å—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏."""
        pen = QPen(QColor(100, 100, 100))
        pen.setWidth(2)
        painter.setPen(pen)

        for node in self.nodes:
            for connected_node in node.connections:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ —É–∑–ª–æ–≤
                start_x = node.x() + node.width() // 2
                start_y = node.y() + node.height()
                end_x = connected_node.x() + connected_node.width() // 2
                end_y = connected_node.y()

                # –†–∏—Å—É–µ–º –∫—Ä–∏–≤—É—é –ª–∏–Ω–∏—é
                path = QPainterPath()
                path.moveTo(start_x, start_y)

                # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ
                ctrl1_x = start_x
                ctrl1_y = start_y + (end_y - start_y) // 3
                ctrl2_x = end_x
                ctrl2_y = end_y - (end_y - start_y) // 3

                path.cubicTo(ctrl1_x, ctrl1_y, ctrl2_x, ctrl2_y, end_x, end_y)
                painter.drawPath(path)

                # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É
                angle = 0.5  # –£–≥–æ–ª —Å—Ç—Ä–µ–ª–∫–∏
                arrowSize = 10  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏

                # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –ª–∏–Ω–∏–∏
                line_angle = 3.14159 / 2  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≤–Ω–∏–∑

                # –†–∏—Å—É–µ–º –¥–≤–µ –ª–∏–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏
                painter.save()
                painter.translate(end_x, end_y)
                painter.drawLine(0, 0,
                                 int(arrowSize * 3 * (-1 * angle - line_angle).real),
                                 int(arrowSize * 3 * (-1 * angle - line_angle).imag))
                painter.drawLine(0, 0,
                                 int(arrowSize * 3 * (angle - line_angle).real),
                                 int(arrowSize * 3 * (angle - line_angle).imag))
                painter.restore()


def show_flow_visualizer_dialog(flow, parent=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ç–æ–∫–∞.

    Args:
        flow (BaseFlow): –ü–æ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
        parent (QWidget): –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç.

    Returns:
        bool: True, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog = QDialog(parent)
        dialog.setWindowTitle(tr("flow_visualizer.title", "Flow Visualizer"))
        dialog.setMinimumSize(800, 600)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        visualizer = FlowVisualizer(dialog)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        visualizer.set_flow(flow)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton(tr("flow_visualizer.close", "Close"), dialog)
        close_button.setIcon(get_icon("close"))
        close_button.clicked.connect(dialog.accept)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout
        layout = QVBoxLayout(dialog)
        layout.addWidget(visualizer)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(close_button)
        layout.addLayout(button_layout)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog.exec()
        return True
    except Exception as e:
        QMessageBox.critical(
            parent,
            tr("dialogs.error", "Error"),
            f"Error visualizing flow: {str(e)}"
        )
        return False


# –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    app = QApplication(sys.argv)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    class TestFlow:
        def __init__(self):
            self.name = "Test Flow"
            self.agents = {
                "planner": TestAgent("Planning Agent"),
                "executor": TestAgent("Execution Agent")
            }

    class TestAgent:
        def __init__(self, name):
            self.name = name
            self.available_tools = type('obj', (object,), {
                'tools': [
                    type('obj', (object,), {'name': 'WebSearch'}),
                    type('obj', (object,), {'name': 'PythonExecute'}),
                    type('obj', (object,), {'name': 'FileOperations'})
                ]
            })

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    test_flow = TestFlow()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    show_flow_visualizer_dialog(test_flow)

    sys.exit(app.exec())
