# ui/docks.py
from gopiai.core.logging import get_logger
logger = get_logger().logger

from PySide6.QtCore import Qt
from PySide6.QtWidgets import QDockWidget, QMainWindow, QWidget
from gopiai.widgets.i18n.translator import tr

from .enhanced_browser_widget import EnhancedBrowserWidget
from .dock_title_bar import apply_custom_title_bar
from .project_explorer import ProjectExplorer
# from .widgets import ChatWidget, TerminalWidget  # TODO: Fix imports for widgets that moved
# Removed CodingAgentDialog import as it will be handled separately
# # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: from gopiai.core.event_stubs import event_handler_stub

logger = get_logger().logger

def create_docks(main_window: QMainWindow):
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏ (dock-–≤–∏–¥–∂–µ—Ç—ã) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞
        main_window.project_explorer_dock = QDockWidget(
            tr("dock.project_explorer", "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞"), main_window
        )
        main_window.project_explorer_dock.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetMovable)
        main_window.project_explorer_dock.setAllowedAreas(Qt.LeftDockWidgetArea)
        main_window.project_explorer_dock.setMinimumWidth(100)
        main_window.project_explorer_dock.setObjectName("ProjectExplorerDock")
        # main_window.project_explorer_dock.visibilityChanged.connect(main_window._on_dock_visibility_changed) # –ë—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ main_window
        main_window.project_explorer = ProjectExplorer(main_window.icon_manager, main_window) # –ü–µ—Ä–µ–¥–∞–µ–º icon_manager
        main_window.project_explorer_dock.setWidget(main_window.project_explorer)
        main_window.addDockWidget(Qt.LeftDockWidgetArea, main_window.project_explorer_dock)
        apply_custom_title_bar(main_window.project_explorer_dock, main_window.icon_manager, is_docked_permanent=True) # –ü–µ—Ä–µ–¥–∞–µ–º icon_manager
        # Connect to the event handler, ensuring main_window context is passed correctly
        # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: from gopiai.core.event_stubs import event_handler_stub
        main_window.project_explorer.file_double_clicked.connect(lambda file_path: eh_on_file_double_clicked(main_window, file_path))

        # –ß–∞—Ç
        main_window.chat_dock = QDockWidget(tr("dock.chat", "–ò–ò-—á–∞—Ç"), main_window)
        main_window.chat_dock.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetMovable)
        main_window.chat_dock.setAllowedAreas(Qt.RightDockWidgetArea)
        main_window.chat_dock.setMinimumWidth(200)
        main_window.chat_dock.setObjectName("ChatDock")
        main_window.chat_dock.visibilityChanged.connect(lambda visible: on_dock_visibility_changed(main_window, "chat", visible))
        main_window.chat_widget = ChatWidget(main_window)
        main_window.chat_dock.setWidget(main_window.chat_widget)
        main_window.addDockWidget(Qt.RightDockWidgetArea, main_window.chat_dock)
        apply_custom_title_bar(main_window.chat_dock, main_window.icon_manager, is_docked_permanent=True)

        # Connect chat_widget's message_sent signal to the new handler
        # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: from gopiai.core.agent_stubs import agent_setup_stub
        try:
            if hasattr(main_window.chat_widget, "message_sent"):
                main_window.chat_widget.message_sent.connect(lambda msg: handle_user_message(main_window, msg))
                logger.info("Connected chat widget message_sent signal to handle_user_message")
            else:
                logger.warning("Chat widget does not have message_sent signal")
        except Exception as e:
            logger.error(f"Error connecting chat widget message_sent signal: {str(e)}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∏ —á–∞—Ç–æ–º
        if hasattr(main_window, "coding_agent_dialog") and main_window.coding_agent_dialog is not None:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ —Å–æ–∑–¥–∞–Ω
            _connect_editor_chat_signals(main_window)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            main_window._connect_editor_chat_signals = _connect_editor_chat_signals

        # Coding Agent is now handled separately as a standalone window
        # and not as a dock anymore

        # –¢–µ—Ä–º–∏–Ω–∞–ª
        main_window.terminal_dock = QDockWidget(tr("dock.terminal", "–¢–µ—Ä–º–∏–Ω–∞–ª"), main_window)
        main_window.terminal_dock.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetMovable)
        main_window.terminal_dock.setAllowedAreas(Qt.BottomDockWidgetArea)
        main_window.terminal_dock.setMinimumHeight(100)
        main_window.terminal_dock.setObjectName("TerminalDock")
        main_window.terminal_dock.visibilityChanged.connect(lambda visible: on_dock_visibility_changed(main_window, "terminal", visible))
        main_window.terminal_widget = TerminalWidget(main_window)
        main_window.terminal_dock.setWidget(main_window.terminal_widget)
        main_window.addDockWidget(Qt.BottomDockWidgetArea, main_window.terminal_dock)
        apply_custom_title_bar(main_window.terminal_dock, main_window.icon_manager, is_docked_permanent=True) # –ü–µ—Ä–µ–¥–∞–µ–º icon_manager
        main_window.terminal_dock.hide()

        # –ë—Ä–∞—É–∑–µ—Ä
        logger.info("Creating browser dock")
        main_window.browser_dock = QDockWidget(tr("dock.browser", "–ë—Ä–∞—É–∑–µ—Ä"), main_window)
        main_window.browser_dock.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetMovable)
        main_window.browser_dock.setAllowedAreas(Qt.RightDockWidgetArea | Qt.BottomDockWidgetArea)
        main_window.browser_dock.setMinimumWidth(250)
        main_window.browser_dock.setMinimumHeight(200)
        main_window.browser_dock.setObjectName("BrowserDock")
        main_window.browser_dock.visibilityChanged.connect(lambda visible: on_dock_visibility_changed(main_window, "browser", visible))

        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ –¥–æ–∫
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º web_view –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç browser_dock –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        # —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤ MainWindow (_toggle_browser –∏ –¥—Ä.)
        web_view = EnhancedBrowserWidget(main_window)
        main_window.browser_dock.web_view = web_view  # –í–∞–∂–Ω–æ: –¥–µ–ª–∞–µ–º web_view –∞—Ç—Ä–∏–±—É—Ç–æ–º browser_dock
        main_window.browser_dock.setWidget(web_view)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫ –≤ –ø—Ä–∞–≤—É—é –æ–±–ª–∞—Å—Ç—å, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
        main_window.addDockWidget(Qt.RightDockWidgetArea, main_window.browser_dock)
        apply_custom_title_bar(main_window.browser_dock, main_window.icon_manager, is_docked_permanent=False)
        main_window.browser_dock.hide()
        logger.info("Browser dock created successfully")

    except Exception as e:
        logger.error(f"Error creating docks: {e}")

def _connect_editor_chat_signals(main_window):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–¥–∞ –∏ —á–∞—Ç–æ–º.

    Args:
        main_window: –≠–∫–∑–µ–º–ø–ª—è—Ä MainWindow
    """
    try:
        logger.info("Connecting editor and chat signals")

        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        chat_widget = main_window.chat_widget

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        if hasattr(main_window, "coding_agent_dialog") and main_window.coding_agent_dialog is not None:
            if hasattr(main_window.coding_agent_dialog, "editor_widget"):
                editor_widget = main_window.coding_agent_dialog.editor_widget

                # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —á–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                if hasattr(chat_widget, "insert_code_to_editor") and hasattr(editor_widget, "insert_code"):
                    try:
                        chat_widget.insert_code_to_editor.connect(editor_widget.insert_code)
                        logger.info("Connected chat insert_code_to_editor signal to editor insert_code")
                    except Exception as e:
                        logger.error(f"Error connecting chat insert_code_to_editor: {str(e)}")

                # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫ —á–∞—Ç—É
                if hasattr(editor_widget, "send_to_chat") and hasattr(chat_widget, "add_message"):
                    try:
                        editor_widget.send_to_chat.connect(lambda code: chat_widget.add_message("Editor", code))
                        logger.info("Connected editor send_to_chat signal to chat add_message")
                    except Exception as e:
                        logger.error(f"Error connecting editor send_to_chat: {str(e)}")

                logger.info("Editor and chat signals connected successfully")
            else:
                logger.warning("Editor widget not found in coding_agent_dialog")

        # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —á–∞—Ç–∞ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
        if hasattr(main_window, "terminal_widget"):
            terminal_widget = main_window.terminal_widget

            if hasattr(chat_widget, "run_code_in_terminal") and hasattr(terminal_widget, "execute_command"):
                try:
                    chat_widget.run_code_in_terminal.connect(terminal_widget.execute_command)
                    logger.info("Connected chat run_code_in_terminal signal to terminal execute_command")
                except Exception as e:
                    logger.error(f"Error connecting chat run_code_in_terminal: {str(e)}")
            else:
                if not hasattr(chat_widget, "run_code_in_terminal"):
                    logger.warning("Chat widget does not have run_code_in_terminal signal")
                if not hasattr(terminal_widget, "execute_command"):
                    logger.warning("Terminal widget does not have execute_command method")
        else:
            logger.warning("Terminal widget not found")

    except Exception as e:
        logger.error(f"Error connecting editor and chat signals: {e}")
