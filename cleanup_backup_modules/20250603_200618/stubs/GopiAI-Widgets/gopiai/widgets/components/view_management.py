# üìÖ TODO_STUB_SEARCH: –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π grep -r 'TODO_STUB' .
"""
View Management Mixin for MainWindow.

This module contains methods related to dock and view management in MainWindow.
"""

from gopiai.core.logging import get_logger
logger = get_logger().logger

from PySide6.QtCore import QSettings, Qt
from PySide6.QtWidgets import QDockWidget, QMessageBox
from gopiai.widgets.i18n.translator import tr
# # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: –ò—Å–ø–æ–ª—å–∑—É–π gopiai.core.ui_utils

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ ui_utils
def apply_dock_constraints(window):
    # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è apply_dock_constraints"""
    pass

def fix_duplicate_docks(window):
    # üöß –ó–ê–ì–õ–£–®–ö–ê! TODO_STUB: –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è fix_duplicate_docks"""
    pass

logger = get_logger().logger


class ViewManagementMixin:
    """Provides view management functionality for MainWindow."""

    def _toggle_project_explorer(self, checked=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞."""
        logger.info(f"Action: Toggle Project Explorer {checked}")

        if (
            hasattr(self, "project_explorer_dock")
            and self.project_explorer_dock
            and isinstance(self.project_explorer_dock, QDockWidget)
        ):
            if checked is None:
                # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                checked = not self.project_explorer_dock.isVisible()

            if checked:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫
                self.project_explorer_dock.show()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_project_explorer_action")
                    and self.toggle_project_explorer_action
                ):
                    self.toggle_project_explorer_action.setChecked(True)
                logger.info("Project explorer dock shown")
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫
                self.project_explorer_dock.hide()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_project_explorer_action")
                    and self.toggle_project_explorer_action
                ):
                    self.toggle_project_explorer_action.setChecked(False)
                logger.info("Project explorer dock hidden")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.settings.setValue("project_explorer_visible", checked)
        else:
            logger.error("Cannot toggle project explorer: dock not found")

    def _toggle_chat(self, checked=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —á–∞—Ç–∞."""
        logger.info(f"Action: Toggle Chat {checked}")

        if (
            hasattr(self, "chat_dock")
            and self.chat_dock
            and isinstance(self.chat_dock, QDockWidget)
        ):
            if checked is None:
                # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                checked = not self.chat_dock.isVisible()

            if checked:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫
                self.chat_dock.show()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if hasattr(self, "toggle_chat_action") and self.toggle_chat_action:
                    self.toggle_chat_action.setChecked(True)
                logger.info("Chat dock shown")
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫
                self.chat_dock.hide()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if hasattr(self, "toggle_chat_action") and self.toggle_chat_action:
                    self.toggle_chat_action.setChecked(False)
                logger.info("Chat dock hidden")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.settings.setValue("chat_visible", checked)
        else:
            logger.error("Cannot toggle chat: dock not found")

    def _toggle_terminal(self, checked=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
        logger.info(f"Action: Toggle Terminal {checked}")

        if (
            hasattr(self, "terminal_dock")
            and self.terminal_dock
            and isinstance(self.terminal_dock, QDockWidget)
        ):
            if checked is None:
                # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                checked = not self.terminal_dock.isVisible()

            if checked:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫
                self.terminal_dock.show()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_terminal_action")
                    and self.toggle_terminal_action
                ):
                    self.toggle_terminal_action.setChecked(True)
                logger.info("Terminal dock shown")
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫
                self.terminal_dock.hide()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_terminal_action")
                    and self.toggle_terminal_action
                ):
                    self.toggle_terminal_action.setChecked(False)
                logger.info("Terminal dock hidden")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.settings.setValue("terminal_visible", checked)
        else:
            logger.error("Cannot toggle terminal: dock not found")

    def _toggle_browser(self, checked=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞."""
        logger.info(f"Action: Toggle Browser {checked}")

        if (
            hasattr(self, "browser_dock")
            and self.browser_dock
            and isinstance(self.browser_dock, QDockWidget)
        ):
            if checked is None:
                # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                checked = not self.browser_dock.isVisible()

            if checked:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫
                self.browser_dock.show()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_browser_action")
                    and self.toggle_browser_action
                ):
                    self.toggle_browser_action.setChecked(True)
                logger.info("Browser dock shown")
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫
                self.browser_dock.hide()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (
                    hasattr(self, "toggle_browser_action")
                    and self.toggle_browser_action
                ):
                    self.toggle_browser_action.setChecked(False)
                logger.info("Browser dock hidden")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.settings.setValue("browser_visible", checked)
        else:
            logger.error("Cannot toggle browser: dock not found")

    def _update_view_menu(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é '–í–∏–¥' –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ–∫–æ–≤."""
        try:
            if (
                hasattr(self, "toggle_project_explorer_action")
                and hasattr(self, "project_explorer_dock")
                and self.project_explorer_dock
                and isinstance(self.project_explorer_dock, QDockWidget)
            ):
                self.toggle_project_explorer_action.setChecked(
                    self.project_explorer_dock.isVisible()
                )
            if (
                hasattr(self, "toggle_chat_action")
                and hasattr(self, "chat_dock")
                and self.chat_dock
                and isinstance(self.chat_dock, QDockWidget)
            ):
                self.toggle_chat_action.setChecked(self.chat_dock.isVisible())
            if (
                hasattr(self, "toggle_terminal_action")
                and hasattr(self, "terminal_dock")
                and self.terminal_dock
                and isinstance(self.terminal_dock, QDockWidget)
            ):
                self.toggle_terminal_action.setChecked(self.terminal_dock.isVisible())
            if (
                hasattr(self, "toggle_browser_action")
                and hasattr(self, "browser_dock")
                and self.browser_dock
                and isinstance(self.browser_dock, QDockWidget)
            ):
                self.toggle_browser_action.setChecked(self.browser_dock.isVisible())
            if (
                hasattr(self, "toggle_coding_agent_action")
                and hasattr(self, "unified_chat_view")
                and self.unified_chat_view
            ):
                self.toggle_coding_agent_action.setChecked(
                    self.unified_chat_view.isVisible()
                )
        except Exception as e:
            logger.error(f"Error updating view menu: {e}")

    def reset_dock_layout(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –∫ –≤–∏–¥—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        logger.info("Action: Reset Dock Layout")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–æ–Ω
        try:
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –≤—Å–µ –¥–æ–∫–∏ –ø–ª–∞–≤–∞—é—â–∏–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            if hasattr(self, "project_explorer_dock") and self.project_explorer_dock:
                self.project_explorer_dock.setFloating(True)
            if hasattr(self, "chat_dock") and self.chat_dock:
                self.chat_dock.setFloating(True)
            if hasattr(self, "terminal_dock") and self.terminal_dock:
                self.terminal_dock.setFloating(True)
            if hasattr(self, "browser_dock") and self.browser_dock:
                self.browser_dock.setFloating(True)

            # –ó–∞—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä
            if hasattr(self, "project_explorer_dock") and self.project_explorer_dock:
                self.project_explorer_dock.setFloating(False)
                self.addDockWidget(Qt.LeftDockWidgetArea, self.project_explorer_dock)
                self.project_explorer_dock.show()
                if hasattr(self, "toggle_project_explorer_action"):
                    self.toggle_project_explorer_action.setChecked(True)

            if hasattr(self, "chat_dock") and self.chat_dock:
                self.chat_dock.setFloating(False)
                self.addDockWidget(Qt.RightDockWidgetArea, self.chat_dock)
                self.chat_dock.show()
                if hasattr(self, "toggle_chat_action"):
                    self.toggle_chat_action.setChecked(True)

            if hasattr(self, "terminal_dock") and self.terminal_dock:
                self.terminal_dock.setFloating(False)
                self.addDockWidget(Qt.BottomDockWidgetArea, self.terminal_dock)
                self.terminal_dock.show()
                if hasattr(self, "toggle_terminal_action"):
                    self.toggle_terminal_action.setChecked(True)

            if hasattr(self, "browser_dock") and self.browser_dock:
                self.browser_dock.setFloating(False)
                self.addDockWidget(Qt.RightDockWidgetArea, self.browser_dock)
                self.browser_dock.show()
                if hasattr(self, "toggle_browser_action"):
                    self.toggle_browser_action.setChecked(True)

            # –¢–∞–±—É–ª—è—Ü–∏—è —á–∞—Ç–∞ –∏ –±—Ä–∞—É–∑–µ—Ä–∞, –µ—Å–ª–∏ –æ–±–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if (
                hasattr(self, "chat_dock")
                and self.chat_dock
                and hasattr(self, "browser_dock")
                and self.browser_dock
            ):
                self.tabifyDockWidget(self.chat_dock, self.browser_dock)
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–∞
                self.chat_dock.raise_()

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫–∞–º–∏
            fix_duplicate_docks(self)
            apply_dock_constraints(self)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.settings.setValue("geometry", self.saveGeometry())
            self.settings.setValue("windowState", self.saveState())

            logger.info("Dock layout reset to default")
            QMessageBox.information(
                self,
                tr("dialog.layout_reset.title", "Layout Reset"),
                tr(
                    "dialog.layout_reset.message",
                    "Window layout has been reset to default.",
                ),
            )
        except Exception as e:
            logger.error(f"Error resetting dock layout: {e}")
            QMessageBox.critical(
                self,
                tr("dialog.error", "Error"),
                tr(
                    "dialog.layout_reset.error", "Error resetting layout: {error}"
                ).format(error=str(e)),
            )

    def reset_layout(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞."""
        logger.info("Action: Reset Full Layout")
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞
            self.settings.remove("geometry")
            self.settings.remove("windowState")
            self.settings.remove("project_explorer_visible")
            self.settings.remove("chat_visible")
            self.settings.remove("terminal_visible")
            self.settings.remove("browser_visible")

            # –ï–¥–∏–Ω—ã–π —á–∞—Ç —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            settings = QSettings(tr("app.title", "GopiAI"), "UI")
            settings.remove("unified_chat_visible")
            settings.remove("unified_chat_geometry")

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            QMessageBox.information(
                self,
                tr("dialog.layout_reset.title", "Layout Reset"),
                tr(
                    "dialog.layout_reset.restart",
                    "Layout settings have been reset. Please restart the application for changes to take effect.",
                ),
            )

            logger.info("Layout fully reset, application restart required")
        except Exception as e:
            logger.error(f"Error during full layout reset: {e}")
            QMessageBox.critical(
                self,
                tr("dialog.error", "Error"),
                tr(
                    "dialog.layout_reset.error",
                    "Error resetting layout settings: {error}",
                ).format(error=str(e)),
            )
