# logic/agent_setup.py
from gopiai.core.logging import get_logger
logger = get_logger().logger

from PySide6.QtCore import QThread  # Added QThread import
from gopiai.app.agent.agent_manager import AgentManager
from gopiai.app.logic.agent_controller import AgentController  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from gopiai.widgets.agent_ui_integration import (  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ agent_ui_integration.py –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤; –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    BROWSER_COMPONENT_ID,
    CODING_AGENT_COMPONENT_ID,
    MAIN_CHAT_COMPONENT_ID,
    connect_editor_chat_signals,
    integrate_all_agents,
)

logger = get_logger().logger

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ app.ui.agent_ui_integration –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤


# Agent-related handlers, moved from MainWindow
def handle_user_message(main_window, message: str):
    """Handles user messages sent to the agent."""
    logger.debug(f"User message to agent: {message}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AgentController –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ worker
    agent_controller = AgentController.instance()
    agent_controller.process_query(MAIN_CHAT_COMPONENT_ID, message)


def handle_agent_response(main_window, response):
    """Handles responses received from the agent."""
    logger.debug(f"Agent response received: {response}")
    if hasattr(main_window, "chat_widget") and main_window.chat_widget:
        if isinstance(response, str):
            main_window.chat_widget.add_message("Assistant", response)
        else:
            logger.warning(
                f"Received non-string agent response: {type(response)}, content: {response}"
            )
    else:
        logger.warning("Chat widget not available to display agent response.")


def update_agent_status_display(main_window, status_message: str):
    """Updates the agent status display in the UI."""
    if hasattr(main_window, "agent_status_label") and main_window.agent_status_label:
        main_window.agent_status_label.setText(status_message)
    logger.info(f"Agent status updated: {status_message}")


def setup_agent(main_window):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ò–ò –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä."""
    logger.info("Initializing agent")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AgentController –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        agent_controller = AgentController.instance()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞
        component_id = agent_controller.register_component(
            MAIN_CHAT_COMPONENT_ID,
            agent_type="reactive",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReactAgent –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        agent_controller.register_callback(
            component_id, "message", lambda msg: handle_agent_response(main_window, msg)
        )

        agent_controller.register_callback(
            component_id,
            "thinking",
            lambda thinking: update_agent_status_display(
                main_window, "Thinking... ü§î" if thinking else "Ready"
            ),
        )

        agent_controller.register_callback(
            component_id,
            "error",
            lambda err: update_agent_status_display(main_window, f"Error: {err} ‚ùå"),
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        agent = AgentManager.instance().get_active_agent(MAIN_CHAT_COMPONENT_ID)

        # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        if agent is None:
            logger.warning("No active agent found for main chat, creating manually")
            agent = AgentManager.instance().create_agent("reactive")
            AgentManager.instance().set_active_agent(MAIN_CHAT_COMPONENT_ID, agent)

        return agent
    except ImportError as e:
        logger.warning(f"Agent module not found: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"Error initializing agent: {str(e)}")
        return None


def connect_agent_signals(main_window):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∞–≥–µ–Ω—Ç–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ agent_ui_integration.py
    logger.info("Connecting agent signals using agent_ui_integration")

    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã main_window
    main_window.agent_controller = AgentController.instance()

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    integration_success = integrate_all_agents(main_window)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∏ —á–∞—Ç–æ–º
    editor_chat_connected = connect_editor_chat_signals(main_window)

    if integration_success and editor_chat_connected:
        logger.info("All agent signals connected successfully")
    else:
        logger.warning("Some agent signals could not be connected")

    return integration_success and editor_chat_connected
