/**
 * AI Recovery Module - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö –ò–ò —Å–µ—Å—Å–∏–π
 * –ú–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
 */

class AIRecoveryModule {
    constructor(chatInterface, options = {}) {
        this.chat = chatInterface;
        this.options = {
            enabled: true,
            timeoutSeconds: 45,
            maxRetries: 2,
            compressionLevel: 'smart',
            showNotifications: true,
            ...options
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
        this.isMonitoring = false;
        this.lastRequestTime = null;
        this.retryCount = 0;
        this.originalSendMessage = null;

        // –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        this.isRecovering = false;
        this.isRetrying = false;

        console.log('üîÑ AI Recovery Module initialized');
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É
     */
    activate() {
        if (!this.chat) {
            console.error('‚ùå AI Recovery: No chat interface provided');
            return;
        }

        // –ü–∞—Ç—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sendMessage –º–µ—Ç–æ–¥—ã
        this.patchChatInterface();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.startHealthMonitoring();

        console.log('‚úÖ AI Recovery Module activated');
    }

    /**
     * –ü–∞—Ç—á–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞
     */
    patchChatInterface() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        this.originalSendMessage = this.chat.sendMessage.bind(this.chat);

        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–∞—à wrapper
        this.chat.sendMessage = this.wrappedSendMessage.bind(this);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –º–µ—Ç–æ–¥—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
        this.chat._recoveryModule = this;
        this.chat.triggerRecovery = () => this.performRecovery();
    }

    /**
     * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è sendMessage —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
     */
    async wrappedSendMessage() {
        if (this.isRecovering || this.isRetrying) {
            return; // –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
        }

        this.lastRequestTime = Date.now();
        this.startTimeoutWatch();

        try {
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            const result = await this.originalSendMessage();
            this.onSuccessfulResponse();
            return result;

        } catch (error) {
            await this.handleSendError(error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
     */
    startTimeoutWatch() {
        this.clearTimeoutWatch();

        this.timeoutWatcher = setTimeout(() => {
            if (this.chat.isProcessing && !this.isRecovering) {
                console.warn('üö® AI Recovery: Response timeout detected');
                this.performRecovery();
            }
        }, this.options.timeoutSeconds * 1000);
    }

    clearTimeoutWatch() {
        if (this.timeoutWatcher) {
            clearTimeout(this.timeoutWatcher);
            this.timeoutWatcher = null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
     */
    onSuccessfulResponse() {
        this.clearTimeoutWatch();
        this.retryCount = 0;
        this.lastRequestTime = null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async handleSendError(error) {
        this.clearTimeoutWatch();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.shouldTriggerRecovery(error)) {
            await this.performRecovery();
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    shouldTriggerRecovery(error) {
        if (!this.options.enabled || this.retryCount >= this.options.maxRetries) {
            return false;
        }

        const errorMessage = error?.message?.toLowerCase() || '';
        const recoveryTriggers = [
            'timeout',
            'failed to fetch',
            'network error',
            'connection',
            'context window',
            'rate limit'
        ];

        return recoveryTriggers.some(trigger => errorMessage.includes(trigger));
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async performRecovery() {
        if (this.isRecovering) {
            return; // –ò–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        this.isRecovering = true;
        this.retryCount++;

        console.log(`üîÑ AI Recovery: Starting recovery attempt ${this.retryCount}/${this.options.maxRetries}`);

        try {
            // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (this.options.showNotifications) {
                this.showRecoveryNotification();
            }

            // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            this.stopCurrentOperations();

            // 3. –°–∂–∏–º–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const compressedContext = this.compressContext();

            // 4. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏—Ö–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            await this.silentRestore(compressedContext);

            // 5. –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (this.options.showNotifications) {
                this.hideRecoveryNotification();
                this.showSuccessNotification();
            }

            console.log('‚úÖ AI Recovery: Recovery completed successfully');

        } catch (error) {
            console.error('‚ùå AI Recovery: Recovery failed:', error);
            this.showFailureNotification();

        } finally {
            this.isRecovering = false;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    stopCurrentOperations() {
        if (this.chat.hideTypingIndicator) {
            this.chat.hideTypingIndicator();
        }

        this.chat.isProcessing = false;

        if (this.chat.sendButton) {
            this.chat.sendButton.disabled = false;
        }

        this.clearTimeoutWatch();
    }

    /**
     * –°–∂–∞—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    compressContext() {
        const history = this.chat.chatHistory || [];

        if (history.length === 0) {
            return null;
        }

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        const recentMessages = history.slice(-4);

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        const summary = this.createContextSummary(history.slice(0, -4));

        return {
            summary,
            recent: recentMessages,
            compressed: true
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    createContextSummary(messages) {
        if (messages.length === 0) return "";

        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
        const userMessages = messages.filter(m => m.role === 'user');
        const lastUserMessages = userMessages.slice(-3).map(m => m.content);

        if (lastUserMessages.length === 0) return "";

        return `–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ–±—Å—É–∂–¥–∞–ª–∏ ${lastUserMessages.join(', ').substring(0, 200)}...`;
    }

    /**
     * –¢–∏—Ö–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    async silentRestore(context) {
        if (!context) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const restorePrompt = this.createRestorePrompt(context);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—Ö–æ (–±–µ–∑ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
        const tempHistory = [{ role: 'user', content: restorePrompt }];

        const response = await puter.ai.chat(tempHistory, {
            model: this.chat.currentModel
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.updateInternalState(context, response);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    createRestorePrompt(context) {
        return `[–°–ò–°–¢–ï–ú–ê: –ö—Ä–∞—Ç–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏]
${context.summary}

–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${context.recent.map(msg =>
            `${msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${msg.content.substring(0, 100)}...`
        ).join('\n')}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É. –û—Ç–≤–µ—Ç—å—Ç–µ –∫—Ä–∞—Ç–∫–æ "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å".`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
     */
    updateInternalState(context, response) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        this.chat.chatHistory = [
            ...context.recent.slice(-2), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            { role: 'assistant', content: '–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É.' }
        ];
    }

    /**
     * UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showRecoveryNotification() {
        this.hideAllNotifications();

        const notification = document.createElement('div');
        notification.id = 'ai-recovery-notification';
        notification.className = 'recovery-notification recovery-in-progress';
        notification.innerHTML = `
            <div class="recovery-content">
                <span class="recovery-icon">üîÑ</span>
                <span class="recovery-text">–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò...</span>
            </div>
        `;

        this.addNotificationToDOM(notification);
    }

    showSuccessNotification() {
        this.hideAllNotifications();

        const notification = document.createElement('div');
        notification.id = 'ai-recovery-notification';
        notification.className = 'recovery-notification recovery-success';
        notification.innerHTML = `
            <div class="recovery-content">
                <span class="recovery-icon">‚úÖ</span>
                <span class="recovery-text">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>
            </div>
        `;

        this.addNotificationToDOM(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => this.hideAllNotifications(), 3000);
    }

    showFailureNotification() {
        this.hideAllNotifications();

        const notification = document.createElement('div');
        notification.id = 'ai-recovery-notification';
        notification.className = 'recovery-notification recovery-failure';
        notification.innerHTML = `
            <div class="recovery-content">
                <span class="recovery-icon">‚ùå</span>
                <span class="recovery-text">–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</span>
            </div>
        `;

        this.addNotificationToDOM(notification);
    }

    addNotificationToDOM(notification) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤ body
        const container = this.chat.messagesContainer || document.body;
        container.appendChild(notification);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        this.ensureNotificationStyles();
    }

    hideAllNotifications() {
        const existing = document.getElementById('ai-recovery-notification');
        if (existing) {
            existing.remove();
        }
    }

    /**
     * –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    ensureNotificationStyles() {
        if (document.getElementById('ai-recovery-styles')) {
            return;
        }

        const styles = document.createElement('style');
        styles.id = 'ai-recovery-styles';
        styles.textContent = `
            .recovery-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                padding: 12px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideIn 0.3s ease-out;
            }
            
            .recovery-in-progress {
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            }
            
            .recovery-success {
                background: linear-gradient(135deg, #10b981, #047857);
            }
            
            .recovery-failure {
                background: linear-gradient(135deg, #ef4444, #dc2626);
            }
            
            .recovery-content {
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .recovery-icon {
                font-size: 16px;
            }
            
            .recovery-text {
                font-size: 14px;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;

        document.head.appendChild(styles);
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ò–ò
     */
    startHealthMonitoring() {
        if (this.isMonitoring) {
            return;
        }

        this.isMonitoring = true;
        console.log('üîç AI Recovery: Health monitoring started');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    deactivate() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if (this.originalSendMessage && this.chat) {
            this.chat.sendMessage = this.originalSendMessage;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.clearTimeoutWatch();
        this.isMonitoring = false;

        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.hideAllNotifications();

        console.log('üîÑ AI Recovery Module deactivated');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
     */
    updateSettings(newOptions) {
        this.options = { ...this.options, ...newOptions };
        console.log('‚öôÔ∏è AI Recovery: Settings updated', this.options);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.AIRecoveryModule = AIRecoveryModule;