// file_handler.js - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

class FileHandler {
    constructor(chatApp) {
        this.chatApp = chatApp;
        this.bridge = chatApp.bridge;
        this.supportedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        this.supportedFileTypes = ['text/plain', 'text/csv', 'application/json', 'application/pdf'];
        
        // –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
        this.maxFileSize = 10 * 1024 * 1024; 
        
        this.init();
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupPasteHandler();
        this.setupDropHandler();
        
        console.log('üìÅ FileHandler initialized');
    }
    
    setupPasteHandler() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+V
        document.addEventListener('paste', (event) => {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞
            if (event.clipboardData && event.clipboardData.items.length > 0) {
                const items = event.clipboardData.items;
                let handled = false;
                
                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    if (item.type.startsWith('image/')) {
                        const file = item.getAsFile();
                        this.processImageFile(file);
                        handled = true;
                        break;
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
                    if (this.isSupportedFile(item.type)) {
                        const file = item.getAsFile();
                        this.processFile(file);
                        handled = true;
                        break;
                    }
                }
                
                // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Ñ–∞–π–ª, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
                if (handled) {
                    event.preventDefault();
                }
            }
        });
        
        console.log('üìã Paste handler initialized');
    }
    
    setupDropHandler() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ drop —Å–æ–±—ã—Ç–∏–π
        const chatMessages = document.getElementById('chat-messages');
        const messageInput = document.getElementById('message-input');
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            chatMessages.addEventListener(eventName, preventDefaults, false);
            messageInput.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        ['dragenter', 'dragover'].forEach(eventName => {
            chatMessages.addEventListener(eventName, highlight, false);
            messageInput.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            chatMessages.addEventListener(eventName, unhighlight, false);
            messageInput.addEventListener(eventName, unhighlight, false);
        });
        
        function highlight() {
            chatMessages.classList.add('drag-highlight');
        }
        
        function unhighlight() {
            chatMessages.classList.remove('drag-highlight');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        chatMessages.addEventListener('drop', (e) => this.handleDrop(e), false);
        messageInput.addEventListener('drop', (e) => this.handleDrop(e), false);
        
        console.log('üñ±Ô∏è Drop handler initialized');
    }
    
    handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        if (files.length > 0) {
            const file = files[0]; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
            
            if (this.isImageFile(file)) {
                this.processImageFile(file);
            } else if (this.isSupportedFile(file.type)) {
                this.processFile(file);
            } else {
                this.showError(`Unsupported file type: ${file.type}`);
            }
        }
    }
    
    isImageFile(file) {
        return this.supportedImageTypes.includes(file.type);
    }
    
    isSupportedFile(fileType) {
        return this.supportedFileTypes.includes(fileType);
    }
    
    async processImageFile(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (file.size > this.maxFileSize) {
            this.showError(`File is too large. Maximum size is ${this.maxFileSize / (1024 * 1024)}MB`);
            return;
        }
        
        try {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const messageId = this.chatApp.addUserMessage(`üì§ Uploading image: ${file.name}...`);
            
            // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ base64
            const base64Data = await this.readFileAsBase64(file);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
            const imagePreview = `<img src="${base64Data}" alt="${file.name}" class="chat-image">`;
            this.chatApp.updateUserMessage(messageId, imagePreview);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Claude —Å base64 –¥–∞–Ω–Ω—ã–º–∏
            const claudeMessage = `![Image](${base64Data})`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò —á–µ—Ä–µ–∑ bridge
            this.chatApp.sendMessageToAI(claudeMessage);
            
        } catch (error) {
            console.error('Error processing image:', error);
            this.showError('Failed to process the image');
        }
    }
    
    async processFile(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (file.size > this.maxFileSize) {
            this.showError(`File is too large. Maximum size is ${this.maxFileSize / (1024 * 1024)}MB`);
            return;
        }
        
        try {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const messageId = this.chatApp.addUserMessage(`üì§ Uploading file: ${file.name}...`);
            
            // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç/base64 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let fileContent;
            
            if (file.type === 'text/plain' || file.type === 'application/json' || file.type === 'text/csv') {
                // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                fileContent = await this.readFileAsText(file);
                this.chatApp.updateUserMessage(messageId, `üìÑ File: ${file.name}\n\`\`\`\n${fileContent.slice(0, 200)}...\n\`\`\``);
            } else {
                // –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –∫–∞–∫ base64
                fileContent = await this.readFileAsBase64(file);
                this.chatApp.updateUserMessage(messageId, `üìé File uploaded: ${file.name}`);
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Claude
            const claudeMessage = file.type.startsWith('text/') ? 
                `File content of ${file.name}:\n\`\`\`\n${fileContent}\n\`\`\`` :
                `File uploaded as base64: ${file.name}`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò —á–µ—Ä–µ–∑ bridge
            this.chatApp.sendMessageToAI(claudeMessage);
            
        } catch (error) {
            console.error('Error processing file:', error);
            this.showError('Failed to process the file');
        }
    }
    
    readFileAsBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('Failed to read file'));
            reader.readAsDataURL(file);
        });
    }
    
    readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('Failed to read file'));
            reader.readAsText(file);
        });
    }
    
    showError(message) {
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —á–∞—Ç–µ
        this.chatApp.addSystemMessage(`‚ö†Ô∏è Error: ${message}`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
if (typeof module !== 'undefined') {
    module.exports = { FileHandler };
} else {
    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    window.FileHandler = FileHandler;
}