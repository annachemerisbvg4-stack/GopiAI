"""
JavaScript Bridge –¥–ª—è GopiAI WebView

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–≤—è–∑—å –º–µ–∂–¥—É Python –∏ JavaScript –∫–æ–¥–æ–º
—á–µ—Ä–µ–∑ QWebChannel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º —Å –ò–ò.
"""

import json
from typing import List, Dict, Any
from datetime import datetime

from PySide6.QtCore import QObject, Signal, Slot

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
try:
    from .chat_memory import create_memory_manager
    MEMORY_AVAILABLE = True
except ImportError:
    MEMORY_AVAILABLE = False
    print("‚ö†Ô∏è Chat memory system not available")


class JavaScriptBridge(QObject):
    """
    –ú–æ—Å—Ç –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É Python –∏ JavaScript –∫–æ–¥–æ–º.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ JavaScript –∏ —Å–∏–≥–Ω–∞–ª—ã
    –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Python –∫–æ–¥–∞ –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    """
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Python –∫–æ–¥–∞
    message_sent = Signal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    message_received = Signal(str, str)  # –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò (model, message)
    chat_cleared = Signal()  # –ß–∞—Ç –æ—á–∏—â–µ–Ω
    model_changed = Signal(str)  # –ò–∑–º–µ–Ω–µ–Ω–∞ –º–æ–¥–µ–ª—å –ò–ò
    error_occurred = Signal(str)  # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    
    def __init__(self, parent: QObject = None):
            """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Å—Ç–∞.
            
            Args:
                parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
            """
            super().__init__(parent)
            
            # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
            self._chat_history: List[Dict[str, Any]] = []
            
            # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
            self._current_model = "claude-sonnet-4"
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤
            print("üîß JavaScriptBridge initialized with browser automation methods!")
            print(f"   Available methods: {[m for m in dir(self) if 'browser' in m.lower()]}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
            self._memory_manager = None
            if MEMORY_AVAILABLE:
                try:
                    self._memory_manager = create_memory_manager()
                    print("‚úÖ Chat memory system initialized")
                except Exception as e:
                    print(f"‚ö†Ô∏è Failed to initialize memory system: {e}")
                    self._memory_manager = None

    
    @Slot(result=str)
    def test_new_method(self) -> str:
        """–¢–ï–°–¢–û–í–´–ô –ú–ï–¢–û–î - –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ bridge, –∑–Ω–∞—á–∏—Ç –∫–æ–¥ –æ–±–Ω–æ–≤–∏–ª—Å—è!"""
        return "NEW_CODE_LOADED"
    
    @Slot(str)
    def send_message(self, message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JavaScript.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_message = {
                "role": "user",
                "content": message,
                "timestamp": datetime.now().isoformat(),
                "model": self._current_model
            }
            self._chat_history.append(user_message)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Python –∫–æ–¥–∞
            self.message_sent.emit(message)
            
        except Exception as e:
            self.error_occurred.emit(f"Error sending message: {str(e)}")
    
    @Slot(str, str)
    def receive_ai_message(self, model: str, message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏–∑ JavaScript.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ò–ò
            message: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            ai_message = {
                "role": "assistant",
                "content": message,
                "timestamp": datetime.now().isoformat(),
                "model": model
            }
            self._chat_history.append(ai_message)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Python –∫–æ–¥–∞
            self.message_received.emit(model, message)
            
        except Exception as e:
            self.error_occurred.emit(f"Error receiving AI message: {str(e)}")
    
    @Slot()
    def clear_chat(self):
        """–°–ª–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –∏–∑ JavaScript."""
        try:
            self._chat_history.clear()
            self.chat_cleared.emit()
        except Exception as e:
            self.error_occurred.emit(f"Error clearing chat: {str(e)}")
    
    @Slot(str)
    def change_model(self, model: str):
        """
        –°–ª–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ò–ò –∏–∑ JavaScript.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        """
        try:
            if model in ["claude-sonnet-4", "claude-opus-4"]:
                self._current_model = model
                self.model_changed.emit(model)
            else:
                self.error_occurred.emit(f"Unknown model: {model}")
        except Exception as e:
            self.error_occurred.emit(f"Error changing model: {str(e)}")
    
    @Slot(str)
    def log_error(self, error_message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑ JavaScript.
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        self.error_occurred.emit(f"JS Error: {error_message}")
    
    @Slot(result=str)
    def get_chat_history_json(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        try:
            return json.dumps(self._chat_history, ensure_ascii=False, indent=2)
        except Exception as e:
            self.error_occurred.emit(f"Error getting chat history: {str(e)}")
            return "[]"
    
    @Slot(result=str)
    def get_current_model(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –ò–ò.
        
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        """
        return self._current_model
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Python –∫–æ–¥–∞
    
    def receive_message_from_python(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∏–∑ Python –∫–æ–¥–∞.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ Python –∫–æ–¥–∞
        pass
    
    def get_chat_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        return self._chat_history.copy()
    
    def set_model(self, model: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò –∏–∑ Python –∫–æ–¥–∞.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        if model in ["claude-sonnet-4", "claude-opus-4"]:
            self._current_model = model
            self.model_changed.emit(model)
    
    def export_chat(self, format_type: str = "json") -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
        
        Args:
            format_type: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('json', 'txt', 'md')
            
        Returns:
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            if format_type == "json":
                return json.dumps(self._chat_history, ensure_ascii=False, indent=2)
            
            elif format_type == "txt":
                lines = []
                for msg in self._chat_history:
                    role = "User" if msg["role"] == "user" else f"AI ({msg['model']})"
                    timestamp = msg["timestamp"]
                    content = msg["content"]
                    lines.append(f"[{timestamp}] {role}: {content}")
                return "\n".join(lines)
            
            elif format_type == "md":
                lines = ["# Chat History", ""]
                for msg in self._chat_history:
                    role = "**User**" if msg["role"] == "user" else f"**AI ({msg['model']})**"
                    timestamp = msg["timestamp"]
                    content = msg["content"]
                    lines.append(f"## {role} - {timestamp}")
                    lines.append(content)
                    lines.append("")
                return "\n".join(lines)
            
            else:
                return json.dumps(self._chat_history, ensure_ascii=False, indent=2)
                
        except Exception as e:
            self.error_occurred.emit(f"Error exporting chat: {str(e)}")
            return ""
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
    
    @Slot(str, result=str)
    def enrich_message(self, message: str) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫ –ò–ò.
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        if self._memory_manager:
            try:
                return self._memory_manager.enrich_message(message)
            except Exception as e:
                print(f"Memory enrichment error: {e}")
                return message
        return message
    
    @Slot(str, str, result=str)  
    def save_chat_exchange(self, user_message: str, ai_response: str) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç—å.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
            
        Returns:
            –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ("OK" –∏–ª–∏ "ERROR")
        """
        if self._memory_manager:
            try:
                success = self._memory_manager.save_chat_exchange(user_message, ai_response)
                return "OK" if success else "ERROR"
            except Exception as e:
                print(f"Memory save error: {e}")
                return "ERROR"
        return "OK"  # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    
    @Slot(result=str)
    def start_new_chat_session(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞.
        –û—á–∏—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é RAG —Å–µ—Å—Å–∏—é.
        
        Returns:
            ID –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        """
        if self._memory_manager:
            try:
                self._memory_manager.start_new_session()
                return self._memory_manager.session_id
            except Exception as e:
                print(f"New session error: {e}")
        return "default_session"
    
    @Slot(result=str)
    def get_memory_stats(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        
        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–∞–º—è—Ç–∏
        """
        if self._memory_manager:
            try:
                stats = self._memory_manager.get_memory_stats()
                return json.dumps(stats, ensure_ascii=False)
            except Exception as e:
                print(f"Memory stats error: {e}")
        
        return json.dumps({
            "memory_available": False,
            "error": "Memory system not initialized"
        })
    
    @Slot(result=bool)
    def is_memory_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏.
        
        Returns:
            True –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞
        """
        return self._memory_manager is not None
    
    # ==============================================
    # BROWSER AUTOMATION METHODS
    # ==============================================
    
    @Slot(str, result=str)
    def browser_automation_result(self, action: str, result: str) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ browser automation –∏–∑ JavaScript.
        
        Args:
            action: –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (navigate, click, type, etc.)
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ browser automation
            print(f"ü§ñ Browser automation result: {action} -> {result}")
            return "OK"
        except Exception as e:
            self.error_occurred.emit(f"Error processing browser automation result: {str(e)}")
            return "ERROR"
    
    @Slot(str, result=str)
    def get_browser_page_info(self, tab_name: str = "current") -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
        
        Args:
            tab_name: –ò–º—è –≤–∫–ª–∞–¥–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            
        Returns:
            JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        try:
            # –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ browser widget
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            page_info = {
                "url": "unknown",
                "title": "unknown", 
                "status": "ready",
                "timestamp": datetime.now().isoformat()
            }
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ parent widget
            if hasattr(self.parent(), 'get_current_page_info'):
                real_info = self.parent().get_current_page_info()
                if real_info:
                    page_info.update(real_info)
            
            return json.dumps(page_info, ensure_ascii=False)
            
        except Exception as e:
            self.error_occurred.emit(f"Error getting page info: {str(e)}")
            return json.dumps({"error": str(e)})
    
    @Slot(str, str, result=str)
    def execute_browser_action(self, action: str, params: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ browser automation –¥–µ–π—Å—Ç–≤–∏—è.
        
        Args:
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (navigate, click, type, screenshot, etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            import json
            params_dict = json.loads(params) if params else {}
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ –∑–∞–ø—Ä–æ—Å–µ browser automation
            print(f"üîß Browser automation request: {action} with params {params_dict}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            result = {
                "action": action,
                "status": "pending",
                "message": f"Browser action '{action}' received",
                "timestamp": datetime.now().isoformat()
            }
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ parent widget  
            if hasattr(self.parent(), 'execute_browser_automation'):
                real_result = self.parent().execute_browser_automation(action, params_dict)
                if real_result:
                    result.update(real_result)
            
            return json.dumps(result, ensure_ascii=False)
            
        except Exception as e:
            error_result = {
                "action": action,
                "status": "error", 
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            self.error_occurred.emit(f"Error executing browser action '{action}': {str(e)}")
            return json.dumps(error_result, ensure_ascii=False)
    
    @Slot(result=str)
    def get_browser_automation_capabilities(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö browser automation –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
        
        Returns:
            JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        """
        try:
            capabilities = {
                "available_actions": [
                    "navigate",        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL
                    "click",          # –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
                    "type",           # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                    "get_text",       # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                    "get_source",     # –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    "screenshot",     # –°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
                    "scroll",         # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    "wait",           # –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    "get_elements",   # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    "get_page_info"   # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                ],
                "supported_selectors": [
                    "css",           # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "xpath",         # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "id",            # –ü–æ ID —ç–ª–µ–º–µ–Ω—Ç–∞
                    "class",         # –ü–æ –∫–ª–∞—Å—Å—É
                    "tag",           # –ü–æ —Ç–µ–≥—É
                    "text"           # –ü–æ —Ç–µ–∫—Å—Ç—É
                ],
                "browser_engine": "QWebEngineView",
                "javascript_execution": True,
                "screenshot_formats": ["png", "jpg"],
                "status": "available",
                "timestamp": datetime.now().isoformat()
            }
            
            return json.dumps(capabilities, ensure_ascii=False, indent=2)
            
        except Exception as e:
            error_result = {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            self.error_occurred.emit(f"Error getting browser capabilities: {str(e)}")
            return json.dumps(error_result, ensure_ascii=False)