"""
JavaScript Bridge –¥–ª—è GopiAI WebView

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–≤—è–∑—å –º–µ–∂–¥—É Python –∏ JavaScript –∫–æ–¥–æ–º
—á–µ—Ä–µ–∑ QWebChannel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º —Å –ò–ò.
"""

import json
from typing import List, Dict, Any, Optional
from datetime import datetime

from PySide6.QtCore import QObject, Signal, Slot

# –ò–º–ø–æ—Ä—Ç –ù–û–í–û–ì–û txtai –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
try:
    import sys
    from pathlib import Path
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ rag_memory_system
    project_root = Path(__file__).parent.parent.parent.parent
    sys.path.insert(0, str(project_root))
    
    from rag_memory_system import get_memory_manager
    MEMORY_AVAILABLE = True
    print("‚úÖ TxtAI memory system imported successfully")
except ImportError as e:
    MEMORY_AVAILABLE = False
    print(f"‚ö†Ô∏è TxtAI memory system not available: {e}")


class JavaScriptBridge(QObject):
    """
    –ú–æ—Å—Ç –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É Python –∏ JavaScript –∫–æ–¥–æ–º.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ JavaScript –∏ —Å–∏–≥–Ω–∞–ª—ã
    –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Python –∫–æ–¥–∞ –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    """
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Python –∫–æ–¥–∞
    message_sent = Signal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    message_received = Signal(str, str)  # –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò (model, message)
    chat_cleared = Signal()  # –ß–∞—Ç –æ—á–∏—â–µ–Ω
    model_changed = Signal(str)  # –ò–∑–º–µ–Ω–µ–Ω–∞ –º–æ–¥–µ–ª—å –ò–ò
    error_occurred = Signal(str)  # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    browser_action_completed = Signal(str, str, str)  # Browser automation –∑–∞–≤–µ—Ä—à–µ–Ω (action_id, action, result)
    def __init__(self, parent: Optional[QObject] = None):
            """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Å—Ç–∞.
            
            Args:
                parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
            """
            super().__init__(parent)
            
            # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
            self._chat_history: List[Dict[str, Any]] = []
            
            # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
            self._current_model = "claude-sonnet-4"
            
            # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç –¥–ª—è browser automation
            self._parent_widget = parent
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤
            print("üîß JavaScriptBridge initialized with browser automation methods!")
            print(f"   Available methods: {[m for m in dir(self) if 'browser' in m.lower()]}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ù–û–í–û–ô —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
            self._memory_manager = None
            if MEMORY_AVAILABLE:
                try:
                    self._memory_manager = get_memory_manager()
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    session = self._memory_manager.create_session("GopiAI Chat Session")
                    self._current_session_id = session
                    print("‚úÖ TxtAI memory system initialized")
                except Exception as e:
                    print(f"‚ö†Ô∏è Failed to initialize TxtAI memory: {e}")
                    self._memory_manager = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude Tools Handler
            self._claude_tools_handler = None
            print("üîß Claude Tools Handler initialized (placeholder)")

    
    @Slot(result=str)
    def test_new_method(self) -> str:
        """–¢–ï–°–¢–û–í–´–ô –ú–ï–¢–û–î - –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ bridge, –∑–Ω–∞—á–∏—Ç –∫–æ–¥ –æ–±–Ω–æ–≤–∏–ª—Å—è!"""
        return "NEW_CODE_LOADED"
    
    @Slot(str)
    def send_message(self, message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JavaScript.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_message = {
                "role": "user",
                "content": message,
                "timestamp": datetime.now().isoformat(),
                "model": self._current_model
            }
            self._chat_history.append(user_message)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Python –∫–æ–¥–∞
            self.message_sent.emit(message)
            
        except Exception as e:
            self.error_occurred.emit(f"Error sending message: {str(e)}")
    
    @Slot(str, str)
    def receive_ai_message(self, model: str, message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏–∑ JavaScript.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ò–ò
            message: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            ai_message = {
                "role": "assistant",
                "content": message,
                "timestamp": datetime.now().isoformat(),
                "model": model
            }
            self._chat_history.append(ai_message)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Python –∫–æ–¥–∞
            self.message_received.emit(model, message)
            
        except Exception as e:
            self.error_occurred.emit(f"Error receiving AI message: {str(e)}")
    
    @Slot()
    def clear_chat(self):
        """–°–ª–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –∏–∑ JavaScript."""
        try:
            self._chat_history.clear()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–∞–º—è—Ç–∏
            if self._memory_manager:
                session = self._memory_manager.create_session("New GopiAI Chat")
                self._current_session_id = session
                print("üîÑ New memory session created")
            
            self.chat_cleared.emit()
            
        except Exception as e:
            self.error_occurred.emit(f"Error clearing chat: {str(e)}")
    
    @Slot(str)
    def change_model(self, model: str):
        """
        –°–ª–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ò–ò –∏–∑ JavaScript.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        """
        try:
            if model in ["claude-sonnet-4", "claude-opus-4"]:
                self._current_model = model
                self.model_changed.emit(model)
            else:
                self.error_occurred.emit(f"Unknown model: {model}")
        except Exception as e:
            self.error_occurred.emit(f"Error changing model: {str(e)}")
    
    @Slot(str)
    def log_error(self, error_message: str):
        """
        –°–ª–æ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑ JavaScript.
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        self.error_occurred.emit(f"JS Error: {error_message}")
    
    @Slot(result=str)
    def get_chat_history_json(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        try:
            return json.dumps(self._chat_history, ensure_ascii=False, indent=2)
        except Exception as e:
            self.error_occurred.emit(f"Error getting chat history: {str(e)}")
            return "[]"
    
    @Slot(result=str)
    def get_current_model(self) -> str:
        """
        –°–ª–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –ò–ò.
        
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        """
        return self._current_model
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Python –∫–æ–¥–∞
    
    def send_message_to_chat(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∏–∑ Python –∫–æ–¥–∞.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ Python –∫–æ–¥–∞
        pass
    
    def get_chat_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        return self._chat_history.copy()
    
    def set_model(self, model: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò –∏–∑ Python –∫–æ–¥–∞.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        if model in ["claude-sonnet-4", "claude-opus-4"]:
            self._current_model = model
            self.model_changed.emit(model)
    
    def export_chat(self, format_type: str = "json") -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
        
        Args:
            format_type: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('json', 'txt', 'md')
            
        Returns:
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            if format_type == "json":
                return json.dumps(self._chat_history, ensure_ascii=False, indent=2, default=str)
            
            elif format_type == "txt":
                lines = []
                for msg in self._chat_history:
                    role = "User" if msg["role"] == "user" else f"AI ({msg['model']})"
                    timestamp = msg.get("timestamp", "")
                    content = msg.get("content", "")
                    lines.append(f"[{timestamp}] {role}: {content}")
                return "\n".join(lines)
            
            elif format_type == "md":
                lines = ["# Chat History", ""]
                for msg in self._chat_history:
                    role = "**User**" if msg["role"] == "user" else f"**AI ({msg['model']})**"
                    timestamp = msg.get("timestamp", "")
                    content = msg.get("content", "")
                    lines.append(f"## {role} - {timestamp}")
                    lines.append(content)
                    lines.append("")
                return "\n".join(lines)
            
            else:
                return json.dumps(self._chat_history, ensure_ascii=False, indent=2, default=str)
                
        except Exception as e:
            self.error_occurred.emit(f"Error exporting chat: {str(e)}")
            return ""
    
    # ==============================================
    # –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ (TXTAI)
    # ==============================================
    
    @Slot(str, result=str)
    def enrich_message(self, message: str) -> str:
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        if not self._memory_manager:
            return message
        
        try:
            enriched = self._memory_manager.enrich_message(message)
            print(f"üß† Memory: enriched message ({len(enriched)} chars)")
            return enriched
        except Exception as e:
            print(f"‚ùå Memory enrichment error: {e}")
            return message
    
    @Slot(str, str, result=str)
    def save_chat_exchange(self, user_message: str, ai_response: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç—å
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
            
        Returns:
            –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (JSON)
        """
        if not self._memory_manager or not self._current_session_id:
            return json.dumps({"status": "error", "message": "Memory not available"})
        
        try:
            success = self._memory_manager.save_chat_exchange(
                self._current_session_id, 
                user_message, 
                ai_response
            )
            
            status = "success" if success else "error"
            print(f"üíæ Memory: saved exchange ({status})")
            
            return json.dumps({
                "status": status,
                "session_id": self._current_session_id,
                "saved": success
            })
            
        except Exception as e:
            print(f"‚ùå Memory save error: {e}")
            return json.dumps({"status": "error", "message": str(e)})
    
    @Slot(result=str)
    def start_new_chat_session(self) -> str:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        if not self._memory_manager:
            return json.dumps({"status": "error", "message": "Memory not available"})
        
        try:
            session = self._memory_manager.create_session("New GopiAI Chat")
            self._current_session_id = session
            
            return json.dumps({
                "status": "success",
                "session_id": self._current_session_id
            })
            
        except Exception as e:
            return json.dumps({"status": "error", "message": str(e)})
    
    @Slot(result=str)
    def get_memory_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏"""
        if not self._memory_manager:
            return json.dumps({"available": False})
        
        try:
            stats = self._memory_manager.get_stats()
            stats["available"] = True
            stats["current_session"] = self._current_session_id
            return json.dumps(stats)
            
        except Exception as e:
            return json.dumps({"available": False, "error": str(e)})
    
    @Slot(result=str) 
    def is_memory_available(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
        return json.dumps({"available": self._memory_manager is not None})
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Python –∫–æ–¥–∞
    
    def process_python_message(self, message: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Python –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ JavaScript"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JavaScript
            pass
        except Exception as e:
            self.error_occurred.emit(f"Error processing Python message: {str(e)}")
    
    
    # ==============================================
    # BROWSER AUTOMATION METHODS
    # ==============================================

    @Slot(str, result=str)
    def get_browser_automation_capabilities(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö browser automation —Ñ—É–Ω–∫—Ü–∏–π"""
        capabilities = {
            "available": True,
            "functions": [
                "navigate", "click", "type", "screenshot", "get_text", 
                "get_source", "scroll", "wait", "execute_script"
            ],
            "engine": "QWebEngineView",
            "version": "1.0"
        }
        print("üåê Bridge: browser automation capabilities requested")
        return json.dumps(capabilities, ensure_ascii=False)

    @Slot(str, str, result=str)
    def execute_browser_action(self, action: str, params: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ browser automation –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            params_dict = json.loads(params) if params else {}
            print(f"ü§ñ Bridge: executing browser action '{action}' with params: {params_dict}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π WebViewChatWidget
            widget = self._parent_widget
            
            if not widget or not hasattr(widget, 'web_view'):
                raise Exception("WebView not available")
            
            web_view = getattr(widget, 'web_view', None)
            if not web_view:
                raise Exception("WebView attribute not found")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if action == "navigate":
                url = params_dict.get("url", "")
                if url:
                    web_view.setUrl(url)
                    result_data = {"message": f"Navigated to {url}"}
                else:
                    raise Exception("URL parameter required for navigate action")
                    
            elif action == "get_url":
                current_url = web_view.page().url().toString()
                result_data = {"url": current_url}
                
            elif action == "get_title":
                title = web_view.page().title()
                result_data = {"title": title}
                
            elif action == "reload":
                web_view.reload()
                result_data = {"message": "Page reloaded"}
                
            elif action == "back":
                web_view.back()
                result_data = {"message": "Navigated back"}
                
            elif action == "forward":
                web_view.forward()
                result_data = {"message": "Navigated forward"}
                
            elif action == "execute_script":
                script = params_dict.get("script", "")
                if script:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤ WebView —Å callback —Å–æ–≥–ª–∞—Å–Ω–æ Qt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    def script_callback(result):
                        print(f"üìú JavaScript result: {result}")
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        
                    web_view.page().runJavaScript(script, script_callback)
                    result_data = {"message": f"Script executed: {script[:50]}...", "note": "Result will be available asynchronously"}
                else:
                    raise Exception("Script parameter required for execute_script action")
                    
            elif action == "screenshot":
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è screenshot
                result_data = {"message": "Screenshot functionality not implemented yet"}
                
            else:
                raise Exception(f"Unknown action: {action}")
            
            result = {
                "success": True,
                "action": action,
                "params": params_dict,
                "result": result_data,
                "timestamp": "2025-01-16T12:00:00Z"
            }
            
            return json.dumps(result, ensure_ascii=False)
            
        except Exception as e:
            error_result = {
                "success": False,
                "error": str(e),
                "action": action,
                "timestamp": "2025-01-16T12:00:00Z"
            }
            print(f"‚ùå Bridge: browser action error: {e}")
            return json.dumps(error_result, ensure_ascii=False)

    @Slot(result=str)
    def get_browser_page_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π WebViewChatWidget
            widget = self._parent_widget
            
            if widget and hasattr(widget, 'web_view'):
                web_view = getattr(widget, 'web_view', None)
                if web_view and web_view.page():
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    page = web_view.page()
                    url = page.url().toString() if page.url() else "about:blank"
                    title = page.title() if page.title() else "Untitled"
                    
                    page_info = {
                        "url": url,
                        "title": title,
                        "ready": True,
                        "loading": False,
                        "engine": "QWebEngineView",
                        "timestamp": "2025-01-16T12:00:00Z"
                    }
                else:
                    # –ï—Å–ª–∏ WebView –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    page_info = {
                        "url": "about:blank",
                        "title": "GopiAI Chat",
                        "ready": True,
                        "loading": False,
                        "engine": "QWebEngineView",
                        "timestamp": "2025-01-16T12:00:00Z"
                    }
            else:
                # –ï—Å–ª–∏ widget –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                page_info = {
                    "url": "about:blank",
                    "title": "GopiAI Chat",
                    "ready": True,
                    "loading": False,
                    "engine": "QWebEngineView",
                    "timestamp": "2025-01-16T12:00:00Z"
                }
            
            print(f"üìÑ Bridge: page info - {page_info['title']} ({page_info['url']})")
            return json.dumps(page_info, ensure_ascii=False)
            
        except Exception as e:
            error_info = {
                "error": str(e),
                "url": "about:blank",
                "timestamp": "2025-01-16T12:00:00Z"
            }
            print(f"‚ùå Bridge: page info error: {e}")
            return json.dumps(error_info, ensure_ascii=False)

    @Slot(str, str)
    def execute_script_async(self, action_id: str, script: str) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Qt
        """
        try:
            widget = self._parent_widget
            
            if not widget or not hasattr(widget, 'web_view'):
                raise Exception("WebView not available")
            
            web_view = getattr(widget, 'web_view', None)
            if not web_view:
                raise Exception("WebView attribute not found")
            
            print(f"üöÄ Bridge: executing async script with ID {action_id}")
            print(f"üìú Script: {script[:100]}...")
            
            # –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ Qt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            def script_result_callback(result):
                """
                Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ JavaScript
                –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ Qt runJavaScript –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                """
                try:
                    print(f"üì® Script callback for {action_id}: {result}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ Qt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JSON types, Date, ArrayBuffer
                    # –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: Function, Promise
                    result_data = {
                        "success": True,
                        "action_id": action_id,
                        "result": result,
                        "type": type(result).__name__,
                        "timestamp": "2025-01-16T12:00:00Z"
                    }
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ signal (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º callback)
                    result_json = json.dumps(result_data, ensure_ascii=False)
                    self.browser_action_completed.emit(action_id, "execute_script", result_json)
                    
                except Exception as e:
                    print(f"‚ùå Script callback error for {action_id}: {e}")
                    error_data = {
                        "success": False,
                        "action_id": action_id,
                        "error": str(e),
                        "timestamp": "2025-01-16T12:00:00Z"
                    }
                    error_json = json.dumps(error_data, ensure_ascii=False)
                    self.browser_action_completed.emit(action_id, "execute_script", error_json)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript —Å callback —Å–æ–≥–ª–∞—Å–Ω–æ Qt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # –ü—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: page.runJavaScript("document.title", [](const QVariant &v) { qDebug() << v.toString(); });
            web_view.page().runJavaScript(script, script_result_callback)
            
            print(f"‚úÖ Bridge: script {action_id} submitted for async execution")
            
        except Exception as e:
            print(f"‚ùå Bridge: execute_script_async error: {e}")
            error_data = {
                "success": False,
                "action_id": action_id,
                "error": str(e),
                "timestamp": "2025-01-16T12:00:00Z"
            }
            error_json = json.dumps(error_data, ensure_ascii=False)
            self.browser_action_completed.emit(action_id, "execute_script", error_json)

    @Slot(str, result=str)
    def browser_automation_result(self, result_data: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ browser automation"""
        try:
            result = json.loads(result_data)
            print(f"üìä Bridge: browser automation result received: {result}")
            return "OK"
        except Exception as e:
            print(f"‚ùå Bridge: result processing error: {e}")
            return f"ERROR: {e}"
        
    # ==============================================
    # CLAUDE TOOLS INTEGRATION METHODS
    # ==============================================
    
    @Slot(str, str, result=str)
    def execute_claude_tool(self, tool_name: str, params: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Claude tool —á–µ—Ä–µ–∑ ClaudeToolsHandler"""
        if self._claude_tools_handler:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º request_id
                request_id = self._claude_tools_handler._generate_request_id()
                
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params_dict = json.loads(params) if params else {}
                
                print(f"üîß Bridge: executing Claude tool '{tool_name}' with params: {params_dict}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if tool_name == "navigate_to_url":
                    return self._claude_tools_handler.navigate_to_url(params_dict.get('url', ''), request_id)
                elif tool_name == "get_current_url":
                    return self._claude_tools_handler.get_current_url()
                elif tool_name == "get_page_title":
                    return self._claude_tools_handler.get_page_title()
                elif tool_name == "execute_javascript":
                    return self._claude_tools_handler.execute_javascript(params_dict.get('script', ''), request_id)
                elif tool_name == "get_page_source":
                    return self._claude_tools_handler.get_page_source(request_id)
                elif tool_name == "wait_for_element":
                    return self._claude_tools_handler.wait_for_element(
                        params_dict.get('selector', ''), 
                        params_dict.get('timeout', 5000), 
                        request_id
                    )
                elif tool_name == "read_file":
                    return self._claude_tools_handler.read_file(params_dict.get('file_path', ''))
                elif tool_name == "write_file":
                    return self._claude_tools_handler.write_file(
                        params_dict.get('file_path', ''), 
                        params_dict.get('content', '')
                    )
                elif tool_name == "run_script":
                    return self._claude_tools_handler.run_script(params_dict.get('command', ''))
                elif tool_name == "search_memory":
                    return self._claude_tools_handler.search_memory(
                        params_dict.get('query', ''), 
                        params_dict.get('limit', 5)
                    )
                else:
                    error_result = {
                        "success": False,
                        "error": f"Unknown Claude tool: {tool_name}",
                        "available_tools": ["navigate_to_url", "get_current_url", "get_page_title", 
                                        "execute_javascript", "get_page_source", "wait_for_element",
                                        "read_file", "write_file", "run_script", "search_memory"]
                    }
                    return json.dumps(error_result)
                    
            except Exception as e:
                error_result = {
                    "success": False,
                    "error": str(e),
                    "tool_name": tool_name
                }
                print(f"‚ùå Bridge: Claude tool execution error: {e}")
                return json.dumps(error_result)
        else:
            error_result = {
                "success": False,
                "error": "ClaudeToolsHandler not available"
            }
            return json.dumps(error_result)
    
    @Slot(result=str)
    def get_claude_tools_list(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Claude tools"""
        if self._claude_tools_handler:
            return self._claude_tools_handler.get_available_tools()
        else:
            result = {
                "success": False,
                "error": "ClaudeToolsHandler not available"
            }
            return json.dumps(result)
    
    @Slot(result=str)
    def get_pending_claude_requests(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–∂–∏–¥–∞—é—â–∏—Ö Claude –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        if self._claude_tools_handler:
            return self._claude_tools_handler.get_pending_requests()
        else:
            result = {
                "success": False,
                "error": "ClaudeToolsHandler not available"
            }
            return json.dumps(result)