"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
"""
import requests
import json

def test_session_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON"""
    url = "http://127.0.0.1:8080/sessions"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ CreateSessionRequest
    data = {
        "title": f"GopiAI Chat Session Test",
        "project_context": "GopiAI-WebView",
        "tags": ["webview", "chat", "test"]
    }
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
        print(f"üì° POST {url}")
        print(f"üì¶ Data: {json.dumps(data, indent=2)}")
        
        response = requests.post(url, json=data, timeout=10)
        
        print(f"üìä Status: {response.status_code}")
        print(f"üìÑ Response: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ 127.0.0.1:8080")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_message_creation():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é"""
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    if not test_session_creation():
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    try:
        sessions_response = requests.get("http://127.0.0.1:8080/sessions", timeout=5)
        if sessions_response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
            return False
            
        sessions = sessions_response.json()
        if not sessions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return False
            
        session_id = sessions[0].get("session_id")
        if not session_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session_id")
            return False
            
        print(f"üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id: {session_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_url = f"http://127.0.0.1:8080/sessions/{session_id}/messages"
        message_data = {
            "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "role": "user",
            "metadata": {"test": True}
        }
        
        print(f"üì° POST {message_url}")
        print(f"üì¶ Data: {json.dumps(message_data, indent=2)}")
        
        message_response = requests.post(message_url, json=message_data, timeout=10)
        
        print(f"üìä Status: {message_response.status_code}")
        print(f"üìÑ Response: {message_response.text}")
        
        if message_response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {message_response.status_code}: {message_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ RAG API")
    print("=" * 50)
    
    session_ok = test_session_creation()
    message_ok = test_message_creation()
    
    print("=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ' if session_ok else '‚ùå'}")
    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if message_ok else '‚ùå'}")
    
    if session_ok and message_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API")