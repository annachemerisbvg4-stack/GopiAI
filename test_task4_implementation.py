#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Task 4:
Augment prompt with retrieved context

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –í—ã–∑–æ–≤ context = get_rag_context(user_message) 
2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —Å—Ö–µ–º–µ:
   system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
3. Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ offline RAG server
"""

import requests

def mock_get_rag_context_with_result(query: str, max_results: int = 3) -> str:
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç get_rag_context —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    return f"Agent configuration documentation example\nHow to set up CrewAI teams\nBest practices for multi-agent workflows"

def mock_get_rag_context_empty(query: str, max_results: int = 3) -> str:
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç get_rag_context –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (RAG server offline)"""
    return ""

def test_prompt_construction_with_context():
    """–¢–µ—Å—Ç 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print("üîç –¢–µ—Å—Ç 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    print("=" * 50)
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_message = "How to configure CrewAI agents?"
    system_preamble = "You are an intelligent AI assistant. Answer user questions accurately."
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
    context = mock_get_rag_context_with_result(user_message)
    print(f"‚úÖ 1. –í—ã–∑–æ–≤ context = get_rag_context(user_message) - –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    
    # –®–∞–≥ 2: –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ –¢–û–ß–ù–û–ô —Å—Ö–µ–º–µ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    final_prompt = system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
    
    print(f"‚úÖ 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —Å—Ö–µ–º–µ")
    print("\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    print("-" * 40)
    print(final_prompt)
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert system_preamble in final_prompt, "System preamble –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    assert "Relevant context:\n" + context in final_prompt, "RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"
    assert "User:\n" + user_message in final_prompt, "User message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"
    
    print("‚úÖ 3. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    print()

def test_prompt_construction_without_context():
    """–¢–µ—Å—Ç 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (fallback)"""
    print("üîç –¢–µ—Å—Ç 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (fallback)")
    print("=" * 50)
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_message = "What is machine learning?"
    system_preamble = "You are an intelligent AI assistant. Answer user questions accurately."
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø—É—Å—Ç–æ–π - —Å–µ—Ä–≤–µ—Ä offline)
    context = mock_get_rag_context_empty(user_message)
    print(f"‚úÖ 1. –í—ã–∑–æ–≤ context = get_rag_context(user_message) - –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç (RAG server offline)")
    
    # –®–∞–≥ 2: –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ –¢–û–ß–ù–û–ô —Å—Ö–µ–º–µ (—Å fallback)
    final_prompt = system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
    
    print(f"‚úÖ 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —Å—Ö–µ–º–µ (fallback)")
    print("\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    print("-" * 40)
    print(final_prompt)
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert system_preamble in final_prompt, "System preamble –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    assert "Relevant context:" not in final_prompt, "RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert "User:\n" + user_message in final_prompt, "User message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"
    
    print("‚úÖ 3. Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
    print()

def test_exact_requirement_implementation():
    """–¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    print("üîç –¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∏–∑ Task 4")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º message-processing —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    def message_processing_function(user_message: str, get_rag_context_func):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π RAG"""
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        system_preamble = "You are an AI assistant."
        
        # 1. Call context = get_rag_context(user_message) (skip if empty)
        context = get_rag_context_func(user_message)
        print(f"   üìû –í—ã–∑–æ–≤: context = get_rag_context(user_message)")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç' if context else '–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç'}")
        
        # 2. Build the final prompt:
        # system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
        final_prompt = system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
        print(f"   üîß –ü–æ—Å—Ç—Ä–æ–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —Å—Ö–µ–º–µ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        
        # 3. Continue with the usual LLM call (–∏–º–∏—Ç–∏—Ä—É–µ–º)
        print(f"   üöÄ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º LLM –≤—ã–∑–æ–≤–æ–º")
        
        return final_prompt
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print("–°–ª—É—á–∞–π A: RAG server online")
    result_with_context = message_processing_function("Test query", mock_get_rag_context_with_result)
    assert "Relevant context:" in result_with_context
    assert "User:\n" in result_with_context
    print("   ‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    
    print("\n–°–ª—É—á–∞–π B: RAG server offline") 
    result_without_context = message_processing_function("Test query", mock_get_rag_context_empty)
    assert "Relevant context:" not in result_without_context
    assert "User:\n" in result_without_context
    print("   ‚úÖ –ü—Ä–æ–º–ø—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (fallback)")
    
    print("\n‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ Task 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ—á–Ω–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print()

def test_real_rag_server_integration():
    """–¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º RAG —Å–µ—Ä–≤–µ—Ä–æ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
    print("üîç –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º RAG —Å–µ—Ä–≤–µ—Ä–æ–º")
    print("=" * 50)
    
    # –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_rag_context
    def real_get_rag_context(query: str, max_results: int = 3) -> str:
        try:
            response = requests.post(
                "http://127.0.0.1:5051/api/search",
                json={"query": query, "max_results": max_results},
                timeout=4
            )
            
            if response.status_code == 200:
                data = response.json()
                context_items = data.get("context", [])
                
                if isinstance(context_items, list):
                    return "\n".join(context_items)
                else:
                    return str(context_items)
            else:
                return ""
                
        except requests.exceptions.RequestException:
            return ""
        except Exception:
            return ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG —Å–µ—Ä–≤–µ—Ä–∞
    try:
        health_response = requests.get("http://127.0.0.1:5051/api/health", timeout=2)
        rag_available = health_response.status_code == 200
    except:
        rag_available = False
    
    if rag_available:
        print("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        
        test_query = "How to configure CrewAI agents?"
        context = real_get_rag_context(test_query)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
        system_preamble = "You are an AI assistant."
        final_prompt = system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + test_query
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {'–î–∞' if context else '–ù–µ—Ç'}")
        if context:
            print(f"üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìÑ –ü—Ä–µ–≤—å—é: {context[:100]}...")
        
        print(f"üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω ({len(final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
    else:
        print("‚ö†Ô∏è RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç–∏—Ä—É–µ–º fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
        
        test_query = "How to configure CrewAI agents?"
        context = real_get_rag_context(test_query)  # –í–µ—Ä–Ω–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
        system_preamble = "You are an AI assistant."
        final_prompt = system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + test_query
        
        assert context == "", "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
        assert "Relevant context:" not in final_prompt, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ"
        
        print("‚úÖ Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Task 4: Augment prompt with retrieved context")
    print("=" * 80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:")
    print("1. Call context = get_rag_context(user_message)")
    print("2. Build final prompt: system_preamble + context (if exists) + user_message")
    print("3. Keep original behaviour when RAG server is offline by falling back silently")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_prompt_construction_with_context()
    test_prompt_construction_without_context()  
    test_exact_requirement_implementation()
    test_real_rag_server_integration()
    
    print("=" * 80)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Task 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:")
    print()
    print("‚úì 1. –í message-processing —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è get_rag_context(user_message)")
    print("‚úì 2. –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ —Ç–æ—á–Ω–æ–π —Å—Ö–µ–º–µ:")
    print("     system_preamble + \"\\n\\n\" + (\"Relevant context:\\n\" + context + \"\\n\\n\" if context else \"\") + \"User:\\n\" + user_message")
    print("‚úì 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞ (silent fallback)")
    print("‚úì 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ chat_widget.py –∏ crewai_api_server.py")

if __name__ == "__main__":
    main()
