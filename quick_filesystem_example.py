#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–º–µ—Ä: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ GopiAI –º–æ–¥—É–ª—è–º
sys.path.append('GopiAI/GopiAI-CrewAI')

from crewai import Agent, Task, Crew
from tools.gopiai_integration import GopiAIFileSystemTool

def create_file_assistant():
    """–°–æ–∑–¥–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    filesystem_tool = GopiAIFileSystemTool()
    
    # –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant = Agent(
        role='File Assistant',
        goal='–ü–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏',
        backstory="""–Ø - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ. 
        –ú–æ–≥—É —á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã, —Ä–∞–±–æ—Ç–∞—Ç—å —Å JSON, CSV, 
        —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ä—Ö–∏–≤—ã, –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.""",
        tools=[filesystem_tool],
        verbose=True
    )
    
    return assistant

def run_example():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ...")
    assistant = create_file_assistant()
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏
    task = Task(
        description="""–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
        1. –°–æ–∑–¥–∞–π –ø–∞–ø–∫—É 'example_project' 
        2. –°–æ–∑–¥–∞–π –≤ –Ω–µ–π —Ñ–∞–π–ª 'info.txt' —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
        3. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª 'config.json' —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        4. –ü–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        5. –°–æ–∑–¥–∞–π —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ info.txt
        """,
        agent=assistant,
        expected_output="–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
    crew = Crew(
        agents=[assistant],
        tasks=[task],
        verbose=True
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
    result = crew.kickoff()
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

def direct_tool_example():
    """–ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –±–µ–∑ CrewAI"""
    
    print("\nüîß –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GopiAI FileSystem Tool")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    fs_tool = GopiAIFileSystemTool()
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    result = fs_tool._run(
        action="write", 
        path="example.txt",
        data="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞"
    )
    print(f"   {result}")
    
    print("2. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    result = fs_tool._run(action="read", path="/workspace/project/example.txt")
    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result[:50]}...")
    
    print("3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ...")
    result = fs_tool._run(action="info", path="/workspace/project/example.txt")
    print(f"   –†–∞–∑–º–µ—Ä: {result['size']} –±–∞–π—Ç")
    print(f"   –¢–∏–ø: {result['mime_type']}")
    
    print("4. –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞...")
    result = fs_tool._run(
        action="search_text", 
        path="/workspace/project/example.txt", 
        search_term="—Ñ–∞–π–ª–æ–≤–æ–π"
    )
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(result)}")
    
    print("5. –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞...")
    config = {
        "app_name": "GopiAI Example",
        "version": "1.0.0",
        "settings": {
            "debug": True,
            "max_files": 100
        }
    }
    result = fs_tool._run(
        action="write_json",
        path="/workspace/project/example_config.json",
        json_data=config
    )
    print(f"   {result}")
    
    print("6. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    result = fs_tool._run(action="backup", path="/workspace/project/example.txt")
    print(f"   {result}")
    
    # –û—á–∏—Å—Ç–∫–∞
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for file in ["example.txt", "example_config.json"]:
        try:
            fs_tool._run(action="delete", path=f"/workspace/project/{file}")
            print(f"   –£–¥–∞–ª–µ–Ω: {file}")
        except OSError as e:
            print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_files = [f for f in os.listdir("/workspace/project") if f.startswith("example.txt.backup_")]
    for backup_file in backup_files:
        try:
            os.remove(f"/workspace/project/{backup_file}")
            print(f"   –£–¥–∞–ª–µ–Ω: {backup_file}")
        except OSError as e:
            print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {backup_file}: {e}")

if __name__ == "__main__":
    print("üöÄ GopiAI - –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ")
    print("=" * 60)
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä
        print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:")
        print("1. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å CrewAI")
        print("2. –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ").strip()
        
        if choice == "1":
            run_example()
        elif choice == "2":
            direct_tool_example()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()