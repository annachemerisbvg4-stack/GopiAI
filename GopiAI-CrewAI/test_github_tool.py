#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç GithubSearchTool –∏–∑ CrewAI Toolkit
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

def test_github_search_tool():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º GithubSearchTool"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GithubSearchTool...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        print("üìù –î–æ–±–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ .env: GITHUB_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω")
        return False
    
    print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {github_token[:8]}...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º GithubSearchTool
        from tools.crewai_toolkit.tools.github_search_tool.github_search_tool import GithubSearchTool
        
        print("üì¶ GithubSearchTool –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        github_tool = GithubSearchTool()
        print("üõ†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä GithubSearchTool —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...")
        test_query = "python machine learning"
        
        # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        result = github_tool._run(query=test_query)
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(str(result)[:500])
        print("-" * 50)
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install PyGithub requests")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def test_crewai_integrator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à CrewAI Tools Integrator —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CrewAI Tools Integrator...")
    
    try:
        from tools.gopiai_integration.crewai_tools_integrator import get_crewai_tools_integrator
        
        integrator = get_crewai_tools_integrator()
        print("‚úÖ CrewAI Tools Integrator –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ)
        all_tools = integrator.available_tools
        print(f"üìä –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(all_tools)}")
        
        available_count = 0
        unavailable_count = 0
        
        for tool_name, tool_info in all_tools.items():
            if tool_info['available']:
                print(f"  ‚úÖ {tool_name} - {tool_info['description']}")
                available_count += 1
            else:
                print(f"  ‚ùå {tool_name} - –û–®–ò–ë–ö–ê: {tool_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                unavailable_count += 1
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}")
        print(f"  ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = integrator.tool_categories
        print(f"\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò ({len(categories)}):")
        for category, tools in categories.items():
            print(f"  üìÅ {category}: {tools}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º github_search —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
        print("\nüîç –ü–û–ò–°–ö GITHUB –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        github_tools = [name for name in all_tools.keys() if 'github' in name.lower()]
        if github_tools:
            print(f"  üìã –ù–∞–π–¥–µ–Ω—ã GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {github_tools}")
            for tool_name in github_tools:
                tool_info = all_tools[tool_name]
                status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if tool_info['available'] else f"‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({tool_info.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')})"
                print(f"    üîß {tool_name}: {status}")
        else:
            print("  ‚ö†Ô∏è GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –∫ GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        print("\nüîç –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–£–¢–ï–ô:")
        try:
            import os
            toolkit_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "tools", "crewai_toolkit", "tools")
            print(f"  üìÇ –ü—É—Ç—å –∫ toolkit: {toolkit_path}")
            
            if os.path.exists(toolkit_path):
                github_dirs = [d for d in os.listdir(toolkit_path) if 'github' in d.lower()]
                print(f"  üìã GitHub –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {github_dirs}")
            else:
                print(f"  ‚ùå –ü—É—Ç—å –∫ toolkit –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        print(f"üîß –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GithubSearchTool
    success1 = test_github_search_tool()
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    success2 = test_crewai_integrator()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç GithubSearchTool: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    print(f"   –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üî• GithubSearchTool –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
