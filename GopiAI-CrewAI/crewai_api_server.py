import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

#!/usr/bin/env python3
"""
üåê CrewAI API Server
–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ CrewAI –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ REST API
"""

from flask import Flask, request, jsonify
import os
import sys
import json
import time
import traceback
import uuid
import threading
from pathlib import Path
from functools import wraps
import hashlib
import secrets
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
HOST = "127.0.0.1"
PORT = 5050
DEBUG = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
REQUEST_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CONNECTION_TIMEOUT = 60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
TASK_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
TASK_CLEANUP_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—á–∏—Å—Ç–∫–∞–º–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á

# –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - API —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = os.environ.get('CREWAI_API_TOKEN', 'gopi-ai-default-token-2025')
RATE_LIMIT_REQUESTS = 100  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
RATE_LIMIT_WINDOW = {}     # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ IP

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
TASKS = {}
TASKS_LOCK = threading.Lock()

class TaskStatus:
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    TIMEOUT = "timeout"

class Task:
    def __init__(self, task_id, message):
        self.task_id = task_id
        self.message = message
        self.status = TaskStatus.PENDING
        self.result = None
        self.error = None
        self.created_at = datetime.now()
        self.started_at = None
        self.completed_at = None
        self.lock = threading.Lock()

    def start_processing(self):
        with self.lock:
            self.status = TaskStatus.PROCESSING
            self.started_at = datetime.now()

    def complete(self, result):
        with self.lock:
            self.status = TaskStatus.COMPLETED
            self.result = result
            self.completed_at = datetime.now()

    def fail(self, error):
        with self.lock:
            self.status = TaskStatus.FAILED
            self.error = str(error)
            self.completed_at = datetime.now()

    def to_dict(self):
        return {
            "task_id": self.task_id,
            "status": self.status,
            "message": self.message,
            "result": self.result,
            "error": self.error,
            "created_at": self.created_at.isoformat(),
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None
        }

def cleanup_old_tasks():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    while True:
        time.sleep(TASK_CLEANUP_INTERVAL)
        now = datetime.now()
        with TASKS_LOCK:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            for task_id in list(TASKS.keys()):
                task = TASKS[task_id]
                if task.completed_at and (now - task.completed_at) > timedelta(hours=1):
                    del TASKS[task_id]

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
cleanup_thread = threading.Thread(target=cleanup_old_tasks, daemon=True)
cleanup_thread.start()

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (GopiAI-CrewAI) –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# --- Diagnostic: Check llm_rotation_config.py content ---
try:
    llm_config_path = current_dir / "llm_rotation_config.py"
    if llm_config_path.exists():
        with open(llm_config_path, 'r', encoding='utf-8') as f:
            content = f.read()
        print(f"DEBUG: Content of llm_rotation_config.py at {llm_config_path}:\n{content[:500]}...") # Print first 500 chars
    else:
        print(f"DEBUG: llm_rotation_config.py not found at {llm_config_path}")
except Exception as e:
    print(f"DEBUG: Error reading llm_rotation_config.py: {e}")
# --- End Diagnostic ---

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ site-packages –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
venv_site_packages = current_dir / "crewai_env" / "Lib" / "site-packages"
if venv_site_packages.exists():
    sys.path.insert(0, str(venv_site_packages))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
API_STATUS = {
    "status": "initializing",
    "timestamp": time.time(),
    "crewai_available": False,
    "txtai_available": False
}

# –ò–º–ø–æ—Ä—Ç Smart Delegator (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ CrewAI)
try:
    from tools.gopiai_integration.smart_delegator import smart_delegator
    from tools.gopiai_integration.smart_delegator import crewai_available
    
    API_STATUS["status"] = "online"
    API_STATUS["crewai_available"] = crewai_available
    API_STATUS["txtai_available"] = hasattr(smart_delegator, 'rag_available') and smart_delegator.rag_available
    print("Smart Delegator —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Smart Delegator: {e}")
    print("API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    API_STATUS["status"] = "limited"
    smart_delegator = None

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    API_STATUS["timestamp"] = time.time()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>CrewAI API Server</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }}
            .container {{ max-width: 800px; margin: 0 auto; }}
            h1 {{ color: #333; }}
            .status {{ padding: 10px; border-radius: 5px; margin-bottom: 20px; }}
            .online {{ background-color: #d4edda; color: #155724; }}
            .limited {{ background-color: #fff3cd; color: #856404; }}
            .offline {{ background-color: #f8d7da; color: #721c24; }}
            .endpoint {{ background-color: #f8f9fa; padding: 15px; margin-bottom: 10px; border-radius: 5px; }}
            .method {{ display: inline-block; padding: 3px 6px; border-radius: 3px; font-size: 12px; margin-right: 10px; }}
            .get {{ background-color: #61affe; color: white; }}
            .post {{ background-color: #49cc90; color: white; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>CrewAI API Server</h1>
            
            <div class="status {API_STATUS['status']}">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {API_STATUS['status'].upper()}<br>
                <strong>CrewAI –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {'–î–∞' if API_STATUS['crewai_available'] else '–ù–µ—Ç'}<br>
                <strong>RAG-—Å–µ—Ä–≤–∏—Å (txtai) –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {'–î–∞' if API_STATUS['txtai_available'] else '–ù–µ—Ç'}<br>
                <strong>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(API_STATUS['timestamp']))}
            </div>
            
            <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã</h2>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/health</strong>
                <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/analyze</strong>
                <p>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏.</p>
                <p><em>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</em> {{ "message": "—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞" }}</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/process</strong>
                <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI Router –∏–ª–∏ CrewAI. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞.</p>
                <p><em>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</em> {{ "message": "—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞" }}</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/index_docs</strong>
                <p>–ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI –¥–ª—è RAG.</p>
            </div>
            
            <hr>
            <p><small>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}</small></p>
        </div>
    </body>
    </html>
    """
    
    return html

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    if 'smart_delegator' in globals() and hasattr(smart_delegator, 'rag_available'):
        API_STATUS["txtai_available"] = smart_delegator.rag_available
    else:
        API_STATUS["txtai_available"] = False
    API_STATUS["timestamp"] = time.time()
    return jsonify(API_STATUS)

@app.route('/api/analyze', methods=['POST'])
def analyze_request():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400
    
    try:
        message = data['message']
        analysis = smart_delegator.analyze_request(message)
        return jsonify(analysis)
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

def process_task(task_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        task = TASKS.get(task_id)
        if not task:
            return

        task.start_processing()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        analysis = smart_delegator.analyze_request(task.message)
        print(f"üìä [–ó–∞–¥–∞—á–∞ {task_id}] –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis.get('complexity', 0)}, —Ç–∏–ø={analysis.get('type', 'unknown')}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–º (—Ç—Ä–µ–±—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        is_complex = (
            analysis.get('complexity', 0) >= 3 or  # –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            analysis.get('type') in ['summary', 'memory', 'history'] or  # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏–ª–∏ –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
            '—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å' in task.message.lower() or  # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
            '–Ω–∞—à–∏ –±–µ—Å–µ–¥—ã' in task.message.lower() or    # –ó–∞–ø—Ä–æ—Å –æ –ø—Ä–æ—à–ª—ã—Ö –±–µ—Å–µ–¥–∞—Ö
            '–Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã' in task.message.lower()    # –ó–∞–ø—Ä–æ—Å –æ –ø—Ä–æ—à–ª—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö
        )
        
        if is_complex and not task.message.lower().startswith('!'):
            # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            thread = threading.Thread(
                target=process_complex_task,
                args=(task_id, analysis),
                daemon=True
            )
            thread.start()
            return
            
        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        response = smart_delegator.process_request(task.message)
        print(f"‚úÖ [–ó–∞–¥–∞—á–∞ {task_id}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        task.complete({
            "response": response,
            "processed_with_crewai": analysis.get("requires_crewai", False),
            "analysis": analysis
        })
        
    except Exception as e:
        print(f"‚ùå [–ó–∞–¥–∞—á–∞ {task_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        traceback.print_exc()
        task.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

def process_complex_task(task_id, analysis):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    task = TASKS.get(task_id)
    if not task:
        return
        
    try:
        print(f"üîç [–ó–∞–¥–∞—á–∞ {task_id}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = smart_delegator.process_request(task.message)
        
        print(f"‚úÖ [–ó–∞–¥–∞—á–∞ {task_id}] –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        task.complete({
            "response": response,
            "processed_with_crewai": analysis.get("requires_crewai", False),
            "analysis": analysis
        })
        
    except Exception as e:
        print(f"‚ùå [–ó–∞–¥–∞—á–∞ {task_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        traceback.print_exc()
        task.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.route('/api/process', methods=['POST'])
def process_request():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ CrewAI"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400
    
    try:
        message = data['message']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task_id = str(uuid.uuid4())
        task = Task(task_id, message)
        
        with TASKS_LOCK:
            TASKS[task_id] = task
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=process_task,
            args=(task_id,),
            daemon=True
        )
        thread.start()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID –∑–∞–¥–∞—á–∏
        return jsonify({
            "task_id": task_id,
            "status": task.status,
            "message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "created_at": task.created_at.isoformat()
        })
        
    except Exception as e:
        traceback.print_exc()
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}",
            "status": TaskStatus.FAILED
        }), 500

@app.route('/api/task/<task_id>', methods=['GET'])
def get_task_status(task_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    task = TASKS.get(task_id)
    if not task:
        return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404
    
    task_dict = task.to_dict()
    
    # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    if task.status in [TaskStatus.COMPLETED, TaskStatus.FAILED, TaskStatus.TIMEOUT]:
        return jsonify(task_dict)
    
    # –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
    return jsonify({
        "task_id": task_id,
        "status": task.status,
        "message": task.message,
        "created_at": task.created_at.isoformat(),
        "started_at": task.started_at.isoformat() if task.started_at else None
    })

@app.route('/api/process/sync', methods=['POST'])
def process_request_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400
    
    try:
        message = data['message']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        analysis = smart_delegator.analyze_request(message)
        print(f"üìä [–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å] –ê–Ω–∞–ª–∏–∑: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis.get('complexity', 0)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = smart_delegator.process_request(message)
        
        print(f"‚úÖ [–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return jsonify({
            "response": response,
            "processed_with_crewai": analysis.get("requires_crewai", False),
            "analysis": analysis,
            "status": TaskStatus.COMPLETED
        })
        
    except Exception as e:
        traceback.print_exc()
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            "status": TaskStatus.FAILED
        }), 500
        return jsonify({"error": str(e)}), 500

@app.route('/api/index_docs', methods=['POST'])
def index_documentation():
    """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if not hasattr(smart_delegator, "index_documentation"):
            return jsonify({
                "success": False,
                "error": "–§—É–Ω–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç txtai)"
            })
            
        try:
            result = smart_delegator.index_documentation()
            return jsonify({"success": result})
        except Exception as inner_e:
            traceback.print_exc()
            return jsonify({
                "success": False,
                "error": str(inner_e)
            })
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    print(f"Starting CrewAI API server at http://{HOST}:{PORT}")
    print("This server should be run from the CrewAI environment (crewai_env)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import sys
    print(f"Using Python: {sys.executable}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        import crewai
        print("CrewAI module is available")
    except ImportError:
        print("CrewAI module is NOT available")
    
    try:
        import langchain
        print("Langchain module is available")
    except ImportError:
        print("–ú–æ–¥—É–ª—å langchain –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    from werkzeug.serving import WSGIRequestHandler
    WSGIRequestHandler.timeout = REQUEST_TIMEOUT
    
    print(f"Request timeout: {REQUEST_TIMEOUT} seconds")
    print(f"Connection timeout: {CONNECTION_TIMEOUT} seconds")
    
    app.run(host=HOST, port=PORT, debug=DEBUG, threaded=True, request_handler=WSGIRequestHandler)
