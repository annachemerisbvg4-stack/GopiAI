import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

#!/usr/bin/env python3
"""
üåê CrewAI API Server
–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ CrewAI –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ REST API
"""

from flask import Flask, request, jsonify
import os
import sys
import json
import time
import traceback
from pathlib import Path
from functools import wraps
import hashlib
import secrets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
HOST = "127.0.0.1"
PORT = 5050
DEBUG = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
REQUEST_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CONNECTION_TIMEOUT = 60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - API —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = os.environ.get('CREWAI_API_TOKEN', 'gopi-ai-default-token-2025')
RATE_LIMIT_REQUESTS = 100  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
RATE_LIMIT_WINDOW = {}     # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ IP

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (GopiAI-CrewAI) –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# --- Diagnostic: Check llm_rotation_config.py content ---
try:
    llm_config_path = current_dir / "llm_rotation_config.py"
    if llm_config_path.exists():
        with open(llm_config_path, 'r', encoding='utf-8') as f:
            content = f.read()
        print(f"DEBUG: Content of llm_rotation_config.py at {llm_config_path}:\n{content[:500]}...") # Print first 500 chars
    else:
        print(f"DEBUG: llm_rotation_config.py not found at {llm_config_path}")
except Exception as e:
    print(f"DEBUG: Error reading llm_rotation_config.py: {e}")
# --- End Diagnostic ---

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ site-packages –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
venv_site_packages = current_dir / "crewai_env" / "Lib" / "site-packages"
if venv_site_packages.exists():
    sys.path.insert(0, str(venv_site_packages))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
API_STATUS = {
    "status": "initializing",
    "timestamp": time.time(),
    "crewai_available": False,
    "txtai_available": False
}

# –ò–º–ø–æ—Ä—Ç Smart Delegator (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ CrewAI)
try:
    from tools.gopiai_integration.smart_delegator import smart_delegator
    from tools.gopiai_integration.smart_delegator import crewai_available, is_rag_service_available
    API_STATUS["status"] = "online"
    API_STATUS["crewai_available"] = crewai_available
    API_STATUS["txtai_available"] = is_rag_service_available() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG-—Å–µ—Ä–≤–∏—Å–∞
    print("Smart Delegator —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Smart Delegator: {e}")
    print("API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    API_STATUS["status"] = "limited"
    smart_delegator = None

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    API_STATUS["timestamp"] = time.time()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>CrewAI API Server</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }}
            .container {{ max-width: 800px; margin: 0 auto; }}
            h1 {{ color: #333; }}
            .status {{ padding: 10px; border-radius: 5px; margin-bottom: 20px; }}
            .online {{ background-color: #d4edda; color: #155724; }}
            .limited {{ background-color: #fff3cd; color: #856404; }}
            .offline {{ background-color: #f8d7da; color: #721c24; }}
            .endpoint {{ background-color: #f8f9fa; padding: 15px; margin-bottom: 10px; border-radius: 5px; }}
            .method {{ display: inline-block; padding: 3px 6px; border-radius: 3px; font-size: 12px; margin-right: 10px; }}
            .get {{ background-color: #61affe; color: white; }}
            .post {{ background-color: #49cc90; color: white; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>CrewAI API Server</h1>
            
            <div class="status {API_STATUS['status']}">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {API_STATUS['status'].upper()}<br>
                <strong>CrewAI –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {'–î–∞' if API_STATUS['crewai_available'] else '–ù–µ—Ç'}<br>
                <strong>RAG-—Å–µ—Ä–≤–∏—Å (txtai) –¥–æ—Å—Ç—É–ø–µ–Ω:</strong> {'–î–∞' if API_STATUS['txtai_available'] else '–ù–µ—Ç'}<br>
                <strong>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(API_STATUS['timestamp']))}
            </div>
            
            <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã</h2>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/health</strong>
                <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/analyze</strong>
                <p>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏.</p>
                <p><em>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</em> {{ "message": "—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞" }}</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/process</strong>
                <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI Router –∏–ª–∏ CrewAI. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞.</p>
                <p><em>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</em> {{ "message": "—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞" }}</p>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/index_docs</strong>
                <p>–ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI –¥–ª—è RAG.</p>
            </div>
            
            <hr>
            <p><small>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}</small></p>
        </div>
    </body>
    </html>
    """
    
    return html

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    API_STATUS["txtai_available"] = is_rag_service_available() if 'is_rag_service_available' in globals() else False
    API_STATUS["timestamp"] = time.time()
    return jsonify(API_STATUS)

@app.route('/api/analyze', methods=['POST'])
def analyze_request():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400
    
    try:
        message = data['message']
        analysis = smart_delegator.analyze_request(message)
        return jsonify(analysis)
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/api/process', methods=['POST'])
def process_request():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ CrewAI"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400
    
    try:
        message = data['message']
        # –ü–∞—Ä–∞–º–µ—Ç—Ä force_crewai –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç.–∫. —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
        # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CrewAI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
        # force_crewai = data.get('force_crewai', False)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            analysis = smart_delegator.analyze_request(message)
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis.get('complexity', 0)}, —Ç–∏–ø={analysis.get('type', 'unknown')}, CrewAI={analysis.get('requires_crewai', False)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥,
            # –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # Smart Delegator —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
            response = smart_delegator.process_request(message)
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            return jsonify({
                "response": response,
                "processed_with_crewai": analysis.get("requires_crewai", False),
                "analysis": analysis  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            })
        except Exception as inner_e:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
            traceback.print_exc()
            return jsonify({
                "error_message": f"[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò] –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(inner_e)}",
                "processed_with_crewai": False,
                "error": str(inner_e)
            })
            
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/api/index_docs', methods=['POST'])
def index_documentation():
    """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
    if not smart_delegator:
        return jsonify({"error": "Smart Delegator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if not hasattr(smart_delegator, "index_documentation"):
            return jsonify({
                "success": False,
                "error": "–§—É–Ω–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç txtai)"
            })
            
        try:
            result = smart_delegator.index_documentation()
            return jsonify({"success": result})
        except Exception as inner_e:
            traceback.print_exc()
            return jsonify({
                "success": False,
                "error": str(inner_e)
            })
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    print(f"Starting CrewAI API server at http://{HOST}:{PORT}")
    print("This server should be run from the CrewAI environment (crewai_env)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import sys
    print(f"Using Python: {sys.executable}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        import crewai
        print("CrewAI module is available")
    except ImportError:
        print("CrewAI module is NOT available")
    
    try:
        import langchain
        print("Langchain module is available")
    except ImportError:
        print("–ú–æ–¥—É–ª—å langchain –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    from werkzeug.serving import WSGIRequestHandler
    WSGIRequestHandler.timeout = REQUEST_TIMEOUT
    
    print(f"Request timeout: {REQUEST_TIMEOUT} seconds")
    print(f"Connection timeout: {CONNECTION_TIMEOUT} seconds")
    
    app.run(host=HOST, port=PORT, debug=DEBUG, threaded=True, request_handler=WSGIRequestHandler)
