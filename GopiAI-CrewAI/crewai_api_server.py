# --- START OF FILE crewai_api_server.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ---

import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

import os
import sys
import json
import time
import traceback
import uuid
import threading
from pathlib import Path
from datetime import datetime, timedelta

from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤ ---
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# ### –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ###
from rag_system import get_rag_system
from tools.gopiai_integration.smart_delegator import SmartDelegator

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ---
HOST = "127.0.0.1"
PORT = 5051  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 5050 –Ω–∞ 5051 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
DEBUG = False
TASK_CLEANUP_INTERVAL = 300

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á ---
TASKS = {}
TASKS_LOCK = threading.Lock()

class TaskStatus:
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

class Task:
    def __init__(self, task_id, message, metadata):
        self.task_id = task_id
        self.message = message
        self.metadata = metadata
        self.status = TaskStatus.PENDING
        self.result = None
        self.error = None
        self.created_at = datetime.now()
        self.started_at = None
        self.completed_at = None
        self.lock = threading.Lock()

    def start_processing(self):
        with self.lock:
            self.status = TaskStatus.PROCESSING
            self.started_at = datetime.now()

    def complete(self, result):
        with self.lock:
            self.status = TaskStatus.COMPLETED
            self.result = result
            self.completed_at = datetime.now()

    def fail(self, error):
        with self.lock:
            self.status = TaskStatus.FAILED
            self.error = str(error)
            self.completed_at = datetime.now()

    def to_dict(self):
        return {
            "task_id": self.task_id, "status": self.status, "message": self.message,
            "result": self.result, "error": self.error,
            "created_at": self.created_at.isoformat(),
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None
        }

def cleanup_old_tasks():
    while True:
        time.sleep(TASK_CLEANUP_INTERVAL)
        now = datetime.now()
        with TASKS_LOCK:
            for task_id in list(TASKS.keys()):
                if TASKS[task_id].completed_at and (now - TASKS[task_id].completed_at) > timedelta(hours=1):
                    del TASKS[task_id]

cleanup_thread = threading.Thread(target=cleanup_old_tasks, daemon=True)
cleanup_thread.start()

app = Flask(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
try:
    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º")
    logger.info("--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ---")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RAGSystem
    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—ã–∑–æ–≤ get_rag_system()")
    rag_system_instance = get_rag_system()
    print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] RAGSystem –ø–æ–ª—É—á–µ–Ω: {rag_system_instance is not None}")
    
    # 2. –°–æ–∑–¥–∞–µ–º SmartDelegator, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –Ω–∞—à –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RAG
    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°–æ–∑–¥–∞–Ω–∏–µ SmartDelegator")
    smart_delegator_instance = SmartDelegator(rag_system=rag_system_instance)
    print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] SmartDelegator —Å–æ–∑–¥–∞–Ω: {smart_delegator_instance is not None}")
    
    logger.info("‚úÖ Smart Delegator –∏ RAG System —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    SERVER_IS_READY = True
    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] SERVER_IS_READY = True")
except Exception as e:
    print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –°–ï–†–í–ï–†–ê: {e}", exc_info=True)
    rag_system_instance = None
    smart_delegator_instance = None
    SERVER_IS_READY = False
    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] SERVER_IS_READY = False")

# --- –†–æ—É—Ç—ã Flask ---

@app.route('/api/health', methods=['GET'])
def health_check():
    rag_status = "OK" if rag_system_instance and rag_system_instance.embeddings else "NOT INITIALIZED"
    return jsonify({
        "status": "online" if SERVER_IS_READY else "limited_mode",
        "rag_status": rag_status,
        "indexed_documents": rag_system_instance.embeddings.count() if rag_status == "OK" else 0
    })

def process_task(task_id: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    task = TASKS.get(task_id)
    if not task: return
        
    if not smart_delegator_instance:
        task.fail("Smart Delegator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    try:
        task.start_processing()
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{task.message}'")
        
        response_data = smart_delegator_instance.process_request(
            message=task.message,
            metadata=task.metadata
        )
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        task.complete(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}", exc_info=True)
        task.fail(str(e))

@app.route('/api/process', methods=['POST'])
def process_request():
    if not SERVER_IS_READY:
        return jsonify({"error": "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."}), 503

    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"}), 400

    message = data.get('message')
    metadata = data.get('metadata', {})

    task_id = str(uuid.uuid4())
    task = Task(task_id, message, metadata)

    with TASKS_LOCK:
        TASKS[task_id] = task

    thread = threading.Thread(target=process_task, args=(task_id,), daemon=True)
    thread.start()

    return jsonify({
        "task_id": task_id,
        "status": TaskStatus.PENDING,
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        "created_at": task.created_at.isoformat()
    })

@app.route('/api/task/<task_id>', methods=['GET'])
def get_task_status(task_id):
    task = TASKS.get(task_id)
    if not task:
        return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404
    return jsonify(task.to_dict())

if __name__ == '__main__':
    print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] __main__ –±–ª–æ–∫, SERVER_IS_READY = {SERVER_IS_READY}")
    if SERVER_IS_READY:
        print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{HOST}:{PORT}")
        logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://{HOST}:{PORT}")
        try:
            print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—ã–∑–æ–≤ app.run()")
            app.run(host=HOST, port=PORT, debug=DEBUG)
            print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ—Å–ª–µ app.run() - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è")
        except Exception as e:
            print(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flask: {e}")
    else:
        print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        sys.exit(1)

# --- END OF FILE crewai_api_server.py ---