#!/usr/bin/env python3
"""
ü§ó HuggingFace Integration Test –¥–ª—è GopiAI-CrewAI
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))
sys.path.append(str(current_dir / 'tools'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv(current_dir.parent / '.env', override=True)

try:
    from gopiai_integration.huggingface_tools import GopiAIHuggingFaceTool
    print("‚úÖ HuggingFace Tool –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_huggingface_api_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ HuggingFace"""
    print("üîë === –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ê ===")
    
    api_key = os.getenv('HUGGINGFACE_API_KEY')
    if not api_key:
        print("‚ùå HUGGINGFACE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    if api_key == "hf_your_huggingface_api_key_here":
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ)")
        return False
    
    if not api_key.startswith('hf_'):
        print(f"‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ HuggingFace –∫–ª—é—á: {api_key[:10]}...")
        print("üí° HuggingFace –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'hf_'")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    return True

def test_popular_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("ü§ñ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô ===")
    
    hf_tool = GopiAIHuggingFaceTool()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        {
            "name": "DialoGPT (–¥–∏–∞–ª–æ–≥–∏)",
            "model": "microsoft/DialoGPT-large",
            "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "task_type": "conversational",
            "max_length": 50
        },
        {
            "name": "FLAN-T5 (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)",
            "model": "google/flan-t5-small",
            "message": "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä'",
            "task_type": "text-generation",
            "max_length": 100
        },
        {
            "name": "OPT (–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)",
            "model": "facebook/opt-350m",
            "message": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∏—Ö –ø—Ä–æ –∫–æ—Ç–∞",
            "task_type": "text-generation",
            "max_length": 80
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\\n{i}. –¢–µ—Å—Ç: {test_case['name']}")
        print(f"   –ú–æ–¥–µ–ª—å: {test_case['model']}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {test_case['message']}")
        
        try:
            result = hf_tool.run(
                message=test_case['message'],
                model_name=test_case['model'],
                task_type=test_case['task_type'],
                max_length=test_case['max_length'],
                temperature=0.7
            )
            
            if "‚ùå" in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result}")
                results.append(False)
            elif "‚è≥" in result:
                print(f"   ‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {result}")
                results.append(True)  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            elif "‚ö†Ô∏è" in result:
                print(f"   ‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω: {result}")
                results.append(True)  # –≠—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            else:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result[:100]}...")
                results.append(True)
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append(False)
    
    success_rate = sum(results) / len(results) * 100
    print(f"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ ({success_rate:.1f}%)")
    
    return success_rate > 50  # –ë–æ–ª–µ–µ 50% —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

def test_auto_model_selection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    print("\\nüéØ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –ú–û–î–ï–õ–ò ===")
    
    hf_tool = GopiAIHuggingFaceTool()
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",  # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å DialoGPT
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",  # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å CodeBERT
        "–°—É–º–º–∏—Ä—É–π: –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",  # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",  # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å QA –º–æ–¥–µ–ª—å
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\\n{i}. –ó–∞–ø—Ä–æ—Å: {message}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            result = hf_tool.run(
                message=message,
                model_name="auto",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
                task_type="text-generation",
                max_length=100,
                temperature=0.7
            )
            
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:80]}...")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_caching():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\\nüíæ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ï–®–ê ===")
    
    hf_tool = GopiAIHuggingFaceTool()
    
    # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
    test_message = "–°–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ '–ü—Ä–∏–≤–µ—Ç'"
    
    print("1. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≤ API):")
    result1 = hf_tool.run(test_message, "facebook/opt-350m", "text-generation", 50, 0.7)
    print(f"   {result1[:50]}...")
    
    print("\\n2. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞):")
    result2 = hf_tool.run(test_message, "facebook/opt-350m", "text-generation", 50, 0.7)
    print(f"   {result2[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞
    if "üíæ [–ö–µ—à]" in result2:
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print("‚ö†Ô∏è –ö–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–µ—É–¥–∞—á–Ω—ã–º)")
        return False

def show_usage_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    
    hf_tool = GopiAIHuggingFaceTool()
    stats = hf_tool.get_usage_stats()
    print(stats)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ó === HUGGINGFACE INTEGRATION TEST ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not test_huggingface_api_key():
        print("\\n‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ!")
        print("üí° –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á: https://huggingface.co/settings/tokens")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    models_work = test_popular_models()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    test_auto_model_selection()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞
    test_caching()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    show_usage_stats()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    if models_work:
        print("‚úÖ HuggingFace –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –æ—Ç–≤–µ—á–∞—é—Ç")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        print("\\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ CrewAI!")
    else:
        print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 20 —Å–µ–∫)")
        print("   - –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (1000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        print("\\nüîÑ –°–∏—Å—Ç–µ–º–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ fallback")

if __name__ == "__main__":
    main()