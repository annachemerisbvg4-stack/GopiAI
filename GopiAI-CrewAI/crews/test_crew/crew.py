#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π crew –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CrewAI —Å GopiAI
"""

import os
import sys
from typing import Dict, Any
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ GopiAI –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent.parent))

from crewai import Agent, Task, Crew, Process
import yaml

class TestCrew:
    """–¢–µ—Å—Ç–æ–≤—ã–π crew –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CrewAI"""
    
    def __init__(self):
        self.crew_dir = Path(__file__).parent
        self.agents_config = self._load_yaml("agents.yaml")
        self.tasks_config = self._load_yaml("tasks.yaml")
        
    def _load_yaml(self, filename: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.crew_dir / filename, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    
    def create_agents(self) -> Dict[str, Agent]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        agents = {}
        
        for agent_name, config in self.agents_config.items():
            agents[agent_name] = Agent(
                role=config['role'],
                goal=config['goal'],
                backstory=config['backstory'],
                verbose=config.get('verbose', True),
                allow_delegation=config.get('allow_delegation', False)
            )
            
        return agents
    
    def create_tasks(self, agents: Dict[str, Agent], inputs: Dict[str, Any]) -> list[Task]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        tasks = []
        task_objects = {}
        
        for task_name, config in self.tasks_config.items():
            # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = config['description'].format(**inputs)
            expected_output = config['expected_output'].format(**inputs)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent = agents[config['agent']]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task = Task(
                description=description,
                expected_output=expected_output,
                agent=agent
            )
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á)
            if 'context' in config:
                context_tasks = []
                for context_task_name in config['context']:
                    if context_task_name in task_objects:
                        context_tasks.append(task_objects[context_task_name])
                task.context = context_tasks
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
            if 'output_file' in config:
                output_file = config['output_file'].format(**inputs)
                task.output_file = output_file
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
                output_dir = Path(output_file).parent
                output_dir.mkdir(parents=True, exist_ok=True)
            
            tasks.append(task)
            task_objects[task_name] = task
            
        return tasks
    
    def create_crew(self, agents: Dict[str, Agent], tasks: list[Task]) -> Crew:
        """–°–æ–∑–¥–∞–Ω–∏–µ crew"""
        return Crew(
            agents=list(agents.values()),
            tasks=tasks,
            process=Process.sequential,
            verbose=True
        )
    
    def run(self, topic: str = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç") -> str:
        """–ó–∞–ø—É—Å–∫ crew —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ crew –¥–ª—è —Ç–µ–º—ã: {topic}")
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        inputs = {"topic": topic}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
        agents = self.create_agents()
        tasks = self.create_tasks(agents, inputs)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ crew
        crew = self.create_crew(agents, tasks)
        result = crew.kickoff(inputs=inputs)
        
        print(f"‚úÖ Crew –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
        return str(result)

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_crew = TestCrew()
    result = test_crew.run("CrewAI –∏ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
