#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CommandExecutor
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_command_executor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º CommandExecutor –Ω–∞–ø—Ä—è–º—É—é"""
    
    try:
        from tools.gopiai_integration.command_executor import CommandExecutor
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CommandExecutor...")
        executor = CommandExecutor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∫–æ–º–∞–Ω–¥–æ–π
        test_response = """
        –ö–æ–Ω–µ—á–Ω–æ! –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É TEST_EXECUTION –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        ```json
        {'tool': 'terminal', 'params': {'command': 'mkdir C:\\\\Users\\\\crazy\\\\GOPI_AI_MODULES\\\\TEST_EXECUTION'}}
        ```
        
        –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
        """
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Gemini...")
        commands = executor.parse_gemini_response(test_response)
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(commands)}")
        
        for i, cmd in enumerate(commands):
            print(f"–ö–æ–º–∞–Ω–¥–∞ {i+1}: {cmd}")
        
        if commands:
            print("‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
            results = executor.execute_commands(commands)
            
            for i, result in enumerate(results):
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã {i+1}:")
                print(f"  –£—Å–ø–µ—Ö: {result.get('success', False)}")
                print(f"  –í—ã–≤–æ–¥: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
                if not result.get('success', False):
                    print(f"  –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞
        test_folder = r"C:\Users\crazy\GOPI_AI_MODULES\TEST_EXECUTION"
        if os.path.exists(test_folder):
            print("‚úÖ –£–°–ü–ï–•! –ü–∞–ø–∫–∞ TEST_EXECUTION –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê! –ü–∞–ø–∫–∞ TEST_EXECUTION –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞...")
        updated_response, command_results = executor.process_gemini_response(test_response)
        
        print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(updated_response)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CommandExecutor: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_smart_delegator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º SmartDelegator —Å CommandExecutor"""
    
    try:
        from tools.gopiai_integration.smart_delegator import SmartDelegator
        
        print("\nüß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SmartDelegator...")
        delegator = SmartDelegator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CommandExecutor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if hasattr(delegator, 'command_executor') and delegator.command_executor:
            print("‚úÖ CommandExecutor —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SmartDelegator!")
        else:
            print("‚ùå CommandExecutor –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SmartDelegator!")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SmartDelegator: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CommandExecutor...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: CommandExecutor
    success1 = test_command_executor()
    
    # –¢–µ—Å—Ç 2: SmartDelegator
    success2 = test_smart_delegator()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"CommandExecutor: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"SmartDelegator: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
    
    print("=" * 50)
