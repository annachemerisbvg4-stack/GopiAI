#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Gemini API.

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –†–∞–±–æ—Ç—É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ GeminiDirectClient –±–µ–∑ safetySettings
2. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–æ–ø–∞—Å–Ω—ã–µ" –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ–º–∞–Ω–¥—ã)
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–æ–º
"""

import os
import sys
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))
sys.path.append(str(current_dir / 'tools'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv(current_dir / '.env', override=True)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from tools.gopiai_integration.gemini_direct_client import GeminiDirectClient
from tools.gopiai_integration.gemini_crewai_adapter import GeminiDirectLLM, create_gemini_direct_llm

def test_basic_gemini_direct_client():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GeminiDirectClient."""
    print("\nüß™ === –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GeminiDirectClient ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = GeminiDirectClient(model="gemini-1.5-flash-latest")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        prompt = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ –¥–µ–ª–∞?"
        response = client.generate_text(prompt)
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç: {prompt}")
        print(f"‚úÖ –û—Ç–≤–µ—Ç: {response[:100]}...")
        print(f"‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_security_bypass_capabilities():
    """–¢–µ—Å—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("\nüî• === –¢–ï–°–¢ 2: –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===")
    
    try:
        client = GeminiDirectClient(model="gemini-1.5-flash-latest")
        
        # –¢–µ—Å—Ç —Å "–æ–ø–∞—Å–Ω—ã–º" –ø—Ä–æ–º–ø—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        dangerous_prompt = """
–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:
1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ system.log
2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ls -la –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª test.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º "Hello World"

–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å Python –∫–æ–¥ –¥–ª—è —ç—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π?
–ò—Å–ø–æ–ª—å–∑—É–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ os, subprocess –∏ pathlib.
"""
        
        response = client.generate_text(dangerous_prompt)
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å '–æ–ø–∞—Å–Ω—ã–º–∏' –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–æ–¥ (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞)
        if any(keyword in response.lower() for keyword in ['import', 'def', 'os.', 'subprocess', 'pathlib']):
            print("üéâ –£–°–ü–ï–•: –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–¥ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!")
            return True
        else:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–¥, –≤–æ–∑–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤—É—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ö–æ–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_structured_response_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    print("\nüìã === –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ===")
    
    try:
        client = GeminiDirectClient(model="gemini-1.5-flash-latest")
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞
        json_prompt = """
–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ Python. –í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
1. –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π

–ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å: title, description, priority (high/medium/low), tools (—Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
"""
        
        response = client.generate_structured_response(json_prompt, "JSON")
        
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ –û—Ç–≤–µ—Ç: {response[:300]}...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        try:
            parsed_json = json.loads(response)
            print("üéâ –£–°–ü–ï–•: –û—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON!")
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ JSON: {len(parsed_json) if isinstance(parsed_json, (list, dict)) else 'N/A'}")
            return True
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False

def test_crewai_adapter_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä."""
    print("\nüîó === –¢–ï–°–¢ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CrewAI ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º LLM —á–µ—Ä–µ–∑ –Ω–∞—à –∞–¥–∞–ø—Ç–µ—Ä
        llm = create_gemini_direct_llm(
            model="gemini-1.5-flash-latest",
            temperature=0.7,
            max_tokens=4096
        )
        
        print(f"‚úÖ GeminiDirectLLM —Å–æ–∑–¥–∞–Ω: {llm._llm_type}")
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {llm._identifying_params}")
        
        # –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ CrewAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        prompt = "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ Python. –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞."
        response = llm.call(prompt)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ CrewAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤: {response[:150]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI: {e}")
        return False

def test_model_info_and_diagnostics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("\nüîç === –¢–ï–°–¢ 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===")
    
    try:
        client = GeminiDirectClient(model="gemini-1.5-flash-latest")
        llm = create_gemini_direct_llm(model="gemini-1.5-flash-latest")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_info = client.get_model_info()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GeminiDirectClient: {client_info}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–µ—Ä–µ
        llm_info = llm.get_model_info()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GeminiDirectLLM: {llm_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if client_info.get("safety_settings") == "disabled":
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: safetySettings –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        
        if client_info.get("direct_api"):
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π API!")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–•–û–î–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò GEMINI API ===")
    print("–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∏–∑ C:\\Users\\crazy\\mcp_servers\\agentic-control-framework\\src\\prd_parser.js")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á.")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_gemini_direct_client),
        ("–û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_security_bypass_capabilities),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", test_structured_response_generation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CrewAI", test_crewai_adapter_integration),
        ("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏", test_model_info_and_diagnostics),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.")
    else:
        print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")

if __name__ == "__main__":
    main()
