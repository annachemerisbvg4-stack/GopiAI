#!/usr/bin/env python3
"""
üîç –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CrewAI Toolkit –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç –∏ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

def check_tool_availability():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
    tools_to_check = [
        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API –∫–ª—é—á–µ–π
        ('FileReadTool', 'tools.crewai_toolkit.tools.file_read_tool.file_read_tool'),
        ('FileWriterTool', 'tools.crewai_toolkit.tools.file_writer_tool.file_writer_tool'),
        ('DirectoryReadTool', 'tools.crewai_toolkit.tools.directory_read_tool.directory_read_tool'),
        
        # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ - –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        ('ScrapeWebsiteTool', 'tools.crewai_toolkit.tools.scrape_website_tool.scrape_website_tool'),
        
        # –ü–æ–∏—Å–∫ - —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏
        ('BraveSearchTool', 'tools.crewai_toolkit.tools.brave_search_tool.brave_search_tool'),
        ('SerperDevTool', 'tools.crewai_toolkit.tools.serper_dev_tool.serper_dev_tool'),
        
        # –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö
        ('CSVSearchTool', 'tools.crewai_toolkit.tools.csv_search_tool.csv_search_tool'),
        ('JSONSearchTool', 'tools.crewai_toolkit.tools.json_search_tool.json_search_tool'),
        
        # Selenium
        ('SeleniumScrapingTool', 'tools.crewai_toolkit.tools.selenium_scraping_tool.selenium_scraping_tool'),
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CrewAI Toolkit –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    print("=" * 60)
    
    results = {
        'available': [],
        'import_failed': [],
        'class_not_found': []
    }
    
    for class_name, module_path in tools_to_check:
        print(f"\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º {class_name}...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            module = __import__(module_path, fromlist=[class_name])
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å
            if hasattr(module, class_name):
                tool_class = getattr(module, class_name)
                print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
                
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                try:
                    instance = tool_class()
                    name = getattr(instance, 'name', 'Unknown')
                    description = getattr(instance, 'description', 'No description')
                    
                    results['available'].append({
                        'class_name': class_name,
                        'module_path': module_path,
                        'name': name,
                        'description': description[:100] + '...' if len(description) > 100 else description
                    })
                    
                    print(f"   ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω: {name}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
                    results['available'].append({
                        'class_name': class_name,
                        'module_path': module_path,
                        'name': class_name,
                        'description': f'Import OK, creation failed: {e}',
                        'creation_error': str(e)
                    })
                    
            else:
                print(f"   ‚ùå –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ")
                results['class_not_found'].append({
                    'class_name': class_name,
                    'module_path': module_path,
                    'error': f'Class {class_name} not found'
                })
                
        except ImportError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            results['import_failed'].append({
                'class_name': class_name,
                'module_path': module_path,
                'error': str(e)
            })
        except Exception as e:
            print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            results['import_failed'].append({
                'class_name': class_name,
                'module_path': module_path,
                'error': str(e)
            })
    
    return results

def print_summary(results):
    """–ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 60)
    
    available = results['available']
    import_failed = results['import_failed']
    class_not_found = results['class_not_found']
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {len(available)}")
    print(f"   ‚ùå –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {len(import_failed)}")
    print(f"   ‚ùå –ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {len(class_not_found)}")
    
    if available:
        print(f"\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(available)}):")
        for tool in available:
            print(f"   ‚Ä¢ {tool['name']} ({tool['class_name']})")
            if 'creation_error' in tool:
                print(f"     ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {tool['creation_error']}")
            else:
                print(f"     üìù {tool['description']}")
    
    if import_failed:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò –ò–ú–ü–û–†–¢–ê ({len(import_failed)}):")
        for tool in import_failed:
            print(f"   ‚Ä¢ {tool['class_name']}: {tool['error']}")
    
    if class_not_found:
        print(f"\n‚ùå –ö–õ–ê–°–°–´ –ù–ï –ù–ê–ô–î–ï–ù–´ ({len(class_not_found)}):")
        for tool in class_not_found:
            print(f"   ‚Ä¢ {tool['class_name']}: {tool['error']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if available:
        working_tools = [t for t in available if 'creation_error' not in t]
        problematic_tools = [t for t in available if 'creation_error' in t]
        
        if working_tools:
            print(f"   üöÄ {len(working_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        if problematic_tools:
            print(f"   üîß {len(problematic_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞—Ö")
            print("      –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω GitHub Integration Tool")
    
    if import_failed or class_not_found:
        failed_count = len(import_failed) + len(class_not_found)
        print(f"   üõ†Ô∏è {failed_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞")

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π"""
    print(f"\nüîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô:")
    
    keys_to_check = [
        'GITHUB_TOKEN',
        'OPENAI_API_KEY', 
        'OPENROUTER_API_KEY',
        'BRAVE_API_KEY',
        'SERPER_API_KEY',
        'GEMINI_API_KEY'
    ]
    
    available_keys = []
    missing_keys = []
    
    for key in keys_to_check:
        value = os.getenv(key)
        if value and value != f'your_{key.lower()}_here' and len(value) > 10:
            available_keys.append(key)
            print(f"   ‚úÖ {key}: –î–æ—Å—Ç—É–ø–µ–Ω")
        else:
            missing_keys.append(key)
            print(f"   ‚ùå {key}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    print(f"\n   üìä –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_keys)}, –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_keys)}")
    
    return {
        'available': available_keys,
        'missing': missing_keys
    }

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    api_keys = check_api_keys()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    results = check_tool_availability()
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É
    print_summary(results)
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("   2. –°–æ–∑–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("   3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ SmartDelegator")
    print("   4. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
