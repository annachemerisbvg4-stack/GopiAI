#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ResponseFormatter, HTMLSanitizer –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SmartDelegator
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_response_formatter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º ResponseFormatter"""
    print("\nüîß === –¢–ï–°–¢ ResponseFormatter ===")
    
    try:
        from tools.gopiai_integration.response_formatter import ResponseFormatter
        
        formatter = ResponseFormatter()
        print("‚úÖ ResponseFormatter —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å JSON –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ HTML
        test_response = {
            "response": """–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–±—è.
            
```json
{'tool': 'terminal', 'params': {'command': 'mkdir C:\\\\Users\\\\crazy\\\\GOPI_AI_MODULES\\\\TEST_FORMATTER'}}
```

–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å <strong>HTML —Ç–µ–≥–∞–º–∏</strong> –∏ <script>alert('test')</script>.

üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:**
‚úÖ `mkdir TEST_FORMATTER` - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ""",
            "analysis": {
                "executed_commands": 1,
                "analysis_time": 2.5
            },
            "processed_with_crewai": False
        }
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
        print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞...")
        chat_formatted = formatter.format_for_chat(test_response)
        
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {len(test_response['response'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {len(chat_formatted['user_content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: {chat_formatted['has_commands']}")
        print(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {chat_formatted['user_content'][:200]}...")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞...")
        file_formatted = formatter.format_for_file_export(test_response)
        
        print(f"–î–ª—è —Ñ–∞–π–ª–∞: {len(file_formatted)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {file_formatted[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –±–ª–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã
        if '```json' not in chat_formatted['user_content']:
            print("‚úÖ JSON –±–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞")
        else:
            print("‚ùå JSON –±–ª–æ–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
        if '<strong>' not in file_formatted and '<script>' not in file_formatted:
            print("‚úÖ HTML —Ç–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            print("‚ùå HTML —Ç–µ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ñ–∞–π–ª–µ")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ResponseFormatter: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_html_sanitizer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º HTMLSanitizer"""
    print("\nüßπ === –¢–ï–°–¢ HTMLSanitizer ===")
    
    try:
        from tools.gopiai_integration.html_sanitizer import HTMLSanitizer
        
        sanitizer = HTMLSanitizer()
        print("‚úÖ HTMLSanitizer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        test_html = """
        <html>
        <head><title>Test</title></head>
        <body>
            <p>–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å <strong>–∂–∏—Ä–Ω—ã–º</strong> –∏ <em>–∫—É—Ä—Å–∏–≤–æ–º</em>.</p>
            <script>alert('dangerous');</script>
            <div>–ë–ª–æ–∫ —Å <span style="color: red;">—Ü–≤–µ—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º</span></div>
            <br>
            –¢–µ–∫—Å—Ç —Å &lt;—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏&gt; —Å–∏–º–≤–æ–ª–∞–º–∏ &amp; entities.
        </body>
        </html>
        """
        
        # –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —Ñ–∞–π–ª–∞...")
        file_clean = sanitizer.sanitize_for_file_export(test_html)
        
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π HTML: {len(test_html)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(file_clean)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {file_clean}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Ç–µ–≥–æ–≤
        if '<script>' not in file_clean and '<html>' not in file_clean:
            print("‚úÖ –û–ø–∞—Å–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            print("‚ùå –û–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å")
            
        # –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è UI
        print("\nüñ•Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è UI...")
        ui_clean = sanitizer.sanitize_for_ui_display(test_html)
        
        print(f"–î–ª—è UI: {len(ui_clean)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {ui_clean[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTMLSanitizer: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_smart_delegator_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SmartDelegator"""
    print("\nüß† === –¢–ï–°–¢ SmartDelegator Integration ===")
    
    try:
        from tools.gopiai_integration.smart_delegator import SmartDelegator
        
        print("–°–æ–∑–¥–∞–µ–º SmartDelegator...")
        delegator = SmartDelegator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        checks = [
            ("CommandExecutor", hasattr(delegator, 'command_executor') and delegator.command_executor),
            ("ResponseFormatter", hasattr(delegator, 'response_formatter') and delegator.response_formatter)
        ]
        
        for component, status in checks:
            if status:
                print(f"‚úÖ {component} –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"‚ùå {component} –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        if delegator.response_formatter:
            print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã ResponseFormatter...")
            
            test_data = {
                "response": "–¢–µ—Å—Ç —Å ```json {'test': 'data'} ``` –±–ª–æ–∫–æ–º",
                "analysis": {"executed_commands": 0}
            }
            
            formatted = delegator.response_formatter.format_for_chat(test_data)
            print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(formatted['user_content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
        return all(status for _, status in checks)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SmartDelegator: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_file_export():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª —Å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüíæ === –¢–ï–°–¢ File Export ===")
    
    try:
        from tools.gopiai_integration.response_formatter import format_response_for_file
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å HTML –∏ JSON
        test_data = {
            "response": """
            <h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>
            <p>–¢–µ–∫—Å—Ç —Å <strong>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</strong></p>
            
            ```json
            {'tool': 'terminal', 'params': {'command': 'test'}}
            ```
            
            <script>alert('test');</script>
            –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ.
            """,
            "analysis": {"executed_commands": 1}
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ñ–∞–π–ª–∞
        clean_content = format_response_for_file(test_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = "test_export_clean.txt"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(clean_content)
            
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_file}")
        print(f"–†–∞–∑–º–µ—Ä: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {clean_content[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å—Ç–æ—Ç—É
        issues = []
        if '<' in clean_content and '>' in clean_content:
            issues.append("HTML —Ç–µ–≥–∏")
        if '```json' in clean_content:
            issues.append("JSON –±–ª–æ–∫–∏")
        if '<script>' in clean_content:
            issues.append("–û–ø–∞—Å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã")
            
        if not issues:
            print("‚úÖ –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        else:
            print(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {', '.join(issues)}")
            
        return len(issues) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ === –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –ß–ê–¢–ê ===")
    print("=" * 60)
    
    tests = [
        ("ResponseFormatter", test_response_formatter),
        ("HTMLSanitizer", test_html_sanitizer),
        ("SmartDelegator Integration", test_smart_delegator_integration),
        ("File Export", test_file_export)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(tests)}")
    
    if passed == len(tests):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π —á–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´: {len(tests) - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return passed == len(tests)

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
