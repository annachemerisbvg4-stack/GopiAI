#!/usr/bin/env python3
"""
üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ OpenAI API
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

def test_github_with_mock_openai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å mock OpenAI –∫–ª—é—á–æ–º"""
    print("üîß –¢–µ—Å—Ç GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å mock OpenAI –∫–ª—é—á–æ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {github_token[:8]}...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock OpenAI –∫–ª—é—á –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.getenv('OPENAI_API_KEY') or os.getenv('OPENAI_API_KEY') == 'your_openai_api_key_here':
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        os.environ['OPENAI_API_KEY'] = 'sk-mock-key-for-testing-only'
    
    try:
        from crewai_tools import GithubSearchTool
        print("‚úÖ GithubSearchTool –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å GitHub —Ç–æ–∫–µ–Ω–æ–º...")
        github_tool = GithubSearchTool(gh_token=github_token)
        print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {github_tool.name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {github_tool.description}")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞...")
        test_params = {
            'search_query': 'python',
            'github_repo': 'microsoft/vscode',
            'content_types': ['repo']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params}")
        result = github_tool._run(**test_params)
        
        print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(str(result)[:400])
        print("-" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å OpenAI, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if 'openai' in str(e).lower() or 'api_key' in str(e).lower():
            print("\nüí° –†–ï–®–ï–ù–ò–ï:")
            print("   1. –ü–æ–ª—É—á–∏ OpenAI API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys")
            print("   2. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env —Ñ–∞–π–ª: OPENAI_API_KEY=—Ç–≤–æ–π_–∫–ª—é—á")
            print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑ OpenAI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        return False

def test_simple_github_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π GitHub API –±–µ–∑ CrewAI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ø—Ä—è–º–æ–π GitHub API...")
    
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        import requests
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GitHub API
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GitHub Search API...")
        
        headers = {
            'Authorization': f'token {github_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        search_url = 'https://api.github.com/search/repositories'
        params = {
            'q': 'python machine learning',
            'sort': 'stars',
            'order': 'desc',
            'per_page': 5
        }
        
        response = requests.get(search_url, headers=headers, params=params)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ GitHub API –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {data.get('total_count', 0)}")
            
            print("\nüèÜ –¢–û–ü-5 –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í:")
            for i, repo in enumerate(data.get('items', [])[:5], 1):
                print(f"   {i}. {repo['full_name']} ‚≠ê {repo['stargazers_count']}")
                print(f"      {repo['description'][:100]}...")
                print()
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ GitHub API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ API: {e}")
        return False

def create_simple_github_wrapper():
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π wrapper –¥–ª—è GitHub API"""
    print("\nüõ†Ô∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π GitHub wrapper...")
    
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        import requests
        
        class SimpleGithubTool:
            def __init__(self, token):
                self.token = token
                self.headers = {
                    'Authorization': f'token {token}',
                    'Accept': 'application/vnd.github.v3+json'
                }
            
            def search_repositories(self, query, limit=5):
                """–ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
                url = 'https://api.github.com/search/repositories'
                params = {
                    'q': query,
                    'sort': 'stars',
                    'order': 'desc',
                    'per_page': limit
                }
                
                response = requests.get(url, headers=self.headers, params=params)
                if response.status_code == 200:
                    return response.json()
                return None
            
            def search_code(self, query, repo=None, limit=5):
                """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
                url = 'https://api.github.com/search/code'
                search_query = query
                if repo:
                    search_query += f' repo:{repo}'
                
                params = {
                    'q': search_query,
                    'per_page': limit
                }
                
                response = requests.get(url, headers=self.headers, params=params)
                if response.status_code == 200:
                    return response.json()
                return None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º wrapper
        github_tool = SimpleGithubTool(github_token)
        print("‚úÖ SimpleGithubTool —Å–æ–∑–¥–∞–Ω!")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        repos = github_tool.search_repositories('python AI', 3)
        if repos:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {repos.get('total_count', 0)}")
            for repo in repos.get('items', [])[:3]:
                print(f"   üì¶ {repo['full_name']} ‚≠ê {repo['stargazers_count']}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
        code_results = github_tool.search_code('machine learning', 'microsoft/vscode', 2)
        if code_results:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º: {code_results.get('total_count', 0)}")
            for item in code_results.get('items', [])[:2]:
                print(f"   üìÑ {item['name']} –≤ {item['repository']['full_name']}")
        
        print("‚úÖ SimpleGithubTool —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ wrapper: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å mock –∫–ª—é—á–æ–º
    success1 = test_github_with_mock_openai()
    
    # –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π GitHub API
    success2 = test_simple_github_api()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π wrapper
    success3 = create_simple_github_wrapper()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    print(f"   –ü—Ä—è–º–æ–π GitHub API: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    print(f"   –ü—Ä–æ—Å—Ç–æ–π wrapper: {'‚úÖ –£–°–ü–ï–•' if success3 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    
    if success2 or success3:
        print("\nüéâ –£ –ù–ê–° –ï–°–¢–¨ –†–ê–ë–û–ß–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´!")
        print("üí° –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π GitHub API –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π wrapper")
        print("üîß –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç OpenAI API")
    
    if success1:
        print("üéä CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif not success1 and (success2 or success3):
        print("‚ö†Ô∏è CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç OpenAI API –∫–ª—é—á")
        print("üí° –ù–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã!")
    
    input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
