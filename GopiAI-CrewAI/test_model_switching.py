"""–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π."""
import os
import sys
import time
import json
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))
sys.path.insert(0, str(Path(__file__).parent.parent / "GopiAI-UI" / "gopiai"))

from llm_rotation_config_fixed import (
    UsageTracker, 
    PROVIDER_KEY_ENV, 
    MODELS, 
    update_state,
    get_api_key_for_provider,
    get_available_models,
    register_use,
    is_model_blacklisted
)

def test_usage_tracker_provider_switching():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ UsageTracker."""
    print("–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    tracker = UsageTracker(MODELS)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert tracker.current_provider == "gemini"
    print("‚úì –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: gemini")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ openrouter
    tracker.set_current_provider("openrouter")
    assert tracker.current_provider == "openrouter"
    print("‚úì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ openrouter —É—Å–ø–µ—à–Ω–æ")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ gemini
    tracker.set_current_provider("gemini")
    assert tracker.current_provider == "gemini"
    print("‚úì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ gemini —É—Å–ø–µ—à–Ω–æ")
    
    print("–¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")

def test_soft_blacklist():
    """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –º—è–≥–∫–æ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    print("–¢–µ—Å—Ç 2: –ú–µ—Ö–∞–Ω–∏–∑–º –º—è–≥–∫–æ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    
    tracker = UsageTracker(MODELS)
    
    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å —Å –Ω–∏–∑–∫–∏–º RPM –¥–ª—è —Ç–µ—Å—Ç–∞
    test_model = None
    for model in MODELS:
        if model["provider"] == "gemini" and model["rpm"] > 0:
            test_model = model
            break
    
    if not test_model:
        print("‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞")
        return
    
    model_id = test_model["id"]
    rpm_limit = test_model["rpm"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    assert not tracker.is_blacklisted(model_id)
    print(f"‚úì –ú–æ–¥–µ–ª—å {model_id} –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –ª–∏–º–∏—Ç –≤ 1.5 —Ä–∞–∑–∞
    for i in range(int(rpm_limit * 2)):  # –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
        tracker.register_use(test_model, 100)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    assert tracker.is_blacklisted(model_id)
    print(f"‚úì –ú–æ–¥–µ–ª—å {model_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")
    
    # –ñ–¥–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏)
    stats = tracker.get_stats(model_id)
    print(f"‚úì –í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats['blacklisted_until'] - time.time():.1f} —Å–µ–∫—É–Ω–¥")
    
    print("–¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")

def test_api_key_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∫–ª—é—á–µ–π."""
    print("–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∫–ª—é—á–µ–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_gemini_key = os.environ.get("GEMINI_API_KEY")
    original_openrouter_key = os.environ.get("OPENROUTER_API_KEY")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        test_gemini_key = "test_gemini_key_1234567890"
        test_openrouter_key = "test_openrouter_key_1234567890"
        
        os.environ["GEMINI_API_KEY"] = test_gemini_key
        os.environ["OPENROUTER_API_KEY"] = test_openrouter_key
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π
        gemini_key = get_api_key_for_provider("gemini")
        openrouter_key = get_api_key_for_provider("openrouter")
        
        assert gemini_key == test_gemini_key
        assert openrouter_key == test_openrouter_key
        print("‚úì API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        unknown_key = get_api_key_for_provider("unknown")
        assert unknown_key is None
        print("‚úì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if original_gemini_key is not None:
            os.environ["GEMINI_API_KEY"] = original_gemini_key
        elif "GEMINI_API_KEY" in os.environ:
            del os.environ["GEMINI_API_KEY"]
            
        if original_openrouter_key is not None:
            os.environ["OPENROUTER_API_KEY"] = original_openrouter_key
        elif "OPENROUTER_API_KEY" in os.environ:
            del os.environ["OPENROUTER_API_KEY"]
    
    print("–¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")

def test_state_persistence():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    print("–¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    with tempfile.TemporaryDirectory() as temp_dir:
        state_file = Path(temp_dir) / ".gopiai_state.json"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        import state_manager
        original_state_path = state_manager.STATE_PATH
        
        try:
            # –ü–æ–¥–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_manager.STATE_PATH = state_file
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            update_state("openrouter", "openrouter/mistralai-mistral-7b-instruct")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            assert state_file.exists()
            print("‚úì –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
            
            # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(state_file, 'r', encoding='utf-8') as f:
                state = json.load(f)
            
            assert state["provider"] == "openrouter"
            assert state["model_id"] == "openrouter/mistralai-mistral-7b-instruct"
            print("‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª")
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            state_manager.STATE_PATH = original_state_path
    
    print("–¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")

def test_model_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π."""
    print("–¢–µ—Å—Ç 5: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_gemini_key = os.environ.get("GEMINI_API_KEY")
    original_openrouter_key = os.environ.get("OPENROUTER_API_KEY")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        os.environ["GEMINI_API_KEY"] = "test_key"
        os.environ["OPENROUTER_API_KEY"] = "test_key"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        dialog_models = get_available_models("dialog")
        code_models = get_available_models("code")
        
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(dialog_models)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤")
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(code_models)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–æ–¥–µ–ª–∏ –æ—Ç –æ–±–æ–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        gemini_models = [m for m in dialog_models if m["provider"] == "gemini"]
        openrouter_models = [m for m in dialog_models if m["provider"] == "openrouter"]
        
        assert len(gemini_models) > 0
        assert len(openrouter_models) > 0
        print("‚úì –ú–æ–¥–µ–ª–∏ –æ—Ç –æ–±–æ–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if original_gemini_key is not None:
            os.environ["GEMINI_API_KEY"] = original_gemini_key
        elif "GEMINI_API_KEY" in os.environ:
            del os.environ["GEMINI_API_KEY"]
            
        if original_openrouter_key is not None:
            os.environ["OPENROUTER_API_KEY"] = original_openrouter_key
        elif "OPENROUTER_API_KEY" in os.environ:
            del os.environ["OPENROUTER_API_KEY"]
    
    print("–¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...\n")
    
    try:
        test_usage_tracker_provider_switching()
        test_soft_blacklist()
        test_api_key_handling()
        test_state_persistence()
        test_model_availability()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
