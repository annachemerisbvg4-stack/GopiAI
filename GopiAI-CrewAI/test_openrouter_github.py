#!/usr/bin/env python3
"""
üéâ –¢–µ—Å—Ç GithubSearchTool —Å OpenRouter –∫–∞–∫ –∑–∞–º–µ–Ω–æ–π OpenAI API
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

def test_github_with_openrouter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å OpenRouter API"""
    print("üéâ –¢–µ—Å—Ç GithubSearchTool —Å OpenRouter API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    github_token = os.getenv('GITHUB_TOKEN')
    openai_key = os.getenv('OPENAI_API_KEY')
    openai_base = os.getenv('OPENAI_API_BASE')
    
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    if not openai_key or openai_key == 'your_openai_api_key_here':
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {github_token[:8]}...")
    print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {openai_key[:8]}...")
    print(f"‚úÖ OpenAI API Base: {openai_base}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        from crewai_tools import GithubSearchTool
        print("‚úÖ GithubSearchTool –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å GitHub —Ç–æ–∫–µ–Ω–æ–º
        print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å GitHub —Ç–æ–∫–µ–Ω–æ–º...")
        github_tool = GithubSearchTool(gh_token=github_token)
        print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {github_tool.name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {github_tool.description}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print("\nüîç –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
        test_params_1 = {
            'search_query': 'python machine learning',
            'github_repo': 'microsoft/vscode',
            'content_types': ['repo']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params_1}")
        
        try:
            result_1 = github_tool._run(**test_params_1)
            print("‚úÖ –¢–µ—Å—Ç 1 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 50)
            print(str(result_1)[:400])
            print("-" * 50)
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç 1 –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            if 'embedding' in str(e).lower():
                print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å embeddings —á–µ—Ä–µ–∑ OpenRouter")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 2: –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫...")
        test_params_2 = {
            'search_query': 'README',
            'github_repo': 'microsoft/vscode',
            'content_types': ['repo']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params_2}")
        
        try:
            result_2 = github_tool._run(**test_params_2)
            print("‚úÖ –¢–µ—Å—Ç 2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 50)
            print(str(result_2)[:400])
            print("-" * 50)
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç 2 –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        import traceback
        print(f"üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        
        return False

def test_simple_github_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é GitHub API –¥–ª—è SmartDelegator"""
    print("\nüîó –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è SmartDelegator...")
    
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        import requests
        
        class SimpleGithubIntegration:
            """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GitHub –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ SmartDelegator"""
            
            def __init__(self, token):
                self.token = token
                self.headers = {
                    'Authorization': f'token {token}',
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'GopiAI-GitHub-Integration'
                }
            
            def search_repositories(self, query, limit=5):
                """–ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
                url = 'https://api.github.com/search/repositories'
                params = {
                    'q': query,
                    'sort': 'stars',
                    'order': 'desc',
                    'per_page': limit
                }
                
                response = requests.get(url, headers=self.headers, params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    results = []
                    for repo in data.get('items', []):
                        results.append({
                            'name': repo['full_name'],
                            'description': repo.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                            'stars': repo['stargazers_count'],
                            'url': repo['html_url'],
                            'language': repo.get('language', 'Unknown')
                        })
                    return {
                        'success': True,
                        'total_count': data.get('total_count', 0),
                        'results': results
                    }
                else:
                    return {
                        'success': False,
                        'error': f'HTTP {response.status_code}: {response.text}'
                    }
            
            def get_repository_info(self, repo_name):
                """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
                url = f'https://api.github.com/repos/{repo_name}'
                
                response = requests.get(url, headers=self.headers, timeout=10)
                if response.status_code == 200:
                    repo = response.json()
                    return {
                        'success': True,
                        'name': repo['full_name'],
                        'description': repo.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                        'stars': repo['stargazers_count'],
                        'forks': repo['forks_count'],
                        'language': repo.get('language', 'Unknown'),
                        'url': repo['html_url'],
                        'created_at': repo['created_at'],
                        'updated_at': repo['updated_at']
                    }
                else:
                    return {
                        'success': False,
                        'error': f'HTTP {response.status_code}: {response.text}'
                    }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        github_integration = SimpleGithubIntegration(github_token)
        print("‚úÖ SimpleGithubIntegration —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        search_result = github_integration.search_repositories('python AI', 3)
        
        if search_result['success']:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {search_result['total_count']}")
            print("üèÜ –¢–û–ü-3 –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
            for i, repo in enumerate(search_result['results'], 1):
                print(f"   {i}. {repo['name']} ‚≠ê {repo['stars']}")
                print(f"      {repo['description'][:80]}...")
                print(f"      –Ø–∑—ã–∫: {repo['language']}")
                print()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_result['error']}")
        
        # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        print("üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
        repo_info = github_integration.get_repository_info('microsoft/vscode')
        
        if repo_info['success']:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_info['name']}")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {repo_info['description'][:100]}...")
            print(f"   ‚≠ê –ó–≤—ë–∑–¥—ã: {repo_info['stars']}")
            print(f"   üç¥ –§–æ—Ä–∫–∏: {repo_info['forks']}")
            print(f"   üíª –Ø–∑—ã–∫: {repo_info['language']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {repo_info['error']}")
        
        print("‚úÖ SimpleGithubIntegration –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        print(f"üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub —Å OpenRouter API...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å OpenRouter
    success1 = test_github_with_openrouter()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è SmartDelegator
    success2 = test_simple_github_integration()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° OPENROUTER:")
    print(f"   CrewAI + OpenRouter: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    print(f"   –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    
    if success1:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å OpenRouter!")
        print("üî• –ú–æ–∂–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ SmartDelegator!")
    elif success2:
        print("\nüéâ –£ –ù–ê–° –ï–°–¢–¨ –†–ê–ë–û–ß–ê–Ø –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê!")
        print("üí° –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GitHub API –≥–æ—Ç–æ–≤–∞ –¥–ª—è SmartDelegator")
        print("üîß –≠—Ç–æ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç embeddings")
    
    if success1 or success2:
        print("\n‚ú® –ì–û–¢–û–í–û –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í GOPIAI!")
    
    input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
