import sys
import os
sys.path.append('.')

from llm_rotation_config import rate_limit_monitor, LLM_MODELS_CONFIG

def _get_usage_safe(monitor, model_id):
    # Prefer method-based access to satisfy static type checkers
    if hasattr(monitor, "get_usage"):
        try:
            data = monitor.get_usage(model_id)  # type: ignore[attr-defined]
            return data or {"rpm": 0, "tpm": 0, "rpd": 0}
        except Exception:
            pass
    if hasattr(monitor, "get_model_usage"):
        try:
            data = monitor.get_model_usage(model_id)  # type: ignore[attr-defined]
            return data or {"rpm": 0, "tpm": 0, "rpd": 0}
        except Exception:
            pass
    # Fallback for legacy attribute if present
    if hasattr(monitor, "usage"):
        try:
            # mypy/pyright: attribute exists guarded by hasattr
            return getattr(monitor, "usage").get(model_id, {"rpm": 0, "tpm": 0, "rpd": 0})  # type: ignore[attr-defined]
        except Exception:
            pass
    return {"rpm": 0, "tpm": 0, "rpd": 0}

print("=== –°–¢–ê–¢–£–° –í–°–ï–• –ú–û–î–ï–õ–ï–ô ===\n")

print("üîç Blacklist —Å—Ç–∞—Ç—É—Å:")
blacklist = rate_limit_monitor.get_blacklist_status()
if blacklist:
    for model_id, remaining_time in blacklist.items():
        print(f"  üö´ {model_id}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –µ—â–µ {remaining_time} —Å–µ–∫—É–Ω–¥")
else:
    print("  ‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:")
for model in LLM_MODELS_CONFIG:
    model_id = model['id']
    usage = _get_usage_safe(rate_limit_monitor, model_id)
    
    # Access via getattr to satisfy static type checkers when attributes are dynamic
    is_blocked = getattr(rate_limit_monitor, "is_model_blocked", lambda _mid: False)(model_id)  # type: ignore[attr-defined]
    can_use = getattr(rate_limit_monitor, "can_use", lambda _mid: False)(model_id)  # type: ignore[attr-defined]
    
    print(f"\nüéØ {model['name']} ({model_id}):")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {model['priority']}")
    print(f"   –õ–∏–º–∏—Ç—ã: RPM={model['rpm']}, TPM={model['tpm']}, RPD={model['rpd']}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: RPM={usage.get('rpm', 0)}, TPM={usage.get('tpm', 0)}, RPD={usage.get('rpd', 0)}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê' if is_blocked else '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if can_use else '‚ö†Ô∏è –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã'}")

print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
available_count = sum(
    1
    for m in LLM_MODELS_CONFIG
    if not getattr(rate_limit_monitor, "is_model_blocked", lambda _mid: False)(m["id"])  # type: ignore[attr-defined]
    and getattr(rate_limit_monitor, "can_use", lambda _mid: False)(m["id"])  # type: ignore[attr-defined]
)
blocked_count = len(blacklist) if blacklist else 0
limit_exceeded_count = sum(
    1
    for m in LLM_MODELS_CONFIG
    if not getattr(rate_limit_monitor, "is_model_blocked", lambda _mid: False)(m["id"])  # type: ignore[attr-defined]
    and not getattr(rate_limit_monitor, "can_use", lambda _mid: False)(m["id"])  # type: ignore[attr-defined]
)

print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {available_count}")
print(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}")
print(f"   ‚ö†Ô∏è –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {limit_exceeded_count}")
print(f"   üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(LLM_MODELS_CONFIG)}")
