"""
üë• GopiAI Agent Template System
–°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
"""

import os
import yaml
import logging
from typing import Dict, List, Any, Optional
from crewai import Agent, Task, Crew

class AgentTemplateSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
    - –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, verbose: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
        
        Args:
            verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.verbose = verbose
        self.logger = self._setup_logger()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ –ø—Ä–æ–º–ø—Ç—ã
        self.templates = self._load_templates()
        self.prompt_library = self._load_prompt_library()
        
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.templates)} —à–∞–±–ª–æ–Ω–æ–≤ –∏ {len(self.prompt_library)} –ø—Ä–æ–º–ø—Ç–æ–≤")
        
        if self.verbose:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.templates)} —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger("gopiai.agent_template_system")
        if not logger.handlers:
            logger.setLevel(logging.INFO)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            log_dir = os.path.join(os.path.dirname(__file__), "../logs")
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            log_file = os.path.join(log_dir, "agent_templates.log")
            file_handler = logging.FileHandler(log_file)
            file_handler.setLevel(logging.INFO)
            
            # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            
            logger.addHandler(file_handler)
        
        return logger
    
    def _load_templates(self) -> Dict[str, Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        """
        templates = {}
        templates_dir = os.path.join(os.path.dirname(__file__), "../templates/agents")
        
        if not os.path.exists(templates_dir):
            self.logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {templates_dir}")
            return templates
        
        for file_name in os.listdir(templates_dir):
            if file_name.endswith(".yaml") or file_name.endswith(".yml"):
                template_name = file_name.rsplit(".", 1)[0]
                template_path = os.path.join(templates_dir, file_name)
                
                try:
                    with open(template_path, 'r', encoding='utf-8') as f:
                        template_data = yaml.safe_load(f)
                        templates[template_name] = template_data
                        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω: {template_name}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_name}: {str(e)}")
        
        return templates
    
    def _load_prompt_library(self) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        prompts = {}
        prompts_dir = os.path.join(os.path.dirname(__file__), "../templates/prompts")
        
        if not os.path.exists(prompts_dir):
            self.logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {prompts_dir}")
            return prompts
        
        for file_name in os.listdir(prompts_dir):
            if file_name.endswith(".txt"):
                prompt_name = file_name.rsplit(".", 1)[0]
                prompt_path = os.path.join(prompts_dir, file_name)
                
                try:
                    with open(prompt_path, 'r', encoding='utf-8') as f:
                        prompt_text = f.read()
                        prompts[prompt_name] = prompt_text
                        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç: {prompt_name}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {prompt_name}: {str(e)}")
        
        return prompts
    
    def list_available_templates(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —à–∞–±–ª–æ–Ω–æ–≤
        """
        return list(self.templates.keys())
    
    def list_available_prompts(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        return list(self.prompt_library.keys())
    
    def get_template_info(self, template_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ
        """
        if template_name not in self.templates:
            self.logger.error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_name}")
            return {}
        
        return self.templates[template_name]
    
    def create_agent_from_template(self, template_name: str, llm: Any, **kwargs) -> Optional[Agent]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            llm: –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if template_name not in self.templates:
            self.logger.error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_name}")
            return None
        
        template = self.templates[template_name]
        
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞
            role = kwargs.get("role", template.get("role", ""))
            goal = kwargs.get("goal", template.get("goal", ""))
            verbose = kwargs.get("verbose", template.get("verbose", False))
            allow_delegation = kwargs.get("allow_delegation", template.get("allow_delegation", False))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ backstory —Å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            backstory = ""
            backstory_template = template.get("backstory_template")
            
            if backstory_template and backstory_template in self.prompt_library:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                context = {**template.get("parameters", {}), **kwargs}
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
                try:
                    backstory = self.prompt_library[backstory_template].format(**context)
                except KeyError as e:
                    self.logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞: {e}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –∫–∞–∫ –µ—Å—Ç—å
                    backstory = self.prompt_library[backstory_template]
            else:
                backstory = kwargs.get("backstory", template.get("backstory", ""))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tools = []
            for tool_name in template.get("tools", []):
                tool_instance = self._get_tool_instance(tool_name)
                if tool_instance:
                    tools.append(tool_instance)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            additional_params = {}
            
            if "max_iter" in template:
                additional_params["max_iter"] = kwargs.get("max_iter", template.get("max_iter"))
                
            if "max_execution_time" in template:
                additional_params["max_execution_time"] = kwargs.get("max_execution_time", template.get("max_execution_time"))
            
            if "temperature" in template:
                additional_params["temperature"] = kwargs.get("temperature", template.get("temperature"))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent = Agent(
                role=role,
                goal=goal,
                backstory=backstory,
                tools=tools,
                llm=llm,
                verbose=verbose,
                allow_delegation=allow_delegation,
                **additional_params
            )
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_name}: {role}")
            
            if self.verbose:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {role}")
                print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
                print(f"   Backstory: {backstory[:50]}...")
            
            return agent
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_name}: {str(e)}")
            return None
    
    def _get_tool_instance(self, tool_name: str) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            from gopiai_integration.browser_tools import GopiAIBrowserTool
            from gopiai_integration.filesystem_tools import GopiAIFileSystemTool
            from gopiai_integration.memory_tools import GopiAIMemoryTool
            from gopiai_integration.communication_tools import GopiAICommunicationTool
            from gopiai_integration.ai_router_tools import GopiAIRouterTool
            from gopiai_integration.huggingface_tools import GopiAIHuggingFaceTool
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –∏ –∫–ª–∞—Å—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tool_mapping = {
                "browser": GopiAIBrowserTool,
                "filesystem": GopiAIFileSystemTool,
                "memory": GopiAIMemoryTool,
                "communication": GopiAICommunicationTool,
                "router": GopiAIRouterTool,
                "huggingface": GopiAIHuggingFaceTool
            }
            
            if tool_name in tool_mapping:
                return tool_mapping[tool_name]()
            else:
                self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
                return None
                
        except ImportError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}")
            return None
    
    def create_crew_from_templates(self, name: str, llm: Any, agent_configs: List[Dict[str, Any]], tasks: List[Task]) -> Optional[Crew]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        
        Args:
            name: –ò–º—è –∫–æ–º–∞–Ω–¥—ã
            llm: –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
            agent_configs: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤ (—à–∞–±–ª–æ–Ω –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            agents = []
            
            for config in agent_configs:
                template_name = config.get("template")
                if not template_name:
                    self.logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —à–∞–±–ª–æ–Ω –∞–≥–µ–Ω—Ç–∞")
                    continue
                
                agent = self.create_agent_from_template(template_name, llm, **config.get("parameters", {}))
                if agent:
                    agents.append(agent)
            
            if not agents:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
                return None
            
            crew = Crew(
                agents=agents,
                tasks=tasks,
                verbose=True,
                name=name
            )
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {name} —Å {len(agents)} –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ {len(tasks)} –∑–∞–¥–∞—á–∞–º–∏")
            
            if self.verbose:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {name}")
                print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
                print(f"   –ó–∞–¥–∞—á: {len(tasks)}")
            
            return crew
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
    template_system = AgentTemplateSystem(verbose=True)
    
    # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∞–≥–µ–Ω—Ç–æ–≤:")
    for template_name in template_system.list_available_templates():
        template_info = template_system.get_template_info(template_name)
        print(f"   - {template_name}: {template_info.get('role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')}")
    
    # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:")
    for prompt_name in template_system.list_available_prompts():
        print(f"   - {prompt_name}")
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")