#!/usr/bin/env python3
"""
üß† Smart Delegator –¥–ª—è GopiAI

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
1. –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI Router
2. –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
"""

import os
import sys
import time
import json
import traceback
import requests
from pathlib import Path
from typing import Dict, Any, List, Optional, Union

import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ CrewAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
crewai_root = os.path.dirname(os.path.dirname(os.path.dirname(script_dir)))
sys.path.append(crewai_root)

# –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
crewai_available = False # This will be set by the try-except block below
RAG_API_URL = "http://127.0.0.1:5051" # URL –¥–ª—è –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ RAG-—Å–µ—Ä–≤–∏—Å–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CrewAI
try:
    import crewai
    from crewai import Agent, Task, Crew, Process
    crewai_available = True
    print("‚úÖ CrewAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
except ImportError as e:
    print(f"‚ö†Ô∏è CrewAI –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("CrewAI –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ AI Router")

def is_rag_service_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG-—Å–µ—Ä–≤–∏—Å–∞."""
    try:
        response = requests.get(f"{RAG_API_URL}/api/health", timeout=2)
        return response.status_code == 200 and response.json().get("status") == "online"
    except requests.exceptions.RequestException:
        return False

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
COMPLEXITY_THRESHOLD = 3  # –û—Ç 0 (–ø—Ä–æ—Å—Ç–æ–π) –¥–æ 5 (–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π)
ASSISTANT_NAME = "GopiAI"

class SmartDelegator:
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É LLM –∏ CrewAI"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SmartDelegator"""
        self.logger = logging.getLogger(__name__)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Router
        try:
            from .ai_router_llm import AIRouterLLM
            self.ai_router = AIRouterLLM()
            print("‚úÖ AI Router LLM –∞–¥–∞–ø—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. —Ä–æ—É—Ç–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ Python
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Router LLM: {e}")
            self.ai_router = None
        
        self.rag_available = is_rag_service_available()
        if self.rag_available:
            print("‚úÖ RAG-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            self.index_documentation() # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        else:
            print("‚ö†Ô∏è RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è.")
    
    def index_documentation(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ RAG-—Å–µ—Ä–≤–µ—Ä."""
        if not self.rag_available:
            print("‚ö†Ô∏è RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False

        def do_index():
            try:
                response = requests.post(f"{RAG_API_URL}/api/index", timeout=120) # 2-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                if response.status_code == 200:
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç RAG-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.json().get('message')}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–∞ RAG-—Å–µ—Ä–≤–∏—Å–µ: {response.status_code} {response.text}")
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RAG-—Å–µ—Ä–≤–∏—Å—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
        import threading
        threading.Thread(target=do_index, daemon=True).start()
        return True

    def _get_rag_context(self, query: str, max_results: int = 3) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞."""
        if not self.rag_available:
            return None

        try:
            response = requests.post(f"{RAG_API_URL}/api/search", json={"query": query, "max_results": max_results}, timeout=10)
            if response.status_code == 200:
                return response.json().get("context")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ RAG-—Å–µ—Ä–≤–∏—Å–∞: {response.status_code} {response.text}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ RAG-—Å–µ—Ä–≤–∏—Å—É: {e}")
            traceback.print_exc()
            return None
    
    def analyze_request(self, message: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._detect_request_type(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (0-5)
        complexity = self._calculate_complexity(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ CrewAI
        requires_crewai = self._should_use_crewai(complexity, request_type, message_lower)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        elapsed_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "complexity": complexity,
            "type": request_type,
            "requires_crewai": requires_crewai and crewai_available,
            "analysis_time": elapsed_time
        }
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={complexity}, —Ç–∏–ø={request_type}, CrewAI={requires_crewai and crewai_available}")
        
        return result
    
    def _detect_request_type(self, message_lower: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        creative_keywords = ["–Ω–∞–ø–∏—à–∏", "—Å–æ—á–∏–Ω–∏", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á–µ—Å–∫", "–∏—Å—Ç–æ—Ä–∏", "—Ä–∞—Å—Å–∫–∞–∑", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–æ–∑–¥–∞–Ω–∏–µ", "–∫—Ä–µ–∞—Ç–∏–≤"]
        code_keywords = ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "—Ä–µ–∞–ª–∏–∑—É–π", "–æ—Ç–ª–∞–¥–∫–∞", "–±–∞–≥", "–æ—à–∏–±–∫–∞"]
        research_keywords = ["–∏—Å—Å–ª–µ–¥—É–π", "–Ω–∞–π–¥–∏", "–∏–∑—É—á–∏", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Å–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–∞–Ω–∞–ª–∏–∑", "–æ–±–∑–æ—Ä", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ñ–∞–∫—Ç—ã", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ä–∞–≤–Ω–∏", "–≤—ã—è–≤–∏", "–æ–ø—Ä–µ–¥–µ–ª–∏"]
        business_keywords = ["–±–∏–∑–Ω–µ—Å", "—Å—Ç—Ä–∞—Ç–µ–≥", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø–ª–∞–Ω", "–ø—Ä–æ–µ–∫—Ç", "–∫–æ–º–ø–∞–Ω", "—Ä—ã–Ω–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(kw in message_lower for kw in creative_keywords):
            return "creative"
        elif any(kw in message_lower for kw in code_keywords):
            return "code"
        elif any(kw in message_lower for kw in research_keywords):
            return "research"
        elif any(kw in message_lower for kw in business_keywords):
            return "business"
        else:
            return "general"
            
    def _calculate_complexity(self, message_lower: str) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5
        
        –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
        - –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–¥–∞—á
        - –ù–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        complexity = 0
        
        # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_length = len(message_lower)
        if message_length > 500:
            complexity += 2
        elif message_length > 200:
            complexity += 1
            
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = message_lower.count("?")
        if question_count > 3:
            complexity += 2
        elif question_count > 1:
            complexity += 1
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity_indicators = [
            "—Å–ª–æ–∂–Ω", "–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω", "–∫–æ–º–ø–ª–µ–∫—Å–Ω", "–¥–µ—Ç–∞–ª—å–Ω", "–ø–æ–¥—Ä–æ–±–Ω",
            "–∞–Ω–∞–ª–∏–∑", "—Å—Ä–∞–≤–Ω–∏", "–∏—Å—Å–ª–µ–¥—É–π", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π", "—Å—Ç—Ä–∞—Ç–µ–≥–∏",
            "—à–∞–≥ –∑–∞ —à–∞–≥–æ–º", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π",
            "–≥–ª—É–±–æ–∫–∏–π", "–≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π", "–≤—Å–µ–æ–±—ä–µ–º–ª—é—â–∏–π", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤", "–ø—Ä–æ–≥–Ω–æ–∑",
            "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü", "—Ä–µ—à–µ–Ω–∏–µ", "–ø—Ä–æ–±–ª–µ–º", "–∫–µ–π—Å", "—Å—Ü–µ–Ω–∞—Ä–∏–π", "–≤–ª–∏—è–Ω–∏–µ",
            "—Ñ–∞–∫—Ç–æ—Ä", "–º–µ—Ç—Ä–∏–∫–∞", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–æ—Ü–µ–Ω–∫–∞", "–∫—Ä–∏—Ç–µ—Ä–∏–π", "–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è",
            "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü",
            "–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–∞–Ω–∞–ª–∏—Ç–∏–∫", "—ç–∫—Å–ø–µ—Ä—Ç", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–æ—Ç—á–µ—Ç", "–¥–æ–∫–ª–∞–¥",
            "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü", "–ø–ª–∞–Ω", "–¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", "–±—é–¥–∂–µ—Ç", "—Ä–∏—Å–∫", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
            "—Ç—Ä–µ–Ω–¥", "–∏–Ω–Ω–æ–≤–∞—Ü", "–±—É–¥—É—â–µ–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—ç–≤–æ–ª—é—Ü–∏—è", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü",
            "–≥–ª–æ–±–∞–ª—å–Ω", "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω", "–∫—Ä–æ—Å—Å-–∫—É–ª—å—Ç—É—Ä–Ω", "–º—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω"
        ]
        
        indicators_found = sum(1 for ind in complexity_indicators if ind in message_lower)
        complexity += min(indicators_found, 2)
        
        return min(complexity, 5)  # –ú–∞–∫—Å–∏–º—É–º 5
        
    def _should_use_crewai(self, complexity: int, request_type: str, message_lower: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CrewAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CrewAI
        explicit_crewai_request = any(kw in message_lower for kw in [
            "–∏—Å–ø–æ–ª—å–∑—É–π crewai", "—á–µ—Ä–µ–∑ crewai", "–∫–æ–º–∞–Ω–¥–æ–π –∞–≥–µ–Ω—Ç–æ–≤", 
            "–º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω", "–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤", "–≥—Ä—É–ø–ø–æ–π"
        ])
        
        if explicit_crewai_request:
            return True
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ)
        if complexity >= 2: # –ë—ã–ª–æ complexity >= 3
            return True
            
        # –ó–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if request_type in ["research", "business"] and complexity >= 2:
            return True
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CrewAI
        return False
    
    def process_request(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI Router –∏–ª–∏ CrewAI
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        start_time = time.time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            analysis = self.analyze_request(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis['complexity']}, —Ç–∏–ø={analysis['type']}, CrewAI={analysis['requires_crewai']}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            if analysis["requires_crewai"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_crewai(message, analysis)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Router –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_ai_router(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            elapsed = time.time() - start_time
            print(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            traceback.print_exc()
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    def _handle_with_ai_router(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI Router"""
        start_time = time.time()
        
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Router...")
            if not self.ai_router:
                self.logger.error("‚ùå AI Router –Ω–µ –Ω–∞–π–¥–µ–Ω (self.ai_router is None)")
                raise ValueError("AI Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("‚úÖ AI Router –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            context = self._get_rag_context(message)

            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            enriched_message = message
            if context:
                self.logger.info("üìö –î–æ–±–∞–≤–ª–µ–Ω RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø—Ä–æ—Å—É")
                enriched_message = f"""{message}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ (–Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ —è–≤–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ):
{context}"""

            # –í—ã–∑—ã–≤–∞–µ–º AI Router —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                self.logger.info("üöÄ –í—ã–∑–æ–≤ AI Router...")
                result = self.ai_router._generate(prompts=[enriched_message])
                response = result.generations[0][0].text
                self.logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç AI Router –ø–æ–ª—É—á–µ–Ω")
            except Exception as inner_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI Router: {inner_error}")
                traceback.print_exc()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã. (–û—à–∏–±–∫–∞: {str(inner_error)})"
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed_time = time.time() - start_time
            self.logger.info(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
            
            return response
            
        except Exception as error:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router: {str(error)}")
            traceback.print_exc()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return f"[–û–®–ò–ë–ö–ê] –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(error)}"
    
    def _handle_with_crewai(self, message: str, analysis: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI"""
        if not crewai_available:
            return self._handle_with_ai_router(message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI Router
            try:
                if self.ai_router is None:
                    print("‚ùå AI Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return self._handle_with_ai_router(message)
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –±–µ–∑ –≤—ã–∑–æ–≤–∞ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏
                llm = self.ai_router.get_llm_instance()
                print("‚úÖ LLM –¥–ª—è CrewAI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LLM –¥–ª—è CrewAI: {e}")
                return self._handle_with_ai_router(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
            context = self._get_rag_context(message)
            context_info = f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}" if context else ""
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            coordinator = Agent(
                role="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
                goal=f"–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory=f"–û–ø—ã—Ç–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π. "
                         f"–†–∞–±–æ—Ç–∞–µ—Ç –≤ {ASSISTANT_NAME} –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                allow_delegation=True,
                verbose=True,
                llm=llm
            )
            
            researcher = Agent(
                role="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                goal=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—É –∏ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
                backstory=f"–û–ø—ã—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. "
                         f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                allow_delegation=False,
                verbose=True,
                llm=llm
            )
            
            writer = Agent(
                role="–ü–∏—Å–∞—Ç–µ–ª—å",
                goal=f"–°–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã",
                backstory=f"–¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å —Å –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. "
                         f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º.",
                allow_delegation=False,
                verbose=True,
                llm=llm
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            research_task = Task(
                description=f"–ò—Å—Å–ª–µ–¥—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message}'{context_info}\n\n"
                           f"–ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ —Å–æ–±–µ—Ä–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                           f"–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π "
                           f"—Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                expected_output="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                agent=researcher
            )
            
            writing_task = Task(
                description=f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                           f"'{message}'\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫–∏–π, "
                           f"–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ. "
                           f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.",
                expected_output="–ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                agent=writer,
                context=[research_task]
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∏–ø–∞–∂
            crew = Crew(
                agents=[coordinator, researcher, writer],
                tasks=[research_task, writing_task],
                verbose=True,
                process=Process.sequential
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É —ç–∫–∏–ø–∞–∂–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = crew.kickoff()
            
            return str(result)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ CrewAI: {e}")
            traceback.print_exc()
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router
            print("‚ö†Ô∏è Fallback –∫ AI Router")
            return self._handle_with_ai_router(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SmartDelegator
smart_delegator = SmartDelegator()

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Delegator")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_query1 = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
    print(f"\nüìù –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: '{test_query1}'")
    analysis1 = smart_delegator.analyze_request(test_query1)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis1}")
    response1 = smart_delegator.process_request(test_query1)
    print(f"–û—Ç–≤–µ—Ç: {response1}")
    
    # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test_query2 = "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    print(f"\nüìù –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query2}'")
    analysis2 = smart_delegator.analyze_request(test_query2)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis2}")
    response2 = smart_delegator.process_request(test_query2)
    print(f"–û—Ç–≤–µ—Ç: {response2}")
