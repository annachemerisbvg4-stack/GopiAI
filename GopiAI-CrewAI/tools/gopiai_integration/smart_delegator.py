#!/usr/bin/env python3
"""
üß† Smart Delegator –¥–ª—è GopiAI

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
1. –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI Router
2. –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
"""

import json
import logging
import os
import re
import time
import traceback
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import requests
from datetime import datetime, timedelta
import hashlib
import litellm  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç litellm

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—Ç–∞—Ü–∏–∏ LLM
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from llm_rotation_config import rate_limit_monitor, select_llm_model_safe, safe_llm_call

try:
    from .ai_router_llm import AIRouterLLM
    from .self_reflection import ReflectionEnabledAIRouter
except ImportError:
    AIRouterLLM = None
    ReflectionEnabledAIRouter = None

import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ CrewAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
crewai_root = os.path.dirname(os.path.dirname(os.path.dirname(script_dir)))
sys.path.append(crewai_root)

# –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
crewai_available = False  # This will be set by the try-except block below

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CrewAI
try:
    import crewai
    from crewai import Agent, Task, Crew, Process
    crewai_available = True
    print("[OK] CrewAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
except ImportError as e:
    print(f"[WARNING] CrewAI –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("CrewAI –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ AI Router")

# –î–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π RAG –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥
RAG_AVAILABLE = True  # –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
COMPLEXITY_THRESHOLD = 3  # –û—Ç 0 (–ø—Ä–æ—Å—Ç–æ–π) –¥–æ 5 (–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π)
ASSISTANT_NAME = "GopiAI"
RAG_DISABLE_TIMEOUT = 300  # seconds

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CrewAI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREWAI_CONFIG = {
    'max_iterations': 3,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    'max_rpm': 10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    'agent_cache_timeout': 600,  # –ö—ç—à–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ 10 –º–∏–Ω—É—Ç
    'allow_delegation': True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º
    'verbose': False,  # –û—Ç–∫–ª—é—á–∞–µ–º verbose –¥–ª—è production
    'memory_enabled': True  # –í–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
}

class SmartDelegator:
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É LLM –∏ CrewAI"""
    
    def __init__(self, enable_reflection=True, reflection_config=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SmartDelegator"""
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
        self._agent_cache = {}
        self._agent_cache_timestamps = {}
        self._crew_cache = {}
        self._crew_cache_timestamps = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        self.enable_reflection = enable_reflection
        self.reflection_config = reflection_config or {
            'min_quality_threshold': 8.0,
            'max_iterations': 3
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Router
        try:
            if AIRouterLLM is None or ReflectionEnabledAIRouter is None:
                raise ImportError("AI Router modules not available")
            
            base_ai_router = AIRouterLLM()
            
            # –ï—Å–ª–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º AI Router
            if self.enable_reflection:
                self.ai_router = ReflectionEnabledAIRouter(
                    ai_router=base_ai_router,
                    enable_reflection=True,
                    reflection_config=self.reflection_config
                )
                print(f"[OK] AI Router —Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {self.reflection_config['min_quality_threshold']})")
            else:
                self.ai_router = base_ai_router
                print("[OK] AI Router LLM –∞–¥–∞–ø—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω (–±–µ–∑ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏)")
                
        except Exception as e:
            print(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Router LLM: {e}")
            self.ai_router = None
        
        self.rag_available = RAG_AVAILABLE
        self._rag_last_failure = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        if self.rag_available:
            print("[OK] –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è RAG-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
            try:
                self.index_documentation()
                print("[OK] –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            except Exception as e:
                print(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {e}")
                self.rag_available = False
    
    def index_documentation(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
        if not self.rag_available:
            print("[WARNING] –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è RAG-—Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SimpleMemoryManager
            from rag_memory_system.simple_memory_manager import get_memory_manager
            memory_manager = get_memory_manager()
            if memory_manager and memory_manager.embeddings is not None:
                print(f"‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞. –ó–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ: {memory_manager.embeddings.count()}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {e}")
            self.rag_available = False
            return False

    def _get_rag_context(self, query: str, max_results: int = 3) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SimpleMemoryManager.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.rag_available or not query.strip():
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–±–æ–µ–≤ RAG
        if time.time() - self._rag_last_failure < RAG_DISABLE_TIMEOUT:
            return None
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å —à—É–º–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if len(query.split()) < 2:
            return None
            
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SimpleMemoryManager
            try:
                from rag_memory_system.simple_memory_manager import get_memory_manager
                memory_manager = get_memory_manager()
            except ImportError as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SimpleMemoryManager: {e}")
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
            results = memory_manager.search(query, limit=max_results)
            
            if not results:
                return None
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            context_parts = []
            for i, (text, score) in enumerate(results, 1):
                # –û–∫—Ä—É–≥–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                relevance = round(score * 100, 1)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                if len(text) > 300:
                    text = text[:297] + '...'
                context_parts.append(f"{i}. {text} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%)")
            
            return "\n".join(context_parts)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ: {e}")
            self._rag_last_failure = time.time() # –û—Ç–∫–ª—é—á–∞–µ–º RAG –Ω–∞ –≤—Ä–µ–º—è
            import traceback
            traceback.print_exc()
            return None
    
    def analyze_request(self, message: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._detect_request_type(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (0-5)
        complexity = self._calculate_complexity(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ CrewAI
        requires_crewai = self._should_use_crewai(complexity, request_type, message_lower)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        elapsed_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "complexity": complexity,
            "type": request_type,
            "requires_crewai": requires_crewai and crewai_available,
            "analysis_time": elapsed_time
        }
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={complexity}, —Ç–∏–ø={request_type}, CrewAI={requires_crewai and crewai_available}")
        
        return result
    
    def _detect_request_type(self, message_lower: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        creative_keywords = ["–Ω–∞–ø–∏—à–∏", "—Å–æ—á–∏–Ω–∏", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á–µ—Å–∫", "–∏—Å—Ç–æ—Ä–∏", "—Ä–∞—Å—Å–∫–∞–∑", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–æ–∑–¥–∞–Ω–∏–µ", "–∫—Ä–µ–∞—Ç–∏–≤"]
        code_keywords = ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "—Ä–µ–∞–ª–∏–∑—É–π", "–æ—Ç–ª–∞–¥–∫–∞", "–±–∞–≥", "–æ—à–∏–±–∫–∞"]
        research_keywords = ["–∏—Å—Å–ª–µ–¥—É–π", "–Ω–∞–π–¥–∏", "–∏–∑—É—á–∏", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Å–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–∞–Ω–∞–ª–∏–∑", "–æ–±–∑–æ—Ä", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ñ–∞–∫—Ç—ã", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ä–∞–≤–Ω–∏", "–≤—ã—è–≤–∏", "–æ–ø—Ä–µ–¥–µ–ª–∏"]
        business_keywords = ["–±–∏–∑–Ω–µ—Å", "—Å—Ç—Ä–∞—Ç–µ–≥", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø–ª–∞–Ω", "–ø—Ä–æ–µ–∫—Ç", "–∫–æ–º–ø–∞–Ω", "—Ä—ã–Ω–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(kw in message_lower for kw in creative_keywords):
            return "creative"
        elif any(kw in message_lower for kw in code_keywords):
            return "code"
        elif any(kw in message_lower for kw in research_keywords):
            return "research"
        elif any(kw in message_lower for kw in business_keywords):
            return "business"
        else:
            return "general"
            
    def _calculate_complexity(self, message_lower: str) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5
        
        –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
        - –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–¥–∞—á
        - –ù–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        complexity = 0
        
        # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_length = len(message_lower)
        if message_length > 500:
            complexity += 2
        elif message_length > 200:
            complexity += 1
            
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = message_lower.count("?")
        if question_count > 3:
            complexity += 2
        elif question_count > 1:
            complexity += 1
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity_indicators = [
            "—Å–ª–æ–∂–Ω", "–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω", "–∫–æ–º–ø–ª–µ–∫—Å–Ω", "–¥–µ—Ç–∞–ª—å–Ω", "–ø–æ–¥—Ä–æ–±–Ω",
            "–∞–Ω–∞–ª–∏–∑", "—Å—Ä–∞–≤–Ω–∏", "–∏—Å—Å–ª–µ–¥—É–π", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π", "—Å—Ç—Ä–∞—Ç–µ–≥–∏",
            "—à–∞–≥ –∑–∞ —à–∞–≥–æ–º", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π",
            "–≥–ª—É–±–æ–∫–∏–π", "–≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π", "–≤—Å–µ–æ–±—ä–µ–º–ª—é—â–∏–π", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤", "–ø—Ä–æ–≥–Ω–æ–∑",
            "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü", "—Ä–µ—à–µ–Ω–∏–µ", "–ø—Ä–æ–±–ª–µ–º", "–∫–µ–π—Å", "—Å—Ü–µ–Ω–∞—Ä–∏–π", "–≤–ª–∏—è–Ω–∏–µ",
            "—Ñ–∞–∫—Ç–æ—Ä", "–º–µ—Ç—Ä–∏–∫–∞", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–æ—Ü–µ–Ω–∫–∞", "–∫—Ä–∏—Ç–µ—Ä–∏–π", "–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è",
            "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü",
            "–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–∞–Ω–∞–ª–∏—Ç–∏–∫", "—ç–∫—Å–ø–µ—Ä—Ç", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–æ—Ç—á–µ—Ç", "–¥–æ–∫–ª–∞–¥",
            "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü", "–ø–ª–∞–Ω", "–¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", "–±—é–¥–∂–µ—Ç", "—Ä–∏—Å–∫", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
            "—Ç—Ä–µ–Ω–¥", "–∏–Ω–Ω–æ–≤–∞—Ü", "–±—É–¥—É—â–µ–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—ç–≤–æ–ª—é—Ü–∏—è", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü",
            "–≥–ª–æ–±–∞–ª—å–Ω", "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω", "–∫—Ä–æ—Å—Å-–∫—É–ª—å—Ç—É—Ä–Ω", "–º—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω"
        ]
        
        indicators_found = sum(1 for ind in complexity_indicators if ind in message_lower)
        complexity += min(indicators_found, 2)
        
        return min(complexity, 5)  # –ú–∞–∫—Å–∏–º—É–º 5
        
    def _should_use_crewai(self, complexity: int, request_type: str, message_lower: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CrewAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CrewAI
        explicit_crewai_request = any(kw in message_lower for kw in [
            "–∏—Å–ø–æ–ª—å–∑—É–π crewai", "—á–µ—Ä–µ–∑ crewai", "–∫–æ–º–∞–Ω–¥–æ–π –∞–≥–µ–Ω—Ç–æ–≤", 
            "–º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω", "–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤", "–≥—Ä—É–ø–ø–æ–π"
        ])
        
        if explicit_crewai_request:
            return True
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        if complexity >= 3:  # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–ª–∏—à–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return True
            
        # –ó–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
        if request_type in ["research", "business"] and complexity >= 3:
            return True
            
        # –ó–∞–ø—Ä–æ—Å—ã, —è–≤–Ω–æ —Ç—Ä–µ–±—É—é—â–∏–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        multi_step_indicators = [
            "–ø–æ—ç—Ç–∞–ø–Ω–æ", "–ø–æ—à–∞–≥–æ–≤–æ", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "—Å–Ω–∞—á–∞–ª–∞", "–∑–∞—Ç–µ–º", 
            "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ", "–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤", "–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π", "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–ª–∞–Ω"
        ]
        if any(indicator in message_lower for indicator in multi_step_indicators) and complexity >= 2:
            return True
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CrewAI
        return False
    
    def process_request(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI Router –∏–ª–∏ CrewAI
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        start_time = time.time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            analysis = self.analyze_request(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis['complexity']}, —Ç–∏–ø={analysis['type']}, CrewAI={analysis['requires_crewai']}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            if analysis["requires_crewai"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_crewai(message, analysis)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Router –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_ai_router(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            elapsed = time.time() - start_time
            print(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å ---
            try:
                from rag_memory_system.simple_memory_manager import get_memory_manager
                memory_manager = get_memory_manager()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                memory_manager.add_message("user", message)
                memory_manager.add_message("assistant", response)
                print("üíæ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å.")
            except Exception as mem_e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å: {mem_e}")
            # ----------------------------------------
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            traceback.print_exc()
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    def clear_agent_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∞–≥–µ–Ω—Ç–æ–≤"""
        self._agent_cache.clear()
        self._agent_cache_timestamps.clear()
        self._crew_cache.clear()
        self._crew_cache_timestamps.clear()
        print("[CLEAN] –ö—ç—à –∞–≥–µ–Ω—Ç–æ–≤ CrewAI –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        current_time = time.time()
        active_agents = sum(
            1 for timestamp in self._agent_cache_timestamps.values()
            if current_time - timestamp < CREWAI_CONFIG['agent_cache_timeout']
        )
        
        return {
            'cached_agents': len(self._agent_cache),
            'active_cached_agents': active_agents,
            'cache_timeout': CREWAI_CONFIG['agent_cache_timeout'],
            'total_cache_hits': getattr(self, '_cache_hits', 0)
        }

    def _format_prompt_with_context(self, user_message: str, rag_context: str = None) -> List[Dict[str, str]]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
        
        Args:
            user_message: –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            rag_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM
        """
        messages = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_parts = [
            "–¢—ã - GopiAI, –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ—Å–µ–¥—ã –∏ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if rag_context and rag_context.strip():
            system_parts.extend([
                "",
                "=== –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô ===",
                "–°–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
                rag_context,
                "================================",
                ""
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        system_parts.extend([
            "",
            "–ò–ù–°–¢–†–£–ö–¶–ò–ò:",
            "1. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Ç–≤–µ—Ç–µ",
            "2. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω, –ø–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è",
            "3. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Ç–æ—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–∞—Ö"
        ])
        
        messages.append({
            "role": "system",
            "content": "\n".join(system_parts)
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history = self._get_chat_history(max_messages=15)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        cleaned_history = self._clean_chat_history(chat_history)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–æ–∫–µ–Ω–∞–º, –∞ –Ω–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        max_history_tokens = 2000  # –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        current_tokens = 0
        filtered_history = []
        
        # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in reversed(cleaned_history):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not msg.get("content") or msg.get("role") == "system":
                continue
                
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω–∞—Ö (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞)
            msg_tokens = len(msg["content"]) // 4
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if msg_tokens > 500:  # ~2000 —Å–∏–º–≤–æ–ª–æ–≤
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            if current_tokens + msg_tokens > max_history_tokens:
                break
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            filtered_history.append(msg)
            current_tokens += msg_tokens
        
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        filtered_history = list(reversed(filtered_history))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ø—Ä–æ–º–ø—Ç
        for msg in filtered_history:
            role = "user" if msg["role"] == "user" else "assistant"
            messages.append({"role": role, "content": msg["content"]})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        return messages

    def _handle_with_ai_router(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI Router"""
        start_time = time.time()
        
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Router...")
            if not self.ai_router:
                self.logger.error("‚ùå AI Router –Ω–µ –Ω–∞–π–¥–µ–Ω (self.ai_router is None)")
                raise ValueError("AI Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("‚úÖ AI Router –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            rag_context = self._get_rag_context(message)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages = self._format_prompt_with_context(
                user_message=message,
                rag_context=rag_context
            )
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏ LLM –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                self.logger.info("üöÄ –í—ã–∑–æ–≤ LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞...")
                self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ LLM: {json.dumps(messages, ensure_ascii=False, indent=2)}")
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
                task_type = "dialog"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ 'dialog' –¥–ª—è —á–∞—Ç–∞
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
                import tiktoken
                enc = tiktoken.get_encoding("cl100k_base")
                num_tokens = sum(len(enc.encode(msg.get("content", ""))) for msg in messages)
                
                # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏
                selected_model = select_llm_model_safe(
                    task_type=task_type,
                    tokens=num_tokens,
                    intelligence_priority=True
                )
                
                if not selected_model:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å LLM")
                
                self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {selected_model}")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä–µ, –æ–∂–∏–¥–∞–µ–º–æ–π safe_llm_call
                def make_llm_call(prompt, model):
                    """–í—ã–∑—ã–≤–∞–µ—Ç LLM —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –º–æ–¥–µ–ª—å—é.
                    
                    Args:
                        prompt: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user"|"assistant", "content": str}]
                        model: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gemini/gemini-1.5-flash')
                        
                    Returns:
                        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
                    """
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π litellm
                        response = litellm.completion(
                            model=model,
                            messages=prompt,
                            temperature=0.7,
                            max_tokens=2000
                        )
                        return response.choices[0].message.content
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏ {model}: {str(e)}")
                        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ safe_llm_call
                
                # –í—ã–∑—ã–≤–∞–µ–º LLM —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                response_text = safe_llm_call(
                    prompt=messages,
                    llm_call_func=make_llm_call,
                    task_type=task_type,
                    tokens=num_tokens,
                    max_fallback_attempts=3
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                response = type('obj', (object,), {
                    'choices': [
                        type('obj', (object,), {
                            'message': type('obj', (object,), {
                                'content': response_text
                            })
                        })
                    ]
                })()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                result = response.choices[0].message.content
                self.logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç LLM –ø–æ–ª—É—á–µ–Ω")
                
                # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                elapsed_time = time.time() - start_time
                self.logger.info(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
                return result
                
            except Exception as inner_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI Router: {inner_error}")
                traceback.print_exc()
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã. (–û—à–∏–±–∫–∞: {str(inner_error)})"
                
        except Exception as error:
            self.logger.error(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _handle_with_ai_router: {str(error)}")
            traceback.print_exc()
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed_time = time.time() - start_time
            self.logger.info(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
            
            return response
            
        except Exception as error:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router: {str(error)}")
            traceback.print_exc()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return f"[–û–®–ò–ë–ö–ê] –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(error)}"
    
    def _get_cached_agents(self, message_hash: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≥–µ–Ω—Ç–æ–≤
        if (message_hash in self._agent_cache and 
            current_time - self._agent_cache_timestamps.get(message_hash, 0) < CREWAI_CONFIG['agent_cache_timeout']):
            return self._agent_cache[message_hash]
            
        return None
    
    def _cache_agents(self, message_hash: str, agents: dict):
        """–ö—ç—à–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self._agent_cache[message_hash] = agents
        self._agent_cache_timestamps[message_hash] = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
        current_time = time.time()
        expired_keys = [
            key for key, timestamp in self._agent_cache_timestamps.items()
            if current_time - timestamp > CREWAI_CONFIG['agent_cache_timeout']
        ]
        for key in expired_keys:
            self._agent_cache.pop(key, None)
            self._agent_cache_timestamps.pop(key, None)
    
    def _handle_with_crewai(self, message: str, analysis: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        if not crewai_available:
            return self._handle_with_ai_router(message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI Router
            try:
                if self.ai_router is None:
                    print("[ERROR] AI Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return self._handle_with_ai_router(message)
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –±–µ–∑ –≤—ã–∑–æ–≤–∞ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏
                llm = self.ai_router.get_llm_instance()
                print("[OK] LLM –¥–ª—è CrewAI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LLM –¥–ª—è CrewAI: {e}")
                return self._handle_with_ai_router(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
            context = self._get_rag_context(message)
            context_info = f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}" if context else ""
            
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
            import hashlib
            message_hash = hashlib.md5(f"{analysis['type']}_{analysis['complexity']}".encode()).hexdigest()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≥–µ–Ω—Ç–æ–≤
            cached_agents = self._get_cached_agents(message_hash)
            if cached_agents:
                print("[OK] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI")
                coordinator = cached_agents['coordinator']
                researcher = cached_agents['researcher'] 
                writer = cached_agents['writer']
            else:
                print("[...] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI")
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                coordinator = Agent(
                    role="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
                    goal=f"–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    backstory=f"–û–ø—ã—Ç–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π. "
                    f"–†–∞–±–æ—Ç–∞–µ—Ç –≤ {ASSISTANT_NAME} –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    allow_delegation=CREWAI_CONFIG['allow_delegation'],
                    verbose=CREWAI_CONFIG['verbose'],
                    max_iter=CREWAI_CONFIG['max_iterations'],
                    max_rpm=CREWAI_CONFIG['max_rpm'],
                    llm=llm
                )

                researcher = Agent(
                    role="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                    goal=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—É –∏ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
                    backstory=f"–û–ø—ã—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏.",
                    allow_delegation=False,  # –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç
                    verbose=CREWAI_CONFIG['verbose'],
                    max_iter=CREWAI_CONFIG['max_iterations'],
                    max_rpm=CREWAI_CONFIG['max_rpm'],
                    llm=llm
                )
                
                writer = Agent(
                    role="–ü–∏—Å–∞—Ç–µ–ª—å",
                    goal=f"–°–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã",
                    backstory=f"–¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å —Å –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. "
                    f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º.",
                    allow_delegation=False,  # –ü–∏—Å–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç
                    verbose=CREWAI_CONFIG['verbose'],
                    max_iter=CREWAI_CONFIG['max_iterations'],
                    max_rpm=CREWAI_CONFIG['max_rpm'],
                    llm=llm
                )
                
                # –ö—ç—à–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                agents_to_cache = {
                    'coordinator': coordinator,
                    'researcher': researcher,
                    'writer': writer
                }
                self._cache_agents(message_hash, agents_to_cache)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            research_task = Task(
                description=f"–ò—Å—Å–ª–µ–¥—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message}'{context_info}\n\n"
                f"–ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ —Å–æ–±–µ—Ä–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                f"–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π "
                f"—Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                expected_output="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                agent=researcher
            )
            
            writing_task = Task(
                description=f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                f"'{message}'\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫–∏–π, "
                f"–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ. "
                f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.",
                expected_output="–ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                agent=writer,
                context=[research_task]
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∏–ø–∞–∂ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            crew = Crew(
                agents=[coordinator, researcher, writer],
                tasks=[research_task, writing_task],
                verbose=CREWAI_CONFIG['verbose'],
                process=Process.sequential,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                memory=CREWAI_CONFIG['memory_enabled'],  # –í–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
                max_rpm=CREWAI_CONFIG['max_rpm']  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É —ç–∫–∏–ø–∞–∂–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = crew.kickoff()
            
            return str(result)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ CrewAI: {e}")
            traceback.print_exc()
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router
            print("[WARNING] Fallback –∫ AI Router")
            return self._handle_with_ai_router(message)

    
    def set_reflection_enabled(self, enabled: bool):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
        self.enable_reflection = enabled
        if hasattr(self.ai_router, 'set_reflection_enabled'):
            self.ai_router.set_reflection_enabled(enabled)
            self.logger.info(f"üîÑ –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
        else:
            self.logger.warning("‚ö†Ô∏è AI Router –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π")
    
    def update_reflection_config(self, config: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        self.reflection_config.update(config)
        if hasattr(self.ai_router, 'update_reflection_config'):
            self.ai_router.update_reflection_config(config)
            self.logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {config}")
        else:
            self.logger.warning("‚ö†Ô∏è AI Router –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
    
    def get_reflection_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if self.ai_router and hasattr(self.ai_router, 'get_reflection_stats'):
            return self.ai_router.get_reflection_stats()
        else:
            return {
                'reflection_enabled': self.enable_reflection,
                'reflection_config': self.reflection_config,
                'note': 'AI Router –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏'
            }


    def _clean_chat_history(self, messages: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            List[Dict]: –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not messages:
            return []
            
        cleaned_messages = []
        last_message = None
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        status_patterns = [
            "‚è≥", "‚åõ", "üîç", "üîé", "ü§î", "üí≠", "üìù", "üîß", "üîç", "üîé",
            "–æ–±—Ä–∞–±–æ—Ç–∫–∞", "–ø–æ–∏—Å–∫", "–¥—É–º–∞—é", "–∞–Ω–∞–ª–∏–∑", "–∏—â—É", "–Ω–∞–π–¥–µ–Ω–æ",
            "–∑–∞–≥—Ä—É–∂–∞—é", "–ø–æ–¥–æ–∂–¥–∏—Ç–µ", "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "—Å–æ–∑–¥–∞–Ω–∏–µ", "–∑–∞–ø—Ä–æ—Å", "–æ—Ç–≤–µ—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        ]
        
        for msg in messages:
            if not isinstance(msg, dict) or 'content' not in msg or 'role' not in msg:
                continue
                
            content = msg['content'].strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not content:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            is_status = any(
                pattern.lower() in content.lower() 
                for pattern in status_patterns
            )
            
            if is_status:
                continue
                
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            if last_message and last_message['content'] == content and last_message['role'] == msg['role']:
                continue
                
            cleaned_messages.append({
                'role': msg['role'],
                'content': content
            })
            last_message = msg
            
        return cleaned_messages
        
    def _get_chat_history(self, max_messages: int = 5) -> List[Dict[str, str]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            max_messages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user"|"assistant", "content": str}]
        """
        try:
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ –∏ —Å–µ—Å—Å–∏–π
            memory_dir = Path.home() / ".gopiai" / "memory"
            chats_file = memory_dir / "chats.json"
            sessions_file = memory_dir / "sessions.json"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if not chats_file.exists() or not sessions_file.exists():
                self.logger.warning("–§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            with open(chats_file, 'r', encoding='utf-8') as f:
                all_messages = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
            with open(sessions_file, 'r', encoding='utf-8') as f:
                sessions_data = json.load(f)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π –≤ —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º id –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
            sessions = []
            for session_id, session_info in sessions_data.items():
                if isinstance(session_info, dict):
                    session_info['id'] = session_id  # –î–æ–±–∞–≤–ª—è–µ–º id –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
                    sessions.append(session_info)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if not sessions:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            sessions.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            current_session = sessions[0]
            current_session_id = current_session.get('id')
            
            if not current_session_id:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            session_messages = []
            for msg in all_messages:
                if not isinstance(msg, dict):
                    continue
                    
                if msg.get('session_id') == current_session_id:
                    role = "user" if msg.get('role') == "user" else "assistant"
                    content = msg.get('content', '').strip()
                    if content:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        session_messages.append({
                            "role": role,
                            "content": content
                        })
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_messages —Å–æ–æ–±—â–µ–Ω–∏–π
            recent_messages = session_messages[-max_messages:]
            
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
            return recent_messages
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}")
            traceback.print_exc()
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SmartDelegator
# –°–æ–∑–¥–∞–µ–º SmartDelegator —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:
# - min_quality_threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (8.0 –∏–∑ 10)
# - max_iterations: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è (3)
reflection_config = {
    'min_quality_threshold': 8.0,  # –¢—Ä–µ–±—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    'max_iterations': 3            # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
}

smart_delegator = SmartDelegator(
    enable_reflection=True,
    reflection_config=reflection_config
)

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Delegator")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_query1 = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
    print(f"\nüìù –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: '{test_query1}'")
    analysis1 = smart_delegator.analyze_request(test_query1)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis1}")
    response1 = smart_delegator.process_request(test_query1)
    print(f"–û—Ç–≤–µ—Ç: {response1}")
    
    # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test_query2 = "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    print(f"\nüìù –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query2}'")
    analysis2 = smart_delegator.analyze_request(test_query2)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis2}")
    response2 = smart_delegator.process_request(test_query2)
    print(f"–û—Ç–≤–µ—Ç: {response2}")