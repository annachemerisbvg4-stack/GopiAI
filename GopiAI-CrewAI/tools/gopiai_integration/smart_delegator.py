#!/usr/bin/env python3
"""
üß† Smart Delegator –¥–ª—è GopiAI

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
1. –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI Router
2. –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ CrewAI
"""

import os
import sys
import time
import json
import traceback
from pathlib import Path
from typing import Dict, Any, List, Optional, Union

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ CrewAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
crewai_root = os.path.dirname(os.path.dirname(os.path.dirname(script_dir)))
sys.path.append(crewai_root)

# –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
crewai_available = False
txtai_available = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CrewAI
try:
    import crewai
    from crewai import Agent, Task, Crew, Process
    from crewai.project import Project
    crewai_available = True
    print("‚úÖ CrewAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
except ImportError as e:
    print(f"‚ö†Ô∏è CrewAI –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("CrewAI –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ AI Router")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ txtai (–¥–ª—è RAG)
try:
    sys.path.append(os.path.join(crewai_root, "rag_memory_system"))
    from txtai.embeddings import Embeddings
    txtai_available = True
    print("‚úÖ txtai —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è RAG!")
except ImportError as e:
    print(f"‚ö†Ô∏è txtai –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("RAG-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
COMPLEXITY_THRESHOLD = 3  # –û—Ç 0 (–ø—Ä–æ—Å—Ç–æ–π) –¥–æ 5 (–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π)
ASSISTANT_NAME = "GopiAI"

class SmartDelegator:
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É LLM –∏ CrewAI"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SmartDelegator"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Router
        try:
            from .ai_router_llm import AIRouterLLM
            self.ai_router = AIRouterLLM()
            print("‚úÖ AI Router LLM –∞–¥–∞–ø—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Router LLM: {e}")
            self.ai_router = None
        
        self.embeddings = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG, –µ—Å–ª–∏ txtai –¥–æ—Å—Ç—É–ø–µ–Ω
        if txtai_available:
            self._init_txtai_embeddings()
    
    def _init_txtai_embeddings(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –Ω–∞ –±–∞–∑–µ txtai"""
        if not txtai_available:
            print("‚ö†Ô∏è txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
            self.embeddings = None
            return
            
        try:
            # –ü—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É txtai
            index_dir = os.path.join(os.path.dirname(__file__), "../../../rag_memory_system/crewai_embeddings")
            index_path = os.path.join(index_dir, "crewai-docs.tar.gz")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(index_dir, exist_ok=True)
            
            if os.path.exists(index_path):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
                self.embeddings = Embeddings()
                self.embeddings.load(index_path)
                print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å RAG –∏–∑ {index_path}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                try:
                    self.embeddings = Embeddings({
                        "path": "sentence-transformers/all-MiniLM-L6-v2",
                        "content": True
                    })
                    print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å RAG (–ø—É—Ç—å –±—É–¥–µ—Ç: {index_path})")
                    
                    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é CrewAI
                    self.index_documentation()
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
                    self.embeddings = None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
            traceback.print_exc()
            self.embeddings = None
    
    def index_documentation(self):
        """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é CrewAI –¥–ª—è RAG"""
        if not txtai_available or not self.embeddings:
            print("‚ö†Ô∏è txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return False
            
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            documents = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            # 1. README —Ñ–∞–π–ª—ã
            readme_paths = [
                os.path.join(os.path.dirname(__file__), "../../../GopiAI-CrewAI/README.md"),
                os.path.join(os.path.dirname(__file__), "../../../GopiAI-CrewAI/README_CHAT_INTEGRATION.md"),
                os.path.join(os.path.dirname(__file__), "../../../CREWAI_INTEGRATION_PLAN.md"),
                os.path.join(os.path.dirname(__file__), "../../../gopi_crewai_integration.md"),
                os.path.join(os.path.dirname(__file__), "../../../02_DOCUMENTATION/üìñ_PROJECT_STRUCTURE.md"),
            ]
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            if not any(os.path.exists(path) for path in readme_paths):
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã README —Ñ–∞–π–ª—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            
            for path in readme_paths:
                if os.path.exists(path):
                    try:
                        with open(path, "r", encoding="utf-8") as f:
                            content = f.read()
                            documents.append((os.path.basename(path), content, None))
                            print(f"üìÑ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            
            # 2. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
            api_docs_paths = [
                os.path.join(os.path.dirname(__file__), "../../../GopiAI-CrewAI/crewai_api_server.py"),
                os.path.join(os.path.dirname(__file__), "smart_delegator.py"),
                os.path.join(os.path.dirname(__file__), "ai_router_llm.py"),
            ]
            
            for path in api_docs_paths:
                if os.path.exists(path):
                    try:
                        with open(path, "r", encoding="utf-8") as f:
                            content = f.read()
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º docstrings –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                            documents.append((os.path.basename(path), content, None))
                            print(f"üìÑ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω API —Ñ–∞–π–ª: {path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
            if documents:
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                self.embeddings.index(documents)
                
                # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
                index_dir = os.path.join(os.path.dirname(__file__), "../../../rag_memory_system/crewai_embeddings")
                index_path = os.path.join(index_dir, "crewai-docs.tar.gz")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(index_dir, exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
                self.embeddings.save(index_path)
                print(f"üíæ –ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {index_path}")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            traceback.print_exc()
            return False
    
    def analyze_request(self, message: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._detect_request_type(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (0-5)
        complexity = self._calculate_complexity(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ CrewAI
        requires_crewai = self._should_use_crewai(complexity, request_type, message_lower)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        elapsed_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "complexity": complexity,
            "type": request_type,
            "requires_crewai": requires_crewai and crewai_available,
            "analysis_time": elapsed_time
        }
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={complexity}, —Ç–∏–ø={request_type}, CrewAI={requires_crewai and crewai_available}")
        
        return result
    
    def _detect_request_type(self, message_lower: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        creative_keywords = ["–Ω–∞–ø–∏—à–∏", "—Å–æ—á–∏–Ω–∏", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á–µ—Å–∫", "–∏—Å—Ç–æ—Ä–∏", "—Ä–∞—Å—Å–∫–∞–∑"]
        code_keywords = ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç", "–∞–ª–≥–æ—Ä–∏—Ç–º"]
        research_keywords = ["–∏—Å—Å–ª–µ–¥—É–π", "–Ω–∞–π–¥–∏", "–∏–∑—É—á–∏", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Å–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω"]
        business_keywords = ["–±–∏–∑–Ω–µ—Å", "—Å—Ç—Ä–∞—Ç–µ–≥", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø–ª–∞–Ω", "–ø—Ä–æ–µ–∫—Ç", "–∫–æ–º–ø–∞–Ω", "—Ä—ã–Ω–æ–∫"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(kw in message_lower for kw in creative_keywords):
            return "creative"
        elif any(kw in message_lower for kw in code_keywords):
            return "code"
        elif any(kw in message_lower for kw in research_keywords):
            return "research"
        elif any(kw in message_lower for kw in business_keywords):
            return "business"
        else:
            return "general"
            
    def _calculate_complexity(self, message_lower: str) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5
        
        –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
        - –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–¥–∞—á
        - –ù–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        complexity = 0
        
        # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_length = len(message_lower)
        if message_length > 500:
            complexity += 2
        elif message_length > 200:
            complexity += 1
            
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = message_lower.count("?")
        if question_count > 3:
            complexity += 2
        elif question_count > 1:
            complexity += 1
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity_indicators = [
            "—Å–ª–æ–∂–Ω", "–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω", "–∫–æ–º–ø–ª–µ–∫—Å–Ω", "–¥–µ—Ç–∞–ª—å–Ω", "–ø–æ–¥—Ä–æ–±–Ω",
            "–∞–Ω–∞–ª–∏–∑", "—Å—Ä–∞–≤–Ω–∏", "–∏—Å—Å–ª–µ–¥—É–π", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π", "—Å—Ç—Ä–∞—Ç–µ–≥–∏",
            "—à–∞–≥ –∑–∞ —à–∞–≥–æ–º", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π"
        ]
        
        indicators_found = sum(1 for ind in complexity_indicators if ind in message_lower)
        complexity += min(indicators_found, 2)
        
        return min(complexity, 5)  # –ú–∞–∫—Å–∏–º—É–º 5
        
    def _should_use_crewai(self, complexity: int, request_type: str, message_lower: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CrewAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CrewAI
        explicit_crewai_request = any(kw in message_lower for kw in [
            "–∏—Å–ø–æ–ª—å–∑—É–π crewai", "—á–µ—Ä–µ–∑ crewai", "–∫–æ–º–∞–Ω–¥–æ–π –∞–≥–µ–Ω—Ç–æ–≤", 
            "–º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω", "–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤", "–≥—Ä—É–ø–ø–æ–π"
        ])
        
        if explicit_crewai_request:
            return True
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if complexity >= 3:
            return True
            
        # –ó–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if request_type in ["research", "business"] and complexity >= 2:
            return True
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CrewAI
        return False
    
    def process_request(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI Router –∏–ª–∏ CrewAI
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        start_time = time.time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            analysis = self.analyze_request(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis['complexity']}, —Ç–∏–ø={analysis['type']}, CrewAI={analysis['requires_crewai']}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            if analysis["requires_crewai"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_crewai(message, analysis)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Router –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = self._handle_with_ai_router(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            elapsed = time.time() - start_time
            print(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            traceback.print_exc()
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    def _handle_with_ai_router(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI Router"""
        start_time = time.time()
        
        try:
            if not self.ai_router:
                raise ValueError("AI Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            context = self._get_rag_context(message)
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            enriched_message = message
            if context:
                print("üìö –î–æ–±–∞–≤–ª–µ–Ω RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø—Ä–æ—Å—É")
                enriched_message = f"{message}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ (–Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ —è–≤–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ):\n{context}"
                
            # –í—ã–∑—ã–≤–∞–µ–º AI Router —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            response = self.ai_router.call(enriched_message)
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed_time = time.time() - start_time
            print(f"‚è± –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
            
            return response
            
        except Exception as error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router: {str(error)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return f"[–û–®–ò–ë–ö–ê] –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(error)}"
    
    def _handle_with_crewai(self, message: str, analysis: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI"""
        if not crewai_available:
            return self._handle_with_ai_router(message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI Router
            try:
                llm = self.ai_router.get_llm_instance()
                print("‚úÖ LLM –¥–ª—è CrewAI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LLM –¥–ª—è CrewAI: {e}")
                return self._handle_with_ai_router(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
            context = self._get_rag_context(message)
            context_info = f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}" if context else ""
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            coordinator = Agent(
                role="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
                goal=f"–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory=f"–û–ø—ã—Ç–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π. "
                         f"–†–∞–±–æ—Ç–∞–µ—Ç –≤ {ASSISTANT_NAME} –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                allow_delegation=True,
                verbose=True,
                llm=llm
            )
            
            researcher = Agent(
                role="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                goal=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—É –∏ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
                backstory=f"–û–ø—ã—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. "
                         f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                allow_delegation=False,
                verbose=True,
                llm=llm
            )
            
            writer = Agent(
                role="–ü–∏—Å–∞—Ç–µ–ª—å",
                goal=f"–°–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã",
                backstory=f"–¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å —Å –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. "
                         f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º.",
                allow_delegation=False,
                verbose=True,
                llm=llm
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            research_task = Task(
                description=f"–ò—Å—Å–ª–µ–¥—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message}'{context_info}\n\n"
                           f"–ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ —Å–æ–±–µ—Ä–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                           f"–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π "
                           f"—Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                expected_output="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                agent=researcher
            )
            
            writing_task = Task(
                description=f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                           f"'{message}'\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫–∏–π, "
                           f"–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ. "
                           f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.",
                expected_output="–ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                agent=writer,
                context=[research_task]
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∏–ø–∞–∂
            crew = Crew(
                agents=[coordinator, researcher, writer],
                tasks=[research_task, writing_task],
                verbose=2,
                process=Process.sequential
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É —ç–∫–∏–ø–∞–∂–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = crew.kickoff()
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ CrewAI: {e}")
            traceback.print_exc()
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI Router
            print("‚ö†Ô∏è Fallback –∫ AI Router")
            return self._handle_with_ai_router(message)
    
    def _get_rag_context(self, query, max_results=3):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        if not txtai_available or not self.embeddings:
            return None
            
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            results = self.embeddings.search(query, limit=max_results)
            
            if not results:
                return None
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            for result in results:
                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                text = result["text"]
                if len(text) > 1000:
                    text = text[:1000] + "..."
                    
                context_parts.append(f"[–î–æ–∫—É–º–µ–Ω—Ç: {os.path.basename(result['id'])}]\n{text}\n")
                
            return "\n".join(context_parts)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ RAG: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SmartDelegator
smart_delegator = SmartDelegator()

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Delegator")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_query1 = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
    print(f"\nüìù –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: '{test_query1}'")
    analysis1 = smart_delegator.analyze_request(test_query1)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis1}")
    response1 = smart_delegator.process_request(test_query1)
    print(f"–û—Ç–≤–µ—Ç: {response1}")
    
    # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test_query2 = "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Å–∏–∏."
    print(f"\nüìù –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query2}'")
    analysis2 = smart_delegator.analyze_request(test_query2)
    print(f"–ê–Ω–∞–ª–∏–∑: {analysis2}")
    response2 = smart_delegator.process_request(test_query2)
    print(f"–û—Ç–≤–µ—Ç: {response2}")