"""
üß† GopiAI Memory Tool –¥–ª—è CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ RAG GopiAI
"""

import os
import json
from typing import Type, Any, List, Dict
from datetime import datetime
from pydantic import BaseModel, Field

class MemoryInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é"""
    action: str = Field(description="–î–µ–π—Å—Ç–≤–∏–µ: store, search, retrieve, list, delete, summarize")
    query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–ª—é—á")
    data: str = Field(default="", description="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    category: str = Field(default="general", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è: general, code, docs, research")
    importance: int = Field(default=5, description="–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10")

class GopiAIMemoryTool:
    """
    –ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é –∏ RAG —Å–∏—Å—Ç–µ–º–æ–π GopiAI
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - RAG (Retrieval-Augmented Generation)
    - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π
    - –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    name: str = "gopiai_memory"
    description: str = """–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ RAG GopiAI.
    
    –î–µ–π—Å—Ç–≤–∏—è:
    - store: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (data=—Ç–µ–∫—Å—Ç, category=–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    - search: –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É (query=–ø–æ–∏—Å–∫–æ–≤—ã–π_–∑–∞–ø—Ä–æ—Å)
    - retrieve: –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–ª—é—á—É (query=–∫–ª—é—á)
    - list: —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (category=–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    - delete: —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (query=–∫–ª—é—á)
    - summarize: —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É (query=—Ç–µ–º–∞)
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
    - general: –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    - code: –∫–æ–¥ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - docs: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    - research: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - store: data="–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", category="research"
    - search: query="–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CrewAI"
    - retrieve: query="project_config"
    """
    args_schema: Type[BaseModel] = MemoryInput
    
    def __init__(self):
                # –ü—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–µ –ø–∞–º—è—Ç–∏
        self.memory_path = os.path.join(
            os.path.dirname(__file__), 
            "../../../rag_memory_system"
        )
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å (—Ñ–∞–π–ª–æ–≤–∞—è)
        self.local_memory_file = os.path.join(
            os.path.dirname(__file__), 
            "../../memory/crewai_memory.json"
        )
        self._ensure_memory_file()
        
    def _ensure_memory_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        os.makedirs(os.path.dirname(self.local_memory_file), exist_ok=True)
        if not os.path.exists(self.local_memory_file):
            with open(self.local_memory_file, 'w', encoding='utf-8') as f:
                json.dump({"memories": [], "metadata": {"created": datetime.now().isoformat()}}, f)
        
    def _run(self, action: str, query: str, data: str = "", category: str = "general", importance: int = 5) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é
        """
        try:
            if action == "store":
                return self._store_memory(data, query, category, importance)
            elif action == "search":
                return self._search_memory(query, category)
            elif action == "retrieve":
                return self._retrieve_memory(query)
            elif action == "list":
                return self._list_memories(category)
            elif action == "delete":
                return self._delete_memory(query)
            elif action == "summarize":
                return self._summarize_memories(query)
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {str(e)}"
    
    def _load_local_memory(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
        try:
            with open(self.local_memory_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {"memories": [], "metadata": {"created": datetime.now().isoformat()}}
    
    def _save_local_memory(self, memory_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
        with open(self.local_memory_file, 'w', encoding='utf-8') as f:
            json.dump(memory_data, f, ensure_ascii=False, indent=2)
    
    def _store_memory(self, data: str, key: str, category: str, importance: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        if not data.strip():
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ RAG —Å–∏—Å—Ç–µ–º—É
            rag_result = self._store_to_rag(data, key, category)
            
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            memory_data = self._load_local_memory()
            
            memory_record = {
                "id": len(memory_data["memories"]) + 1,
                "key": key or f"memory_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "data": data,
                "category": category,
                "importance": importance,
                "timestamp": datetime.now().isoformat(),
                "rag_stored": bool(rag_result)
            }
            
            memory_data["memories"].append(memory_record)
            self._save_local_memory(memory_data)
            
            return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –∫–ª—é—á '{memory_record['key']}', –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' ({len(data)} —Å–∏–º–≤–æ–ª–æ–≤)"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"
    
    def _search_memory(self, query: str, category: str = "all") -> str:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
        if not query.strip():
            return "‚ùå –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ
            rag_results = self._search_in_rag(query, category)
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            memory_data = self._load_local_memory()
            local_results = []
            
            query_lower = query.lower()
            for memory in memory_data["memories"]:
                if category != "all" and memory["category"] != category:
                    continue
                
                # –ü–æ–∏—Å–∫ –≤ –∫–ª—é—á–µ –∏ –¥–∞–Ω–Ω—ã—Ö
                if (query_lower in memory["key"].lower() or 
                    query_lower in memory["data"].lower()):
                    
                    snippet = memory["data"][:200] + "..." if len(memory["data"]) > 200 else memory["data"]
                    local_results.append(f"üîë {memory['key']} ({memory['category']}):\\n{snippet}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = []
            if rag_results:
                results.append(f"üß† RAG —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\\n{rag_results}")
            
            if local_results:
                results.append(f"üíæ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\\n" + "\\n\\n".join(local_results[:5]))
            
            if not results:
                return f"üîç –ü–æ–∏—Å–∫ '{query}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            
            return "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\\n\\n" + "\\n\\n".join(results)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
    
    def _retrieve_memory(self, key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            memory_data = self._load_local_memory()
            
            for memory in memory_data["memories"]:
                if memory["key"] == key:
                    return f"üìÑ –ó–∞–ø–∏—Å—å '{key}':\\n\\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {memory['category']}\\n–í–∞–∂–Ω–æ—Å—Ç—å: {memory['importance']}/10\\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {memory['timestamp']}\\n\\n–î–∞–Ω–Ω—ã–µ:\\n{memory['data']}"
            
            return f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {str(e)}"
    
    def _list_memories(self, category: str = "all") -> str:
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            memory_data = self._load_local_memory()
            
            filtered_memories = []
            for memory in memory_data["memories"]:
                if category == "all" or memory["category"] == category:
                    filtered_memories.append(memory)
            
            if not filtered_memories:
                return f"üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
            filtered_memories.sort(key=lambda x: (x["importance"], x["timestamp"]), reverse=True)
            
            memory_list = []
            for memory in filtered_memories[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 20
                memory_list.append(f"üîë {memory['key']} | {memory['category']} | –≤–∞–∂–Ω–æ—Å—Ç—å: {memory['importance']}/10")
            
            return f"üìã –ó–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏ ({len(filtered_memories)} –≤—Å–µ–≥–æ):\\n" + "\\n".join(memory_list)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {str(e)}"
    
    def _delete_memory(self, key: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        try:
            memory_data = self._load_local_memory()
            
            for i, memory in enumerate(memory_data["memories"]):
                if memory["key"] == key:
                    deleted_memory = memory_data["memories"].pop(i)
                    self._save_local_memory(memory_data)
                    return f"‚úÖ –ó–∞–ø–∏—Å—å '{key}' —É–¥–∞–ª–µ–Ω–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {deleted_memory['category']})"
            
            return f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"
    
    def _summarize_memories(self, topic: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–µ–º–µ"""
        try:
            # –ò—â–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            search_result = self._search_memory(topic, "all")
            
            memory_data = self._load_local_memory()
            related_memories = []
            
            topic_lower = topic.lower()
            for memory in memory_data["memories"]:
                if (topic_lower in memory["key"].lower() or 
                    topic_lower in memory["data"].lower()):
                    related_memories.append(memory)
            
            if not related_memories:
                return f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–µ–º–µ '{topic}'"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            by_category = {}
            for memory in related_memories:
                cat = memory["category"]
                if cat not in by_category:
                    by_category[cat] = []
                by_category[cat].append(memory)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary_parts = [f"üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–µ '{topic}':"]
            
            for category, memories in by_category.items():
                summary_parts.append(f"\\n## {category.upper()} ({len(memories)} –∑–∞–ø–∏—Å–µ–π)")
                for memory in memories[:3]:  # –¢–æ–ø-3 –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    snippet = memory["data"][:100] + "..." if len(memory["data"]) > 100 else memory["data"]
                    summary_parts.append(f"‚Ä¢ {memory['key']}: {snippet}")
            
            return "\\n".join(summary_parts)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}"
    
    def _store_to_rag(self, data: str, key: str, category: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ RAG —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π GopiAI
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å rag_memory_system
            return f"RAG: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} —Å–∏–º–≤–æ–ª–æ–≤"
        except Exception:
            return ""
    
    def _search_in_rag(self, query: str, category: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ RAG —Å–∏—Å—Ç–µ–º–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ GopiAI
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å rag_memory_system
            return ""
        except Exception:
            return ""


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIMemoryTool"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Memory Tools...")
    
    # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    memory = GopiAIMemoryTool()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    result = memory._run("store", "test_key", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏", "research", 8)
    print(f"Store test: {result}")
    
    # –ü–æ–∏—Å–∫
    result = memory._run("search", "—Ç–µ—Å—Ç–æ–≤–∞—è")
    print(f"Search test: {result}")
    
    # –°–ø–∏—Å–æ–∫
    result = memory._run("list", "research")
    print(f"List test: {result}")
    
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")