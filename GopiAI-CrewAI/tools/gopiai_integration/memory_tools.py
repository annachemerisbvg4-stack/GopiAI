"""
üß† GopiAI Memory Tool –¥–ª—è CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ RAG GopiAI
"""

import os
import json
from typing import Type, Any, List, Dict
from datetime import datetime
from pydantic import BaseModel, Field
from crewai.tools.base_tool import BaseTool

class MemoryInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é"""
    action: str = Field(description="–î–µ–π—Å—Ç–≤–∏–µ: store, search, retrieve, list, delete, summarize, new_conversation, get_conversation_history")
    query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–ª—é—á")
    data: str = Field(default="", description="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    category: str = Field(default="general", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è: general, code, docs, research, conversation")
    importance: int = Field(default=5, description="–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10")
    conversation_id: str = Field(default="default", description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

class GopiAIMemoryTool(BaseTool):
    """
    –ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é –∏ RAG —Å–∏—Å—Ç–µ–º–æ–π GopiAI
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - RAG (Retrieval-Augmented Generation)
    - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π
    - –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    name: str = "gopiai_memory"
    description: str = """–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ RAG GopiAI.
    
    –î–µ–π—Å—Ç–≤–∏—è:
    - new_conversation: –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç conversation_id)
    - store: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (data=—Ç–µ–∫—Å—Ç, category=–∫–∞—Ç–µ–≥–æ—Ä–∏—è, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - search: –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É (query=–ø–æ–∏—Å–∫–æ–≤—ã–π_–∑–∞–ø—Ä–æ—Å, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - retrieve: –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–ª—é—á—É (query=–∫–ª—é—á, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - list: —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (category=–∫–∞—Ç–µ–≥–æ—Ä–∏—è, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - delete: —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (query=–∫–ª—é—á, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - summarize: —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É (query=—Ç–µ–º–∞, conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    - get_conversation_history: –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã (conversation_id=–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–±–µ—Å–µ–¥—ã)
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
    - general: –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    - code: –∫–æ–¥ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - docs: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    - research: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    - conversation: —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ—Å–µ–¥—ã
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - new_conversation: (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É
    - store: data="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", category="conversation", conversation_id="123"
    - store: data="–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", category="research", conversation_id="123"
    - search: query="–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", conversation_id="123"
    - get_conversation_history: conversation_id="123"""
    args_schema: Type[BaseModel] = MemoryInput
    memory_path: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../../rag_memory_system"), description="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏")
    local_memory_file: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../memory/crewai_memory.json"), description="–§–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
    
    def __init__(self, **data):
        super().__init__(**data)
        # –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é!
        # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–∑—ã–≤–∞–π—Ç–µ self.init_files() –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

    def init_files(self):
        self._ensure_memory_file()
        
    def _ensure_memory_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        os.makedirs(os.path.dirname(self.local_memory_file), exist_ok=True)
        if not os.path.exists(self.local_memory_file):
            with open(self.local_memory_file, 'w', encoding='utf-8') as f:
                json.dump({"memories": [], "metadata": {"created": datetime.now().isoformat()}}, f)
        
    def _run(self, action: str, query: str = "", data: str = "", category: str = "general", 
             importance: int = 5, conversation_id: str = "default") -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é
        """
        self.init_files()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        try:
            if action == "new_conversation":
                return self._create_new_conversation()
            elif action == "store":
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ—Å–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if category == "conversation":
                    data = self._format_conversation_message(query, data)
                return self._store_memory(data, query, category, importance, conversation_id)
            elif action == "search":
                return self._search_memory(query, category, conversation_id)
            elif action == "retrieve":
                return self._retrieve_memory(query, conversation_id)
            elif action == "list":
                return self._list_memories(category, conversation_id)
            elif action == "delete":
                return self._delete_memory(query, conversation_id)
            elif action == "summarize":
                return self._summarize_memories(query, conversation_id)
            elif action == "get_conversation_history":
                return self._get_conversation_history(conversation_id)
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {str(e)}"
    
    def _format_conversation_message(self, role: str, content: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        from datetime import datetime
        return json.dumps({
            "role": role,  # 'user' –∏–ª–∏ 'assistant'
            "content": content,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False)

    def _create_new_conversation(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID"""
        from uuid import uuid4
        conversation_id = str(uuid4())
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –±–µ—Å–µ–¥—ã
        self._store_memory(
            data=self._format_conversation_message("system", "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã"),
            key=f"conversation_start_{conversation_id}",
            category="conversation",
            importance=1,
            conversation_id=conversation_id
        )
        return conversation_id

    def _get_conversation_history(self, conversation_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ—Å–µ–¥—ã"""
        memories = self._search_memories("", "conversation", conversation_id)
        if not memories:
            return "–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        messages = []
        for mem in memories:
            try:
                msg = json.loads(mem["data"])
                messages.append((msg.get("timestamp", ""), msg.get("role", "unknown"), msg.get("content", "")))
            except:
                continue
                
        messages.sort(key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ timestamp
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        result = []
        for _, role, content in messages:
            result.append(f"{role.upper()}: {content}")
            
        return "\n".join(result) if result else "–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã –ø—É—Å—Ç–∞"

    def _load_local_memory(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
        try:
            with open(self.local_memory_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {"memories": [], "metadata": {"created": datetime.now().isoformat()}}

    def _save_local_memory(self, memory_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
        with open(self.local_memory_file, 'w', encoding='utf-8') as f:
            json.dump(memory_data, f, ensure_ascii=False, indent=2)
    
    def _store_memory(self, data: str, key: str, category: str = "general", 
                     importance: int = 5, conversation_id: str = "default") -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–µ—Å–µ–¥–µ"""
        memory = self._load_local_memory()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏
        memory_item = {
            "key": key,
            "data": data,
            "category": category,
            "importance": importance,
            "timestamp": datetime.now().isoformat(),
            "conversation_id": conversation_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        memory["memories"].append(memory_item)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –±–µ—Å–µ–¥—É)
        if category == "conversation":
            conv_memories = [m for m in memory["memories"] 
                           if m.get("category") == "conversation" 
                           and m.get("conversation_id") == conversation_id]
            if len(conv_memories) > 1000:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
                conv_memories.sort(key=lambda x: x.get("timestamp", ""))
                for m in conv_memories[:-1000]:
                    if m in memory["memories"]:
                        memory["memories"].remove(m)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        self._save_local_memory(memory)
        return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –∫–ª—é—á: {key})"

    def _search_memories(self, query: str = "", category: str = None, 
                        conversation_id: str = None) -> List[Dict]:
        """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–µ—Å–µ–¥–µ"""
        memory = self._load_local_memory()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–µ—Å–µ–¥–µ
        results = []
        for mem in memory.get("memories", []):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if category and mem.get("category") != category:
                continue
            if conversation_id and mem.get("conversation_id") != conversation_id:
                continue
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫–ª—é—á
            if query.lower() not in str(mem.get("data", "")).lower() and \
               query.lower() not in str(mem.get("key", "")).lower():
                continue
                
            results.append(mem)
            
        return results

    def _search_memory(self, query: str, category: str = None, 
                      conversation_id: str = None) -> str:
        """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–µ—Å–µ–¥–µ"""
        memories = self._search_memories(query, category, conversation_id)
        if not memories:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏."
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –∏ –≤–∞–∂–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        memories.sort(key=lambda x: (x.get("importance", 0), 
                                   x.get("timestamp", "")), 
                     reverse=True)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = ["üîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏:"]
        for i, mem in enumerate(memories[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ—Å–µ–¥—ã
            display_data = mem.get("data", "")
            if mem.get("category") == "conversation":
                try:
                    msg = json.loads(display_data)
                    display_data = f"{msg.get('role', 'unknown')}: {msg.get('content', '')}"
                except:
                    pass
                    
            result.append(f"{i}. [–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {mem.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}] "
                        f"{display_data[:200]}{'...' if len(display_data) > 200 else ''}")
            
        return "\n".join(result)

    def _retrieve_memory(self, key: str, conversation_id: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É —Å —É—á–µ—Ç–æ–º –±–µ—Å–µ–¥—ã"""
        memory = self._load_local_memory()
        
        # –ò—â–µ–º –ø–æ –∫–ª—é—á—É –∏ conversation_id
        for mem in memory.get("memories", []):
            if mem.get("key") == key:
                if conversation_id and mem.get("conversation_id") != conversation_id:
                    continue
                return f"üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á—É '{key}':\n{mem.get('data', '')}"
                
        return f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" + \
               (f" –≤ –±–µ—Å–µ–¥–µ {conversation_id}" if conversation_id else "")

    def _delete_memory(self, key: str, conversation_id: str = None) -> str:
        """–£–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ —Å —É—á–µ—Ç–æ–º –±–µ—Å–µ–¥—ã"""
        memory = self._load_local_memory()
        
        # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ –∫–ª—é—á—É –∏ conversation_id
        removed = False
        for mem in memory["memories"][:]:
            if mem.get("key") == key:
                if conversation_id and mem.get("conversation_id") != conversation_id:
                    continue
                memory["memories"].remove(mem)
                removed = True
                
        if removed:
            self._save_local_memory(memory)
            return f"‚úÖ –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º '{key}' —É–¥–∞–ª–µ–Ω–∞" + \
                  (f" –∏–∑ –±–µ—Å–µ–¥—ã {conversation_id}" if conversation_id else "")
        else:
            return f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" + \
                  (f" –≤ –±–µ—Å–µ–¥–µ {conversation_id}" if conversation_id else "")

    def _summarize_memories(self, topic: str, conversation_id: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–º–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        memories = self._search_memories(topic, conversation_id=conversation_id)
        
        if not memories:
            return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{topic}'" + \
                  (f" –≤ –±–µ—Å–µ–¥–µ {conversation_id}" if conversation_id else "")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        memories.sort(key=lambda x: (x.get("importance", 0), 
                                   x.get("timestamp", "")), 
                     reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–≤–æ–¥–∫–∏
        max_entries = 10
        if len(memories) > max_entries:
            memories = memories[:max_entries]
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        result = [f"üìù –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–µ '{topic}':"]
        
        for i, mem in enumerate(memories, 1):
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ—Å–µ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º
            if mem.get("category") == "conversation":
                try:
                    msg = json.loads(mem.get("data", "{}"))
                    content = f"{msg.get('role', 'unknown')}: {msg.get('content', '')}"
                except:
                    content = mem.get("data", "")
            else:
                content = mem.get("data", "")
                
            result.append(f"{i}. {content[:200]}{'...' if len(content) > 200 else ''}")
        
        if len(memories) < len(self._search_memories(topic, conversation_id=conversation_id)):
            result.append(f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {len(memories)} –∏–∑ {len(self._search_memories(topic, conversation_id=conversation_id))} –∑–∞–ø–∏—Å–µ–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            
        return "\n".join(result)

    def _list_memories(self, category: str = None, conversation_id: str = None) -> str:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–µ—Å–µ–¥–µ"""
        memories = self._search_memories("", category, conversation_id)
        if not memories:
            filters = []
            if category:
                filters.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            if conversation_id:
                filters.append(f"–±–µ—Å–µ–¥–∞: {conversation_id}")
                
            return "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" + (f" —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {', '.join(filters)}" if filters else "")
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for mem in memories:
            cat = mem.get("category", "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            conv_id = mem.get("conversation_id", "–±–µ–∑ –±–µ—Å–µ–¥—ã")
            
            if conversation_id:  # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–µ—Å–µ–¥–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
                key = cat
            else:
                key = f"{cat} (–±–µ—Å–µ–¥–∞: {conv_id})"
                
            if key not in categories:
                categories[key] = 0
            categories[key] += 1
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        sorted_cats = sorted(categories.items(), key=lambda x: x[1], reverse=True)
            
        # Format the output
        result = ["üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"]
        for cat, count in sorted_cats:
            result.append(f"- {cat}: {count} –∑–∞–ø–∏—Å–µ–π")
            
        return "\n".join(result)

    def _store_to_rag(self, data: str, key: str, category: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ RAG —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            rag_dir = self.memory_path
            if not os.path.isdir(rag_dir):
                return ""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π json
            os.makedirs(rag_dir, exist_ok=True)
            fname = f"{category}_{key}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            fpath = os.path.join(rag_dir, fname)
            with open(fpath, 'w', encoding='utf-8') as f:
                json.dump({"key": key, "data": data, "category": category, "timestamp": datetime.now().isoformat()}, f, ensure_ascii=False, indent=2)
            return f"RAG: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {fpath}"
        except Exception as e:
            return f"RAG: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"

    def _search_in_rag(self, query: str, category: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ RAG —Å–∏—Å—Ç–µ–º–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            rag_dir = self.memory_path
            if not os.path.isdir(rag_dir):
                return ""
            results = []
            for fname in os.listdir(rag_dir):
                if not fname.endswith('.json'):
                    continue
                fpath = os.path.join(rag_dir, fname)
                try:
                    with open(fpath, 'r', encoding='utf-8') as f:
                        rec = json.load(f)
                        if (query.lower() in rec.get('key', '').lower() or query.lower() in rec.get('data', '').lower()):
                            if category == "all" or rec.get('category') == category:
                                snippet = rec.get('data', '')[:200] + "..." if len(rec.get('data', '')) > 200 else rec.get('data', '')
                                results.append(f"RAG: {rec.get('key')} ({rec.get('category')}): {snippet}")
                except Exception:
                    continue
            return "\n".join(results[:5]) if results else ""
        except Exception as e:
            return f"RAG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIMemoryTool"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Memory Tools...")
    
    # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    memory = GopiAIMemoryTool()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    result = memory._run("store", "test_key", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏", "research", 8)
    print(f"Store test: {result}")
    
    # –ü–æ–∏—Å–∫
    result = memory._run("search", "—Ç–µ—Å—Ç–æ–≤–∞—è")
    print(f"Search test: {result}")
    
    # –°–ø–∏—Å–æ–∫
    result = memory._run("list", "research")
    print(f"List test: {result}")
    
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")