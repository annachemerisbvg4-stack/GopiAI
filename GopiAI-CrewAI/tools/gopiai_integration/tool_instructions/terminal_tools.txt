# Terminal Tool - Detailed Instructions

## Overview
The Terminal Tool allows you to execute shell commands in the GopiAI terminal interface. This tool provides a safe way to interact with the command line while ensuring the commands are visible to the user and properly logged.

## Usage Guidelines

### Basic Usage
To execute a command in the terminal:
```
terminal("command to execute")
```

### Safety Considerations
- All commands are validated for safety before execution
- Potentially dangerous commands (like `rm -rf /`) are automatically blocked
- Commands are executed with the current user's permissions
- All commands and their outputs are logged in the terminal for transparency

### Best Practices
1. **Be specific and clear** with your commands
2. **Verify paths** before operations that modify files
3. **Use relative paths** when possible
4. **Explain to the user** what the command will do before executing it
5. **Check command output** to confirm successful execution

### Common Use Cases
- Navigating directories: `cd`, `dir`, `ls`
- Viewing file contents: `cat`, `type`, `more`
- File operations: `copy`, `mkdir`, `touch`
- System information: `systeminfo`, `ver`, `uname -a`
- Running scripts: `python script.py`, `node app.js`

### Limitations
- Commands requiring elevated permissions may fail
- Interactive commands (requiring user input) are not fully supported
- Long-running commands have a timeout of 60 seconds
- Some dangerous operations are blocked for safety

## Examples

### Example 1: List files in current directory
```python
terminal("dir")  # Windows
terminal("ls -la")  # Unix/Linux
```

### Example 2: Check system information
```python
terminal("systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"")  # Windows
terminal("uname -a")  # Unix/Linux
```

### Example 3: Run a Python script
```python
terminal("python -V")  # Check Python version
terminal("python script.py --arg1 value1")  # Run script with arguments
```

### Example 4: Navigate and create directories
```python
terminal("cd projects")
terminal("mkdir new_project")
terminal("cd new_project")
```

## Error Handling
If a command fails, the tool will return an error message with details about what went wrong. Common errors include:
- Command not found
- Permission denied
- Timeout (command took too long)
- Security violation (command blocked for safety)

Always check the returned output and error messages to ensure commands executed as expected. 