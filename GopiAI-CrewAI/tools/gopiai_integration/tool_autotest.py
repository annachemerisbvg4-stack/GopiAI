"""
üß™ Tool Autotest
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–∞—Ö –∞–≤—Ç–æ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–∏–∞—Å—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
"""

import logging
import json
import time
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from .tool_dispatcher import get_tool_dispatcher, ToolDispatcher, IntentMode, DispatchResult
from .tool_aliases import get_tool_alias_manager, ToolAliasManager
from .intent_parser import get_intent_parser, IntentParser

logger = logging.getLogger(__name__)

class TestResult(Enum):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    PASS = "pass"
    FAIL = "fail"
    SKIP = "skip"
    ERROR = "error"

@dataclass
class ToolTestCase:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    test_name: str
    mode: IntentMode
    user_text: str
    expected_params: Dict[str, Any]
    should_succeed: bool = True
    timeout_seconds: int = 30

@dataclass
class TestReport:
    """–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    tool_name: str
    test_name: str
    result: TestResult
    execution_time: float
    error_message: Optional[str] = None
    response_data: Any = None
    warnings: List[str] = None

class ToolAutoTest:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∞–ª–∏–∞—Å—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π.
    """
    
    def __init__(self, smart_delegator=None):
        self.logger = logging.getLogger(__name__)
        self.tool_dispatcher = get_tool_dispatcher(smart_delegator)
        self.alias_manager = get_tool_alias_manager()
        self.intent_parser = get_intent_parser()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_reports: List[TestReport] = []
        self.warnings: List[str] = []
        
        self.logger.info("‚úÖ ToolAutoTest –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def generate_test_cases(self) -> List[ToolTestCase]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Returns:
            List[ToolTestCase]: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
        """
        test_cases = []
        canonical_tools = self.alias_manager.get_canonical_tools()
        
        for tool_name in canonical_tools:
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            aliases = self.alias_manager.get_all_aliases(tool_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_tests = self._generate_tool_specific_tests(tool_name)
            test_cases.extend(tool_tests)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–∏–∞—Å—ã
            for alias in aliases[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–ª–∏–∞—Å–∞
                if alias != tool_name:
                    test_case = ToolTestCase(
                        tool_name=alias,
                        test_name=f"alias_{alias}",
                        mode=IntentMode.FORCED,
                        user_text=f"–ò—Å–ø–æ–ª—å–∑—É–π {alias}",
                        expected_params={},
                        should_succeed=True
                    )
                    test_cases.append(test_case)
        
        self.logger.info(f"üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è {len(canonical_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return test_cases
    
    def _generate_tool_specific_tests(self, tool_name: str) -> List[ToolTestCase]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Args:
            tool_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            List[ToolTestCase]: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        tests = []
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        tests.append(ToolTestCase(
            tool_name=tool_name,
            test_name="forced_basic",
            mode=IntentMode.FORCED,
            user_text=f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π {tool_name}",
            expected_params={},
            should_succeed=True
        ))
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if tool_name == 'execute_shell':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_ls_command",
                    mode=IntentMode.AUTO,
                    user_text="ls -la",
                    expected_params={'command': 'ls -la'},
                    should_succeed=True
                ),
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_russian_intent",
                    mode=IntentMode.AUTO,
                    user_text="–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ",
                    expected_params={},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'file_operations':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_file_path",
                    mode=IntentMode.AUTO,
                    user_text="–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª test.txt",
                    expected_params={'path': 'test.txt', 'operation': 'read'},
                    should_succeed=True
                ),
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_windows_path",
                    mode=IntentMode.AUTO,
                    user_text="–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ C:\\Users\\test",
                    expected_params={'path': 'C:\\Users\\test'},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'web_scraper':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_url_scraping",
                    mode=IntentMode.AUTO,
                    user_text="—Å–∫–∞—á–∞–π –¥–∞–Ω–Ω—ã–µ —Å https://example.com",
                    expected_params={'url': 'https://example.com', 'action': 'get_text'},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'web_search':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_search_intent",
                    mode=IntentMode.AUTO,
                    user_text="–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python",
                    expected_params={'query': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python'},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'api_client':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_api_request",
                    mode=IntentMode.AUTO,
                    user_text="—Å–¥–µ–ª–∞–π GET –∑–∞–ø—Ä–æ—Å –∫ https://api.example.com",
                    expected_params={'url': 'https://api.example.com', 'method': 'GET'},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'code_interpreter':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_python_code",
                    mode=IntentMode.AUTO,
                    user_text="–≤—ã–ø–æ–ª–Ω–∏ python –∫–æ–¥: print('Hello, World!')",
                    expected_params={'code': "print('Hello, World!')"},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'dalle_tool':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_image_generation",
                    mode=IntentMode.AUTO,
                    user_text="—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞",
                    expected_params={'prompt': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞'},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'system_info':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_system_info",
                    mode=IntentMode.AUTO,
                    user_text="–ø–æ–∫–∞–∂–∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                    expected_params={},
                    should_succeed=True
                )
            ])
        
        elif tool_name == 'time_helper':
            tests.extend([
                ToolTestCase(
                    tool_name=tool_name,
                    test_name="auto_time_request",
                    mode=IntentMode.AUTO,
                    user_text="—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏?",
                    expected_params={},
                    should_succeed=True
                )
            ])
        
        return tests
    
    async def run_all_tests(self, max_concurrent: int = 5) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            max_concurrent (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        start_time = time.time()
        test_cases = self.generate_test_cases()
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é {max_concurrent}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        semaphore = asyncio.Semaphore(max_concurrent)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tasks = [self._run_single_test_async(test_case, semaphore) for test_case in test_cases]
        
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        total_time = time.time() - start_time
        report = self._generate_summary_report(total_time)
        
        self.logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        return report
    
    async def _run_single_test_async(self, test_case: ToolTestCase, semaphore: asyncio.Semaphore) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
        
        Args:
            test_case (ToolTestCase): –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
            semaphore (asyncio.Semaphore): –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        async with semaphore:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                loop = asyncio.get_event_loop()
                report = await loop.run_in_executor(None, self._run_single_test, test_case)
                self.test_reports.append(report)
            except Exception as e:
                error_report = TestReport(
                    tool_name=test_case.tool_name,
                    test_name=test_case.test_name,
                    result=TestResult.ERROR,
                    execution_time=0.0,
                    error_message=str(e)
                )
                self.test_reports.append(error_report)
    
    def _run_single_test(self, test_case: ToolTestCase) -> TestReport:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
        
        Args:
            test_case (ToolTestCase): –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
            
        Returns:
            TestReport: –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
        """
        start_time = time.time()
        
        try:
            self.logger.debug(f"üß™ –¢–µ—Å—Ç {test_case.tool_name}.{test_case.test_name} ({test_case.mode.value})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—é
            if test_case.mode == IntentMode.FORCED:
                dispatch_response = self.tool_dispatcher.dispatch_tool_call(
                    tool_name=test_case.tool_name,
                    params=test_case.expected_params,
                    user_text=test_case.user_text,
                    mode=test_case.mode,
                    context={}
                )
            else:
                dispatch_response = self.tool_dispatcher.dispatch_by_intent(
                    user_text=test_case.user_text,
                    forced_tool=None,
                    context={},
                    min_confidence=0.3  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
            
            execution_time = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not dispatch_response:
                return TestReport(
                    tool_name=test_case.tool_name,
                    test_name=test_case.test_name,
                    result=TestResult.FAIL,
                    execution_time=execution_time,
                    error_message="–î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if test_case.should_succeed:
                if dispatch_response.result == DispatchResult.SUCCESS:
                    result = TestResult.PASS
                    error_message = None
                else:
                    result = TestResult.FAIL
                    error_message = dispatch_response.error_message
            else:
                if dispatch_response.result != DispatchResult.SUCCESS:
                    result = TestResult.PASS
                    error_message = None
                else:
                    result = TestResult.FAIL
                    error_message = "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if (test_case.mode == IntentMode.AUTO and 
                test_case.expected_params and 
                result == TestResult.PASS):
                
                actual_params = dispatch_response.tool_call.params
                for key, expected_value in test_case.expected_params.items():
                    if key not in actual_params:
                        result = TestResult.FAIL
                        error_message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {key}"
                        break
            
            return TestReport(
                tool_name=test_case.tool_name,
                test_name=test_case.test_name,
                result=result,
                execution_time=execution_time,
                error_message=error_message,
                response_data=dispatch_response.response_data if dispatch_response else None
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            return TestReport(
                tool_name=test_case.tool_name,
                test_name=test_case.test_name,
                result=TestResult.ERROR,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    def _generate_summary_report(self, total_time: float) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
        
        Args:
            total_time (float): –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = len(self.test_reports)
        passed = len([r for r in self.test_reports if r.result == TestResult.PASS])
        failed = len([r for r in self.test_reports if r.result == TestResult.FAIL])
        errors = len([r for r in self.test_reports if r.result == TestResult.ERROR])
        skipped = len([r for r in self.test_reports if r.result == TestResult.SKIP])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        tools_stats = {}
        for report in self.test_reports:
            if report.tool_name not in tools_stats:
                tools_stats[report.tool_name] = {
                    'total': 0, 'passed': 0, 'failed': 0, 'errors': 0, 'skipped': 0
                }
            
            tools_stats[report.tool_name]['total'] += 1
            if report.result == TestResult.PASS:
                tools_stats[report.tool_name]['passed'] += 1
            elif report.result == TestResult.FAIL:
                tools_stats[report.tool_name]['failed'] += 1
            elif report.result == TestResult.ERROR:
                tools_stats[report.tool_name]['errors'] += 1
            elif report.result == TestResult.SKIP:
                tools_stats[report.tool_name]['skipped'] += 1
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        problematic_tools = []
        for tool_name, stats in tools_stats.items():
            if stats['failed'] > 0 or stats['errors'] > 0:
                problematic_tools.append({
                    'tool': tool_name,
                    'failed': stats['failed'],
                    'errors': stats['errors'],
                    'success_rate': stats['passed'] / stats['total'] if stats['total'] > 0 else 0
                })
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        slowest_tests = sorted(
            [r for r in self.test_reports if r.execution_time > 0],
            key=lambda x: x.execution_time,
            reverse=True
        )[:10]
        
        summary = {
            'overview': {
                'total_tests': total_tests,
                'passed': passed,
                'failed': failed,
                'errors': errors,
                'skipped': skipped,
                'success_rate': passed / total_tests if total_tests > 0 else 0,
                'total_time': total_time,
                'avg_time_per_test': total_time / total_tests if total_tests > 0 else 0
            },
            'tools_stats': tools_stats,
            'problematic_tools': problematic_tools,
            'slowest_tests': [
                {
                    'tool': t.tool_name,
                    'test': t.test_name,
                    'time': t.execution_time,
                    'result': t.result.value
                }
                for t in slowest_tests
            ],
            'failed_tests': [
                {
                    'tool': r.tool_name,
                    'test': r.test_name,
                    'error': r.error_message,
                    'time': r.execution_time
                }
                for r in self.test_reports 
                if r.result in [TestResult.FAIL, TestResult.ERROR]
            ],
            'warnings': self.warnings
        }
        
        return summary
    
    def run_tests_sync(self) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.
        
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        start_time = time.time()
        test_cases = self.generate_test_cases()
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
        
        for test_case in test_cases:
            report = self._run_single_test(test_case)
            self.test_reports.append(report)
        
        total_time = time.time() - start_time
        return self._generate_summary_report(total_time)
    
    def print_summary(self, report: Dict[str, Any]) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
        
        Args:
            report (Dict[str, Any]): –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        overview = report['overview']
        
        print("\n" + "="*60)
        print("üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print("="*60)
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {overview['total_tests']}")
        print(f"   ‚úÖ –ü—Ä–æ—à–ª–∏: {overview['passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {overview['failed']}")
        print(f"   üí• –û—à–∏–±–∫–∏: {overview['errors']}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã: {overview['skipped']}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overview['success_rate']:.1%}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {overview['total_time']:.2f}—Å")
        
        if report['problematic_tools']:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            for tool in report['problematic_tools']:
                print(f"   {tool['tool']}: {tool['failed']} –ø—Ä–æ–≤–∞–ª–æ–≤, {tool['errors']} –æ—à–∏–±–æ–∫")
        
        if report['failed_tests']:
            print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
            for test in report['failed_tests'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                print(f"   {test['tool']}.{test['test']}: {test['error']}")
        
        print("\n" + "="*60)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
def run_tool_autotest(smart_delegator=None, async_mode: bool = False) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    
    Args:
        smart_delegator: –≠–∫–∑–µ–º–ø–ª—è—Ä SmartDelegator
        async_mode (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        
    Returns:
        Dict[str, Any]: –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    autotest = ToolAutoTest(smart_delegator)
    
    if async_mode:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            report = loop.run_until_complete(autotest.run_all_tests())
            loop.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            report = autotest.run_tests_sync()
    else:
        report = autotest.run_tests_sync()
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    autotest.print_summary(report)
    
    return report


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.INFO)
    report = run_tool_autotest(async_mode=False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open("tool_autotest_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
