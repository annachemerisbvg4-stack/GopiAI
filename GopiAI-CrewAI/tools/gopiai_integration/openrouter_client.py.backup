#!/usr/bin/env python3
"""
OpenRouter API Client –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GopiAI
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import json
import time
import asyncio
import logging
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime, timedelta

import aiohttp
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

logger = logging.getLogger(__name__)

@dataclass
class OpenRouterModel:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ OpenRouter"""
    id: str
    name: str
    description: str
    context_length: int
    pricing: Dict[str, Any]
    is_active: bool
    is_free: bool
    provider: str
    top_provider: Dict[str, Any]
    
    @classmethod
    def from_api_response(cls, data: Dict[str, Any]) -> 'OpenRouterModel':
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        pricing = data.get('pricing', {})
        prompt_price = float(pricing.get('prompt', '0'))
        completion_price = float(pricing.get('completion', '0'))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π
        is_free = (prompt_price == 0 and completion_price == 0) or ':free' in data.get('id', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ ID
        model_id = data.get('id', '')
        provider = model_id.split('/')[0] if '/' in model_id else 'unknown'
        
        return cls(
            id=data.get('id', ''),
            name=data.get('name', model_id),
            description=data.get('description', ''),
            context_length=data.get('context_length', 0),
            pricing=pricing,
            is_active=data.get('is_active', False),
            is_free=is_free,
            provider=provider,
            top_provider=data.get('top_provider', {})
        )
    
    def get_display_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º—è –º–æ–¥–µ–ª–∏"""
        if self.name and self.name != self.id:
            return f"{self.name} ({self.id})"
        return self.id
    
    def get_price_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if self.is_free:
            return "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        
        prompt_price = float(self.pricing.get('prompt', '0'))
        completion_price = float(self.pricing.get('completion', '0'))
        
        if prompt_price > 0 or completion_price > 0:
            return f"üí∞ ${prompt_price:.6f}/{completion_price:.6f} –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤"
        
        return "üí∞ –ü–ª–∞—Ç–Ω–∞—è"
    
    def matches_search(self, search_term: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        if not search_term:
            return True
        
        search_term = search_term.lower()
        return (
            search_term in self.id.lower() or
            search_term in self.name.lower() or
            search_term in self.description.lower() or
            search_term in self.provider.lower()
        )

class OpenRouterClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""
    
    BASE_URL = "https://openrouter.ai"
    MODELS_ENDPOINT = "/api/v1/models"
    CACHE_DURATION = timedelta(minutes=30)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
        
        Args:
            api_key: API –∫–ª—é—á OpenRouter (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        self.api_key = api_key or os.getenv('OPENROUTER_API_KEY')
        if not self.api_key:
            logger.warning("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self._models_cache: List[OpenRouterModel] = []
        self._cache_timestamp: Optional[datetime] = None
        self._session = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        
        logger.info("üîå OpenRouterClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _get_headers(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "GopiAI/1.0"
        }
        
        if self.api_key:
            headers["Authorization"] = f"Bearer {self.api_key}"
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è OpenRouter
        if os.getenv('OR_SITE_URL'):
            headers["HTTP-Referer"] = os.getenv('OR_SITE_URL')
        
        if os.getenv('OR_APP_NAME'):
            headers["X-Title"] = os.getenv('OR_APP_NAME')
        
        return headers
    
    def _is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à"""
        if not self._cache_timestamp:
            return False
        
        return datetime.now() - self._cache_timestamp < self.CACHE_DURATION
    
    def get_models_sync(self, force_refresh: bool = False) -> List[OpenRouterModel]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        if not force_refresh and self._is_cache_valid():
            logger.debug("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞")
            return self._models_cache
        
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OpenRouter...")
            
            session = requests.Session()
            session.mount("https://", HTTPAdapter(max_retries=self.retry_strategy))
            
            url = f"{self.BASE_URL}{self.MODELS_ENDPOINT}"
            response = session.get(url, headers=self._get_headers(), timeout=30)
            
            if response.status_code == 401:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY")
                return []
            
            response.raise_for_status()
            data = response.json()
            
            # –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏
            models_data = data.get('data', [])
            models = []
            
            for model_data in models_data:
                try:
                    model = OpenRouterModel.from_api_response(model_data)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
                    if model.is_active:
                        models.append(model)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model_data.get('id', 'unknown')}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏: —Å–Ω–∞—á–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            models.sort(key=lambda m: (not m.is_free, m.id.lower()))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._models_cache = models
            self._cache_timestamp = datetime.now()
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter")
            logger.info(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {sum(1 for m in models if m.is_free)}")
            logger.info(f"üí∞ –ü–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {sum(1 for m in models if not m.is_free)}")
            
            return models
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return self._models_cache  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return self._models_cache
    
    async def get_models_async(self, force_refresh: bool = False) -> List[OpenRouterModel]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        if not force_refresh and self._is_cache_valid():
            logger.debug("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞ (async)")
            return self._models_cache
        
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OpenRouter (async)...")
            
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                url = f"{self.BASE_URL}{self.MODELS_ENDPOINT}"
                
                async with session.get(url, headers=self._get_headers()) as response:
                    if response.status == 401:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY")
                        return []
                    
                    response.raise_for_status()
                    data = await response.json()
            
            # –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏
            models_data = data.get('data', [])
            models = []
            
            for model_data in models_data:
                try:
                    model = OpenRouterModel.from_api_response(model_data)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
                    if model.is_active:
                        models.append(model)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model_data.get('id', 'unknown')}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏: —Å–Ω–∞—á–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            models.sort(key=lambda m: (not m.is_free, m.id.lower()))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._models_cache = models
            self._cache_timestamp = datetime.now()
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter (async)")
            
            return models
            
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π (async): {e}")
            return self._models_cache
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π (async): {e}")
            return self._models_cache
    
    def search_models(self, search_term: str, models: Optional[List[OpenRouterModel]] = None) -> List[OpenRouterModel]:
        """
        –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            search_term: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à)
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        """
        if models is None:
            models = self._models_cache
        
        if not search_term:
            return models
        
        filtered_models = [model for model in models if model.matches_search(search_term)]
        
        logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(filtered_models)} –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
        
        return filtered_models
    
    def get_model_by_id(self, model_id: str) -> Optional[OpenRouterModel]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ ID
        
        Args:
            model_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏
            
        Returns:
            –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        for model in self._models_cache:
            if model.id == model_id:
                return model
        
        return None
    
    def get_free_models(self) -> List[OpenRouterModel]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        return [model for model in self._models_cache if model.is_free]
    
    def get_paid_models(self) -> List[OpenRouterModel]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        return [model for model in self._models_cache if not model.is_free]
    
    def format_model_for_litellm(self, model_id: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ID –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å LiteLLM
        
        Args:
            model_id: ID –º–æ–¥–µ–ª–∏ OpenRouter
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è LiteLLM
        """
        if model_id.startswith('openrouter/'):
            return model_id
        
        return f"openrouter/{model_id}"
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenRouter API
        
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenRouter API...")
            
            session = requests.Session()
            session.mount("https://", HTTPAdapter(max_retries=self.retry_strategy))
            
            url = f"{self.BASE_URL}{self.MODELS_ENDPOINT}"
            response = session.get(url, headers=self._get_headers(), timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenRouter API —É—Å–ø–µ—à–Ω–æ")
                return True
            elif response.status_code == 401:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞"""
        return {
            "cached_models": len(self._models_cache),
            "cache_timestamp": self._cache_timestamp.isoformat() if self._cache_timestamp else None,
            "cache_valid": self._is_cache_valid(),
            "cache_age_minutes": (
                (datetime.now() - self._cache_timestamp).total_seconds() / 60
                if self._cache_timestamp else None
            )
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_global_client: Optional[OpenRouterClient] = None

def get_openrouter_client() -> OpenRouterClient:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenRouter –∫–ª–∏–µ–Ω—Ç–∞"""
    global _global_client
    
    if _global_client is None:
        _global_client = OpenRouterClient()
    
    return _global_client

def test_openrouter_integration():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ === –¢–ï–°–¢ OPENROUTER CLIENT ===")
    
    client = get_openrouter_client()
    
    # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    if client.test_connection():
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    print("\n2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...")
    models = client.get_models_sync()
    
    if models:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        free_models = client.get_free_models()
        paid_models = client.get_paid_models()
        
        print(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {len(free_models)}")
        print(f"üí∞ –ü–ª–∞—Ç–Ω—ã—Ö: {len(paid_models)}")
        
        if free_models:
            print(f"\n–ü—Ä–∏–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏: {free_models[0].get_display_name()}")
            print(f"–¶–µ–Ω–∞: {free_models[0].get_price_info()}")
        
        if paid_models:
            print(f"\n–ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏: {paid_models[0].get_display_name()}")
            print(f"–¶–µ–Ω–∞: {paid_models[0].get_price_info()}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        search_results = client.search_models("gpt")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É 'gpt'")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è LiteLLM
        if models:
            test_model = models[0]
            formatted = client.format_model_for_litellm(test_model.id)
            print(f"\n4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è LiteLLM:")
            print(f"–ò—Å—Ö–æ–¥–Ω—ã–π ID: {test_model.id}")
            print(f"–î–ª—è LiteLLM: {formatted}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    test_openrouter_integration()
