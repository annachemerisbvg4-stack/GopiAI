"""
üîÑ GopiAI AI Router LLM –¥–ª—è CrewAI
–ê–¥–∞–ø—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã AI Router –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
"""

import os
import subprocess
import json
from typing import Dict, List, Optional, Any, Mapping
import time
import random
from pathlib import Path

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
ROUTER_PATH = os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), "ai_router"))

class AIRouterLLM:
    """
    LLM-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Router —Å CrewAI.
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    - Fallback –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∑–∞–¥–∞—á—É
    """
    
    def __init__(self, model_preference="auto"):
        self.model_preference = model_preference
        self.api_key = "api_key_not_needed_using_router"  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        self.last_call = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
        if not os.path.exists(ROUTER_PATH):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AI Router –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ROUTER_PATH}")
    
    def call(self, prompt: str, temperature: float = 0.7, max_tokens: int = 1000) -> str:
        """
        –í—ã–∑–æ–≤ LLM —á–µ—Ä–µ–∑ AI Router
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É CrewAI
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        current_time = time.time()
        if current_time - self.last_call < 1.0:
            time.sleep(1.0)
        self.last_call = time.time()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
        task_type = self._detect_task_type(prompt)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ subprocess
            result = self._subprocess_router_call(prompt, task_type, self.model_preference)
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI Router: {e}")
            # Fallback: —ç–º—É–ª—è—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return self._simulate_router_call(prompt, task_type)
    
    def _detect_task_type(self, prompt: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
        """
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç"]):
            return "code"
        elif any(word in prompt_lower for word in ["–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á"]):
            return "creative"
        elif any(word in prompt_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–æ—Ü–µ–Ω", "—Å—Ä–∞–≤–Ω"]):
            return "analysis"
        else:
            return "chat"
    
    def _subprocess_router_call(self, message: str, task_type: str, model_preference: str) -> str:
        """
        –í—ã–∑–æ–≤ AI Router —á–µ—Ä–µ–∑ subprocess (Node.js)
        """
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safe_message = message.replace("'", "\\'").replace('"', '\\"')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ -e
        temp_js_file = os.path.join(ROUTER_PATH, "temp_request.js")
        
        try:
            # JavaScript –∫–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI Router
            js_code = f"""
            const path = require('path');
            try {{
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                const router = require('./ai_router_system.js').AIRouter;
                const config = require('./ai_rotation_config.js');
                
                // –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
                function estimateTokens(text) {{
                    if (!text) return 0;
                    // –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è –ª–∞—Ç–∏–Ω–∏—Ü—ã, ~2 –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    const latinChars = (text.match(/[a-zA-Z0-9\\s.,!?;:()\\-]/g) || []).length;
                    const cyrillicChars = text.length - latinChars;
                    return Math.ceil(latinChars / 4 + cyrillicChars / 2);
                }}
                
                async function processRequest() {{
                    try {{
                        const routerInstance = new router(config.AI_PROVIDERS_CONFIG);
                        const result = await routerInstance.chat('{safe_message}', {{ 
                            taskType: '{task_type}',
                            temperature: 0.7,
                            maxTokens: 1000
                        }});
                        console.log(JSON.stringify({{ 
                            success: true, 
                            response: result.response,
                            provider: result.provider,
                            tokens: result.tokens || estimateTokens(result.response) || 0
                        }}));
                    }} catch (error) {{
                        console.log(JSON.stringify({{ 
                            success: false, 
                            error: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ processRequest" 
                        }}));
                    }}
                }}
                
                processRequest();
            }} catch (error) {{
                console.log(JSON.stringify({{ 
                    success: false, 
                    error: `Failed to require modules: ${{error.message || "Unknown error"}}` 
                }}));
            }}
            """
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                with open(temp_js_file, 'w', encoding='utf-8') as f:
                    f.write(js_code)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ JS —Ñ–∞–π–ª–∞: {e}")
                return self._simulate_router_call(message, task_type)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Node.js
            try:
                # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                env = os.environ.copy()
                env['PYTHONIOENCODING'] = 'utf-8'
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞
                output_file = os.path.join(ROUTER_PATH, "temp_output.json")
                
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JS-–∫–æ–¥, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
                with open(temp_js_file, 'r', encoding='utf-8') as f:
                    js_code = f.read()
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –≤ –ø—É—Ç–∏ –¥–ª—è JavaScript
                safe_output_path = output_file.replace('\\', '\\\\')
                
                js_code_with_file_output = js_code.replace(
                    'console.log(JSON.stringify(',
                    f'const fs = require("fs"); fs.writeFileSync("{safe_output_path}", JSON.stringify('
                ).replace(
                    '}));',
                    '}, null, 2));'
                )
                
                with open(temp_js_file, 'w', encoding='utf-8') as f:
                    f.write(js_code_with_file_output)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Node.js
                result = subprocess.run(
                    ["node", temp_js_file],
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    timeout=30,
                    cwd=ROUTER_PATH,
                    env=env
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞
                if os.path.exists(output_file):
                    with open(output_file, 'r', encoding='utf-8') as f:
                        output_content = f.read()
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞
                    try:
                        os.remove(output_file)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞: {e}")
                    
                    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if output_content and output_content.strip():
                        response_data = json.loads(output_content)
                        if response_data.get("success"):
                            return response_data["response"]
                        else:
                            router_error = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            print(f"‚ö†Ô∏è AI Router –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {router_error}")
                            return self._simulate_router_call(message, task_type)
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
                if result.returncode == 0 and result.stdout and result.stdout.strip():
                    print(f"üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Node.js —á–µ—Ä–µ–∑ stdout ({len(result.stdout)} –±–∞–π—Ç)")
                    try:
                        response_data = json.loads(result.stdout.strip())
                        if response_data.get("success"):
                            return response_data["response"]
                        else:
                            router_error = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            print(f"‚ö†Ô∏è AI Router –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {router_error}")
                            return self._simulate_router_call(message, task_type)
                    except json.JSONDecodeError:
                        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ fallback
                
                # –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI Router")
                return self._simulate_router_call(message, task_type)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Node.js: {e}")
                return self._simulate_router_call(message, task_type)
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS-—Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                try:
                    if os.path.exists(temp_js_file):
                        os.remove(temp_js_file)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS-—Ñ–∞–π–ª: {e}")
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è AI Router: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return self._simulate_router_call(message, task_type)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI Router: {str(e)}")
            return self._simulate_router_call(message, task_type)
    
    def _simulate_router_call(self, message: str, task_type: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è AI Router –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ Node.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏!
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–π AI Router
        
        import random
        import string
        
        prefix = f"[–≠–ú–£–õ–Ø–¶–ò–Ø AI ROUTER] "
        timestamp = time.strftime("%H:%M:%S")
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task_type == "code":
            return prefix + f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n```python\n# –ö–æ–¥ –¥–ª—è: {message[:50]}...\ndef smart_function(input_data):\n    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n    result = process_data(input_data)\n    return result\n```"
        elif task_type == "creative":
            return prefix + f"–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n{message[:50]}...\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞—Å—Ç–æ—è—â–∏–º AI. –í —Ä–µ–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        elif task_type == "analysis":
            return prefix + f"–ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message[:50]}...\n\n1. –ü–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞\n2. –í—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç\n3. –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏\n\n–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ."
        else:
            return prefix + f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{message[:100]}...'\n\n–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI Router. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ñ–∞–π–ª—ã ai_router_system.js –¥–æ—Å—Ç—É–ø–Ω—ã."
            
    def get_llm_instance(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
        
        Returns:
            LLM: –≠–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è CrewAI
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è CrewAI
            from langchain.llms.base import LLM
            
            class AIRouterWrapper(LLM):
                """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è AI Router, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å LangChain"""
                
                def __init__(self, ai_router: AIRouterLLM, **kwargs):
                    super().__init__(**kwargs)
                    self.ai_router = ai_router
                
                @property
                def _llm_type(self) -> str:
                    return "ai_router"
                
                def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
                    """–í—ã–∑–æ–≤ AI Router"""
                    return self.ai_router.call(prompt)
                
                @property
                def _identifying_params(self) -> Mapping[str, Any]:
                    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LangChain"""
                    return {"model": "ai_router"}
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            wrapper = AIRouterWrapper(ai_router=self)
            return wrapper
            
        except ImportError:
            print("‚ö†Ô∏è langchain –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º self")
            return self