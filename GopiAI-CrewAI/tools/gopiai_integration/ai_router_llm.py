"""
üîÑ GopiAI AI Router LLM –¥–ª—è CrewAI
–ê–¥–∞–ø—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã AI Router –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
"""

import os
import subprocess
import json
from typing import Dict, List, Optional, Any, Mapping, Union
import time
import random
from pathlib import Path
import traceback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
from .base.base_tool import GopiAIBaseTool

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
ROUTER_PATH = os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), "ai_router"))

class AIRouterLLM(GopiAIBaseTool):
    """
    LLM-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Router —Å CrewAI.
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    - Fallback –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∑–∞–¥–∞—á—É
    """
    
    def __init__(self, model_preference="auto"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI Router LLM –∞–¥–∞–ø—Ç–µ—Ä"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ GopiAIBaseTool
            super().__init__()
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å GopiAIBaseTool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞: {e}")
            traceback.print_exc()
        
        self.model_preference = model_preference
        self.api_key = "api_key_not_needed_using_router"  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        self.last_call = 0
        self.is_router_activated = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
        if not os.path.exists(ROUTER_PATH):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AI Router –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ROUTER_PATH}")
            print(f"üìÇ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {ROUTER_PATH}")
            try:
                os.makedirs(ROUTER_PATH, exist_ok=True)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = ["ai_router_system.js", "ai_rotation_config.js"]
        all_files_exist = True
        for file in required_files:
            if not os.path.exists(os.path.join(ROUTER_PATH, file)):
                print(f"‚ö†Ô∏è –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {ROUTER_PATH}")
                all_files_exist = False
        
        if all_files_exist:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã AI Router –Ω–∞–π–¥–µ–Ω—ã")
        
        print("‚ÑπÔ∏è AI Router LLM –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.")
    
    def call(self, prompt: str, temperature: float = 0.7, max_tokens: int = 1000) -> str:
        """
        –í—ã–∑–æ–≤ LLM —á–µ—Ä–µ–∑ AI Router
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É CrewAI
        """
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Router, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        if not hasattr(self, 'is_router_activated') or not self.is_router_activated:
            self.activate_router()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        current_time = time.time()
        if current_time - self.last_call < 1.0:
            time.sleep(1.0)
        self.last_call = time.time()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
        task_type = self._detect_task_type(prompt)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ subprocess
            result = self._subprocess_router_call(prompt, task_type, self.model_preference)
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI Router: {e}")
            # Fallback: —ç–º—É–ª—è—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return self._simulate_router_call(prompt, task_type)
    
    def activate_router(self):
        """–Ø–≤–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç AI Router, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            print("üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è AI Router...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            os.makedirs(ROUTER_PATH, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            required_files = [
                "ai_router_system.js",
                "ai_rotation_config.js"
            ]
            
            for file in required_files:
                file_path = os.path.join(ROUTER_PATH, file)
                if not os.path.exists(file_path):
                    print(f"‚ö†Ô∏è –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω. AI Router –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            test_result = self._call_node_js_router("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI Router")
            if test_result:
                print("‚úÖ AI Router —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                self.is_router_activated = True
                return True
            else:
                print("‚ö†Ô∏è AI Router –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
                self.is_router_activated = False
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI Router: {e}")
            traceback.print_exc()
            self.is_router_activated = False
            return False
    
    def _detect_task_type(self, prompt: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
        """
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç"]):
            return "code"
        elif any(word in prompt_lower for word in ["–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á"]):
            return "creative"
        elif any(word in prompt_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–æ—Ü–µ–Ω", "—Å—Ä–∞–≤–Ω"]):
            return "analysis"
        else:
            return "chat"
    
    def _subprocess_router_call(self, message: str, task_type: str, model_preference: str) -> str:
        """
        –í—ã–∑–æ–≤ AI Router —á–µ—Ä–µ–∑ subprocess (Node.js)
        """
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safe_message = message.replace("'", "\\'").replace('"', '\\"')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ -e
        temp_js_file = os.path.join(ROUTER_PATH, "temp_request.js")
        
        try:
            # JavaScript –∫–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI Router
            js_code = f"""
            const path = require('path');
            try {{
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                const AIRouterModule = require('./ai_router_system.js');
                const AIRouter = AIRouterModule.AIRouter; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞ 
                const config = require('./ai_rotation_config.js');
                
                // –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
                function estimateTokens(text) {{
                    if (!text) return 0;
                    // –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è –ª–∞—Ç–∏–Ω–∏—Ü—ã, ~2 –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    const latinChars = (text.match(/[a-zA-Z0-9\\s.,!?;:()\\-]/g) || []).length;
                    const cyrillicChars = text.length - latinChars;
                    return Math.ceil(latinChars / 4 + cyrillicChars / 2);
                }}
                
                async function processRequest() {{
                    try {{
                        const routerInstance = new AIRouter(config.AI_PROVIDERS_CONFIG);
                        const result = await routerInstance.chat('{safe_message}', {{ 
                            taskType: '{task_type}',
                            temperature: 0.7,
                            maxTokens: 1000
                        }});
                        console.log(JSON.stringify({{ 
                            success: true, 
                            response: result.response,
                            provider: result.provider,
                            tokens: result.tokens || estimateTokens(result.response) || 0
                        }}));
                    }} catch (error) {{
                        console.log(JSON.stringify({{ 
                            success: false, 
                            error: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ processRequest" 
                        }}));
                    }}
                }}
                
                processRequest();
            }} catch (error) {{
                console.log(JSON.stringify({{ 
                    success: false, 
                    error: `Failed to require modules: ${{error.message || "Unknown error"}}` 
                }}));
            }}
            """
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                with open(temp_js_file, 'w', encoding='utf-8') as f:
                    f.write(js_code) # –≠—Ç–æ—Ç js_code —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –∏ console.log –¥–ª—è –≤—ã–≤–æ–¥–∞
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ JS —Ñ–∞–π–ª–∞: {e}")
                return self._simulate_router_call(message, task_type)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Node.js
            try:
                env = os.environ.copy()
                env['PYTHONIOENCODING'] = 'utf-8'
                
                result = subprocess.run(
                    ["node", temp_js_file],
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
                    cwd=ROUTER_PATH,
                    env=env
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ stderr
                if result.stderr and "cannot find module" in result.stderr.lower():
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π Node.js: {result.stderr}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –¥–µ—Ç–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏
                    if "gopiai_" in result.stderr.lower():
                        print(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –≤ –æ—à–∏–±–∫–µ: {result.stderr}")
                        # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –æ–ø–µ—á–∞—Ç–∫–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
                        import re
                        path_match = re.search(r'[\'"]([^\'"]*/gopiai[^\'"]*/ai_router/[^\'"]*)[\'"]\)?', result.stderr)
                        if path_match:
                            wrong_path = path_match.group(1)
                            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å: {wrong_path}")
                            
                            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–ø–µ—á–∞—Ç–∫–æ–π
                                wrong_dir = os.path.dirname(os.path.dirname(wrong_path))
                                correct_dir = os.path.dirname(ROUTER_PATH)
                                
                                print(f"‚ö†Ô∏è –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–∏–º–ª–∏–Ω–∫: {wrong_dir} -> {correct_dir}")
                                
                                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∏–º–ª–∏–Ω–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                                os.makedirs(os.path.dirname(wrong_dir), exist_ok=True)
                                
                                if not os.path.exists(wrong_dir):
                                    os.symlink(correct_dir, wrong_dir)
                                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –ª–∏–Ω–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏: {wrong_dir}")
                            except Exception as link_err:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –ª–∏–Ω–∫: {link_err}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if result.returncode == 0 and result.stdout and result.stdout.strip():
                    print(f"üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Node.js —á–µ—Ä–µ–∑ stdout ({len(result.stdout)} –±–∞–π—Ç)")
                    try:
                        response_data = json.loads(result.stdout.strip())
                        if response_data.get("success"):
                            return response_data["response"]
                        else:
                            router_error = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            print(f"‚ö†Ô∏è AI Router –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {router_error}")
                            return self._simulate_router_call(message, task_type)
                    except json.JSONDecodeError as jde:
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π stdout, –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –Ω–µ —É–¥–∞–ª–æ—Å—å
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {jde}")
                        print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π stdout Node.js: {result.stdout[:500]}...")
                        if result.stderr:
                            print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π stderr Node.js: {result.stderr[:500]}...")
                        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ fallback
                
                # –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI Router")
                return self._simulate_router_call(message, task_type)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Node.js: {e}")
                return self._simulate_router_call(message, task_type)
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS-—Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                try:
                    if os.path.exists(temp_js_file):
                        os.remove(temp_js_file)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS-—Ñ–∞–π–ª: {e}")
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è AI Router: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return self._simulate_router_call(message, task_type)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI Router: {str(e)}")
            return self._simulate_router_call(message, task_type)
    
    def _simulate_router_call(self, message: str, task_type: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è AI Router –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ Node.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏!
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–π AI Router
        
        import random
        import string
        
        prefix = f"[–≠–ú–£–õ–Ø–¶–ò–Ø AI ROUTER] "
        timestamp = time.strftime("%H:%M:%S")
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task_type == "code":
            return prefix + f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n```python\n# –ö–æ–¥ –¥–ª—è: {message[:50]}...\ndef smart_function(input_data):\n    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n    result = process_data(input_data)\n    return result\n```"
        elif task_type == "creative":
            return prefix + f"–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n{message[:50]}...\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞—Å—Ç–æ—è—â–∏–º AI. –í —Ä–µ–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        elif task_type == "analysis":
            return prefix + f"–ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message[:50]}...\n\n1. –ü–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞\n2. –í—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç\n3. –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏\n\n–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ."
        else:
            return prefix + f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{message[:100]}...'\n\n–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI Router. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ñ–∞–π–ª—ã ai_router_system.js –¥–æ—Å—Ç—É–ø–Ω—ã."
            
    def get_llm_instance(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
        
        Returns:
            LLM: –≠–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è CrewAI
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è CrewAI
            from langchain.llms.base import LLM
            
            class AIRouterWrapper(LLM):
                """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è AI Router, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å LangChain"""
                
                def __init__(self, ai_router: AIRouterLLM, **kwargs):
                    super().__init__(**kwargs)
                    self.ai_router = ai_router
                
                @property
                def _llm_type(self) -> str:
                    return "ai_router"
                
                def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
                    """–í—ã–∑–æ–≤ AI Router"""
                    return self.ai_router.call(prompt)
                
                @property
                def _identifying_params(self) -> Mapping[str, Any]:
                    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LangChain"""
                    return {"model": "ai_router"}
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            wrapper = AIRouterWrapper(ai_router=self)
            return wrapper
            
        except ImportError:
            print("‚ö†Ô∏è langchain –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º self")
            return self

    def _call_node_js_router(self, message, task_type='general'):
        """
        –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ AI Router —á–µ—Ä–µ–∑ Node.js
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
            try:
                subprocess.run(["node", "--version"], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                print("‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π JS —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_js_file = os.path.join(ROUTER_PATH, "router_check.js")
            
            with open(test_js_file, "w", encoding="utf-8") as f:
                f.write(f"""
                try {{
                    const AIRouterModule = require('./ai_router_system.js');
                    const configModule = require('./ai_rotation_config.js');
                    
                    console.log(JSON.stringify({{
                        success: true,
                        message: "AI Router —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                        router_type: typeof AIRouterModule.AIRouter,
                        config_type: typeof configModule.AI_PROVIDERS_CONFIG
                    }}));
                }} catch (error) {{
                    console.log(JSON.stringify({{
                        success: false,
                        error: error.message
                    }}));
                }}
                """)
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            result = subprocess.run(
                ["node", test_js_file],
                capture_output=True,
                text=True,
                encoding="utf-8",
                cwd=ROUTER_PATH,
                timeout=10
            )
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.stdout and result.stdout.strip():
                try:
                    data = json.loads(result.stdout.strip())
                    if data.get("success"):
                        return True
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI Router: {data.get('error')}")
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.stdout}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ stderr
            if result.stderr:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.stderr}")
            
            return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI Router: {e}")
            traceback.print_exc()
            return False

    def _run(self, message: str, task_type: str = "chat", model_preference: str = "auto", 
             max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤ GopiAIBaseTool
        
        Args:
            message: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏
            model_preference: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç AI Router
        """
        return self.call(message, temperature, max_tokens)