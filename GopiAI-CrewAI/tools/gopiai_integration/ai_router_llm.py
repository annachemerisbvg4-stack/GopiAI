"""
üîÑ GopiAI AI Router LLM –¥–ª—è CrewAI
–ê–¥–∞–ø—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã AI Router –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
"""

import os
import subprocess
import json
from typing import Dict, List, Optional, Any, Mapping
import time
import random
from pathlib import Path

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
ROUTER_PATH = os.path.join(os.path.dirname(__file__), "../../../01_AI_ROUTER_SYSTEM")

class AIRouterLLM:
    """
    LLM-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Router —Å CrewAI.
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    - Fallback –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∑–∞–¥–∞—á—É
    """
    
    def __init__(self, model_preference="auto"):
        self.model_preference = model_preference
        self.api_key = "api_key_not_needed_using_router"  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        self.last_call = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router
        if not os.path.exists(ROUTER_PATH):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AI Router –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ROUTER_PATH}")
    
    def call(self, prompt: str, temperature: float = 0.7, max_tokens: int = 1000) -> str:
        """
        –í—ã–∑–æ–≤ LLM —á–µ—Ä–µ–∑ AI Router
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É CrewAI
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        current_time = time.time()
        if current_time - self.last_call < 1.0:
            time.sleep(1.0)
        self.last_call = time.time()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
        task_type = self._detect_task_type(prompt)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ subprocess
            result = self._subprocess_router_call(prompt, task_type, self.model_preference)
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI Router: {e}")
            # Fallback: —ç–º—É–ª—è—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return self._simulate_router_call(prompt, task_type)
    
    def _detect_task_type(self, prompt: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
        """
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Å–∫—Ä–∏–ø—Ç"]):
            return "code"
        elif any(word in prompt_lower for word in ["–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "—Ç–≤–æ—Ä—á"]):
            return "creative"
        elif any(word in prompt_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–æ—Ü–µ–Ω", "—Å—Ä–∞–≤–Ω"]):
            return "analysis"
        else:
            return "chat"
    
    def _subprocess_router_call(self, message: str, task_type: str, model_preference: str) -> str:
        """
        –í—ã–∑–æ–≤ AI Router —á–µ—Ä–µ–∑ subprocess (Node.js)
        """
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safe_message = message.replace("'", "\\'").replace('"', '\\"')
        
        # JavaScript –∫–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI Router
        js_code = f"""
        const path = require('path');
        try {{
            const {{ AIRouter }} = require('{ROUTER_PATH}/ai_router_system.js');
            const config = require('{ROUTER_PATH}/ai_rotation_config.js');
            
            async function processRequest() {{
                try {{
                    const router = new AIRouter(config.AI_PROVIDERS_CONFIG);
                    const result = await router.processRequest('{safe_message}', '{task_type}', '{model_preference}');
                    console.log(JSON.stringify({{ 
                        success: true, 
                        response: result.response,
                        provider: result.provider,
                        tokens: result.tokens
                    }}));
                }} catch (error) {{
                    console.log(JSON.stringify({{ 
                        success: false, 
                        error: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ processRequest" 
                    }}));
                }}
            }}
            
            processRequest();
        }} catch (error) {{
            console.log(JSON.stringify({{ 
                success: false, 
                error: `Failed to require modules: ${{error.message || "Unknown error"}}` 
            }}));
        }}
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Node.js
        try:
            result = subprocess.run(
                ["node", "-e", js_code],
                capture_output=True,
                text=True,
                timeout=30,  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                cwd=ROUTER_PATH
            )
            
            if result.returncode == 0:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stdout –Ω–µ –ø—É—Å—Ç–æ–π
                    if not result.stdout.strip():
                        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI Router")
                        return self._simulate_router_call(message, task_type)
                        
                    response_data = json.loads(result.stdout.strip())
                    if response_data.get("success"):
                        return response_data["response"]
                    else:
                        router_error = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        print(f"‚ö†Ô∏è AI Router –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {router_error}")
                        return self._simulate_router_call(message, task_type)
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI Router: {result.stdout}")
                    return self._simulate_router_call(message, task_type)
            else:
                print(f"‚ö†Ô∏è AI Router –≤–µ—Ä–Ω—É–ª –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥: {result.stderr}")
                return self._simulate_router_call(message, task_type)
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è AI Router: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return self._simulate_router_call(message, task_type)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI Router: {str(e)}")
            return self._simulate_router_call(message, task_type)
    
    def _simulate_router_call(self, message: str, task_type: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è AI Router –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ª–∞–¥–∫–∏
        """
        # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏!
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–π AI Router
        
        prefix = f"[DEBUG –≠–ú–£–õ–Ø–¶–ò–Ø - –ù–ï –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê]\n\n"
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task_type == "code":
            return prefix + f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n```python\n# –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {message[:50]}...\ndef example_function():\n    return '–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞'\n```"
        elif task_type == "creative":
            return prefix + f"–í–æ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n{message[:50]}...\n\n–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ AI Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI Router –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 01_AI_ROUTER_SYSTEM."
        elif task_type == "analysis":
            return prefix + f"–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –∞–Ω–∞–ª–∏–∑–∞\n2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç –∞–Ω–∞–ª–∏–∑–∞\n3. –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç –∞–Ω–∞–ª–∏–∑–∞\n\n–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ AI Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            return prefix + f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message[:100]}...'\n\n–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ AI Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI Router –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 01_AI_ROUTER_SYSTEM."
            
    def get_llm_instance(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å CrewAI
        
        Returns:
            LLM: –≠–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è CrewAI
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è CrewAI
            from langchain.llms.base import LLM
            
            class AIRouterWrapper(LLM):
                """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è AI Router, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å LangChain"""
                
                ai_router: AIRouterLLM
                
                @property
                def _llm_type(self) -> str:
                    return "ai_router"
                
                def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
                    """–í—ã–∑–æ–≤ AI Router"""
                    return self.ai_router.call(prompt)
                
                @property
                def _identifying_params(self) -> Mapping[str, Any]:
                    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LangChain"""
                    return {"model": "ai_router"}
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            wrapper = AIRouterWrapper()
            wrapper.ai_router = self
            return wrapper
            
        except ImportError:
            print("‚ö†Ô∏è langchain –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º self")
            return self