"""
üîß GopiAI Base Tool
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GopiAI-CrewAI —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import os
import sys
import logging
import time
from datetime import datetime
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel

class GopiAIBaseTool:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ CrewAI
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    
    name: str = "gopiai_base_tool"
    description: str = "–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
    
    def __init__(self, verbose: bool = False, log_level: int = logging.INFO):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.verbose = verbose
        self.logger = self._setup_logger(log_level)
        self.metrics = {
            "calls": 0,
            "errors": 0,
            "total_time": 0,
            "last_call": None
        }
        self.logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_logger(self, log_level: int) -> logging.Logger:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        logger_name = f"gopiai.tools.{self.__class__.__name__}"
        logger = logging.getLogger(logger_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–∂–µ –ª–æ–≥–≥–µ—Ä
        if not logger.handlers:
            logger.setLevel(log_level)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            log_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "logs")
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            log_file = os.path.join(log_dir, f"{self.__class__.__name__.lower()}.log")
            file_handler = logging.FileHandler(log_file)
            file_handler.setLevel(log_level)
            
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.ERROR)  # –í –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
            
            # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            logger.addHandler(file_handler)
            logger.addHandler(console_handler)
        
        return logger
    
    def run(self, *args, **kwargs) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        start_time = time.time()
        self.metrics["calls"] += 1
        self.metrics["last_call"] = datetime.now()
        
        try:
            self.logger.info(f"–ó–∞–ø—É—Å–∫ {self.__class__.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}, {kwargs}")
            
            if self.verbose:
                print(f"üîß –ó–∞–ø—É—Å–∫ {self.__class__.__name__}...")
                
            result = self._run(*args, **kwargs)
            
            execution_time = time.time() - start_time
            self.metrics["total_time"] += execution_time
            
            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ {execution_time:.2f}—Å: {result[:100]}...")
            return result
            
        except Exception as e:
            self.metrics["errors"] += 1
            execution_time = time.time() - start_time
            
            error_msg = f"–û—à–∏–±–∫–∞ –≤ {self.__class__.__name__}: {str(e)}"
            self.logger.error(error_msg, exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            try:
                if hasattr(self, '_fallback'):
                    self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback...")
                    fallback_result = self._fallback(*args, **kwargs, error=e)
                    self.logger.info(f"Fallback —É—Å–ø–µ—à–µ–Ω: {fallback_result[:100]}...")
                    return fallback_result
            except Exception as fallback_error:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback: {str(fallback_error)}")
            
            # –ï—Å–ª–∏ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return f"‚ùå {error_msg}"
    
    def _run(self, *args, **kwargs) -> str:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ _run –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")
    
    def get_metrics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        if self.metrics["calls"] > 0:
            avg_time = self.metrics["total_time"] / self.metrics["calls"]
        else:
            avg_time = 0
            
        return {
            "name": self.__class__.__name__,
            "calls": self.metrics["calls"],
            "errors": self.metrics["errors"],
            "error_rate": self.metrics["errors"] / self.metrics["calls"] if self.metrics["calls"] > 0 else 0,
            "avg_time": avg_time,
            "total_time": self.metrics["total_time"],
            "last_call": self.metrics["last_call"].isoformat() if self.metrics["last_call"] else None
        }
    
    def reset_metrics(self) -> None:
        """–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.metrics = {
            "calls": 0,
            "errors": 0,
            "total_time": 0,
            "last_call": None
        }
        self.logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ {self.__class__.__name__} —Å–±—Ä–æ—à–µ–Ω—ã")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å
    class TestTool(GopiAIBaseTool):
        name = "test_tool"
        description = "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
        
        def _run(self, action, value=""):
            if action == "echo":
                return f"Echo: {value}"
            elif action == "error":
                raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
        
        def _fallback(self, action, value="", error=None):
            return f"Fallback –¥–ª—è {action}: {error}"
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    tool = TestTool(verbose=True)
    
    print("=== –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===")
    result = tool.run("echo", "Hello World")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ ===")
    result = tool.run("error")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n=== –ú–µ—Ç—Ä–∏–∫–∏ ===")
    print(tool.get_metrics())