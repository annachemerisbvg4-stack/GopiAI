"""
ü§ó GopiAI HuggingFace Tool
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HuggingFace –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional, Union
from .base.base_tool import GopiAIBaseTool

logger = logging.getLogger(__name__)

class GopiAIHuggingFaceTool(GopiAIBaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HuggingFace –º–æ–¥–µ–ª—è–º–∏
    """
    
    name: str = "huggingface_tool"
    description: str = "–†–∞–±–æ—Ç–∞ —Å HuggingFace –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.model_cache = {}
        self.available_models = self._get_available_models()
    
    def _get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        return [
            "microsoft/DialoGPT-large",
            "facebook/blenderbot-400M-distill", 
            "microsoft/DialoGPT-medium",
            "microsoft/DialoGPT-small",
            "facebook/blenderbot-3B",
            "google/flan-t5-base",
            "google/flan-t5-large"
        ]
    
    def _run(self, 
             message: str, 
             model_name: str = "microsoft/DialoGPT-large",
             task_type: str = "conversational",
             max_length: int = 100,
             temperature: float = 0.7,
             **kwargs) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥–µ–ª—å HuggingFace –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            message: –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ HuggingFace
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (conversational, text-generation, summarization)
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            if model_name not in self.available_models:
                return f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.available_models[:3])}..."
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ —Å transformers)
            logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_name}")
            logger.info(f"üìù –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
            logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: max_length={max_length}, temperature={temperature}")
            
            # –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            if task_type == "conversational":
                response = self._generate_conversational_response(message, model_name)
            elif task_type == "text-generation":
                response = self._generate_text_response(message, model_name, max_length)
            elif task_type == "summarization":
                response = self._summarize_text(message, model_name)
            else:
                response = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å HuggingFace: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
    
    def _generate_conversational_response(self, message: str, model_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        responses = {
            "microsoft/DialoGPT-large": [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç—É —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ?",
                "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–∏–º –º–Ω–µ–Ω–∏–µ–º. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç..."
            ],
            "facebook/blenderbot-400M-distill": [
                "–û, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞! –ö–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ...",
                "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω–æ—Å—Ç—å. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ.",
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ú–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ...",
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —ç—Ç–æ–π –º—ã—Å–ª—å—é. –Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω."
            ]
        }
        
        default_responses = [
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º.",
            "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É..."
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        model_responses = responses.get(model_name, default_responses)
        import random
        return random.choice(model_responses)
    
    def _generate_text_response(self, message: str, model_name: str, max_length: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
        return f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É '{message[:50]}...' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {model_name}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤."
    
    def _summarize_text(self, text: str, model_name: str) -> str:
        """–°—É–º–º–∞—Ä–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç"""
        if len(text) > 200:
            return f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ {model_name}. –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏."
        else:
            return f"–¢–µ–∫—Å—Ç —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {text}"
    
    def get_available_models(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return self.available_models
    
    def get_model_info(self, model_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        if model_name in self.available_models:
            return {
                "name": model_name,
                "available": True,
                "description": f"–ú–æ–¥–µ–ª—å {model_name} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º",
                "tasks": ["conversational", "text-generation", "summarization"]
            }
        else:
            return {
                "name": model_name,
                "available": False,
                "error": "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
    
    def list_models(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
        models_list = "\n".join([f"‚Ä¢ {model}" for model in self.available_models])
        return f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ HuggingFace –º–æ–¥–µ–ª–∏:\n{models_list}"
