"""
ü§ó Hugging Face LLM Tool –¥–ª—è GopiAI-CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Hugging Face Inference API
"""

import os
import json
import requests
from typing import Type, Any, Dict, Optional
from datetime import datetime
from pydantic import BaseModel, Field
from crewai.tools.base_tool import BaseTool

class HuggingFaceInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Hugging Face"""
    message: str = Field(description="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏")
    model_name: str = Field(default="tiiuae/falcon-7b-instruct", description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ HF (–Ω–∞–ø—Ä–∏–º–µ—Ä, tiiuae/falcon-7b-instruct, bigscience/bloomz-560m, tiiuae/falcon-7b-instruct, tiiuae/falcon-7b-instruct)")
    task_type: str = Field(default="text-generation", description="–¢–∏–ø –∑–∞–¥–∞—á–∏")
    max_length: int = Field(default=200, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞")
    temperature: float = Field(default=0.7, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

class GopiAIHuggingFaceTool(BaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –î–æ—Å—Ç—É–ø –∫ —Ç—ã—Å—è—á–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á (—Ç–µ–∫—Å—Ç, –∫–æ–¥, —á–∞—Ç)
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ –∑–∞–¥–∞—á–µ
    """
    
    name: str = Field(default="gopiai_huggingface", description="–ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    description: str = Field(default="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç HuggingFace –¥–ª—è CrewAI", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")

    def run(self, message: str, model_name: str = "tiiuae/falcon-7b-instruct", 
            task_type: str = "text-generation", max_length: int = 200, temperature: float = 0.7) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face Inference API
        """
        api_key = os.getenv('HUGGINGFACE_API_KEY')
        if not api_key:
            return "‚ùå HUGGINGFACE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "inputs": message,
            "parameters": {
                "max_length": max_length,
                "temperature": temperature,
                "do_sample": True,
                "top_p": 0.9
            }
        }
        try:
            response = requests.post(
                f"https://api-inference.huggingface.co/models/{model_name}",
                headers=headers,
                json=payload,
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list) and len(data) > 0:
                    generated_text = data[0].get("generated_text", "")
                    if generated_text.startswith(message):
                        generated_text = generated_text[len(message):].strip()
                    return generated_text or str(data)
                elif isinstance(data, dict):
                    return data.get("generated_text", str(data))
                else:
                    return str(data)
            elif response.status_code == 503:
                return "‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥"
            elif response.status_code == 429:
                return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (1000/–º–µ—Å—è—Ü)"
            else:
                return f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}"
        except requests.exceptions.Timeout:
            return "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)"
        except requests.exceptions.RequestException as e:
            return f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def _run(self, *args, **kwargs):
        return "HuggingFace Tool: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)"

    def get_usage_stats(self) -> str:
        return "(—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏)"

    print("‚úÖ Hugging Face Tool –≥–æ—Ç–æ–≤!")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Hugging Face Tool...")
    tool = GopiAIHuggingFaceTool()
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    result = tool.run(
        message="–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ –∫–æ—Å–º–æ—Å–µ.",
        model_name="gpt2",
        task_type="text-generation",
        max_length=100,
        temperature=0.7
    )
    print(f"API test: {result}")
    print(tool.get_usage_stats())
    print("‚úÖ Hugging Face Tool –≥–æ—Ç–æ–≤!")