r"""
–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API –±–µ–∑ safetySettings.

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ 
mcp_servers/agentic-control-framework/src/prd_parser.js

–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
1. –ü—Ä—è–º—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ requests –≤–º–µ—Å—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google
2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ safetySettings - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é API
3. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import os
import requests
import json
import logging
from typing import List, Optional, Dict, Any
from time import sleep

logger = logging.getLogger(__name__)

class GeminiDirectClient:
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API.
    –û–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ safetySettings.
    """
    
    def __init__(self, api_key: Optional[str] = None, model: str = "gemini-1.5-flash-latest"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            api_key: API –∫–ª—é—á Google (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            model: –ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.model = model
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ safetySettings!)
        self.default_generation_config = {
            "temperature": 0.7,
            "maxOutputTokens": 8192,
            "topP": 0.8,
            "topK": 40
        }
        
        logger.info(f"‚úÖ GeminiDirectClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
    
    def _make_request(self, prompt: str, generation_config: Optional[Dict] = None, 
                     max_retries: int = 3) -> Dict[Any, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ Gemini API.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            generation_config: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ dict
        """
        url = f"{self.base_url}/{self.model}:generateContent"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
        config = generation_config or self.default_generation_config
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ë–ï–ó safetySettings
        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }],
            "generationConfig": config
            # –í–ê–ñ–ù–û: –ù–ï–¢ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ safetySettings!
        }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        params = {
            "key": self.api_key
        }
        
        for attempt in range(max_retries):
            try:
                logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {self.model}")
                
                response = requests.post(
                    url,
                    json=payload,
                    headers=headers,
                    params=params,
                    timeout=60
                )
                
                if response.status_code == 200:
                    logger.debug("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                    return response.json()
                
                elif response.status_code == 429:
                    # Rate limit - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    wait_time = min(2 ** attempt, 30)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.warning(f"‚ö†Ô∏è Rate limit (429), –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    sleep(wait_time)
                    continue
                
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                    response.raise_for_status()
                    
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                if attempt == max_retries - 1:
                    raise
                sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    def _process_prompt(self, prompt):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–ª—è–º–∏ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è Gemini API.
        
        Args:
            prompt: –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–æ–ª—è–º–∏
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        """
        if isinstance(prompt, str):
            return prompt
            
        if isinstance(prompt, list):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–æ–ª—è–º–∏
            processed_parts = []
            
            for message in prompt:
                if isinstance(message, dict) and 'role' in message and 'content' in message:
                    role = message['role']
                    content = message['content']
                    
                    # Gemini API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ–ª—å 'system', –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    if role == 'system':
                        processed_parts.append(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {content}")
                    elif role == 'user':
                        processed_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {content}")
                    elif role == 'assistant':
                        processed_parts.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {content}")
                    else:
                        processed_parts.append(content)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å —Å —Ä–æ–ª—å—é, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    processed_parts.append(str(message))
            
            return "\n\n".join(processed_parts)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        return str(prompt)
    
    def generate_text(self, prompt, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            prompt: –í—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–º–ø—Ç (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è generation_config
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        processed_prompt = self._process_prompt(prompt)
        logger.debug(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {processed_prompt[:100]}...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        generation_config = self.default_generation_config.copy()
        generation_config.update(kwargs)
        
        try:
            response_data = self._make_request(processed_prompt, generation_config)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if (response_data.get("candidates") and 
                len(response_data["candidates"]) > 0 and
                response_data["candidates"][0].get("content") and
                response_data["candidates"][0]["content"].get("parts")):
                
                text = response_data["candidates"][0]["content"]["parts"][0]["text"]
                logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text
            
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                raise ValueError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise
    
    def generate_structured_response(self, prompt: str, expected_format: str = "JSON", 
                                   **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–æ–º.
        
        Args:
            prompt: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
            expected_format: –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON, XML, etc.)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞
        enhanced_prompt = f"""
{prompt}

–í–ê–ñ–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –§–û–†–ú–ê–¢–£ –û–¢–í–ï–¢–ê:
- –í—ã–≤–æ–¥–∏ –¢–û–õ–¨–ö–û {expected_format}, –±–µ–∑ –≤—Å—è–∫–æ–≥–æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º {expected_format}
- –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {expected_format}
"""
        
        return self.generate_text(enhanced_prompt, **kwargs)
    
    def call(self, prompt: str, **kwargs) -> str:
        """
        –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å CrewAI –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            prompt: –í—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–º–ø—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        return self.generate_text(prompt, **kwargs)
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
        """
        return {
            "model": self.model,
            "provider": "google",
            "direct_api": True,
            "safety_settings": "disabled",  # –ö–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å!
            "base_url": self.base_url
        }
