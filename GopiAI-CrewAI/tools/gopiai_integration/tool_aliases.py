"""
üîß Tool Aliases Manager
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GopiAI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —Å–∏–Ω–æ–Ω–∏–º—ã, –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞
"""

import logging
from typing import Dict, Set, List, Optional, Tuple
import re

logger = logging.getLogger(__name__)

class ToolAliasManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–∏–∞—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._alias_map = self._build_alias_map()
        self._canonical_tools = set(self._alias_map.values())
        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ToolAliasManager: {len(self._canonical_tools)} –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, {len(self._alias_map)} –∞–ª–∏–∞—Å–æ–≤")
    
    def _build_alias_map(self) -> Dict[str, str]:
        """
        –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç—É –∞–ª–∏–∞—Å–æ–≤: alias -> canonical_name
        –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        alias_map = {}
        
        # üíª –¢–ï–†–ú–ò–ù–ê–õ –ò –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î
        terminal_aliases = [
            'execute_shell', 'shell', 'terminal', 'cmd', 'command', 'exec', 'run',
            'bash', 'powershell', 'console', 'cli', 'execute_command', 'run_command',
            'shell_exec', 'terminal_exec', 'command_exec', 'system_command'
        ]
        for alias in terminal_aliases:
            alias_map[alias.lower()] = 'execute_shell'
        
        # üìÅ –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
        file_aliases = [
            'file_operations', 'file_ops', 'files', 'filesystem', 'fs', 'file_system',
            'filesystem_tools', 'fs_tools', 'file_tools', 'file_manager', 'file_handler',
            'read_file', 'write_file', 'file_read', 'file_write', 'file_io',
            'directory', 'dir', 'folder', 'path', 'file_path'
        ]
        for alias in file_aliases:
            alias_map[alias.lower()] = 'file_operations'
        
        # üåê –í–ï–ë-–°–ö–†–ê–ü–ò–ù–ì
        scraper_aliases = [
            'web_scraper', 'scraper', 'scrape', 'web_scrape', 'scraping', 'web_scraping',
            'html_scraper', 'page_scraper', 'website_scraper', 'url_scraper',
            'selenium_scraping', 'browser_scraper', 'extract_web', 'parse_web',
            'get_webpage', 'fetch_page', 'download_page'
        ]
        for alias in scraper_aliases:
            alias_map[alias.lower()] = 'web_scraper'
        
        # üîç –í–ï–ë-–ü–û–ò–°–ö
        search_aliases = [
            'web_search', 'search', 'google_search', 'bing_search', 'brave_search',
            'tavily_search', 'serper_dev', 'internet_search', 'online_search',
            'search_web', 'find_online', 'query_web', 'web_query'
        ]
        for alias in search_aliases:
            alias_map[alias.lower()] = 'web_search'
        
        # üîå API –ö–õ–ò–ï–ù–¢
        api_aliases = [
            'api_client', 'api', 'http_client', 'rest_client', 'http', 'rest',
            'api_call', 'http_request', 'web_request', 'url_request',
            'get_request', 'post_request', 'api_request', 'fetch_api'
        ]
        for alias in api_aliases:
            alias_map[alias.lower()] = 'api_client'
        
        # üåç URL –ê–ù–ê–õ–ò–ó–ê–¢–û–†
        url_aliases = [
            'url_analyzer', 'url_analysis', 'url_check', 'url_info', 'website_info',
            'site_analyzer', 'web_analyzer', 'link_analyzer', 'url_validator'
        ]
        for alias in url_aliases:
            alias_map[alias.lower()] = 'url_analyzer'
        
        # üñ±Ô∏è –ë–†–ê–£–ó–ï–† –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø - –£–î–ê–õ–ï–ù–û –ò–ó –ü–†–û–ï–ö–¢–ê
        
        # üìä CSV –ü–û–ò–°–ö
        csv_aliases = [
            'csv_search', 'csv', 'csv_tool', 'csv_query', 'csv_find',
            'search_csv', 'csv_parser', 'csv_reader'
        ]
        for alias in csv_aliases:
            alias_map[alias.lower()] = 'csv_search'
        
        # üìã JSON –ü–û–ò–°–ö
        json_aliases = [
            'json_search', 'json', 'json_tool', 'json_query', 'json_find',
            'search_json', 'json_parser', 'json_reader'
        ]
        for alias in json_aliases:
            alias_map[alias.lower()] = 'json_search'
        
        # üìÑ PDF –ü–û–ò–°–ö
        pdf_aliases = [
            'pdf_search', 'pdf', 'pdf_tool', 'pdf_query', 'pdf_find',
            'search_pdf', 'pdf_parser', 'pdf_reader'
        ]
        for alias in pdf_aliases:
            alias_map[alias.lower()] = 'pdf_search'
        
        # üêç –ö–û–î –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–†
        code_aliases = [
            'code_interpreter', 'code', 'python', 'py', 'interpreter', 'exec_code',
            'run_code', 'execute_code', 'python_exec', 'code_exec', 'python_interpreter'
        ]
        for alias in code_aliases:
            alias_map[alias.lower()] = 'code_interpreter'
        
        # üêô GITHUB –ü–û–ò–°–ö
        github_aliases = [
            'github_search', 'github', 'git_search', 'repo_search', 'repository_search',
            'github_tool', 'git_tool', 'github_query'
        ]
        for alias in github_aliases:
            alias_map[alias.lower()] = 'github_search'
        
        # üé® DALL-E –ì–ï–ù–ï–†–ê–¶–ò–Ø
        dalle_aliases = [
            'dalle_tool', 'dalle', 'image_generation', 'generate_image', 'create_image',
            'ai_image', 'image_gen', 'dalle3', 'dall_e', 'openai_image'
        ]
        for alias in dalle_aliases:
            alias_map[alias.lower()] = 'dalle_tool'
        
        # üëÅÔ∏è –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        vision_aliases = [
            'vision_tool', 'vision', 'image_analysis', 'analyze_image', 'image_analyzer',
            'image_recognition', 'visual_analysis', 'image_ai', 'computer_vision'
        ]
        for alias in vision_aliases:
            alias_map[alias.lower()] = 'vision_tool'
        
        # ‚ÑπÔ∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        sysinfo_aliases = [
            'system_info', 'sysinfo', 'system', 'sys_info', 'os_info', 'system_status',
            'hardware_info', 'system_details', 'machine_info'
        ]
        for alias in sysinfo_aliases:
            alias_map[alias.lower()] = 'system_info'
        
        # ‚öôÔ∏è –ú–ï–ù–ï–î–ñ–ï–† –ü–†–û–¶–ï–°–°–û–í
        process_aliases = [
            'process_manager', 'processes', 'process', 'proc', 'task_manager',
            'process_control', 'proc_manager', 'system_processes'
        ]
        for alias in process_aliases:
            alias_map[alias.lower()] = 'process_manager'
        
        # ‚è∞ –í–†–ï–ú–Ø
        time_aliases = [
            'time_helper', 'time', 'datetime', 'timestamp', 'clock', 'date',
            'time_tool', 'time_utils', 'date_time'
        ]
        for alias in time_aliases:
            alias_map[alias.lower()] = 'time_helper'
        
        # üì¶ –ü–†–û–ï–ö–¢ –•–ï–õ–ü–ï–†
        project_aliases = [
            'project_helper', 'project', 'health_check', 'status', 'project_status',
            'system_health', 'project_info', 'gopiai_status'
        ]
        for alias in project_aliases:
            alias_map[alias.lower()] = 'project_helper'
        
        # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï CrewAI –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
        # FileWriteTool
        filewrite_aliases = [
            'file_writer', 'write_file', 'create_file', 'save_file', 'file_write'
        ]
        for alias in filewrite_aliases:
            alias_map[alias.lower()] = 'file_writer'
        
        # DirectorySearchTool
        dirsearch_aliases = [
            'directory_search', 'dir_search', 'folder_search', 'search_directory',
            'find_files', 'search_files'
        ]
        for alias in dirsearch_aliases:
            alias_map[alias.lower()] = 'directory_search'
        
        # TXTSearchTool
        txtsearch_aliases = [
            'txt_search', 'text_search', 'search_text', 'find_text', 'grep'
        ]
        for alias in txtsearch_aliases:
            alias_map[alias.lower()] = 'txt_search'
        
        # MDXSearchTool
        mdx_aliases = [
            'mdx_search', 'markdown_search', 'md_search', 'search_markdown'
        ]
        for alias in mdx_aliases:
            alias_map[alias.lower()] = 'mdx_search'
        
        # DOCXSearchTool
        docx_aliases = [
            'docx_search', 'word_search', 'doc_search', 'search_word'
        ]
        for alias in docx_aliases:
            alias_map[alias.lower()] = 'docx_search'
        
        # XMLSearchTool
        xml_aliases = [
            'xml_search', 'search_xml', 'xml_parser', 'xml_query'
        ]
        for alias in xml_aliases:
            alias_map[alias.lower()] = 'xml_search'
        
        # YoutubeChannelSearchTool
        youtube_aliases = [
            'youtube_channel_search', 'youtube_search', 'yt_search', 'youtube'
        ]
        for alias in youtube_aliases:
            alias_map[alias.lower()] = 'youtube_channel_search'
        
        # YoutubeVideoSearchTool
        ytvideo_aliases = [
            'youtube_video_search', 'youtube_video', 'yt_video', 'video_search'
        ]
        for alias in ytvideo_aliases:
            alias_map[alias.lower()] = 'youtube_video_search'
        
        # ScrapeWebsiteTool
        scrape_aliases = [
            'scrape_website', 'website_scraper', 'site_scraper'
        ]
        for alias in scrape_aliases:
            alias_map[alias.lower()] = 'scrape_website'
        
        return alias_map
    
    def normalize_tool_name(self, tool_name: str) -> Optional[str]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É.
        
        Args:
            tool_name (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            Optional[str]: –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        if not tool_name or not isinstance(tool_name, str):
            return None
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = tool_name.strip().lower()
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        variants = [
            normalized,
            normalized.replace('_', ''),
            normalized.replace('-', ''),
            normalized.replace('_', '-'),
            normalized.replace('-', '_')
        ]
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for variant in variants:
            if variant in self._alias_map:
                canonical = self._alias_map[variant]
                if normalized != variant:
                    self.logger.debug(f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: '{tool_name}' -> '{canonical}' (—á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç '{variant}')")
                else:
                    self.logger.debug(f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: '{tool_name}' -> '{canonical}'")
                return canonical
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
        for alias, canonical in self._alias_map.items():
            if normalized in alias or alias in normalized:
                self.logger.debug(f"üîÑ –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: '{tool_name}' -> '{canonical}' (—á–µ—Ä–µ–∑ '{alias}')")
                return canonical
        
        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: '{tool_name}'")
        return None
    
    def get_all_aliases(self, canonical_name: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Args:
            canonical_name (str): –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–ª–∏–∞—Å–æ–≤
        """
        aliases = []
        for alias, canonical in self._alias_map.items():
            if canonical == canonical_name:
                aliases.append(alias)
        return sorted(aliases)
    
    def get_canonical_tools(self) -> Set[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Returns:
            Set[str]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        """
        return self._canonical_tools.copy()
    
    def is_valid_tool(self, tool_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã–º (–µ—Å—Ç—å –ª–∏ –∞–ª–∏–∞—Å).
        
        Args:
            tool_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        """
        return self.normalize_tool_name(tool_name) is not None
    
    def get_suggestions(self, tool_name: str, max_suggestions: int = 5) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
        
        Args:
            tool_name (str): –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            max_suggestions (int): –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        """
        if not tool_name:
            return []
        
        normalized = tool_name.strip().lower()
        suggestions = []
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for alias in self._alias_map.keys():
            if normalized in alias or alias in normalized:
                canonical = self._alias_map[alias]
                if canonical not in suggestions:
                    suggestions.append(canonical)
        
        # –ò—â–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
        if len(suggestions) < max_suggestions:
            for canonical in self._canonical_tools:
                if canonical not in suggestions:
                    # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                    if self._similarity_score(normalized, canonical) > 0.5:
                        suggestions.append(canonical)
        
        return suggestions[:max_suggestions]
    
    def _similarity_score(self, s1: str, s2: str) -> float:
        """
        –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫.
        
        Args:
            s1, s2 (str): –°—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            float: –û—Ü–µ–Ω–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1
        """
        if not s1 or not s2:
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        common_chars = set(s1) & set(s2)
        total_chars = set(s1) | set(s2)
        
        if not total_chars:
            return 0.0
        
        return len(common_chars) / len(total_chars)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–∏–∞—Å–æ–≤
_alias_manager = None

def get_tool_alias_manager() -> ToolAliasManager:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–∏–∞—Å–æ–≤.
    
    Returns:
        ToolAliasManager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    global _alias_manager
    if _alias_manager is None:
        _alias_manager = ToolAliasManager()
    return _alias_manager
