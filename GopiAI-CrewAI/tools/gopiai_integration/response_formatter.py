"""
ResponseFormatter - –º–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ AI –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º JSON —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏ HTML –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
"""

import re
import json
import logging
from typing import Dict, Any, Optional, List
from .html_sanitizer import HTMLSanitizer

logger = logging.getLogger(__name__)

class ResponseFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.json_pattern = re.compile(r'```json\s*(\{.*?\})\s*```', re.DOTALL | re.IGNORECASE)
        self.code_block_pattern = re.compile(r'```[a-zA-Z]*\s*(.*?)\s*```', re.DOTALL)
        self.html_pattern = re.compile(r'<[^<>]*>')
        self.command_pattern = re.compile(r'\{[\'"]tool[\']:\s*[\'"]terminal[\'].*?\}', re.DOTALL)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å–∞–Ω–∏—Ç–∏–∑–∞—Ç–æ—Ä
        self.html_sanitizer = HTMLSanitizer()
        
        logger.info("[ResponseFormatter] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å HTML —Å–∞–Ω–∏—Ç–∏–∑–∞—Ç–æ—Ä–æ–º")
        
    def format_for_chat(self, raw_response: Dict[str, Any]) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        –£–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        try:
            logger.debug(f"[ResponseFormatter] –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞: {str(raw_response)[:200]}...")
            
            formatted = {
                'user_content': self.extract_user_content(raw_response),
                'metadata': self.extract_safe_metadata(raw_response),
                'status': raw_response.get('status', 'completed'),
                'has_commands': self.has_executed_commands(raw_response)
            }
            
            logger.debug(f"[ResponseFormatter] –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {str(formatted)[:200]}...")
            return formatted
            
        except Exception as e:
            logger.error(f"[ResponseFormatter] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞: {e}")
            return {
                'user_content': str(raw_response.get('response', '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞')),
                'metadata': {},
                'status': 'error',
                'has_commands': False
            }
        
    def format_for_file_export(self, raw_response: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª
        –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç HTML –∏ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        try:
            logger.debug("[ResponseFormatter] –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª")
            
            content = self.extract_user_content(raw_response)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Å–∞–Ω–∏—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            clean_content = self.html_sanitizer.sanitize_for_file_export(content)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            clean_content = self.clean_formatting_artifacts(clean_content)
            
            logger.debug(f"[ResponseFormatter] –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ñ–∞–π–ª–∞: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return clean_content
            
        except Exception as e:
            logger.error(f"[ResponseFormatter] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞: {e}")
            return str(raw_response.get('response', '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'))
        
    def extract_user_content(self, response_data: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not isinstance(response_data, dict):
            return str(response_data)
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content = response_data.get('response', '')
        if not content:
            return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
        # –£–¥–∞–ª—è–µ–º JSON –±–ª–æ–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        content = self.remove_command_json_blocks(content)
        
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ JSON –±–ª–æ–∫–∏
        content = self.remove_service_json_blocks(content)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        content = self.clean_formatting_artifacts(content)
        
        return content.strip()
        
    def extract_safe_metadata(self, response_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not isinstance(response_data, dict):
            return {}
            
        safe_metadata = {}
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        analysis = response_data.get('analysis', {})
        if isinstance(analysis, dict):
            if analysis.get('executed_commands', 0) > 0:
                safe_metadata['commands_executed'] = analysis['executed_commands']
                safe_metadata['execution_time'] = analysis.get('analysis_time', 0)
                
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ
        if response_data.get('processed_with_crewai'):
            safe_metadata['processed_with_crewai'] = True
            
        return safe_metadata
        
    def has_executed_commands(self, response_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã"""
        if not isinstance(response_data, dict):
            return False
            
        analysis = response_data.get('analysis', {})
        return isinstance(analysis, dict) and analysis.get('executed_commands', 0) > 0
        
    def remove_command_json_blocks(self, content: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ JSON –±–ª–æ–∫–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ —Ç–∏–ø–∞ ```json {'tool': 'terminal', ...} ```
        content = self.json_pattern.sub('', content)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä—è–º—ã–µ JSON –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
        content = self.command_pattern.sub('', content)
        
        return content
        
    def remove_service_json_blocks(self, content: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö JSON –±–ª–æ–∫–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ code blocks, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç JSON
        def replace_json_blocks(match):
            block_content = match.group(1)
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, —É–¥–∞–ª—è–µ–º –±–ª–æ–∫
                json.loads(block_content)
                return ''  # –£–¥–∞–ª—è–µ–º JSON –±–ª–æ–∫–∏
            except (json.JSONDecodeError, ValueError):
                # –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return match.group(0)
                
        content = self.code_block_pattern.sub(replace_json_blocks, content)
        return content
        
    def remove_html_tags(self, content: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤"""
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        clean_content = self.html_pattern.sub('', content)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        import html
        clean_content = html.unescape(clean_content)
        
        return clean_content
        
    def clean_formatting_artifacts(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        content = re.sub(r'\n{3,}', '\n\n', content)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        content = re.sub(r' {2,}', ' ', content)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        lines = [line.strip() for line in content.split('\n')]
        content = '\n'.join(lines)
        
        return content
        
    def normalize_whitespace(self, content: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤"""
        # –£–¥–∞–ª—è–µ–º trailing spaces
        lines = [line.rstrip() for line in content.split('\n')]
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        while lines and not lines[0].strip():
            lines.pop(0)
        while lines and not lines[-1].strip():
            lines.pop()
            
        return '\n'.join(lines)
        
    def add_execution_summary(self, content: str, metadata: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"""
        if not metadata.get('commands_executed', 0):
            return content
            
        summary = f"\n\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {metadata['commands_executed']}"
        if 'execution_time' in metadata:
            summary += f" (–∑–∞ {metadata['execution_time']:.1f}—Å)"
            
        return content + summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞
response_formatter = ResponseFormatter()

def format_response_for_chat(raw_response: Dict[str, Any]) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞"""
    return response_formatter.format_for_chat(raw_response)

def format_response_for_file(raw_response: Dict[str, Any]) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞"""
    return response_formatter.format_for_file_export(raw_response)
