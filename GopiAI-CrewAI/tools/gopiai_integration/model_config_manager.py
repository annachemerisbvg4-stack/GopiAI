#!/usr/bin/env python3
"""
Model Configuration Manager –¥–ª—è GopiAI
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (Gemini/OpenRouter) –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π
"""

import os
import json
import logging
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict, field
from enum import Enum
from pathlib import Path

logger = logging.getLogger(__name__)

class ModelProvider(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π"""
    GEMINI = "gemini"
    OPENROUTER = "openrouter"
    GOOGLE = "google"  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º

@dataclass
class ModelConfiguration:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    provider: ModelProvider
    model_id: str
    display_name: str
    api_key_env: str
    is_active: bool = True
    is_default: bool = False
    parameters: Optional[Dict[str, Any]] = field(default_factory=dict)
    
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å"""
        data = asdict(self)
        data['provider'] = self.provider.value
        return data
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ModelConfiguration':
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        data = data.copy()
        data['provider'] = ModelProvider(data['provider'])
        return cls(**data)
    
    def get_litellm_model_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è LiteLLM"""
        if self.provider == ModelProvider.OPENROUTER:
            if self.model_id.startswith('openrouter/'):
                return self.model_id
            return f"openrouter/{self.model_id}"
        elif self.provider in [ModelProvider.GEMINI, ModelProvider.GOOGLE]:
            return self.model_id
        else:
            return self.model_id
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–µ—Å—Ç—å –ª–∏ API –∫–ª—é—á)"""
        api_key = os.getenv(self.api_key_env)
        return api_key is not None and api_key.strip() != ""

class ModelConfigurationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–µ–π"""
    
    CONFIG_FILE = "model_configurations.json"
    
    def __init__(self, config_dir: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        
        Args:
            config_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        """
        if config_dir is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            config_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        self.config_dir = Path(config_dir)
        self.config_file = self.config_dir / self.CONFIG_FILE
        
        self._configurations: Dict[str, ModelConfiguration] = {}
        self._current_provider: ModelProvider = ModelProvider.GEMINI
        self._current_model_id: Optional[str] = None
        
        self._load_configurations()
        self._ensure_default_configurations()
        
        logger.info(f"üîß ModelConfigurationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∫–æ–Ω—Ñ–∏–≥: {self.config_file})")
    
    def _ensure_default_configurations(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        default_configs = [
            # Gemini –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            ModelConfiguration(
                provider=ModelProvider.GEMINI,
                model_id="gemini-2.0-flash-exp",
                display_name="Gemini 2.0 Flash (Experimental)",
                api_key_env="GOOGLE_API_KEY",
                is_default=True,
                parameters={"temperature": 0.7, "max_tokens": 8192}
            ),
            ModelConfiguration(
                provider=ModelProvider.GEMINI,
                model_id="gemini-1.5-pro",
                display_name="Gemini 1.5 Pro",
                api_key_env="GOOGLE_API_KEY",
                parameters={"temperature": 0.7, "max_tokens": 8192}
            ),
            ModelConfiguration(
                provider=ModelProvider.GEMINI,
                model_id="gemini-1.5-flash",
                display_name="Gemini 1.5 Flash",
                api_key_env="GOOGLE_API_KEY",
                parameters={"temperature": 0.7, "max_tokens": 8192}
            ),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
        for config in default_configs:
            config_key = f"{config.provider.value}_{config.model_id}"
            if config_key not in self._configurations:
                self._configurations[config_key] = config
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.display_name}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if not self._current_model_id:
            default_config = self.get_default_configuration()
            if default_config:
                self._current_provider = default_config.provider
                self._current_model_id = default_config.model_id
                logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_config.display_name}")
    
    def _load_configurations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                configs_data = data.get('configurations', {})
                for key, config_data in configs_data.items():
                    try:
                        config = ModelConfiguration.from_dict(config_data)
                        self._configurations[key] = config
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {key}: {e}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                current_data = data.get('current', {})
                if 'provider' in current_data:
                    self._current_provider = ModelProvider(current_data['provider'])
                if 'model_id' in current_data:
                    self._current_model_id = current_data['model_id']
                
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._configurations)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            else:
                logger.info("üìù –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            self._configurations = {}
    
    def _save_configurations(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.config_dir.mkdir(parents=True, exist_ok=True)
            
            data = {
                'configurations': {
                    key: config.to_dict() 
                    for key, config in self._configurations.items()
                },
                'current': {
                    'provider': self._current_provider.value,
                    'model_id': self._current_model_id
                },
                'version': '1.0',
                'last_updated': str(Path(__file__).stat().st_mtime)
            }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            logger.debug(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.config_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
    
    def add_configuration(self, config: ModelConfiguration) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
            
        Returns:
            –ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        config_key = f"{config.provider.value}_{config.model_id}"
        self._configurations[config_key] = config
        self._save_configurations()
        
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.display_name}")
        
        return config_key
    
    def remove_configuration(self, config_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            config_key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            True, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        """
        if config_key in self._configurations:
            config = self._configurations[config_key]
            del self._configurations[config_key]
            self._save_configurations()
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.display_name}")
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é
            if (self._current_provider.value, self._current_model_id) == (config.provider.value, config.model_id):
                self._switch_to_default()
            
            return True
        
        return False
    
    def get_configuration(self, config_key: str) -> Optional[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É"""
        return self._configurations.get(config_key)
    
    def get_configurations_by_provider(self, provider: ModelProvider) -> List[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return [
            config for config in self._configurations.values()
            if config.provider == provider
        ]
    
    def get_available_configurations(self) -> List[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å API –∫–ª—é—á–∞–º–∏)"""
        return [
            config for config in self._configurations.values()
            if config.is_available()
        ]
    
    def get_all_configurations(self) -> List[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return list(self._configurations.values())
    
    def get_default_configuration(self) -> Optional[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ñ–ª–∞–≥–æ–º is_default
        for config in self._configurations.values():
            if config.is_default and config.is_available():
                return config
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        available_configs = self.get_available_configurations()
        if available_configs:
            return available_configs[0]
        
        return None
    
    def get_current_configuration(self) -> Optional[ModelConfiguration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if self._current_model_id:
            config_key = f"{self._current_provider.value}_{self._current_model_id}"
            return self._configurations.get(config_key)
        
        return self.get_default_configuration()
    
    def set_current_configuration(self, provider: ModelProvider, model_id: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏
            model_id: ID –º–æ–¥–µ–ª–∏
            
        Returns:
            True, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        """
        config_key = f"{provider.value}_{model_id}"
        
        if config_key in self._configurations:
            config = self._configurations[config_key]
            
            if config.is_available():
                self._current_provider = provider
                self._current_model_id = model_id
                self._save_configurations()
                
                logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.display_name}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç API –∫–ª—é—á–∞): {config.display_name}")
                return False
        else:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {provider.value}/{model_id}")
            return False
    
    def switch_to_provider(self, provider: ModelProvider) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        available_configs = [
            config for config in self.get_configurations_by_provider(provider)
            if config.is_available()
        ]
        
        if available_configs:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            target_config = None
            for config in available_configs:
                if config.is_default:
                    target_config = config
                    break
            
            if not target_config:
                target_config = available_configs[0]
            
            return self.set_current_configuration(target_config.provider, target_config.model_id)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider.value}")
            return False
    
    def _switch_to_default(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = self.get_default_configuration()
        if default_config:
            self._current_provider = default_config.provider
            self._current_model_id = default_config.model_id
            self._save_configurations()
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_config.display_name}")
    
    def add_openrouter_models(self, models: List[Any]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª–∏ OpenRouter –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OpenRouter
        """
        added_count = 0
        
        for model in models:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config_key = f"openrouter_{model.id}"
            
            if config_key not in self._configurations:
                config = ModelConfiguration(
                    provider=ModelProvider.OPENROUTER,
                    model_id=model.id,
                    display_name=model.get_display_name(),
                    api_key_env="OPENROUTER_API_KEY",
                    is_active=model.is_active,
                    parameters={
                        "temperature": 0.7,
                        "max_tokens": min(model.context_length // 2, 4096) if model.context_length > 0 else 2048
                    }
                )
                
                self._configurations[config_key] = config
                added_count += 1
        
        if added_count > 0:
            self._save_configurations()
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π OpenRouter –º–æ–¥–µ–ª–µ–π")
    
    def get_current_litellm_config(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è LiteLLM
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è LiteLLM
        """
        current_config = self.get_current_configuration()
        
        if not current_config:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {
                "model": "gemini-2.0-flash-exp",
                "api_key": os.getenv("GOOGLE_API_KEY"),
                "temperature": 0.7,
                "max_tokens": 4096
            }
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: parameters –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ dict –±–ª–∞–≥–æ–¥–∞—Ä—è default_factory=dict
        # –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —è–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ dict, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        params: Dict[str, Any] = current_config.parameters or {}
        config = {
            "model": current_config.get_litellm_model_name(),
            "api_key": os.getenv(current_config.api_key_env),
            **params
        }
        
        logger.debug(f"üîß LiteLLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {current_config.display_name}")
        
        return config
    
    def get_provider_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        status = {}
        
        for provider in ModelProvider:
            configs = self.get_configurations_by_provider(provider)
            available_configs = [c for c in configs if c.is_available()]
            
            status[provider.value] = {
                "total_models": len(configs),
                "available_models": len(available_configs),
                "has_api_key": len(available_configs) > 0,
                "is_current": self._current_provider == provider
            }
        
        return status
    
    def validate_configuration(self, config: ModelConfiguration) -> List[str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        errors = []
        
        if not config.model_id:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω ID –º–æ–¥–µ–ª–∏")
        
        if not config.display_name:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
        
        if not config.api_key_env:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API –∫–ª—é—á–∞")
        
        if not config.is_available():
            errors.append(f"API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è {config.api_key_env}")
        
        return errors

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_manager: Optional[ModelConfigurationManager] = None

def get_model_config_manager() -> ModelConfigurationManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    global _global_manager
    
    if _global_manager is None:
        _global_manager = ModelConfigurationManager()
    
    return _global_manager

def test_model_config_manager():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    print("üß™ === –¢–ï–°–¢ MODEL CONFIGURATION MANAGER ===")
    
    manager = get_model_config_manager()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
    all_configs = manager.get_all_configurations()
    available_configs = manager.get_available_configurations()
    
    print(f"üìã –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(all_configs)}")
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(available_configs)}")
    
    # –¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    current_config = manager.get_current_configuration()
    
    if current_config:
        print(f"üéØ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {current_config.display_name}")
        print(f"üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_config.provider.value}")
        print(f"üÜî –ú–æ–¥–µ–ª—å: {current_config.model_id}")
        print(f"üîë API –∫–ª—é—á: {current_config.api_key_env}")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞: {current_config.is_available()}")
    else:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    status = manager.get_provider_status()
    
    for provider, info in status.items():
        print(f"üîß {provider.upper()}:")
        print(f"  üìä –ú–æ–¥–µ–ª–µ–π: {info['available_models']}/{info['total_models']}")
        print(f"  üîë API –∫–ª—é—á: {'‚úÖ' if info['has_api_key'] else '‚ùå'}")
        print(f"  üéØ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if info['is_current'] else '‚ùå'}")
    
    # –¢–µ—Å—Ç LiteLLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º LiteLLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    litellm_config = manager.get_current_litellm_config()
    
    print(f"üîß –ú–æ–¥–µ–ª—å –¥–ª—è LiteLLM: {litellm_config.get('model', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    print(f"üîë API –∫–ª—é—á: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if litellm_config.get('api_key') else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"üå°Ô∏è Temperature: {litellm_config.get('temperature', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    test_model_config_manager()
