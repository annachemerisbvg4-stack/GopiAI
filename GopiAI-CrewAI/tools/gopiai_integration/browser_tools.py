"""
üåê GopiAI Browser Tool –¥–ª—è CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤ —Å –±—Ä–∞—É–∑–µ—Ä-—Å–∏—Å—Ç–µ–º–æ–π GopiAI
"""

import os
import sys
import time
import logging
from typing import Type, Any, Optional
from pydantic import BaseModel, Field

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
from .base import GopiAIBaseTool
from crewai.tools.base_tool import BaseTool

class BrowserInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–∞—É–∑–µ—Ä-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    action: str = Field(description="–î–µ–π—Å—Ç–≤–∏–µ: navigate, click, type, extract, screenshot, wait")
    target: str = Field(description="URL –∏–ª–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä")
    data: str = Field(default="", description="–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)")
    wait_seconds: int = Field(default=3, description="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è")

class GopiAIBrowserTool(BaseTool):
    """
    –ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ GopiAI BrowserAgent
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–µ–±-—Å–∞–π—Ç–∞–º
    - –ö–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    - –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º—ã
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
    - –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
    - –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    
    name: str = Field(default="gopiai_browser", description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è CrewAI")
    description: str = Field(default="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è CrewAI", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    args_schema: Type[BaseModel] = BrowserInput
    
    def _run(self, action: str, target: str, data: str = "", wait_seconds: int = 3) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ GopiAI BrowserAgent
        """
        return "Browser Tool: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)"
    
    def _execute_browser_action(self, action: str, target: str, data: str, wait_seconds: int) -> str:
        """
        –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GopiAI BrowserAgent
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ GopiAI-Core
            sys.path.append(os.path.join(os.path.dirname(__file__), "../../../GopiAI-Core"))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä-–∞–≥–µ–Ω—Ç GopiAI
            from gopiai.core.agent.browser_ai_interface import get_browser_ai
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞
            browser_ai = get_browser_ai()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if action == "navigate":
                return browser_ai.navigate(target)
            elif action == "click":
                return browser_ai.click(target)
            elif action == "type":
                return browser_ai.type_text(target, data)
            elif action == "extract":
                if target.lower() == "page":
                    return browser_ai.get_page_text()
                else:
                    return browser_ai.extract_text(target)
            elif action == "screenshot":
                return browser_ai.take_screenshot(target)
            elif action == "wait":
                wait_time = int(data) if data.isdigit() else wait_seconds
                return browser_ai.wait_for_element(target, wait_time)
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                
        except ImportError:
            raise Exception("GopiAI BrowserAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")
    
    def _simulate_browser_action(self, action: str, target: str, data: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if action == "navigate":
            return f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {target}"
        elif action == "click":
            return f"üëÜ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {target}"
        elif action == "type":
            return f"‚å®Ô∏è –í–≤–æ–¥ '{data}' –≤ {target}"
        elif action == "extract":
            if target.lower() == "page":
                return "üìÑ –¢–µ–∫—Å—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–≤–ª–µ—á–µ–Ω"
            else:
                return f"üìù –¢–µ–∫—Å—Ç –∏–∑ {target}: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]"
        elif action == "screenshot":
            return f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {target}"
        elif action == "wait":
            return f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {target}"
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

class GopiAIWebSearchTool(GopiAIBaseTool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ GopiAI –±—Ä–∞—É–∑–µ—Ä"""
    
    name: str = "gopiai_web_search"
    description: str = "–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    
    def _run(self, query: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ Google"""
        browser_tool = GopiAIBrowserTool()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Google
        browser_tool._run("navigate", "https://www.google.com")
        
        # –í–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        browser_tool._run("type", "input[name='q']", query)
        
        # –ù–∞–∂–∏–º–∞–µ–º Enter (–∏–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞)
        browser_tool._run("click", "input[name='btnK']")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = browser_tool._run("extract", ".g h3")
        
        return f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}': {results}"


class GopiAIPageAnalyzerTool(GopiAIBaseTool):
    """–ê–Ω–∞–ª–∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    name: str = "gopiai_page_analyzer"
    description: str = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    
    def _run(self, url: str, analysis_type: str = "summary") -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
        analysis_type: summary, links, forms, images, text
        """
        browser_tool = GopiAIBrowserTool()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        browser_tool._run("navigate", url)
        
        if analysis_type == "summary":
            title = browser_tool._run("extract", "title")
            headers = browser_tool._run("extract", "h1, h2, h3")
            return f"üìä –ê–Ω–∞–ª–∏–∑ {url}:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {headers}"
        
        elif analysis_type == "links":
            links = browser_tool._run("extract", "a[href]")
            return f"üîó –°—Å—ã–ª–∫–∏ –Ω–∞ {url}: {links}"
        
        elif analysis_type == "forms":
            forms = browser_tool._run("extract", "form")
            return f"üìã –§–æ—Ä–º—ã –Ω–∞ {url}: {forms}"
        
        elif analysis_type == "text":
            text = browser_tool._run("extract", "page")
            return f"üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç {url}: {text}"
        
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIBrowserTool",
    "GopiAIWebSearchTool", 
    "GopiAIPageAnalyzerTool"
]


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Browser Tools...")
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    browser = GopiAIBrowserTool(verbose=True)
    result = browser.run("navigate", "https://google.com")
    print(f"Browser test: {result}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    search = GopiAIWebSearchTool(verbose=True)
    result = search.run("CrewAI documentation")
    print(f"Search test: {result}")
    
    # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:")
    print(browser.get_metrics())
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")