"""
üåê GopiAI Browser Tool –¥–ª—è CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤ —Å –±—Ä–∞—É–∑–µ—Ä-—Å–∏—Å—Ç–µ–º–æ–π GopiAI
"""

import os
import sys
import time
import logging
from typing import Type, Any, Optional, Dict, List
from pydantic import BaseModel, Field
import requests
from bs4 import BeautifulSoup
import base64
from pathlib import Path

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Selenium
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options as ChromeOptions
    from selenium.webdriver.firefox.options import Options as FirefoxOptions
    from selenium.webdriver.edge.options import Options as EdgeOptions
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Playwright
try:
    from playwright.sync_api import sync_playwright, Browser, Page
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
from .base import GopiAIBaseTool
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BaseTool –∏–∑ crewai
from crewai.tools.base_tool import BaseTool

class BrowserInput(BaseModel):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–∞—É–∑–µ—Ä-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    action: str = Field(description="–î–µ–π—Å—Ç–≤–∏–µ: navigate, click, type, extract, screenshot, wait, scroll, select, execute_js, get_cookies, set_cookie")
    target: str = Field(description="URL, CSS —Å–µ–ª–µ–∫—Ç–æ—Ä, XPath –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    data: str = Field(default="", description="–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–≤–æ–¥–∞, JavaScript –∫–æ–¥, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ")
    wait_seconds: int = Field(default=3, description="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è")
    browser_type: str = Field(default="auto", description="–¢–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞: auto, selenium, playwright, requests")
    headless: bool = Field(default=True, description="–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ")

class GopiAIBrowserTool(BaseTool):
    """
    –ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Selenium, Playwright –∏ requests
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–µ–±-—Å–∞–π—Ç–∞–º
    - –ö–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript
    - –†–∞–±–æ—Ç–∞ —Å cookies
    - –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
    """
    
    name: str = Field(default="gopiai_browser_advanced", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    description: str = Field(default="""–ú–æ—â–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Selenium, Playwright –∏ requests.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –∫–ª–∏–∫–∏, –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, JavaScript, cookies, –ø—Ä–æ–∫—Ä—É—Ç–∫—É.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –¥–≤–∏–∂–æ–∫.""", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    args_schema: Type[BaseModel] = BrowserInput
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        super().__init__()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        self._driver = None
        self._page = None
        self._browser_type = None
        self._last_html = None
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä)
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–∑-–∑–∞ Pydantic
        pass
    
    @property
    def logger(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return logging.getLogger(__name__)
    
    def _run(self, action: str, target: str, data: str = "", wait_seconds: int = 3, 
             browser_type: str = "auto", headless: bool = True) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –¥–≤–∏–∂–∫–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –¥–≤–∏–∂–æ–∫
            if browser_type == "auto":
                if PLAYWRIGHT_AVAILABLE:
                    browser_type = "playwright"
                elif SELENIUM_AVAILABLE:
                    browser_type = "selenium"
                else:
                    browser_type = "requests"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
            if browser_type == "playwright" and PLAYWRIGHT_AVAILABLE:
                return self._run_playwright(action, target, data, wait_seconds, headless)
            elif browser_type == "selenium" and SELENIUM_AVAILABLE:
                return self._run_selenium(action, target, data, wait_seconds, headless)
            else:
                return self._run_requests(action, target, data, wait_seconds)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}"
    
    def _run_playwright(self, action: str, target: str, data: str, wait_seconds: int, headless: bool) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ Playwright"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self._playwright_browser:
                self._init_playwright(headless)
            
            page = self._playwright_page
            
            if action == "open" or action == "navigate":
                # –ï—Å–ª–∏ target –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º Google
                if not target or target == "":
                    target = "https://www.google.com"
                # –ï—Å–ª–∏ target –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º https://
                elif not target.startswith(('http://', 'https://')):
                    target = f"https://{target}"
                
                page.goto(target, wait_until="networkidle")
                self._last_url = target
                return f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {target} (Playwright)"
            
            elif action == "click":
                page.click(target)
                page.wait_for_timeout(wait_seconds * 1000)
                return f"‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É '{target}' –≤—ã–ø–æ–ª–Ω–µ–Ω (Playwright)"
            
            elif action == "type":
                page.fill(target, data)
                page.wait_for_timeout(wait_seconds * 1000)
                return f"‚úÖ –í–≤–æ–¥ '{data}' –≤ —ç–ª–µ–º–µ–Ω—Ç '{target}' –≤—ã–ø–æ–ª–Ω–µ–Ω (Playwright)"
            
            elif action == "extract":
                if target.lower() == "page":
                    text = page.inner_text("body")
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):\n{text[:2000]}..."
                else:
                    elements = page.query_selector_all(target)
                    if not elements:
                        return f"‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    texts = [elem.inner_text() for elem in elements[:10]]
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(texts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n" + "\n".join(texts)
            
            elif action == "screenshot":
                screenshot_path = Path(target) if target else Path("screenshot.png")
                page.screenshot(path=str(screenshot_path))
                return f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path} (Playwright)"
            
            elif action == "scroll":
                if target.lower() == "down":
                    page.evaluate("window.scrollBy(0, window.innerHeight)")
                elif target.lower() == "up":
                    page.evaluate("window.scrollBy(0, -window.innerHeight)")
                elif target.lower() == "top":
                    page.evaluate("window.scrollTo(0, 0)")
                elif target.lower() == "bottom":
                    page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                else:
                    page.locator(target).scroll_into_view_if_needed()
                return f"‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {target} (Playwright)"
            
            elif action == "execute_js":
                result = page.evaluate(data)
                return f"‚úÖ JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} (Playwright)"
            
            elif action == "get_cookies":
                cookies = page.context.cookies()
                return f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cookies)} cookies: {cookies} (Playwright)"
            
            elif action == "wait":
                page.wait_for_timeout(wait_seconds * 1000)
                return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (Playwright)"
            
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Playwright: {action}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ Playwright: {str(e)}"
    
    def _run_selenium(self, action: str, target: str, data: str, wait_seconds: int, headless: bool) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ Selenium"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Selenium –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self._selenium_driver:
                self._init_selenium(headless)
            
            driver = self._selenium_driver
            wait = WebDriverWait(driver, 10)
            
            if action == "open" or action == "navigate":
                # –ï—Å–ª–∏ target –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º Google
                if not target or target == "":
                    target = "https://www.google.com"
                # –ï—Å–ª–∏ target –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º https://
                elif not target.startswith(('http://', 'https://')):
                    target = f"https://{target}"
                
                driver.get(target)
                self._last_url = target
                return f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {target} (Selenium)"
            
            elif action == "click":
                element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                element.click()
                time.sleep(wait_seconds)
                return f"‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É '{target}' –≤—ã–ø–æ–ª–Ω–µ–Ω (Selenium)"
            
            elif action == "type":
                element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                element.clear()
                element.send_keys(data)
                time.sleep(wait_seconds)
                return f"‚úÖ –í–≤–æ–¥ '{data}' –≤ —ç–ª–µ–º–µ–Ω—Ç '{target}' –≤—ã–ø–æ–ª–Ω–µ–Ω (Selenium)"
            
            elif action == "extract":
                if target.lower() == "page":
                    text = driver.find_element(By.TAG_NAME, "body").text
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):\n{text[:2000]}..."
                else:
                    elements = driver.find_elements(By.CSS_SELECTOR, target)
                    if not elements:
                        return f"‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    texts = [elem.text for elem in elements[:10]]
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(texts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n" + "\n".join(texts)
            
            elif action == "screenshot":
                screenshot_path = target if target else "screenshot.png"
                driver.save_screenshot(screenshot_path)
                return f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path} (Selenium)"
            
            elif action == "scroll":
                if target.lower() == "down":
                    driver.execute_script("window.scrollBy(0, window.innerHeight);")
                elif target.lower() == "up":
                    driver.execute_script("window.scrollBy(0, -window.innerHeight);")
                elif target.lower() == "top":
                    driver.execute_script("window.scrollTo(0, 0);")
                elif target.lower() == "bottom":
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                else:
                    element = driver.find_element(By.CSS_SELECTOR, target)
                    driver.execute_script("arguments[0].scrollIntoView();", element)
                return f"‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {target} (Selenium)"
            
            elif action == "execute_js":
                result = driver.execute_script(data)
                return f"‚úÖ JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} (Selenium)"
            
            elif action == "get_cookies":
                cookies = driver.get_cookies()
                return f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cookies)} cookies: {cookies} (Selenium)"
            
            elif action == "wait":
                time.sleep(wait_seconds)
                return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (Selenium)"
            
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Selenium: {action}"
                
        except TimeoutException:
            return f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ '{target}' (Selenium)"
        except NoSuchElementException:
            return f"‚ùå –≠–ª–µ–º–µ–Ω—Ç '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω (Selenium)"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ Selenium: {str(e)}"
    
    def _run_requests(self, action: str, target: str, data: str, wait_seconds: int) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ requests (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
        try:
            if action == "open" or action == "navigate":
                # –ï—Å–ª–∏ target –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º Google
                if not target or target == "":
                    target = "https://www.google.com"
                # –ï—Å–ª–∏ target –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º https://
                elif not target.startswith(('http://', 'https://')):
                    target = f"https://{target}"
                
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                resp = requests.get(target, headers=headers, timeout=10)
                self._last_html = resp.text
                self._last_url = target
                return f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {target} (–∫–æ–¥ {resp.status_code}) (requests)"
            
            elif action == "extract":
                if not self._last_html:
                    return "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'navigate'."
                soup = BeautifulSoup(self._last_html, 'html.parser')
                if target.lower() == "page":
                    text = soup.get_text(separator='\n')
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):\n{text[:2000]}..."
                else:
                    elements = soup.select(target)
                    if not elements:
                        return f"‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    texts = [el.get_text(strip=True) for el in elements[:10]]
                    return f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(texts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n" + "\n".join(texts)
            
            elif action == "wait":
                time.sleep(wait_seconds)
                return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (requests)"
            
            else:
                return f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ '{action}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ requests. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Selenium –∏–ª–∏ Playwright –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ requests: {str(e)}"
    
    def _init_playwright(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright"""
        try:
            self._playwright_context = sync_playwright().start()
            self._playwright_browser = self._playwright_context.chromium.launch(headless=headless)
            self._playwright_page = self._playwright_browser.new_page()
            self.logger.info("Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright: {e}")
            raise
    
    def _init_selenium(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium"""
        try:
            options = ChromeOptions()
            if headless:
                options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            
            self._selenium_driver = webdriver.Chrome(options=options)
            self.logger.info("Selenium –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selenium: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º Firefox –∫–∞–∫ fallback
            try:
                firefox_options = FirefoxOptions()
                if headless:
                    firefox_options.add_argument('--headless')
                self._selenium_driver = webdriver.Firefox(options=firefox_options)
                self.logger.info("Selenium (Firefox) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e2:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firefox: {e2}")
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ Chrome, –Ω–∏ Firefox: {e}, {e2}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self._selenium_driver:
                self._selenium_driver.quit()
                self._selenium_driver = None
            
            if self._playwright_browser:
                self._playwright_browser.close()
                self._playwright_browser = None
            
            if self._playwright_context:
                self._playwright_context.stop()
                self._playwright_context = None
                
            self.logger.info("–†–µ—Å—É—Ä—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.cleanup()
    
    def _execute_browser_action(self, action: str, target: str, data: str, wait_seconds: int) -> str:
        return "[DEPRECATED] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ _run —Å requests/BeautifulSoup."
    
    def _simulate_browser_action(self, action: str, target: str, data: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if action == "navigate":
            return f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {target}"
        elif action == "click":
            return f"üëÜ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {target}"
        elif action == "type":
            return f"‚å®Ô∏è –í–≤–æ–¥ '{data}' –≤ {target}"
        elif action == "extract":
            if target.lower() == "page":
                return "üìÑ –¢–µ–∫—Å—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–≤–ª–µ—á–µ–Ω"
            else:
                return f"üìù –¢–µ–∫—Å—Ç –∏–∑ {target}: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]"
        elif action == "screenshot":
            return f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {target}"
        elif action == "wait":
            return f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {target}"
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

class GopiAIWebSearchTool(BaseTool):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–∏—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
    
    name: str = Field(default="gopiai_web_search_advanced", description="–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫")
    description: str = Field(default="–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google, Bing, DuckDuckGo –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    args_schema: Type[BaseModel] = BrowserInput
    
    def _run(self, action: str = "search", target: str = "google", data: str = "", **kwargs) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
        action: search, quick_search
        target: google, bing, duckduckgo, yandex
        data: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        """
        try:
            if not data:
                return "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            browser_tool = GopiAIBrowserTool()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            search_urls = {
                "google": "https://www.google.com",
                "bing": "https://www.bing.com",
                "duckduckgo": "https://duckduckgo.com",
                "yandex": "https://yandex.ru"
            }
            
            search_inputs = {
                "google": "input[name='q']",
                "bing": "input[name='q']",
                "duckduckgo": "input[name='q']",
                "yandex": "input[name='text']"
            }
            
            search_buttons = {
                "google": "input[name='btnK']",
                "bing": "input[type='submit']",
                "duckduckgo": "input[type='submit']",
                "yandex": "button[type='submit']"
            }
            
            result_selectors = {
                "google": ".g h3, .g .VwiC3b",
                "bing": ".b_algo h2, .b_algo .b_caption p",
                "duckduckgo": ".result__title, .result__snippet",
                "yandex": ".serp-item .organic__title, .serp-item .organic__text"
            }
            
            if target not in search_urls:
                target = "google"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if action == "quick_search":
                # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ requests
                search_url = f"{search_urls[target]}/search?q={data.replace(' ', '+')}"
                result = browser_tool._run("navigate", search_url, browser_type="requests")
                extract_result = browser_tool._run("extract", result_selectors[target], browser_type="requests")
                return f"üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ '{data}' –≤ {target}:\n{extract_result}"
            
            else:
                # –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                nav_result = browser_tool._run("navigate", search_urls[target])
                
                # –í–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                type_result = browser_tool._run("type", search_inputs[target], data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                if target == "google":
                    # –î–ª—è Google –∏—Å–ø–æ–ª—å–∑—É–µ–º Enter
                    browser_tool._run("execute_js", "", "document.querySelector('input[name=\"q\"]').form.submit()")
                else:
                    browser_tool._run("click", search_buttons[target])
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                browser_tool._run("wait", "", "", 3)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = browser_tool._run("extract", result_selectors[target])
                
                # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                browser_tool.cleanup()
                
                return f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{data}' –≤ {target}:\n{results}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"


class GopiAIPageAnalyzerTool(BaseTool):
    """–ú–æ—â–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    name: str = Field(default="gopiai_page_analyzer_advanced", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü")
    description: str = Field(default="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Å—Å—ã–ª–∫–∏, —Ñ–æ—Ä–º—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, SEO, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    args_schema: Type[BaseModel] = BrowserInput
    
    def _run(self, action: str = "summary", target: str = "", data: str = "", **kwargs) -> str:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        action: summary, links, forms, images, metadata, seo, performance, accessibility, security
        target: URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        data: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            if not target:
                return "‚ùå URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            browser_tool = GopiAIBrowserTool()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            nav_result = browser_tool._run("navigate", target)
            
            if action == "summary":
                # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = browser_tool._run("extract", "title")
                headers = browser_tool._run("extract", "h1, h2, h3")
                meta_desc = browser_tool._run("extract", "meta[name='description']")
                links_count = browser_tool._run("execute_js", "", "return document.querySelectorAll('a').length")
                images_count = browser_tool._run("execute_js", "", "return document.querySelectorAll('img').length")
                
                browser_tool.cleanup()
                return f"""üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ {target}:
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {meta_desc}
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {links_count}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}"""
            
            elif action == "links":
                # –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫
                internal_links = browser_tool._run("execute_js", "", f"return Array.from(document.querySelectorAll('a[href]')).filter(a => a.href.includes('{target.split('/')[2]}')).map(a => a.href + ' - ' + a.textContent.trim()).slice(0, 10)")
                external_links = browser_tool._run("execute_js", "", f"return Array.from(document.querySelectorAll('a[href]')).filter(a => !a.href.includes('{target.split('/')[2]}') && a.href.startsWith('http')).map(a => a.href + ' - ' + a.textContent.trim()).slice(0, 10)")
                
                browser_tool.cleanup()
                return f"""üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫ {target}:

üè† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏:
{internal_links}

üåê –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏:
{external_links}"""
            
            elif action == "forms":
                # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º
                forms_info = browser_tool._run("execute_js", "", "return Array.from(document.querySelectorAll('form')).map(form => ({ action: form.action, method: form.method, inputs: Array.from(form.querySelectorAll('input')).map(input => input.type + ':' + input.name) }))")
                
                browser_tool.cleanup()
                return f"üìã –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º {target}:\n{forms_info}"
            
            elif action == "images":
                # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                images_info = browser_tool._run("execute_js", "", "return Array.from(document.querySelectorAll('img')).map(img => ({ src: img.src, alt: img.alt, width: img.width, height: img.height })).slice(0, 20)")
                
                browser_tool.cleanup()
                return f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π {target}:\n{images_info}"
            
            elif action == "metadata":
                # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                meta_tags = browser_tool._run("execute_js", "", "return Array.from(document.querySelectorAll('meta')).map(meta => meta.name + ':' + meta.content || meta.property + ':' + meta.content).filter(Boolean)")
                
                browser_tool.cleanup()
                return f"üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ {target}:\n{meta_tags}"
            
            elif action == "seo":
                # SEO –∞–Ω–∞–ª–∏–∑
                title = browser_tool._run("extract", "title")
                h1_count = browser_tool._run("execute_js", "", "return document.querySelectorAll('h1').length")
                meta_desc = browser_tool._run("extract", "meta[name='description']")
                alt_missing = browser_tool._run("execute_js", "", "return document.querySelectorAll('img:not([alt])').length")
                
                browser_tool.cleanup()
                return f"""üìä SEO –∞–Ω–∞–ª–∏–∑ {target}:
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title} (–¥–ª–∏–Ω–∞: {len(str(title))} —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ H1: {h1_count}
‚Ä¢ Meta description: {meta_desc}
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt: {alt_missing}"""
            
            elif action == "performance":
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                load_time = browser_tool._run("execute_js", "", "return performance.timing.loadEventEnd - performance.timing.navigationStart")
                resources_count = browser_tool._run("execute_js", "", "return performance.getEntriesByType('resource').length")
                dom_elements = browser_tool._run("execute_js", "", "return document.querySelectorAll('*').length")
                
                browser_tool.cleanup()
                return f"""‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {target}:
‚Ä¢ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time} –º—Å
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {resources_count}
‚Ä¢ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {dom_elements}"""
            
            elif action == "accessibility":
                # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                missing_alt = browser_tool._run("execute_js", "", "return document.querySelectorAll('img:not([alt])').length")
                missing_labels = browser_tool._run("execute_js", "", "return document.querySelectorAll('input:not([aria-label]):not([aria-labelledby])').length")
                headings_structure = browser_tool._run("execute_js", "", "return Array.from(document.querySelectorAll('h1,h2,h3,h4,h5,h6')).map(h => h.tagName).join(', ')")
                
                browser_tool.cleanup()
                return f"""‚ôø –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {target}:
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt: {missing_alt}
‚Ä¢ –ü–æ–ª–µ–π –±–µ–∑ –º–µ—Ç–æ–∫: {missing_labels}
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {headings_structure}"""
            
            elif action == "security":
                # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                https_check = "HTTPS" if target.startswith("https://") else "HTTP"
                forms_without_csrf = browser_tool._run("execute_js", "", "return document.querySelectorAll('form:not([data-csrf]):not([csrf-token])').length")
                external_scripts = browser_tool._run("execute_js", "", f"return Array.from(document.querySelectorAll('script[src]')).filter(s => !s.src.includes('{target.split('/')[2]}')).length")
                
                browser_tool.cleanup()
                return f"""üîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {target}:
‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: {https_check}
‚Ä¢ –§–æ—Ä–º –±–µ–∑ CSRF –∑–∞—â–∏—Ç—ã: {forms_without_csrf}
‚Ä¢ –í–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤: {external_scripts}"""
            
            elif action == "extract":
                # –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                if data:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                    text = browser_tool._run("extract", data)
                else:
                    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    text = browser_tool._run("extract", "page")
                
                browser_tool.cleanup()
                return f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å {target}:\n{text}"
            
            else:
                browser_tool.cleanup()
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {action}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: summary, links, forms, images, metadata, seo, performance, accessibility, security, extract"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIBrowserTool",
    "GopiAIWebSearchTool", 
    "GopiAIPageAnalyzerTool",
    "BrowserInput",
    "SELENIUM_AVAILABLE",
    "PLAYWRIGHT_AVAILABLE"
]

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
def get_browser_capabilities() -> Dict[str, bool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –¥–≤–∏–∂–∫–∞—Ö"""
    return {
        "selenium": SELENIUM_AVAILABLE,
        "playwright": PLAYWRIGHT_AVAILABLE,
        "requests": True  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    }

def get_recommended_browser_engine() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –¥–≤–∏–∂–æ–∫"""
    if PLAYWRIGHT_AVAILABLE:
        return "playwright"
    elif SELENIUM_AVAILABLE:
        return "selenium"
    else:
        return "requests"

def install_browser_dependencies() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±—Ä–∞—É–∑–µ—Ä–∞"""
    return """
üîß –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:

üì¶ Selenium:
    pip install selenium
    # –¢–∞–∫–∂–µ –Ω—É–∂–µ–Ω ChromeDriver –∏–ª–∏ GeckoDriver

üì¶ Playwright (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
    pip install playwright
    playwright install

üì¶ –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã):
    pip install requests beautifulsoup4

‚ö° Playwright –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.
"""

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.INFO)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Browser Tools...")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–≤–∏–∂–∫–∏: {get_browser_capabilities()}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–≤–∏–∂–æ–∫: {get_recommended_browser_engine()}")
    
    if not SELENIUM_AVAILABLE and not PLAYWRIGHT_AVAILABLE:
        print("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –¥–≤–∏–∂–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ requests.")
        print(install_browser_dependencies())
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    try:
        browser = GopiAIBrowserTool()
        result = browser._run("navigate", "https://httpbin.org/get", browser_type="requests")
        print(f"‚úÖ Browser test: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå Browser test failed: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    try:
        search = GopiAIWebSearchTool()
        result = search._run("quick_search", "google", "test query")
        print(f"‚úÖ Search test: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå Search test failed: {e}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    try:
        analyzer = GopiAIPageAnalyzerTool()
        result = analyzer._run("summary", "https://httpbin.org/get")
        print(f"‚úÖ Analyzer test: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå Analyzer test failed: {e}")
    
    print("üéâ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")