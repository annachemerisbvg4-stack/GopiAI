"""
üîÑ GopiAI AI Router Tool –¥–ª—è CrewAI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π AI Router GopiAI
"""

import os
import json
import subprocess
from typing import Type, Any, Dict, Optional
from pydantic import BaseModel, Field
from crewai.tools.base_tool import BaseTool

class AIRouterInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI Router"""
    message: str = Field(description="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI Router")
    task_type: str = Field(default="chat", description="–¢–∏–ø –∑–∞–¥–∞—á–∏: chat, code, creative, analysis")
    model_preference: str = Field(default="auto", description="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: auto, groq, gemini, cerebras")
    max_tokens: int = Field(default=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    temperature: float = Field(default=0.7, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

class GopiAIRouterTool(BaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Router —Å–∏—Å—Ç–µ–º—ã GopiAI
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ –∑–∞–¥–∞—á–µ
    - –û–±—Ö–æ–¥ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    name: str = Field(default="gopiai_router", description="–ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    description: str = Field(default="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ AI", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    router_path: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../../01_AI_ROUTER_SYSTEM"), description="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ AI Router")
    args_schema: Type[BaseModel] = AIRouterInput
    
    def __init__(self, **data):
        super().__init__(**data)
        # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–∑—ã–≤–∞–π—Ç–µ self.init_files() –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

    def init_files(self):
        os.makedirs(self.router_path, exist_ok=True)
    
    def _run(self, *args, **kwargs):
        return "AI Router Tool: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)"
    
    def _run(self, message: str, task_type: str = "chat", model_preference: str = "auto", 
             max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI Router
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            result = self._direct_router_call(message, task_type, model_preference, max_tokens, temperature)
            if result:
                return result
            
            # Fallback: —á–µ—Ä–µ–∑ subprocess
            return self._subprocess_router_call(message, task_type, model_preference)
            
        except Exception as e:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —ç–º—É–ª—è—Ü–∏—è
            return self._simulate_router_call(message, task_type, model_preference)
    
    def _direct_router_call(self, message: str, task_type: str, model_preference: str, 
                           max_tokens: int, temperature: float) -> Optional[str]:
        """
        –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ AI Router (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        """
        try:
            import sys
            sys.path.append(self.router_path)
            
            # –ò–º–ø–æ—Ä—Ç AI Router (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∫–∞–∫ Python –º–æ–¥—É–ª—å)
            # from ai_router_system import AIRouter
            # router = AIRouter()
            # return router.process_request(message, task_type, model_preference)
            
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ AI Router –≤ JavaScript
            return None
            
        except ImportError:
            return None
    
    def _subprocess_router_call(self, message: str, task_type: str, model_preference: str) -> str:
        """
        –í—ã–∑–æ–≤ AI Router —á–µ—Ä–µ–∑ subprocess (Node.js)
        """
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safe_message = message.replace("'", "\\'").replace('"', '\\"')
            
            # JavaScript –∫–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI Router
            js_code = f"""
            const path = require('path');
            const {{ AIRouter }} = require('{self.router_path}/ai_router_system.js');
            const config = require('{self.router_path}/ai_rotation_config.js');
            // --- DEBUGGING START ---
            console.log(JSON.stringify({ debug: `Type of AIRouter: ${typeof AIRouter}` }));
            console.log(JSON.stringify({ debug: `AIRouter object: ${JSON.stringify(AIRouter, null, 2)}` }));
            
            async function processRequest() {{
                try {{
                    const router = new AIRouter(config.AI_PROVIDERS_CONFIG);
                    const result = await router.processRequest('{safe_message}', '{task_type}', '{model_preference}');
                    console.log(JSON.stringify({{ 
                        success: true, 
                        response: result.response,
                        provider: result.provider,
                        tokens: result.tokens
                    }}));
                }} catch (error) {{
                    console.log(JSON.stringify({{ 
                        success: false, 
                        error: error.message 
                    }}));
                }}
            }}
            
            processRequest();
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Node.js
            result = subprocess.run(
                ["node", "-e", js_code],
                capture_output=True,
                text=True,
                timeout=30,  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                cwd=self.router_path
            )
            
            if result.returncode == 0:
                try:
                    response_data = json.loads(result.stdout.strip())
                    if response_data.get("success"):
                        provider = response_data.get("provider", "unknown")
                        tokens = response_data.get("tokens", 0)
                        response = response_data["response"]
                        return f"ü§ñ AI Router ({provider}, {tokens} —Ç–æ–∫–µ–Ω–æ–≤): {response}"
                    else:
                        error = response_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        return f"‚ùå AI Router –æ—à–∏–±–∫–∞: {error}"
                except json.JSONDecodeError:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI Router: {result.stdout}"
            else:
                return f"‚ùå AI Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return "‚è±Ô∏è AI Router: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI Router: {str(e)}"
    
    def _simulate_router_call(self, message: str, task_type: str, model_preference: str) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è AI Router –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –í—ã–±–∏—Ä–∞–µ–º "–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if model_preference == "groq":
            provider = "Groq (llama-3.3-70b)"
        elif model_preference == "gemini":
            provider = "Google (gemini-2.0-flash)"
        elif model_preference == "cerebras":
            provider = "Cerebras (llama-3.1-70b)"
        else:
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            if task_type == "code":
                provider = "Cerebras (llama-3.1-70b)"
            elif task_type == "creative":
                provider = "Google (gemini-2.0-flash)"
            elif task_type == "analysis":
                provider = "Google (gemini-2.0-flash)"
            else:
                provider = "Groq (llama-3.3-70b)"
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        if task_type == "code":
            response = "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏..."
        elif task_type == "creative":
            response = "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
        elif task_type == "analysis":
            response = "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã..."
        else:
            response = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å: {message[:50]}..."
        
        return f"ü§ñ AI Router (—ç–º—É–ª—è—Ü–∏—è, {provider}): {response}"
    
    def _huggingface_fallback(self, message: str, task_type: str, model_preference: str, 
                             max_tokens: int, temperature: float) -> Optional[str]:
        """
        Fallback –Ω–∞ Hugging Face –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HuggingFace tool
            from .huggingface_tools import GopiAIHuggingFaceTool
            
            hf_tool = GopiAIHuggingFaceTool()
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
            if task_type == "code":
                model = "microsoft/CodeBERT-base"
            elif task_type == "chat":
                model = "microsoft/DialoGPT-large"
            elif task_type == "creative":
                model = "google/flan-t5-base"
            else:
                model = "auto"  # –ê–≤—Ç–æ–≤—ã–±–æ—Ä
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = hf_tool._run(
                message=message,
                model_name=model,
                task_type="text-generation" if task_type != "chat" else "conversational",
                max_length=min(max_tokens, 200),  # HF –ª–∏–º–∏—Ç
                temperature=temperature
            )
            
            return f"ü§ó HuggingFace Fallback: {result}"
            
        except Exception as e:
            return f"‚ùå HuggingFace Fallback error: {str(e)}"


class GopiAIModelSelectorTool:
    """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    
    name: str = "gopiai_model_selector" 
    description: str = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"
    
    def _run(self, task_description: str, constraints: str = "") -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–æ–¥–µ–ª—å
        """
        task_lower = task_description.lower()
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if any(word in task_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "debug", "python", "javascript"]):
            recommendations.append("üñ•Ô∏è –¢–∏–ø: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Cerebras Llama-3.1-70B (–ª—É—á—à–µ –¥–ª—è –∫–æ–¥–∞)")
            task_type = "code"
        elif any(word in task_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]):
            recommendations.append("üìä –¢–∏–ø: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Google Gemini-2.0-Flash (—Ö–æ—Ä–æ—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)")
            task_type = "analysis"
        elif any(word in task_lower for word in ["—Ç–≤–æ—Ä—á", "—Å–æ–∑–¥–∞–π", "–ø—Ä–∏–¥—É–º–∞–π", "–Ω–∞–ø–∏—à–∏"]):
            recommendations.append("üé® –¢–∏–ø: –¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Google Gemini-2.0-Flash (—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)")
            task_type = "creative"
        else:
            recommendations.append("üí¨ –¢–∏–ø: –û–±—â–µ–Ω–∏–µ/–¥–∏–∞–ª–æ–≥")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Groq Llama-3.3-70B (–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)")
            task_type = "chat"
        
        # –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if "–±—ã—Å—Ç—Ä–æ" in constraints.lower():
            recommendations.append("‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Å–∫–æ—Ä–æ—Å—Ç—å ‚Üí Groq (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)")
        if "–¥–ª–∏–Ω–Ω" in constraints.lower() or "–ø–æ–¥—Ä–æ–±–Ω" in constraints.lower():
            recommendations.append("üìù –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí Gemini (–±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)")
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—ç–º—É–ª—è—Ü–∏—è)
        status = [
            "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:",
            "‚úÖ Groq: –¥–æ—Å—Ç—É–ø–µ–Ω (–ª–∏–º–∏—Ç: 30 RPM)",
            "‚úÖ Gemini: –¥–æ—Å—Ç—É–ø–µ–Ω (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "‚ö†Ô∏è Cerebras: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            "‚úÖ Cohere: –¥–æ—Å—Ç—É–ø–µ–Ω",
            "ü§ó HuggingFace: –¥–æ—Å—Ç—É–ø–µ–Ω (1000 req/month)"
        ]
        
        result = "\\n".join(recommendations + [""] + status)
        return f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏:\\n{result}\\n\\nüöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ task_type='{task_type}'"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIRouterTool",
    "GopiAIModelSelectorTool"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI AI Router Tools...")
    
    # –¢–µ—Å—Ç AI Router
    router = GopiAIRouterTool()
    result = router._run("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "chat", "auto")
    print(f"AI Router test: {result}")
    
    # –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    selector = GopiAIModelSelectorTool()
    result = selector._run("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞", "–±—ã—Å—Ç—Ä–æ")
    print(f"Model selector test: {result}")
    
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")