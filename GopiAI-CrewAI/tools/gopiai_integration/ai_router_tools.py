"""
üîÑ GopiAI AI Router Tool –¥–ª—è CrewAI
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ CrewAI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π AI Router GopiAI
"""

import os
from typing import Type, Any, Dict, Optional
from pydantic import BaseModel, Field
from crewai.tools.base_tool import BaseTool
from .ai_router_llm import AIRouterLLM

class AIRouterInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI Router"""
    message: str = Field(description="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI Router")
    task_type: str = Field(default="chat", description="–¢–∏–ø –∑–∞–¥–∞—á–∏: chat, code, creative, analysis")
    model_preference: str = Field(default="auto", description="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: auto, groq, gemini, cerebras")
    max_tokens: int = Field(default=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    temperature: float = Field(default=0.7, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

class GopiAIRouterTool(BaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Router —Å–∏—Å—Ç–µ–º—ã GopiAI
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ –∑–∞–¥–∞—á–µ
    - –û–±—Ö–æ–¥ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    name: str = Field(default="gopiai_router", description="–ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    description: str = Field(default="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ AI", description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    args_schema: Type[BaseModel] = AIRouterInput
    
    def __init__(self, **data):
        super().__init__(**data)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI Router LLM –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        self.ai_router_llm = AIRouterLLM()
    
    def _run(self, message: str, task_type: str = "chat", model_preference: str = "auto", 
             max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI Router
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à Python-based AI Router
            # model_preference –∏ task_type –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, —Ç.–∫. —Ä–æ—É—Ç–µ—Ä —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            response = self.ai_router_llm.call(
                prompt=message,
                temperature=temperature,
                max_tokens=max_tokens
            )
            return f"ü§ñ AI Router: {response}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI Router: {str(e)}"


class GopiAIModelSelectorTool:
    """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    
    name: str = "gopiai_model_selector" 
    description: str = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"
    
    def _run(self, task_description: str, constraints: str = "") -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–æ–¥–µ–ª—å
        """
        task_lower = task_description.lower()
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if any(word in task_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "debug", "python", "javascript"]):
            recommendations.append("üñ•Ô∏è –¢–∏–ø: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Cerebras Llama-3.1-70B (–ª—É—á—à–µ –¥–ª—è –∫–æ–¥–∞)")
            task_type = "code"
        elif any(word in task_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]):
            recommendations.append("üìä –¢–∏–ø: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Google Gemini-2.0-Flash (—Ö–æ—Ä–æ—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)")
            task_type = "analysis"
        elif any(word in task_lower for word in ["—Ç–≤–æ—Ä—á", "—Å–æ–∑–¥–∞–π", "–ø—Ä–∏–¥—É–º–∞–π", "–Ω–∞–ø–∏—à–∏"]):
            recommendations.append("üé® –¢–∏–ø: –¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Google Gemini-2.0-Flash (—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)")
            task_type = "creative"
        else:
            recommendations.append("üí¨ –¢–∏–ø: –û–±—â–µ–Ω–∏–µ/–¥–∏–∞–ª–æ–≥")
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Groq Llama-3.3-70B (–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)")
            task_type = "chat"
        
        # –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if "–±—ã—Å—Ç—Ä–æ" in constraints.lower():
            recommendations.append("‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Å–∫–æ—Ä–æ—Å—Ç—å ‚Üí Groq (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)")
        if "–¥–ª–∏–Ω–Ω" in constraints.lower() or "–ø–æ–¥—Ä–æ–±–Ω" in constraints.lower():
            recommendations.append("üìù –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí Gemini (–±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)")
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—ç–º—É–ª—è—Ü–∏—è)
        status = [
            "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:",
            "‚úÖ Groq: –¥–æ—Å—Ç—É–ø–µ–Ω (–ª–∏–º–∏—Ç: 30 RPM)",
            "‚úÖ Gemini: –¥–æ—Å—Ç—É–ø–µ–Ω (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "‚ö†Ô∏è Cerebras: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            "‚úÖ Cohere: –¥–æ—Å—Ç—É–ø–µ–Ω",
            "ü§ó HuggingFace: –¥–æ—Å—Ç—É–ø–µ–Ω (1000 req/month)"
        ]
        
        result = "\\n".join(recommendations + [""] + status)
        return f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏:\\n{result}\\n\\nüöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ task_type='{task_type}'"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAIRouterTool",
    "GopiAIModelSelectorTool"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI AI Router Tools...")
    
    # –¢–µ—Å—Ç AI Router
    router = GopiAIRouterTool()
    result = router._run("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "chat", "auto")
    print(f"AI Router test: {result}")
    
    # –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    selector = GopiAIModelSelectorTool()
    result = selector._run("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞", "–±—ã—Å—Ç—Ä–æ")
    print(f"Model selector test: {result}")
    
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")