"""
üß† Intent Parser
–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏, —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
"""

import logging
import re
from typing import Dict, List, Optional, Tuple, Set, Any
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class IntentMode(Enum):
    """–†–µ–∂–∏–º—ã –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    AUTO = "auto"           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é
    FORCED = "forced"       # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ UI
    SUGGESTED = "suggested" # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

@dataclass
class IntentMatch:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
    tool_name: str                    # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    confidence: float                 # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.0 - 1.0)
    mode: IntentMode                  # –†–µ–∂–∏–º –≤—ã–∑–æ–≤–∞
    extracted_params: Dict[str, Any]  # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    matched_patterns: List[str]       # –°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    original_text: str               # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

class IntentParser:
    """
    –ü–∞—Ä—Å–µ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._intent_patterns = self._build_intent_patterns()
        self._url_pattern = re.compile(r'https?://[\w\.-]+(?:\.[a-zA-Z]{2,})+(?:/[\w\.-]*)*/?(?:\?[\w&=%-]*)?')
        self._file_patterns = [
            re.compile(r'[a-zA-Z]:\\[\w\\.-]+'),      # Windows –ø—É—Ç–∏
            re.compile(r'/[\w/.-]+'),                  # Unix –ø—É—Ç–∏
            re.compile(r'\./[\w/.-]+'),                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
            re.compile(r'[\w.-]+\.[a-zA-Z]{2,4}')     # –§–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        ]
        self.logger.info("‚úÖ IntentParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _build_intent_patterns(self) -> Dict[str, Dict]:
        """
        –°—Ç—Ä–æ–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {tool_name: {patterns: [...], extractors: {...}, confidence: float}}
        """
        patterns = {}
        
        # üíª –¢–ï–†–ú–ò–ù–ê–õ –ò –ö–û–ú–ê–ù–î–´
        patterns['execute_shell'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
                r'\b(–≤—ã–ø–æ–ª–Ω–∏|–∑–∞–ø—É—Å—Ç–∏|–∫–æ–º–∞–Ω–¥–∞|—Ç–µ—Ä–º–∏–Ω–∞–ª|–∫–æ–Ω—Å–æ–ª—å)\b',
                r'\b(–∑–∞–π–¥–∏ –≤|–ø–µ—Ä–µ–π–¥–∏ –≤|–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ|—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤)\b',
                r'\b(—É—Å—Ç–∞–Ω–æ–≤–∏|—Å–∫–∞—á–∞–π|–æ–±–Ω–æ–≤–∏)\s+\w+',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
                r'\b(run|execute|command|terminal|console)\b',
                r'\b(go to|show contents|list files|navigate to)\b',
                r'\b(install|download|update)\s+\w+',
                # –ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
                r'^\s*(ls|dir|pwd|cd|mkdir|git|npm|pip|docker|curl)\b',
                r'^\s*(cat|type|echo|ps|top|netstat)\b'
            ],
            'extractors': {
                'command': [
                    r'–∫–æ–º–∞–Ω–¥–∞[:\s]+(.+)',
                    r'–≤—ã–ø–æ–ª–Ω–∏[:\s]+(.+)',
                    r'–∑–∞–ø—É—Å—Ç–∏[:\s]+(.+)',
                    r'^(.+)$'  # –í–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                ]
            },
            'confidence': 0.9
        }
        
        # üìÅ –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
        patterns['file_operations'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(—Ñ–∞–π–ª|—Ñ–∞–π–ª—ã|–ø–∞–ø–∫–∞|–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è|–∫–∞—Ç–∞–ª–æ–≥)\b',
                r'\b(—á–∏—Ç–∞–π|–ø—Ä–æ—á–∏—Ç–∞–π|–æ—Ç–∫—Ä–æ–π|–ø–æ–∫–∞–∂–∏)\s+—Ñ–∞–π–ª',
                r'\b(—Å–æ–∑–¥–∞–π|–∑–∞–ø–∏—à–∏|—Å–æ—Ö—Ä–∞–Ω–∏)\s+—Ñ–∞–π–ª',
                r'\b(—Å–ø–∏—Å–æ–∫|—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)\s+(–ø–∞–ø–∫–∏|–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(file|files|folder|directory|dir)\b',
                r'\b(read|open|show)\s+file',
                r'\b(create|write|save)\s+file',
                r'\b(list|contents)\s+(folder|directory)',
                # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                r'\.(txt|json|csv|py|js|html|css|md|xml|yaml|yml|log)[\s\b]'
            ],
            'extractors': {
                'path': [
                    r'—Ñ–∞–π–ª[:\s]+([^\s]+)',
                    r'–ø–∞–ø–∫[–∞–µ–∏—É][:\s]+([^\s]+)',
                    r'file[:\s]+([^\s]+)',
                    r'folder[:\s]+([^\s]+)'
                ],
                'operation': [
                    r'\b(—á–∏—Ç–∞–π|–ø—Ä–æ—á–∏—Ç–∞–π|read|open)\b',
                    r'\b(—Å–æ–∑–¥–∞–π|–∑–∞–ø–∏—à–∏|write|create|save)\b',
                    r'\b(—Å–ø–∏—Å–æ–∫|list|ls|dir)\b'
                ]
            },
            'confidence': 0.8
        }
        
        # üåê –í–ï–ë-–°–ö–†–ê–ü–ò–ù–ì
        patterns['web_scraper'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(—Å–∫–∞—á–∞–π|–ø–∞—Ä—Å–∏|–∏–∑–≤–ª–µ–∫–∏|–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π)\s+(—Å–∞–π—Ç|—Å—Ç—Ä–∞–Ω–∏—Ü|—Å—Å—ã–ª–∫)',
                r'\b(–¥–∞–Ω–Ω—ã–µ|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)\s+—Å\s+(—Å–∞–π—Ç–∞|—Å—Ç—Ä–∞–Ω–∏—Ü—ã)',
                r'\b(—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ|–∫–æ–Ω—Ç–µ–Ω—Ç)\s+(–≤–µ–±-?—Å—Ç—Ä–∞–Ω–∏—Ü—ã|—Å–∞–π—Ç–∞)',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(scrape|parse|extract|analyze)\s+(website|page|site)',
                r'\b(get|fetch|download)\s+(data|content)\s+from',
                r'\b(web\s+scraping|page\s+content|website\s+data)\b'
            ],
            'extractors': {
                'url': [r'(https?://[^\s]+)'],
                'action': [
                    r'\b(—Ç–µ–∫—Å—Ç|text)\b',
                    r'\b(—Å—Å—ã–ª–∫–∏|links)\b',
                    r'\b(—Ç–∞–±–ª–∏—Ü—ã|tables)\b',
                    r'\b(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|images)\b'
                ]
            },
            'confidence': 0.85
        }
        
        # üîç –í–ï–ë-–ü–û–ò–°–ö
        patterns['web_search'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏|–ø–æ–∏—Å–∫)\s+(–≤\s+–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ|–≤\s+—Å–µ—Ç–∏|–æ–Ω–ª–∞–π–Ω)',
                r'\b(–≥—É–≥–ª|google|—è–Ω–¥–µ–∫—Å|yandex)\b',
                r'\b(–ø–æ–∏—Å–∫–æ–≤—ã–π\s+–∑–∞–ø—Ä–æ—Å|–Ω–∞–π—Ç–∏\s+–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(search|find|look\s+up)\s+(online|internet|web)',
                r'\b(google|bing|search\s+for)\b',
                r'\b(web\s+search|internet\s+search)\b'
            ],
            'extractors': {
                'query': [
                    r'–Ω–∞–π–¥–∏[:\s]+(.+)',
                    r'–ø–æ–∏—â–∏[:\s]+(.+)',
                    r'search[:\s]+(.+)',
                    r'find[:\s]+(.+)'
                ]
            },
            'confidence': 0.8
        }
        
        # üîå API –ö–õ–ò–ï–ù–¢
        patterns['api_client'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(api|–∞–ø–∏)\s+(–∑–∞–ø—Ä–æ—Å|–≤—ã–∑–æ–≤|–æ–±—Ä–∞—â–µ–Ω–∏–µ)',
                r'\b(–æ—Ç–ø—Ä–∞–≤—å|—Å–¥–µ–ª–∞–π)\s+(get|post|put|delete)\s+–∑–∞–ø—Ä–æ—Å',
                r'\b(http|rest)\s+(–∑–∞–ø—Ä–æ—Å|–∫–ª–∏–µ–Ω—Ç)',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(api\s+call|api\s+request|http\s+request)\b',
                r'\b(make\s+|send\s+)(get|post|put|delete)\s+request',
                r'\b(rest\s+api|web\s+api|http\s+client)\b'
            ],
            'extractors': {
                'url': [r'(https?://[^\s]+)'],
                'method': [
                    r'\b(get|post|put|delete|patch)\b'
                ]
            },
            'confidence': 0.85
        }
        
        # üêç –ö–û–î –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–†
        patterns['code_interpreter'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(–≤—ã–ø–æ–ª–Ω–∏|–∑–∞–ø—É—Å—Ç–∏)\s+(python|–∫–æ–¥|—Å–∫—Ä–∏–ø—Ç)',
                r'\b(python\s+–∫–æ–¥|–ø–∏—Ç–æ–Ω|–ø–∞–π—Ç–æ–Ω)\b',
                r'\b(–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä|–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\s+–∫–æ–¥–∞)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(run|execute)\s+(python|code|script)',
                r'\b(python\s+code|code\s+execution)\b',
                r'\b(interpreter|code\s+runner)\b',
                # –ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
                r'```python',
                r'print\s*\(',
                r'import\s+\w+',
                r'def\s+\w+\s*\('
            ],
            'extractors': {
                'code': [
                    r'```python\s*\n(.*?)\n```',
                    r'–∫–æ–¥[:\s]+(.+)',
                    r'code[:\s]+(.+)'
                ]
            },
            'confidence': 0.9
        }
        
        # üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        patterns['dalle_tool'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(—Å–æ–∑–¥–∞–π|–Ω–∞—Ä–∏—Å—É–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫—É|—Ä–∏—Å—É–Ω–æ–∫)',
                r'\b(dall-?e|–¥–∞–ª–ª–µ|–¥–∞–ª–∏)\b',
                r'\b(–≥–µ–Ω–µ—Ä–∞—Ü–∏—è\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π|ai\s+–∞—Ä—Ç)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(create|generate|draw|make)\s+(image|picture|artwork)',
                r'\b(dall-?e|image\s+generation|ai\s+art)\b',
                r'\b(generate\s+image|create\s+picture)\b'
            ],
            'extractors': {
                'prompt': [
                    r'–Ω–∞—Ä–∏—Å—É–π[:\s]+(.+)',
                    r'—Å–æ–∑–¥–∞–π[:\s]+(.+)',
                    r'generate[:\s]+(.+)',
                    r'create[:\s]+(.+)'
                ]
            },
            'confidence': 0.9
        }
        
        # üëÅÔ∏è –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        patterns['vision_tool'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–æ–ø–∏—à–∏|—á—Ç–æ\s+–Ω–∞)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏|–∫–∞—Ä—Ç–∏–Ω–∫–µ|—Ñ–æ—Ç–æ)',
                r'\b(—Ä–∞—Å–ø–æ–∑–Ω–∞–π|–æ–ø—Ä–µ–¥–µ–ª–∏)\s+(–æ–±—ä–µ–∫—Ç—ã|—á—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ)',
                r'\b(–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ\s+–∑—Ä–µ–Ω–∏–µ|–∞–Ω–∞–ª–∏–∑\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(analyze|describe|what.s\s+in)\s+(image|picture|photo)',
                r'\b(recognize|identify)\s+(objects|what.s\s+shown)',
                r'\b(computer\s+vision|image\s+analysis)\b'
            ],
            'extractors': {
                'image_url': [r'(https?://[^\s]+\.(jpg|jpeg|png|gif|webp))']
            },
            'confidence': 0.85
        }
        
        # üêô GITHUB –ü–û–ò–°–ö
        patterns['github_search'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏)\s+(–Ω–∞\s+)?github',
                r'\b(—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π|—Ä–µ–ø–æ|–∫–æ–¥)\s+(–Ω–∞\s+)?github',
                r'\b(github\s+–ø–æ–∏—Å–∫|–ø–æ–∏—Å–∫\s+–∫–æ–¥–∞)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(search|find)\s+(on\s+)?github',
                r'\b(repository|repo|code)\s+(on\s+)?github',
                r'\b(github\s+search|code\s+search)\b'
            ],
            'extractors': {
                'query': [
                    r'github[:\s]+(.+)',
                    r'–Ω–∞–π–¥–∏[:\s]+(.+)',
                    r'search[:\s]+(.+)'
                ]
            },
            'confidence': 0.8
        }
        
        # ‚ÑπÔ∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        patterns['system_info'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(—Å–∏—Å—Ç–µ–º–Ω–∞—è\s+–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|–∏–Ω—Ñ–æ\s+–æ\s+—Å–∏—Å—Ç–µ–º–µ|—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)\b',
                r'\b(–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è\s+—Å–∏—Å—Ç–µ–º–∞|–≤–µ—Ä—Å–∏—è\s+–æ—Å|–∂–µ–ª–µ–∑–æ)\b',
                r'\b(—Å—Ç–∞—Ç—É—Å\s+—Å–∏—Å—Ç–µ–º—ã|–∑–¥–æ—Ä–æ–≤—å–µ\s+—Å–∏—Å—Ç–µ–º—ã)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(system\s+info|system\s+information|system\s+specs)\b',
                r'\b(operating\s+system|os\s+version|hardware)\b',
                r'\b(system\s+status|system\s+health)\b'
            ],
            'extractors': {},
            'confidence': 0.9
        }
        
        # ‚è∞ –í–†–ï–ú–Ø
        patterns['time_helper'] = {
            'patterns': [
                # –†—É—Å—Å–∫–∏–µ
                r'\b(–≤—Ä–µ–º—è|—Ç–µ–∫—É—â–µ–µ\s+–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏|–∫–æ—Ç–æ—Ä—ã–π\s+—á–∞—Å)\b',
                r'\b(–¥–∞—Ç–∞|—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è\s+–¥–∞—Ç–∞|–∫–∞–∫–æ–µ\s+—á–∏—Å–ª–æ)\b',
                r'\b(timestamp|–≤—Ä–µ–º–µ–Ω–Ω–∞—è\s+–º–µ—Ç–∫–∞)\b',
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                r'\b(time|current\s+time|what\s+time|clock)\b',
                r'\b(date|current\s+date|today.s\s+date)\b',
                r'\b(timestamp|time\s+stamp)\b'
            ],
            'extractors': {},
            'confidence': 0.95
        }
        
        return patterns
    
    def parse_intent(self, text: str, forced_tool: Optional[str] = None) -> List[IntentMatch]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            forced_tool (Optional[str]): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            
        Returns:
            List[IntentMatch]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if not text or not isinstance(text, str):
            return []
        
        text = text.strip()
        if not text:
            return []
        
        matches = []
        
        # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω
        if forced_tool:
            match = IntentMatch(
                tool_name=forced_tool,
                confidence=1.0,
                mode=IntentMode.FORCED,
                extracted_params=self._extract_params_for_tool(text, forced_tool),
                matched_patterns=[f"forced:{forced_tool}"],
                original_text=text
            )
            matches.append(match)
            return matches
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        text_lower = text.lower()
        
        for tool_name, config in self._intent_patterns.items():
            confidence = 0.0
            matched_patterns = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in config['patterns']:
                if re.search(pattern, text_lower, re.IGNORECASE | re.MULTILINE):
                    confidence = max(confidence, config['confidence'])
                    matched_patterns.append(pattern)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if confidence > 0:
                extracted_params = self._extract_params_for_tool(text, tool_name)
                
                # –ë–æ–Ω—É—Å –∑–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if extracted_params:
                    confidence = min(1.0, confidence + 0.1)
                
                match = IntentMatch(
                    tool_name=tool_name,
                    confidence=confidence,
                    mode=IntentMode.AUTO,
                    extracted_params=extracted_params,
                    matched_patterns=matched_patterns,
                    original_text=text
                )
                matches.append(match)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è URL –∏ —Ñ–∞–π–ª–æ–≤
        self._add_url_based_matches(text, matches)
        self._add_file_based_matches(text, matches)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        matches.sort(key=lambda x: x.confidence, reverse=True)
        
        self.logger.debug(f"üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {len(matches)} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{text[:50]}...'")
        return matches
    
    def _extract_params_for_tool(self, text: str, tool_name: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            tool_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            Dict[str, Any]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        params = {}
        
        if tool_name not in self._intent_patterns:
            return params
        
        extractors = self._intent_patterns[tool_name].get('extractors', {})
        
        for param_name, patterns in extractors.items():
            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE | re.DOTALL)
                if match:
                    if match.groups():
                        params[param_name] = match.group(1).strip()
                    else:
                        params[param_name] = match.group(0).strip()
                    break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self._extract_urls(text, params)
        self._extract_file_paths(text, params)
        
        return params
    
    def _extract_urls(self, text: str, params: Dict[str, Any]) -> None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        urls = self._url_pattern.findall(text)
        if urls and 'url' not in params:
            params['url'] = urls[0]
        if len(urls) > 1:
            params['urls'] = urls
    
    def _extract_file_paths(self, text: str, params: Dict[str, Any]) -> None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        for pattern in self._file_patterns:
            matches = pattern.findall(text)
            if matches and 'path' not in params:
                params['path'] = matches[0]
                break
    
    def _add_url_based_matches(self, text: str, matches: List[IntentMatch]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL"""
        urls = self._url_pattern.findall(text)
        if not urls:
            return
        
        text_lower = text.lower()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        if any(word in text_lower for word in ['—Å–∫–∞—á–∞–π', '–ø–∞—Ä—Å–∏', '–∏–∑–≤–ª–µ–∫–∏', 'scrape', 'extract']):
            match = IntentMatch(
                tool_name='web_scraper',
                confidence=0.8,
                mode=IntentMode.AUTO,
                extracted_params={'url': urls[0]},
                matched_patterns=['url_scraping_intent'],
                original_text=text
            )
            matches.append(match)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ API
        elif any(word in text_lower for word in ['api', '–∑–∞–ø—Ä–æ—Å', 'request']):
            match = IntentMatch(
                tool_name='api_client',
                confidence=0.7,
                mode=IntentMode.AUTO,
                extracted_params={'url': urls[0], 'method': 'GET'},
                matched_patterns=['url_api_intent'],
                original_text=text
            )
            matches.append(match)
    
    def _add_file_based_matches(self, text: str, matches: List[IntentMatch]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –ø—É—Ç–µ–π"""
        file_path = None
        for pattern in self._file_patterns:
            match = pattern.search(text)
            if match:
                file_path = match.group(0)
                break
        
        if not file_path:
            return
        
        text_lower = text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º
        operation = 'read'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if any(word in text_lower for word in ['—Å–æ–∑–¥–∞–π', '–∑–∞–ø–∏—à–∏', 'create', 'write']):
            operation = 'write'
        elif any(word in text_lower for word in ['—Å–ø–∏—Å–æ–∫', 'list', 'ls', 'dir']):
            operation = 'list'
        
        match = IntentMatch(
            tool_name='file_operations',
            confidence=0.75,
            mode=IntentMode.AUTO,
            extracted_params={'path': file_path, 'operation': operation},
            matched_patterns=['file_path_intent'],
            original_text=text
        )
        matches.append(match)
    
    def get_best_match(self, text: str, forced_tool: Optional[str] = None, min_confidence: float = 0.5) -> Optional[IntentMatch]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            forced_tool (Optional[str]): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            min_confidence (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
        Returns:
            Optional[IntentMatch]: –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ None
        """
        matches = self.parse_intent(text, forced_tool)
        if not matches:
            return None
        
        best_match = matches[0]
        if best_match.confidence >= min_confidence:
            return best_match
        
        return None
    
    def suggest_tools(self, text: str, max_suggestions: int = 3) -> List[IntentMatch]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            max_suggestions (int): –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
        Returns:
            List[IntentMatch]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        """
        matches = self.parse_intent(text)
        suggestions = []
        
        for match in matches[:max_suggestions]:
            suggestion = IntentMatch(
                tool_name=match.tool_name,
                confidence=match.confidence,
                mode=IntentMode.SUGGESTED,
                extracted_params=match.extracted_params,
                matched_patterns=match.matched_patterns,
                original_text=match.original_text
            )
            suggestions.append(suggestion)
        
        return suggestions


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
_intent_parser = None

def get_intent_parser() -> IntentParser:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    
    Returns:
        IntentParser: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
    """
    global _intent_parser
    if _intent_parser is None:
        _intent_parser = IntentParser()
    return _intent_parser
