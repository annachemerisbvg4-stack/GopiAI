"""
üîß CrewAI Tools Integration with Dynamic Instructions
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ workflow CrewAI
"""

import logging
import functools
from typing import Any, Dict, List, Optional, Callable
from crewai import Agent, Task, Crew
from crewai.tools.base_tool import BaseTool

from .tools_instruction_manager import get_tools_instruction_manager

logger = logging.getLogger(__name__)

class CrewAIToolsInstructionIntegrator:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ CrewAI workflow.
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞"""
        self.logger = logging.getLogger(__name__)
        self.tools_manager = get_tools_instruction_manager()
        self.original_tool_methods = {}
        self.logger.info("‚úÖ CrewAI Tools Instruction Integrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def enhance_tool_with_instructions(self, tool: BaseTool) -> BaseTool:
        """
        –£–ª—É—á—à–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥—Ä—É–∑–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
        
        Args:
            tool (BaseTool): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç CrewAI
            
        Returns:
            BaseTool: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        tool_name = self._get_tool_name(tool)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ _run
        if hasattr(tool, '_run') and tool_name not in self.original_tool_methods:
            self.original_tool_methods[tool_name] = tool._run
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            def enhanced_run(*args, **kwargs):
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                detailed_instructions = self.tools_manager.get_tool_detailed_instructions(tool_name)
                
                if detailed_instructions:
                    self.logger.info(f"üìñ –ü–æ–¥–≥—Ä—É–∂–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {tool_name}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    if hasattr(tool, 'description'):
                        original_description = tool.description
                        tool.description = f"{original_description}\n\n{detailed_instructions}"
                    
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        result = self.original_tool_methods[tool_name](*args, **kwargs)
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                        if hasattr(tool, 'description'):
                            tool.description = original_description
                            
                        return result
                    except Exception as e:
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        if hasattr(tool, 'description'):
                            tool.description = original_description
                        raise e
                else:
                    # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    return self.original_tool_methods[tool_name](*args, **kwargs)
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ _run –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π
            tool._run = enhanced_run
            
        return tool
    
    def _get_tool_name(self, tool: BaseTool) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
        
        Args:
            tool (BaseTool): –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç CrewAI
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∫–ª–∞—Å—Å—É
        tool_class_name = tool.__class__.__name__.lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤ ToolsInstructionManager
        tool_mapping = {
            'gopiaifilestool': 'filesystem_tools',
            'gopiaifilestool': 'filesystem_tools', 
            'gopiailocalmcptool': 'local_mcp_tools',
            'gopiaibrowsertool': 'browser_tools',
            'gopiaiwebsearchtool': 'web_search',
            'gopiaipageanalyzertool': 'page_analyzer'
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for class_pattern, tool_name in tool_mapping.items():
            if class_pattern in tool_class_name:
                return tool_name
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if 'file' in tool_class_name or 'filesystem' in tool_class_name:
            return 'filesystem_tools'
        elif 'browser' in tool_class_name:
            return 'browser_tools'
        elif 'search' in tool_class_name or 'web' in tool_class_name:
            return 'web_search'
        elif 'mcp' in tool_class_name:
            return 'local_mcp_tools'
        elif 'analyzer' in tool_class_name or 'analysis' in tool_class_name:
            return 'page_analyzer'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
        return tool_class_name
    
    def enhance_agent_tools(self, agent: Agent) -> Agent:
        """
        –£–ª—É—á—à–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
        
        Args:
            agent (Agent): –ê–≥–µ–Ω—Ç CrewAI
            
        Returns:
            Agent: –ê–≥–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        """
        if hasattr(agent, 'tools') and agent.tools:
            enhanced_tools = []
            for tool in agent.tools:
                enhanced_tool = self.enhance_tool_with_instructions(tool)
                enhanced_tools.append(enhanced_tool)
            
            agent.tools = enhanced_tools
            self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–æ {len(enhanced_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.role}")
        
        return agent
    
    def enhance_crew_agents(self, crew: Crew) -> Crew:
        """
        –£–ª—É—á—à–∞–µ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ, –¥–æ–±–∞–≤–ª—è—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.
        
        Args:
            crew (Crew): –ö–æ–º–∞–Ω–¥–∞ CrewAI
            
        Returns:
            Crew: –ö–æ–º–∞–Ω–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        """
        if hasattr(crew, 'agents') and crew.agents:
            enhanced_agents = []
            for agent in crew.agents:
                enhanced_agent = self.enhance_agent_tools(agent)
                enhanced_agents.append(enhanced_agent)
            
            crew.agents = enhanced_agents
            self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å {len(enhanced_agents)} –∞–≥–µ–Ω—Ç–∞–º–∏")
        
        return crew


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
_tools_integrator = None

def get_tools_integrator() -> CrewAIToolsInstructionIntegrator:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    
    Returns:
        CrewAIToolsInstructionIntegrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
    """
    global _tools_integrator
    if _tools_integrator is None:
        _tools_integrator = CrewAIToolsInstructionIntegrator()
    return _tools_integrator


def enhance_crew_with_instructions(crew: Crew) -> Crew:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.
    
    Args:
        crew (Crew): –ö–æ–º–∞–Ω–¥–∞ CrewAI
        
    Returns:
        Crew: –ö–æ–º–∞–Ω–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    integrator = get_tools_integrator()
    return integrator.enhance_crew_agents(crew)


def enhance_agent_with_instructions(agent: Agent) -> Agent:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.
    
    Args:
        agent (Agent): –ê–≥–µ–Ω—Ç CrewAI
        
    Returns:
        Agent: –ê–≥–µ–Ω—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    integrator = get_tools_integrator()
    return integrator.enhance_agent_tools(agent)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
def with_dynamic_instructions(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –∫–æ–º–∞–Ω–¥–∞–º.
    
    Args:
        func (Callable): –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è Crew –∏–ª–∏ Agent
        
    Returns:
        Callable: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        
        if isinstance(result, Crew):
            return enhance_crew_with_instructions(result)
        elif isinstance(result, Agent):
            return enhance_agent_with_instructions(result)
        else:
            logger.warning(f"‚ö†Ô∏è –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @with_dynamic_instructions –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π {type(result)}")
            return result
    
    return wrapper


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    from tools.gopiai_integration.filesystem_tools import GopiAIFileSystemTool
    from tools.gopiai_integration.browser_tools import GopiAIBrowserTool
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    agent = Agent(
        role='Test Agent',
        goal='Test dynamic instructions',
        backstory='Testing agent for dynamic instructions',
        tools=[GopiAIFileSystemTool(), GopiAIBrowserTool()],
        verbose=True
    )
    
    # –£–ª—É—á—à–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    enhanced_agent = enhance_agent_with_instructions(agent)
    
    print("‚úÖ –ê–≥–µ–Ω—Ç —É–ª—É—á—à–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏!")
