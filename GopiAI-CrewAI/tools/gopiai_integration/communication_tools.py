"""
üì° GopiAI Communication Tool –¥–ª—è CrewAI
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import os
import json
import time
import asyncio
from typing import Type, Any, List, Dict, Optional
from datetime import datetime
from pydantic import BaseModel, Field
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É BaseTool –≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ crewai
from .base.base_tool import BaseTool

class CommunicationInput(BaseModel):
    """–°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    action: str = Field(description="–î–µ–π—Å—Ç–≤–∏–µ: send, receive, broadcast, notify, status, list_agents")
    recipient: str = Field(default="", description="–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è (agent_id, 'all', 'ui')")
    message: str = Field(description="–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å")
    message_type: str = Field(default="info", description="–¢–∏–ø: info, task, alert, result, error")
    priority: int = Field(default=3, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 1 (–Ω–∏–∑–∫–∏–π) –¥–æ 5 (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)")
    metadata: str = Field(default="{}", description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")

class GopiAICommunicationTool(BaseTool):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è CrewAI –∞–≥–µ–Ω—Ç–æ–≤
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UI
    - Broadcast —Å–æ–æ–±—â–µ–Ω–∏—è
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    - –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    name: str = "gopiai_communication"
    description: str = """–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ —Å UI GopiAI.
    
    –î–µ–π—Å—Ç–≤–∏—è:
    - send: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É (recipient=agent_id, message=—Ç–µ–∫—Å—Ç)
    - receive: –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (recipient=agent_id)
    - broadcast: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º (message=—Ç–µ–∫—Å—Ç)
    - notify: —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UI (message=—Ç–µ–∫—Å—Ç)
    - status: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ (recipient=agent_id)
    - list_agents: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    
    –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
    - info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ
    - task: –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - alert: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    - result: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã
    - error: –æ—à–∏–±–∫–∞
    
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
    - 1: –Ω–∏–∑–∫–∏–π
    - 2: –æ–±—ã—á–Ω—ã–π
    - 3: —Å—Ä–µ–¥–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    - 4: –≤—ã—Å–æ–∫–∏–π
    - 5: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - send: recipient="researcher_agent", message="–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CrewAI"
    - notify: message="–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", message_type="result"
    - broadcast: message="–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è", message_type="alert"
    """
    args_schema: Type[BaseModel] = CommunicationInput
    
    messages_path: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../communication"), description="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    message_queue_file: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../communication/message_queue.json"), description="–§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    agent_status_file: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../communication/agent_status.json"), description="–§–∞–π–ª —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    ui_notifications_file: str = Field(default_factory=lambda: os.path.join(os.path.dirname(__file__), "../../communication/ui_notifications.json"), description="–§–∞–π–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π UI")
        
    def __init__(self, **data):
        super().__init__(**data)
        # –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é!
        # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–∑—ã–≤–∞–π—Ç–µ self.init_files() –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

    def init_files(self):
        self._ensure_communication_files()
        
    def _ensure_communication_files(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        os.makedirs(self.messages_path, exist_ok=True)
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        if not os.path.exists(self.message_queue_file):
            with open(self.message_queue_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "messages": [],
                    "metadata": {"created": datetime.now().isoformat()}
                }, f)
        
        # –°—Ç–∞—Ç—É—Å—ã –∞–≥–µ–Ω—Ç–æ–≤
        if not os.path.exists(self.agent_status_file):
            with open(self.agent_status_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "agents": {},
                    "metadata": {"created": datetime.now().isoformat()}
                }, f)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI
        if not os.path.exists(self.ui_notifications_file):
            with open(self.ui_notifications_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "notifications": [],
                    "metadata": {"created": datetime.now().isoformat()}
                }, f)
        
    def _run(self, action: str, recipient: str = "", message: str = "", 
             message_type: str = "info", priority: int = 3, metadata: str = "{}") -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        """
        try:
            if action == "send":
                return self._send_message(recipient, message, message_type, priority, metadata)
            elif action == "receive":
                return self._receive_messages(recipient)
            elif action == "broadcast":
                return self._broadcast_message(message, message_type, priority, metadata)
            elif action == "notify":
                return self._notify_ui(message, message_type, priority, metadata)
            elif action == "status":
                return self._get_agent_status(recipient)
            elif action == "list_agents":
                return self._list_active_agents()
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {str(e)}"
    
    def _load_message_queue(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with open(self.message_queue_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {"messages": [], "metadata": {"created": datetime.now().isoformat()}}
    
    def _save_message_queue(self, queue_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        with open(self.message_queue_file, 'w', encoding='utf-8') as f:
            json.dump(queue_data, f, ensure_ascii=False, indent=2)
    
    def _load_agent_status(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            with open(self.agent_status_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {"agents": {}, "metadata": {"created": datetime.now().isoformat()}}
    
    def _save_agent_status(self, status_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        with open(self.agent_status_file, 'w', encoding='utf-8') as f:
            json.dump(status_data, f, ensure_ascii=False, indent=2)
    
    def _load_ui_notifications(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI"""
        try:
            with open(self.ui_notifications_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {"notifications": [], "metadata": {"created": datetime.now().isoformat()}}
    
    def _save_ui_notifications(self, notifications_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI"""
        with open(self.ui_notifications_file, 'w', encoding='utf-8') as f:
            json.dump(notifications_data, f, ensure_ascii=False, indent=2)
    
    def _send_message(self, recipient: str, message: str, message_type: str, 
                     priority: int, metadata: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        if not recipient or not message:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        try:
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            try:
                meta_dict = json.loads(metadata)
            except:
                meta_dict = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            queue_data = self._load_message_queue()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = {
                "id": len(queue_data["messages"]) + 1,
                "sender": "system",  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                "recipient": recipient,
                "message": message,
                "message_type": message_type,
                "priority": priority,
                "metadata": meta_dict,
                "timestamp": datetime.now().isoformat(),
                "status": "pending",
                "delivered": False
            }
            
            queue_data["messages"].append(new_message)
            self._save_message_queue(queue_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            self._update_agent_status(recipient, "message_waiting", {
                "last_message": datetime.now().isoformat(),
                "priority": priority
            })
            
            return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É '{recipient}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
    
    def _receive_messages(self, agent_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        if not agent_id:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞"
        
        try:
            queue_data = self._load_message_queue()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            agent_messages = []
            for message in queue_data["messages"]:
                if (message["recipient"] == agent_id or message["recipient"] == "all") and not message["delivered"]:
                    agent_messages.append(message)
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                    message["delivered"] = True
                    message["status"] = "delivered"
            
            if not agent_messages:
                return f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞ '{agent_id}'"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            self._save_message_queue(queue_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            messages_text = []
            for msg in agent_messages[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                priority_emoji = ["", "üîµ", "üü¢", "üü°", "üü†", "üî¥"][min(msg["priority"], 5)]
                type_emoji = {
                    "info": "‚ÑπÔ∏è",
                    "task": "üìã",
                    "alert": "‚ö†Ô∏è",
                    "result": "‚úÖ",
                    "error": "‚ùå"
                }.get(msg["message_type"], "üìÑ")
                
                messages_text.append(f"{priority_emoji}{type_emoji} [{msg['message_type'].upper()}] {msg['message']}")
            
            return f"üì¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è '{agent_id}' ({len(agent_messages)}):\\n\\n" + "\\n\\n".join(messages_text)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {str(e)}"
    
    def _broadcast_message(self, message: str, message_type: str, priority: int, metadata: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º"""
        if not message:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è broadcast"
        
        return self._send_message("all", message, message_type, priority, metadata)
    
    def _notify_ui(self, message: str, message_type: str, priority: int, metadata: str) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UI"""
        if not message:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        try:
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            try:
                meta_dict = json.loads(metadata)
            except:
                meta_dict = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications_data = self._load_ui_notifications()
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = {
                "id": len(notifications_data["notifications"]) + 1,
                "message": message,
                "message_type": message_type,
                "priority": priority,
                "metadata": meta_dict,
                "timestamp": datetime.now().isoformat(),
                "read": False
            }
            
            notifications_data["notifications"].append(notification)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if len(notifications_data["notifications"]) > 100:
                notifications_data["notifications"] = notifications_data["notifications"][-100:]
            
            self._save_ui_notifications(notifications_data)
            
            priority_text = ["", "–Ω–∏–∑–∫–∏–π", "–æ–±—ã—á–Ω—ã–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"][min(priority, 5)]
            return f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ UI (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text})"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
    
    def _get_agent_status(self, agent_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        if not agent_id:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞"
        
        try:
            status_data = self._load_agent_status()
            
            if agent_id not in status_data["agents"]:
                return f"‚ùì –ê–≥–µ–Ω—Ç '{agent_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            
            agent_info = status_data["agents"][agent_id]
            
            status_text = f"ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ '{agent_id}':\\n"
            status_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {agent_info.get('status', 'unknown')}\\n"
            status_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {agent_info.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\\n"
            status_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {agent_info.get('messages_pending', 0)}\\n"
            
            if agent_info.get('current_task'):
                status_text += f"üìã –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {agent_info['current_task']}\\n"
            
            return status_text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    def _list_active_agents(self) -> str:
        """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            status_data = self._load_agent_status()
            
            if not status_data["agents"]:
                return "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"
            
            agent_list = []
            for agent_id, agent_info in status_data["agents"].items():
                status_emoji = {
                    "active": "üü¢",
                    "busy": "üü°",
                    "idle": "üîµ",
                    "error": "üî¥",
                    "offline": "‚ö´"
                }.get(agent_info.get('status'), "‚ùì")
                
                agent_list.append(f"{status_emoji} {agent_id} - {agent_info.get('status', 'unknown')}")
            
            return f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã ({len(agent_list)}):\\n" + "\\n".join(agent_list)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}"
    
    def _update_agent_status(self, agent_id: str, status: str, extra_info: Optional[Dict] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            status_data = self._load_agent_status()
            
            if agent_id not in status_data["agents"]:
                status_data["agents"][agent_id] = {}
            
            status_data["agents"][agent_id].update({
                "status": status,
                "last_activity": datetime.now().isoformat()
            })
            
            if extra_info:
                status_data["agents"][agent_id].update(extra_info)
            
            self._save_agent_status(status_data)
            
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "GopiAICommunicationTool"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI Communication Tools...")
    
    # –¢–µ—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    comm = GopiAICommunicationTool()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ UI
    result = comm._run("notify", message="–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", message_type="info", priority=3)
    print(f"Notify test: {result}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    result = comm._run("send", "test_agent", "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "task", 4)
    print(f"Send test: {result}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    result = comm._run("receive", "test_agent")
    print(f"Receive test: {result}")
    
    # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
    result = comm._run("list_agents")
    print(f"List agents test: {result}")
    
    print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")