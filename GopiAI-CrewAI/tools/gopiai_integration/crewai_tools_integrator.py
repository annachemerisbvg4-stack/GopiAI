"""
üõ†Ô∏è CrewAI Tools Integrator
–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏–∑ CrewAI Toolkit
"""

import logging
import importlib
from typing import Dict, List, Optional, Any, Type
from pathlib import Path
import sys
import os

logger = logging.getLogger(__name__)

class CrewAIToolsIntegrator:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ CrewAI Toolkit
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    - –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    - Fallback –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.available_tools = {}
        self.loaded_tools = {}
        self.tool_categories = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ crewai_toolkit
        toolkit_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "crewai_toolkit")
        if toolkit_path not in sys.path:
            sys.path.insert(0, toolkit_path)
        
        self._discover_tools()
        self.logger.info(f"‚úÖ CrewAI Tools Integrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ {len(self.available_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    def _discover_tools(self):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        priority_tools = {
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            'code_interpreter': {
                'module': 'tools.code_interpreter_tool.code_interpreter_tool',
                'class': 'CodeInterpreterTool',
                'category': 'code_execution',
                'description': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ'
            },
            
            # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            'selenium_scraping': {
                'module': 'tools.selenium_scraping_tool.selenium_scraping_tool',
                'class': 'SeleniumScrapingTool',
                'category': 'web_scraping',
                'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Å Selenium'
            },
            
            # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            'serper_dev': {
                'module': 'tools.serper_dev_tool.serper_dev_tool',
                'class': 'SerperDevTool',
                'category': 'web_search',
                'description': '–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Serper API'
            },
            
            'brave_search': {
                'module': 'tools.brave_search_tool.brave_search_tool',
                'class': 'BraveSearchTool',
                'category': 'web_search',
                'description': '–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Brave Search API'
            },
            
            # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
            'file_read': {
                'module': 'tools.file_read_tool.file_read_tool',
                'class': 'FileReadTool',
                'category': 'file_operations',
                'description': '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤'
            },
            
            'file_writer': {
                'module': 'tools.file_writer_tool.file_writer_tool',
                'class': 'FileWriterTool',
                'category': 'file_operations',
                'description': '–ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤'
            },
            
            'directory_read': {
                'module': 'tools.directory_read_tool.directory_read_tool',
                'class': 'DirectoryReadTool',
                'category': 'file_operations',
                'description': '–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π'
            },
            
            # –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö
            'csv_search': {
                'module': 'tools.csv_search_tool.csv_search_tool',
                'class': 'CSVSearchTool',
                'category': 'file_search',
                'description': '–ü–æ–∏—Å–∫ –≤ CSV —Ñ–∞–π–ª–∞—Ö'
            },
            
            'json_search': {
                'module': 'tools.json_search_tool.json_search_tool',
                'class': 'JSONSearchTool',
                'category': 'file_search',
                'description': '–ü–æ–∏—Å–∫ –≤ JSON —Ñ–∞–π–ª–∞—Ö'
            },
            
            'pdf_search': {
                'module': 'tools.pdf_search_tool.pdf_search_tool',
                'class': 'PDFSearchTool',
                'category': 'file_search',
                'description': '–ü–æ–∏—Å–∫ –≤ PDF —Ñ–∞–π–ª–∞—Ö'
            },
            
            # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            'scrape_website': {
                'module': 'tools.scrape_website_tool.scrape_website_tool',
                'class': 'ScrapeWebsiteTool',
                'category': 'web_scraping',
                'description': '–ë–∞–∑–æ–≤—ã–π –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥'
            },
            
            'firecrawl_scrape': {
                'module': 'tools.firecrawl_scrape_website_tool.firecrawl_scrape_website_tool',
                'class': 'FirecrawlScrapeWebsiteTool',
                'category': 'web_scraping',
                'description': '–í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ Firecrawl API'
            },
            
            # GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            'github_search': {
                'module': 'tools.github_search_tool.github_search_tool',
                'class': 'GithubSearchTool',
                'category': 'code_search',
                'description': '–ü–æ–∏—Å–∫ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö'
            },
            
            # AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            'dalle': {
                'module': 'tools.dalle_tool.dalle_tool',
                'class': 'DallETool',
                'category': 'ai_generation',
                'description': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DALL-E'
            },
            
            'vision': {
                'module': 'tools.vision_tool.vision_tool',
                'class': 'VisionTool',
                'category': 'ai_analysis',
                'description': '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI'
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for tool_name, tool_info in priority_tools.items():
            try:
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                module = importlib.import_module(tool_info['module'])
                tool_class = getattr(module, tool_info['class'])
                
                self.available_tools[tool_name] = {
                    'class': tool_class,
                    'module_path': tool_info['module'],
                    'category': tool_info['category'],
                    'description': tool_info['description'],
                    'available': True
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category = tool_info['category']
                if category not in self.tool_categories:
                    self.tool_categories[category] = []
                self.tool_categories[category].append(tool_name)
                
                self.logger.debug(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                
            except Exception as e:
                self.available_tools[tool_name] = {
                    'class': None,
                    'module_path': tool_info['module'],
                    'category': tool_info['category'],
                    'description': tool_info['description'],
                    'available': False,
                    'error': str(e)
                }
                self.logger.debug(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def get_available_tools(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {name: info for name, info in self.available_tools.items() if info['available']}
    
    def get_tools_by_category(self, category: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.tool_categories.get(category, [])
    
    def get_tool_instance(self, tool_name: str, **kwargs) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        
        Args:
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        if tool_name not in self.available_tools:
            self.logger.error(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        tool_info = self.available_tools[tool_name]
        if not tool_info['available']:
            self.logger.error(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {tool_info.get('error', 'Unknown error')}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{tool_name}_{hash(str(sorted(kwargs.items())))}"
        if cache_key in self.loaded_tools:
            return self.loaded_tools[cache_key]
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_class = tool_info['class']
            tool_instance = tool_class(**kwargs)
            
            # –ö–µ—à–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            self.loaded_tools[cache_key] = tool_instance
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}")
            return tool_instance
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {tool_name}: {e}")
            return None
    
    def execute_tool(self, tool_name: str, params: Dict[str, Any], **tool_kwargs) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            **tool_kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        try:
            tool_instance = self.get_tool_instance(tool_name, **tool_kwargs)
            if not tool_instance:
                return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}"}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            if hasattr(tool_instance, '_run'):
                result = tool_instance._run(**params)
            elif hasattr(tool_instance, 'run'):
                result = tool_instance.run(**params)
            else:
                return {"error": f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"}
            
            return {"success": True, "result": result, "tool": tool_name}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"}
    
    def get_best_tool_for_task(self, task_type: str, task_description: str = "") -> Optional[str]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        
        Args:
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (web_search, file_operations, code_execution –∏ —Ç.–¥.)
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        available_tools = self.get_tools_by_category(task_type)
        if not available_tools:
            return None
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        task_lower = task_description.lower()
        
        if task_type == 'web_search':
            if 'google' in task_lower or 'search' in task_lower:
                return 'serper_dev' if 'serper_dev' in available_tools else available_tools[0]
            return available_tools[0]
        
        elif task_type == 'web_scraping':
            if 'javascript' in task_lower or 'dynamic' in task_lower:
                return 'selenium_scraping' if 'selenium_scraping' in available_tools else available_tools[0]
            return available_tools[0]
        
        elif task_type == 'code_execution':
            return 'code_interpreter' if 'code_interpreter' in available_tools else available_tools[0]
        
        elif task_type == 'file_operations':
            if 'read' in task_lower:
                return 'file_read' if 'file_read' in available_tools else available_tools[0]
            elif 'write' in task_lower:
                return 'file_writer' if 'file_writer' in available_tools else available_tools[0]
            return available_tools[0]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        return available_tools[0] if available_tools else None
    
    def get_tools_summary(self) -> Dict[str, List[Dict]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        summary = {}
        for category, tool_names in self.tool_categories.items():
            summary[category] = []
            for tool_name in tool_names:
                tool_info = self.available_tools[tool_name]
                if tool_info['available']:
                    summary[category].append({
                        'name': tool_name,
                        'description': tool_info['description'],
                        'available': True
                    })
        return summary


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
_crewai_tools_integrator = None

def get_crewai_tools_integrator() -> CrewAIToolsIntegrator:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ CrewAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    global _crewai_tools_integrator
    if _crewai_tools_integrator is None:
        _crewai_tools_integrator = CrewAIToolsIntegrator()
    return _crewai_tools_integrator
