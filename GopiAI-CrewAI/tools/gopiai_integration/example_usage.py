"""
üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π GopiAI
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥—Ä—É–∑–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ò–ò
"""

import logging
from system_prompts import get_system_prompts
from tools_instruction_manager import get_tools_instruction_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def demo_new_prompt_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    
    print("ü§ñ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ GOPI–êI ===\n")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts = get_system_prompts()
    tools_manager = get_tools_instruction_manager()
    
    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
    print("üìã –ë–ê–ó–û–í–´–ô –ü–†–û–ú–ü–¢ –ì–ò–ü–ê–¢–ò–ò:")
    print("-" * 50)
    base_prompt = prompts.get_base_assistant_prompt()
    print(base_prompt[:500] + "..." if len(base_prompt) > 500 else base_prompt)
    print()
    
    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üõ†Ô∏è –ö–†–ê–¢–ö–ò–ô –°–ü–ò–°–û–ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –î–õ–Ø –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ú–ü–¢–ê:")
    print("-" * 60)
    tools_summary = tools_manager.get_tools_summary()
    for tool_name, description in tools_summary.items():
        print(f"‚Ä¢ {tool_name}: {description}")
    print()
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    print("üéØ –ü–û–õ–ù–´–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ (–±–∞–∑–æ–≤—ã–π + –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤):")
    print("-" * 70)
    complete_prompt = prompts.get_complete_assistant_prompt(include_tools=True)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü, –≥–¥–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    lines = complete_prompt.split('\n')
    tools_section = '\n'.join(lines[-15:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫
    print("... (–±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç) ...")
    print(tools_section)
    print()
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥—Ä—É–∑–∫—É –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    print("üìñ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–†–£–ó–ö–ê –î–ï–¢–ê–õ–¨–ù–´–• –ò–ù–°–¢–†–£–ö–¶–ò–ô:")
    print("-" * 55)
    
    for tool_name in ["filesystem_tools", "browser_tools", "local_mcp_tools"]:
        print(f"\nüîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {tool_name}:")
        detailed = tools_manager.get_tool_detailed_instructions(tool_name)
        if detailed:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            lines = detailed.split('\n')
            preview = '\n'.join(lines[:10])
            print(preview)
            print(f"... (–≤—Å–µ–≥–æ {len(lines)} —Å—Ç—Ä–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)")
        else:
            print("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n‚úÖ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
    print("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    print("‚Ä¢ –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    print("‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö")
    print("‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")

def demo_ai_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ò–ò —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    print("\nüîÑ === –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–ë–û–ß–ï–ì–û –ü–†–û–¶–ï–°–°–ê –ò–ò ===\n")
    
    prompts = get_system_prompts()
    
    # –®–∞–≥ 1: –ò–ò –ø–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("1Ô∏è‚É£ –ò–ò –ø–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:")
    complete_prompt = prompts.get_complete_assistant_prompt()
    print(f"   –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(complete_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ª–∏—á–Ω–æ—Å—Ç—å –ì–∏–ø–∞—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞")
    print("   ‚úÖ –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
    print()
    
    # –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    print("2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '–ù–∞–π–¥–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ'")
    print("   ü§ñ –ò–ò: –í—ã–±–∏—Ä–∞—é filesystem_tools –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")
    print()
    
    # –®–∞–≥ 3: –ò–ò –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("3Ô∏è‚É£ –ò–ò –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    detailed = prompts.get_tool_detailed_instructions("filesystem_tools")
    if detailed:
        lines = detailed.split('\n')
        print(f"   üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        print("   ‚úÖ –ò–ò —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ filesystem_tools")
    print()
    
    # –®–∞–≥ 4: –ò–ò –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
    print("4Ô∏è‚É£ –ò–ò –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –ø–æ–ª–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:")
    print("   üîç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç find_files() —Å –º–∞—Å–∫–æ–π '*.py'")
    print("   ‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    print()
    
    print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞!")

if __name__ == "__main__":
    try:
        demo_new_prompt_system()
        demo_ai_workflow()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
