#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import logging
from pathlib import Path

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç OpenMP –±–∏–±–ª–∏–æ—Ç–µ–∫
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv(dotenv_path="../.env")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

def test_local_mcp_tools():
    """–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("=== –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        from tools.gopiai_integration.local_mcp_tools import get_local_mcp_tools
        
        local_tools = get_local_mcp_tools()
        logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools = local_tools.get_available_tools()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        
        for tool in tools:
            logger.info(f"  - {tool['name']}: {tool['description']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        test_results = {}
        
        # –¢–µ—Å—Ç 1: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info("\n--- –¢–µ—Å—Ç 1: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---")
        result = local_tools.call_tool("system_info", {})
        test_results["system_info"] = result
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç 2: –í—Ä–µ–º—è
        logger.info("\n--- –¢–µ—Å—Ç 2: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ---")
        result = local_tools.call_tool("time_helper", {"operation": "current_time"})
        test_results["time_helper"] = result
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        logger.info("\n--- –¢–µ—Å—Ç 3: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ ---")
        result = local_tools.call_tool("project_helper", {"action": "health_check"})
        test_results["project_helper"] = result
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
        logger.info("\n--- –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ ---")
        result = local_tools.call_tool("file_operations", {
            "operation": "list",
            "path": "."
        })
        test_results["file_operations"] = result
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = 0
        for tool_name, result in test_results.items():
            if result and not result.get("error"):
                success_count += 1
                logger.info(f"‚úÖ {tool_name}: –£–°–ü–ï–®–ù–û")
            else:
                logger.error(f"‚ùå {tool_name}: –û–®–ò–ë–ö–ê - {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        logger.info(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_results)}")
        
        return success_count == len(test_results)
        
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_smart_delegator_with_local_tools():
    """–¢–µ—Å—Ç SmartDelegator —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    try:
        logger.info("\n=== –¢–µ—Å—Ç SmartDelegator —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
        from rag_system import get_rag_system
        rag_system = get_rag_system()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartDelegator
        from tools.gopiai_integration.smart_delegator import SmartDelegator
        smart_delegator = SmartDelegator(rag_system=rag_system)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_requests = [
            "–ü–æ–∫–∞–∂–∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "–ö–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è?",
            "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞",
            "–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"
        ]
        
        for i, request in enumerate(test_requests, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {request} ---")
            
            result = smart_delegator.process_request(request, {"session_id": "test_session"})
            
            if result and result.get("response"):
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {result['response'][:100]}...")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SmartDelegator: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
    
    # –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools_ok = test_local_mcp_tools()
    
    # –¢–µ—Å—Ç 2: SmartDelegator —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    delegator_ok = test_smart_delegator_with_local_tools()
    
    if tools_ok and delegator_ok:
        logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        logger.error("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        sys.exit(1)
