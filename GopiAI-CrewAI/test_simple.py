#!/usr/bin/env python3
"""
ü§ñ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CrewAI —Å Groq
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ CrewAI –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ LLM
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.append(str(current_dir.parent))  # GOPI_AI_MODULES
sys.path.append(str(current_dir))  # GopiAI-CrewAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
env_path = current_dir.parent / '.env'
print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_path}")
if env_path.exists():
    load_dotenv(env_path, override=True)
    print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
else:
    print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_with_standard_groq():
    """–¢–µ—Å—Ç —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º ChatGroq"""
    print("üß™ –¢–µ—Å—Ç —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º ChatGroq...")
    
    try:
        from langchain_groq import ChatGroq
        from crewai import Agent, Task, Crew
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Groq LLM
        llm = ChatGroq(
            api_key=os.getenv("GROQ_API_KEY"),
            model="llama-3.3-70b-versatile",  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            temperature=0.7,
            max_tokens=1000
        )
        
        print("‚úÖ ChatGroq LLM —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = Agent(
            role="–ü–æ–º–æ—â–Ω–∏–∫",
            goal="–î–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç",
            backstory="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = Task(
            description="–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç –æ—Ç CrewAI!' –∏ –æ–±—ä—è—Å–Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —á—Ç–æ —Ç–∞–∫–æ–µ CrewAI",
            expected_output="–ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
            agent=agent
        )
        
        # –°–æ–∑–¥–∞–µ–º crew
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("üöÄ –ó–∞–ø—É—Å–∫ crew...")
        result = crew.kickoff()
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_simple_groq():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Groq API"""
    print("üîß –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Groq API...")
    
    try:
        from langchain_groq import ChatGroq
        
        llm = ChatGroq(
            api_key=os.getenv("GROQ_API_KEY"),
            model="llama-3.3-70b-versatile"
        )
        
        response = llm.invoke("–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ: –∫–∞–∫ –¥–µ–ª–∞?")
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π Groq –æ—Ç–≤–µ—Ç: {response.content}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ === –ü–†–û–°–¢–û–ô CREWAI-GROQ –¢–ï–°–¢ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    groq_key = os.getenv("GROQ_API_KEY")
    if not groq_key or not groq_key.startswith("gsk_"):
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω: {groq_key[:12]}...")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    if not test_simple_groq():
        print("‚ùå –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        return
    
    # –¢–µ—Å—Ç —Å CrewAI
    if not test_with_standard_groq():
        print("‚ùå CrewAI —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        return
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!")

if __name__ == "__main__":
    main()