#!/usr/bin/env python3
"""
üéâ –†–ê–ë–û–ß–ò–ô —Ç–µ—Å—Ç GithubSearchTool —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π crewai-tools
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

def test_working_github_tool():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π GithubSearchTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("üéâ –†–ê–ë–û–ß–ò–ô —Ç–µ—Å—Ç GithubSearchTool...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token or github_token == 'your_github_token_here':
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        print("üìù –î–æ–±–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ .env: GITHUB_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω")
        return False
    
    print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {github_token[:8]}...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        from crewai_tools import GithubSearchTool
        print("‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GithubSearchTool –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å GitHub —Ç–æ–∫–µ–Ω–æ–º...")
        github_tool = GithubSearchTool(gh_token=github_token)
        print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {github_tool.name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {github_tool.description}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        print("\nüîç –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
        test_params_1 = {
            'search_query': 'machine learning',
            'github_repo': 'microsoft/vscode',
            'content_types': ['repo']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params_1}")
        result_1 = github_tool._run(**test_params_1)
        
        print("‚úÖ –¢–µ—Å—Ç 1 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(str(result_1)[:300])
        print("-" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 2: –ü–æ–∏—Å–∫ –∫–æ–¥–∞
        print("\nüîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –∫–æ–¥–∞...")
        test_params_2 = {
            'search_query': 'async function',
            'github_repo': 'microsoft/vscode',
            'content_types': ['code']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params_2}")
        result_2 = github_tool._run(**test_params_2)
        
        print("‚úÖ –¢–µ—Å—Ç 2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(str(result_2)[:300])
        print("-" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 3: –ü–æ–∏—Å–∫ issues
        print("\nüîç –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ issues...")
        test_params_3 = {
            'search_query': 'bug',
            'github_repo': 'microsoft/vscode',
            'content_types': ['issue']
        }
        
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params_3}")
        result_3 = github_tool._run(**test_params_3)
        
        print("‚úÖ –¢–µ—Å—Ç 3 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(str(result_3)[:300])
        print("-" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        print(f"üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

def test_integration_with_smart_delegator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–∞—à–∏–º SmartDelegator"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò —Å SmartDelegator...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π wrapper –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        from crewai_tools import GithubSearchTool
        
        github_token = os.getenv('GITHUB_TOKEN')
        github_tool = GithubSearchTool(gh_token=github_token)
        
        print("‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ SmartDelegator
        def simulate_smart_delegator_call(tool_name, params):
            """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ SmartDelegator"""
            if tool_name == 'github_search':
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                adapted_params = {
                    'search_query': params.get('query', ''),
                    'github_repo': params.get('repository', 'microsoft/vscode'),
                    'content_types': params.get('content_types', ['repo', 'code'])
                }
                return github_tool._run(**adapted_params)
            return None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        test_call = simulate_smart_delegator_call('github_search', {
            'query': 'python AI',
            'repository': 'microsoft/vscode',
            'content_types': ['code']
        })
        
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è SmartDelegator —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {str(test_call)[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –†–ê–ë–û–ß–ï–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    success1 = test_working_github_tool()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    success2 = test_integration_with_smart_delegator()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –†–ê–ë–û–ß–ï–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    print(f"   –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üî• GithubSearchTool –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π crewai-tools –ø–∞–∫–µ—Ç")
        print("   2. –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å GitHub —Ç–æ–∫–µ–Ω –∫–∞–∫ gh_token –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        print("   3. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ SmartDelegator –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
