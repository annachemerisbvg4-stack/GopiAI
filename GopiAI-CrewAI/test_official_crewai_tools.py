#!/usr/bin/env python3
"""
üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö crewai-tools –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

class OfficialCrewAIToolsTester:
    """–¢–µ—Å—Ç–µ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö crewai-tools –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = {}
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        self.priority_tools = [
            # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API –∫–ª—é—á–µ–π
            {
                'name': 'FileReadTool',
                'import_path': 'crewai_tools',
                'category': 'file_operations',
                'api_keys': [],
                'test_params': {'file_path': str(__file__)}
            },
            {
                'name': 'DirectoryReadTool', 
                'import_path': 'crewai_tools',
                'category': 'file_operations',
                'api_keys': [],
                'test_params': {'directory_path': str(project_root)}
            },
            
            # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ - –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            {
                'name': 'ScrapeWebsiteTool',
                'import_path': 'crewai_tools',
                'category': 'web_scraping',
                'api_keys': [],
                'test_params': {'website_url': 'https://example.com'}
            },
            
            # –ü–æ–∏—Å–∫ - —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏
            {
                'name': 'SerperDevTool',
                'import_path': 'crewai_tools',
                'category': 'web_search',
                'api_keys': ['SERPER_API_KEY'],
                'test_params': {'query': 'artificial intelligence'}
            },
            
            # CSV/JSON –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            {
                'name': 'CSVSearchTool',
                'import_path': 'crewai_tools',
                'category': 'file_search',
                'api_keys': [],
                'test_params': {}  # –¢—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª
            },
            {
                'name': 'JSONSearchTool',
                'import_path': 'crewai_tools', 
                'category': 'file_search',
                'api_keys': [],
                'test_params': {}  # –¢—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª
            },
            
            # Selenium
            {
                'name': 'SeleniumScrapingTool',
                'import_path': 'crewai_tools',
                'category': 'web_scraping',
                'api_keys': [],
                'test_params': {'website_url': 'https://example.com'}
            },
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            {
                'name': 'WebsiteSearchTool',
                'import_path': 'crewai_tools',
                'category': 'web_search',
                'api_keys': [],
                'test_params': {'website': 'https://example.com'}
            },
            {
                'name': 'YoutubeChannelSearchTool',
                'import_path': 'crewai_tools',
                'category': 'media_search',
                'api_keys': [],
                'test_params': {'youtube_channel_handle': '@python'}
            },
            {
                'name': 'YoutubeVideoSearchTool',
                'import_path': 'crewai_tools',
                'category': 'media_search', 
                'api_keys': [],
                'test_params': {'youtube_video_url': 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'}
            }
        ]
    
    def check_api_keys(self, tool_info: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
        missing_keys = []
        available_keys = []
        
        for key in tool_info['api_keys']:
            value = os.getenv(key)
            if value and value != f'your_{key.lower()}_here' and len(value) > 5:
                available_keys.append(key)
            else:
                missing_keys.append(key)
        
        return {
            'has_all_keys': len(missing_keys) == 0,
            'available_keys': available_keys,
            'missing_keys': missing_keys
        }
    
    def test_tool_import_and_creation(self, tool_info: Dict) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            import crewai_tools
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞
            if not hasattr(crewai_tools, tool_info['name']):
                return {
                    'success': False,
                    'error': f"Tool {tool_info['name']} not found in crewai_tools",
                    'error_type': 'tool_not_found'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å
            tool_class = getattr(crewai_tools, tool_info['name'])
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
            tool_instance = tool_class()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            name = getattr(tool_instance, 'name', tool_info['name'])
            description = getattr(tool_instance, 'description', 'No description available')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            has_run = hasattr(tool_instance, '_run')
            has_run_method = hasattr(tool_instance, 'run')
            
            return {
                'success': True,
                'tool_class': tool_class,
                'tool_instance': tool_instance,
                'name': name,
                'description': description[:150] + '...' if len(description) > 150 else description,
                'has_run_method': has_run or has_run_method,
                'methods': [method for method in dir(tool_instance) if not method.startswith('_')]
            }
            
        except ImportError as e:
            return {
                'success': False,
                'error': f'ImportError: {e}',
                'error_type': 'import_error'
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'Creation error: {e}',
                'error_type': 'creation_error'
            }
    
    def test_single_tool(self, tool_info: Dict) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {tool_info['name']}...")
        
        result = {
            'name': tool_info['name'],
            'category': tool_info['category'],
            'import_path': tool_info['import_path']
        }
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        api_check = self.check_api_keys(tool_info)
        result['api_keys'] = api_check
        
        if tool_info['api_keys'] and not api_check['has_all_keys']:
            print(f"   üîë –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {api_check['missing_keys']}")
            result['status'] = 'missing_api_keys'
            result['ready_for_integration'] = False
            return result
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è
        import_result = self.test_tool_import_and_creation(tool_info)
        result.update(import_result)
        
        if not import_result['success']:
            print(f"   ‚ùå {import_result['error']}")
            result['status'] = 'failed'
            result['ready_for_integration'] = False
            return result
        
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã")
        print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {import_result['name']}")
        print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {import_result['description']}")
        print(f"   üîß –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {'–î–∞' if import_result['has_run_method'] else '–ù–µ—Ç'}")
        
        result['status'] = 'ready'
        result['ready_for_integration'] = True
        
        return result
    
    def test_all_priority_tools(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö crewai-tools –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        print("=" * 70)
        
        for tool_info in self.priority_tools:
            result = self.test_single_tool(tool_info)
            self.results[tool_info['name']] = result
        
        self.print_summary()
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 70)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–§–ò–¶–ò–ê–õ–¨–ù–´–• CREWAI-TOOLS:")
        print("=" * 70)
        
        categories = {}
        status_counts = {
            'ready': 0,
            'missing_api_keys': 0,
            'failed': 0
        }
        
        for tool_name, result in self.results.items():
            category = result['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
            
            status = result['status']
            if status in status_counts:
                status_counts[status] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status_counts['ready']}")
        print(f"   üîë –ù—É–∂–Ω—ã API –∫–ª—é—á–∏: {status_counts['missing_api_keys']}")
        print(f"   ‚ùå –û—à–∏–±–∫–∏: {status_counts['failed']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìÇ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, tools in categories.items():
            print(f"\n   üìÅ {category.upper()}:")
            for tool in tools:
                status_emoji = {
                    'ready': '‚úÖ',
                    'missing_api_keys': 'üîë',
                    'failed': '‚ùå'
                }.get(tool['status'], '‚ùì')
                
                print(f"      {status_emoji} {tool['name']}")
                if tool['status'] == 'missing_api_keys':
                    missing = tool['api_keys']['missing_keys']
                    print(f"         üîë –ù—É–∂–Ω—ã –∫–ª—é—á–∏: {', '.join(missing)}")
                elif tool['status'] == 'failed':
                    print(f"         ‚ùå –û—à–∏–±–∫–∞: {tool.get('error', 'Unknown error')}")
        
        # –ì–æ—Ç–æ–≤—ã–µ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        ready_tools = [t for t in self.results.values() if t['status'] == 'ready']
        if ready_tools:
            print(f"\nüöÄ –ì–û–¢–û–í–´ –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ({len(ready_tools)}):")
            for tool in ready_tools:
                print(f"   ‚Ä¢ {tool['name']} ({tool['category']})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        if ready_tools:
            print(f"   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å {len(ready_tools)} –≥–æ—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ SmartDelegator")
            print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ crewai-tools –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π")
        
        missing_keys_tools = [t for t in self.results.values() if t['status'] == 'missing_api_keys']
        if missing_keys_tools:
            print(f"   3. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API –∫–ª—é—á–∏ –¥–ª—è {len(missing_keys_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        print("   4. –û–±–Ω–æ–≤–∏—Ç—å CrewAI Tools Integrator –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    tester = OfficialCrewAIToolsTester()
    tester.test_all_priority_tools()
