#!/usr/bin/env python3
"""
üöÄ GopiAI-CrewAI Advanced Integration
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CrewAI —Å GopiAI —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤—Å–µ–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import os
import sys
import yaml
import uuid
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional, Union

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.append(str(current_dir.parent))  # GOPI_AI_MODULES
sys.path.append(str(current_dir))  # GopiAI-CrewAI
sys.path.append(str(current_dir / 'tools'))  # tools directory

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
env_path = current_dir / '.env'  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å - .env —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
load_dotenv(env_path, override=True)

# –ò–º–ø–æ—Ä—Ç CrewAI
from crewai import Agent, Task, Crew, LLM
from tools.gopiai_integration.ai_router_llm import AIRouterLLM
from crewai.tasks.task_output import TaskOutput

# –ò–º–ø–æ—Ä—Ç RAG —Å–∏—Å—Ç–µ–º—ã
from rag_system import RAGSystem, get_rag_system

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
try:
    from tools.gopiai_integration.base.base_tool import GopiAIBaseTool
    from tools.gopiai_integration.browser_tools import GopiAIBrowserTool
    from tools.gopiai_integration.filesystem_tools import GopiAIFileSystemTool
    from tools.gopiai_integration.ai_router_tools import GopiAIRouterTool
    from tools.gopiai_integration.memory_tools import GopiAIMemoryTool
    from tools.gopiai_integration.communication_tools import GopiAICommunicationTool
    from tools.gopiai_integration.huggingface_tools import GopiAIHuggingFaceTool
    
    # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    from tools.gopiai_integration.crewai_tools_integration import (
        enhance_crew_with_instructions,
        enhance_agent_with_instructions,
        with_dynamic_instructions,
        get_tools_integrator
    )
    from tools.gopiai_integration.tools_instruction_manager import get_tools_instruction_manager
    
    print("üîç === –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    sys.exit(1)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–µ–π API"""
    print("üîç === –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if env_path.exists():
        print(f"‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {env_path}")
    else:
        print(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ API
    api_keys = {
        'GEMINI_API_KEY': {'prefix': 'AIza', 'name': 'Google Gemini'},
    }
    
    available_providers = []
    
    for key_name, config in api_keys.items():
        key_value = os.getenv(key_name)
        if key_value and key_value.strip() and key_value != "your_key_here":
            prefix_ok = True
            if config['prefix']:
                prefix_ok = key_value.startswith(config['prefix'])
            
            status = "‚úÖ" if prefix_ok else "‚ö†Ô∏è"
            print(f"   {config['name']}: {status} {'(–∫–ª—é—á –Ω–∞–π–¥–µ–Ω)' if prefix_ok else '(–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)'}")
            
            if prefix_ok:
                available_providers.append(config['name'])
        else:
            print(f"   {config['name']}: ‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if not available_providers:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")
        return False
    
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(available_providers)}")
    return True

def test_all_tools():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ===")
    
    tools_results = {}
    
    # –¢–µ—Å—Ç Communication Tool
    try:
        print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Communication Tool...")
        comm_tool = GopiAICommunicationTool()
        result = comm_tool._run("notify", "", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", "info", 3, "{}")
        tools_results['communication'] = True
        print(f"‚úÖ Communication: {result}")
    except Exception as e:
        tools_results['communication'] = False
        print(f"‚ùå Communication –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç Memory Tool
    try:
        print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Memory Tool...")
        memory_tool = GopiAIMemoryTool()
        result = memory_tool._run("store", "system_test", "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏", "general", 5)
        tools_results['memory'] = True
        print(f"‚úÖ Memory: {result}")
    except Exception as e:
        tools_results['memory'] = False
        print(f"‚ùå Memory –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç FileSystem Tool
    try:
        print("üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileSystem Tool...")
        fs_tool = GopiAIFileSystemTool()
        result = fs_tool._run("list", ".")
        tools_results['filesystem'] = True
        if isinstance(result, list):
            print(f"‚úÖ FileSystem: –Ω–∞–π–¥–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"‚úÖ FileSystem: {result}")
    except Exception as e:
        tools_results['filesystem'] = False
        print(f"‚ùå FileSystem –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç Browser Tool (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
    try:
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Browser Tool...")
        browser_tool = GopiAIBrowserTool()
        result = browser_tool._run("search", "CrewAI", "", 3)
        tools_results['browser'] = True
        print(f"‚úÖ Browser: {result[:50]}...")
    except Exception as e:
        tools_results['browser'] = False
        print(f"‚ö†Ô∏è Browser –æ—à–∏–±–∫–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞): {e}")
    
    # –¢–µ—Å—Ç AI Router Tool
    try:
        print("üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Router Tool...")
        router_tool = GopiAIRouterTool()
        result = router_tool._run(message="–ü—Ä–∏–≤–µ—Ç!", task_type="chat")
        tools_results['router'] = True
        print(f"‚úÖ Router: {result[:50]}...")
    except Exception as e:
        tools_results['router'] = False
        print(f"‚ùå Router –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç HuggingFace Tool  
    try:
        print("ü§ó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HuggingFace Tool...")
        hf_tool = GopiAIHuggingFaceTool()
        result = hf_tool._run("–ü—Ä–∏–≤–µ—Ç!", "microsoft/DialoGPT-large", "conversational", 100, 0.7)
        tools_results['huggingface'] = True
        print(f"‚úÖ HuggingFace: {result[:50]}...")
    except Exception as e:
        tools_results['huggingface'] = False
        print(f"‚ùå HuggingFace –æ—à–∏–±–∫–∞: {e}")
    
    working_tools = sum(tools_results.values())
    total_tools = len(tools_results)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {working_tools}/{total_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    return working_tools > 0

from tools.gopiai_integration.agent_templates import AgentTemplateSystem
from crewai import Agent
from llm_rotation_config import LLM_MODELS_CONFIG, select_llm_model, rag_answer

def create_demo_agents(llm):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    print("üë• === –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –ò–ù–°–¢–†–£–ö–¶–ò–Ø–ú–ò ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    tools_manager = get_tools_instruction_manager()
    integrator = get_tools_integrator()
    
    print("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏:")
    tools_summary = tools_manager.get_tools_summary()
    for tool_name, description in tools_summary.items():
        print(f"  ‚Ä¢ {tool_name}: {description[:60]}...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    template_system = AgentTemplateSystem(verbose=True)
    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {', '.join(template_system.list_available_templates())}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
    coordinator = template_system.create_agent_from_template(
        "coordinator_agent", 
        llm,
        team_size=3,
        verbose=True
    )
    
    researcher = template_system.create_agent_from_template(
        "researcher_agent",
        llm,
        topic="GopiAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CrewAI",
        verbose=True
    )
    
    writer = template_system.create_agent_from_template(
        "writer_agent",
        llm,
        topic="–ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        format="markdown",
        creativity_level="high",
        verbose=True
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    all_tools = [
        GopiAICommunicationTool(),
        GopiAIMemoryTool(),
        GopiAIFileSystemTool(),
        GopiAIBrowserTool(),
        GopiAIRouterTool()
    ]
    
    # –Ø–í–ù–û –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫ LLM, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ tool-calls
    llm_bound = llm
    try:
        if hasattr(llm, "bind_tools") and callable(getattr(llm, "bind_tools")):
            llm_bound = llm.bind_tools(all_tools)
            print(f"üîó LLM –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {len(all_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ .bind_tools() (main.py)")
        else:
            print("‚ÑπÔ∏è .bind_tools() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É LLM ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å .bind_tools() –¥–ª—è LLM: {e}")
    
    # –ê–≥–µ–Ω—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç (–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
    coder = Agent(
        role='Code Developer with Dynamic Instructions',
        goal='–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
        backstory="""–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ GopiAI —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
        –ö–æ–≥–¥–∞ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–∏—Å–∞—Ç—å —á–∏—Å—Ç—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.""",
        tools=all_tools,
        llm=llm_bound,
        verbose=True,
        allow_delegation=True,
        max_iter=5
    )
    
    # –£–ª—É—á—à–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –∞–≥–µ–Ω—Ç–∞–º...")
    coordinator = enhance_agent_with_instructions(coordinator)
    researcher = enhance_agent_with_instructions(researcher)
    writer = enhance_agent_with_instructions(writer)
    coder = enhance_agent_with_instructions(coder)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len([coordinator, researcher, writer, coder])} –∞–≥–µ–Ω—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")
    return coordinator, researcher, writer, coder

def create_demo_tasks(coordinator, researcher, writer, coder):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print("üìã === –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß ===")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if not all([coordinator, researcher, writer, coder]):
        print("‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –∞–≥–µ–Ω—Ç–æ–≤!")
        return None, None, None, None
    # –ó–∞–¥–∞—á–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    init_task = Task(
        description="""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç GopiAI-CrewAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
        
        –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –û—Ç–ø—Ä–∞–≤—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        2. –°–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–º—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: "project")
        3. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        4. –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        
        –ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: "GopiAI-CrewAI Integration Demo"
        - –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        - –¶–µ–ª—å: –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        - –£—á–∞—Å—Ç–Ω–∏–∫–∏: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∞–Ω–∞–ª–∏—Ç–∏–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å""",
        expected_output="–û—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
        agent=coordinator
    )
    
    # –ó–∞–¥–∞—á–∞ 2: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    research_task = Task(
        description="""–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GopiAI-CrewAI.
        
        –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ò–∑—É—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π filesystem tool)
        2. –ù–∞–π–¥–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        3. –°–æ—Ö—Ä–∞–Ω–∏ —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: "research")
        4. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã
        5. –£–≤–µ–¥–æ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        
        –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
        - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –æ CrewAI
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        - –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è""",
        expected_output="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã",
        agent=researcher
    )
    
    # –ó–∞–¥–∞—á–∞ 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    writing_task = Task(
        description="""–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GopiAI –∏ CrewAI.
        
        –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ò–∑—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∏–∑ –∑–∞–¥–∞—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
        2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        3. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        4. –°–æ—Ö—Ä–∞–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        5. –£–≤–µ–¥–æ–º–∏ –∫–æ–º–∞–Ω–¥—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
        - –û–±–∑–æ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        - –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        - –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏""",
        expected_output="–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        agent=writer,
        context=[research_task]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
    )
    
    # –ó–∞–¥–∞—á–∞ 4: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
    coding_task = Task(
        description="""–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GopiAI-CrewAI.
        
        –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ò–∑—É—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        2. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
        3. –°–æ–∑–¥–∞–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        4. –°–æ—Ö—Ä–∞–Ω–∏ –∫–æ–¥ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        5. –£–≤–µ–¥–æ–º–∏ –∫–æ–º–∞–Ω–¥—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É:
        - –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ GopiAIBaseTool
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø–∏—Å–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
        - –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫""",
        expected_output="–ö–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π",
        agent=coder
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len([init_task, research_task, writing_task, coding_task])} –∑–∞–¥–∞—á")
    return init_task, research_task, writing_task, coding_task

def run_simple_demo():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–¥–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º"""
    print("üöÄ === –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º LLM —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π AI Router
        ai_router_llm = AIRouterLLM()
        llm = ai_router_llm.get_llm_instance()
        provider_name = "GopiAI Google Router"
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {provider_name}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π
        demo_agent = Agent(
            role='Demo Assistant',
            goal='–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É GopiAI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
            backstory='–¢—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã.',
            tools=[GopiAICommunicationTool(), GopiAIMemoryTool()],
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
        demo_task = Task(
            description="""–í—ã–ø–æ–ª–Ω–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π GopiAI:
            
            1. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            2. –°–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç—å
            3. –û—Ç–ø—Ä–∞–≤—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
            - –¢–µ–º–∞: "GopiAI Demo"
            - –°—Ç–∞—Ç—É—Å: "–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            - –í—Ä–µ–º—è: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è""",
            expected_output="–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
            agent=demo_agent
        )
        
        # –°–æ–∑–¥–∞–µ–º crew
        demo_crew = Crew(**{
            "agents": [demo_agent],
            "tasks": [demo_task],
            "verbose": True
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        print("‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        result = demo_crew.kickoff()
        
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_advanced_demo():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("üöÄ === –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º LLM —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π AI Router
        ai_router_llm = AIRouterLLM()
        llm = ai_router_llm.get_llm_instance()
        provider_name = "GopiAI Google Router"
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {provider_name}")
        coordinator, researcher, writer, coder = create_demo_agents(llm)
        agents = [coordinator, researcher, writer, coder]
        agents = [a for a in agents if a is not None]
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        init_task, research_task, writing_task, coding_task = create_demo_tasks(
            coordinator, researcher, writer, coder
        )
        tasks = [init_task, research_task, writing_task, coding_task]
        tasks = [t for t in tasks if t is not None]
        # –°–æ–∑–¥–∞–µ–º crew —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        advanced_crew = Crew(**{
            "agents": agents,
            "tasks": tasks,
            "verbose": True
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –∫–æ–º–∞–Ω–¥–µ...")
        advanced_crew = enhance_crew_with_instructions(advanced_crew)
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        print("‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        try:
            result = advanced_crew.kickoff()
        except Exception as e:
            print(f"[ERROR] Crew.kickoff() exception: {e}")
            import traceback
            traceback.print_exc()
            raise
        print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def chat_interface():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG"""
    print("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GopiAI Chat!")
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
    try:
        ai_router_llm = AIRouterLLM()
        llm = ai_router_llm.get_llm_instance()
        print("‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input = input("\n–í—ã: ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not user_input:
                continue
                
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id = f"user_{uuid.uuid4().hex}"
            index_chat_message(user_input, message_id, {
                'type': 'user_message',
                'timestamp': datetime.now().isoformat()
            })
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
            print("\nü§ñ –î—É–º–∞—é...")
            response = crewai_rag_query(user_input, llm)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            print(f"\nü§ñ {response}")
            
        except KeyboardInterrupt:
            print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ GopiAI-CrewAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
    try:
        rag = get_rag_system()
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å RAG –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if not test_all_tools():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        return
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    print("\nüîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
    print("1. –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("3. –ß–∞—Ç —Å RAG (–Ω–æ–≤–æ–µ!)")
    
    # –í–º–µ—Å—Ç–æ input ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–µ–∂–∏–º 3 (—á–∞—Ç —Å RAG)
    mode = "3"
    print("\n–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: 3 (–ß–∞—Ç —Å RAG)")
    
    if mode == "1":
        run_simple_demo()
    elif mode == "2":
        run_advanced_demo()
    elif mode == "3":
        chat_interface()
    # elif mode == "4":
    #     run_tools_tests()
    # elif mode == "5":
    #     show_templates()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º!")

# –ü—Ä–∏–º–µ—Ä: —É—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π (rpm/tpm)
current_llm_usage = {}

def index_chat_message(message: str, message_id: str, metadata: Optional[Dict] = None) -> bool:
    """
    –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        message_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, timestamp, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ —Ç.–¥.)
        
    Returns:
        True, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        rag = get_rag_system()
        if not metadata:
            metadata = {}
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'timestamp' not in metadata:
            metadata['timestamp'] = datetime.now().isoformat()
            
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = rag.index_document(message, message_id, metadata)
        if success:
            print(f"[RAG] –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print(f"[RAG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
            
        return success
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def get_rag_context(query: str, max_results: int = 3, min_score: float = 0.3) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        min_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0-1)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        rag = get_rag_system()
        results = rag.search(query, limit=max_results)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        filtered_results = [
            {
                'text': result['text'],
                'score': result['score'],
                'metadata': result.get('metadata', {})
            }
            for result in results
            if result['score'] >= min_score
        ]
        
        return filtered_results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return []

def crewai_rag_query(query: str, llm, task_type: str = "dialog", max_context_length: int = 4000) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM.
    
    Args:
        query: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        llm: –û–±—ä–µ–∫—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (dialog, code, summarize –∏ —Ç.–¥.)
        max_context_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_results = get_rag_context(query)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    context_parts = []
    current_length = 0
    
    for result in context_results:
        context_str = f"–ò—Å—Ç–æ—Ä–∏—è: {result['text']}\n"
        if 'metadata' in result and result['metadata']:
            metadata_str = ", ".join(f"{k}={v}" for k, v in result['metadata'].items())
            context_str += f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_str}\n"
            
        context_str += f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['score']:.2f}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if current_length + len(context_str) > max_context_length:
            break
            
        context_parts.append(context_str)
        current_length += len(context_str)
    
    context = "\n---\n".join(context_parts) if context_parts else "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    model_id = select_llm_model(task_type, current_llm_usage)
    if not model_id:
        return "–í—Å–µ –ª–∏–º–∏—Ç—ã LLM –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    prompt = f"""–¢—ã - GopiAI, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–µ–∂–ª–∏–≤–æ –∏–∑–≤–∏–Ω–∏—Å—å –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π.
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
    {context}
    
    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}
    
    –ü–æ–ª–µ–∑–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç:"""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    def llm_call_func(prompt_text, model=None):
        return llm.call(prompt_text, model=model) if model else llm.call(prompt_text)
    
    try:
        answer = llm_call_func(prompt, model=model_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        current_llm_usage.setdefault(model_id, {"rpm": 0, "tpm": 0})
        current_llm_usage[model_id]["rpm"] += 1
        current_llm_usage[model_id]["tpm"] += len(prompt) + len(answer)  # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ RAG —Å–∏—Å—Ç–µ–º–µ
        answer_id = f"ans_{uuid.uuid4().hex}"
        index_chat_message(answer, answer_id, {
            'type': 'ai_response',
            'query': query,
            'model': model_id,
            'timestamp': datetime.now().isoformat()
        })
        
        return answer.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

if __name__ == "__main__":
    main()
