#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
import requests
import json
import time
import sys
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:5051"
TIMEOUT = 10

def test_health_check():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    print("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=TIMEOUT)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            return True
        else:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚úó –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω.")
        return False
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def test_get_current_state():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    print("\n–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    try:
        response = requests.get(f"{BASE_URL}/internal/state", timeout=TIMEOUT)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {data}")
            return True
        else:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def test_get_models_by_provider():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É."""
    print("\n–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini
        response = requests.get(f"{BASE_URL}/internal/models?provider=gemini", timeout=TIMEOUT)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –ú–æ–¥–µ–ª–∏ Gemini: {len(data)} –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Gemini: {response.status_code}")
            return False
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter
        response = requests.get(f"{BASE_URL}/internal/models?provider=openrouter", timeout=TIMEOUT)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –ú–æ–¥–µ–ª–∏ OpenRouter: {len(data)} –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π OpenRouter: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def test_update_state():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    print("\n–¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "provider": "gemini",
            "model_id": "gemini/gemini-1.5-flash"
        }
        
        response = requests.post(
            f"{BASE_URL}/internal/state",
            json=test_data,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data.get('message')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
            response = requests.get(f"{BASE_URL}/internal/state", timeout=TIMEOUT)
            if response.status_code == 200:
                current_state = response.json()
                if (current_state.get("provider") == test_data["provider"] and 
                    current_state.get("model_id") == test_data["model_id"]):
                    print("‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    return True
                else:
                    print("‚úó –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º")
                    return False
            else:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return False
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def test_switch_provider():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
    print("\n–¢–µ—Å—Ç 5: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter
        test_data = {
            "provider": "openrouter",
            "model_id": "openrouter/mistralai-mistral-7b-instruct"
        }
        
        response = requests.post(
            f"{BASE_URL}/internal/state",
            json=test_data,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenRouter: {data.get('message')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            response = requests.get(f"{BASE_URL}/internal/state", timeout=TIMEOUT)
            if response.status_code == 200:
                current_state = response.json()
                if (current_state.get("provider") == test_data["provider"] and 
                    current_state.get("model_id") == test_data["model_id"]):
                    print("‚úì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print("‚úó –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return False
            else:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return False
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("=" * 50)
    
    tests = [
        test_health_check,
        test_get_current_state,
        test_get_models_by_provider,
        test_update_state,
        test_switch_provider
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print("-" * 30)
    
    print("\n" + "=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
