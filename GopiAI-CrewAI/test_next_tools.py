#!/usr/bin/env python3
"""
üîß –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö CrewAI Toolkit –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —à–∞–±–ª–æ–Ω GitHub Integration Tool
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "tools"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

class CrewAIToolsTester:
    """–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä CrewAI Toolkit –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = {}
        self.priority_tools = [
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑ API –∫–ª—é—á–µ–π
            {
                'name': 'file_read',
                'module': 'tools.crewai_toolkit.tools.file_read_tool.file_read_tool',
                'class': 'FileReadTool',
                'category': 'file_operations',
                'api_keys': [],
                'test_params': {'file_path': __file__}
            },
            {
                'name': 'file_writer',
                'module': 'tools.crewai_toolkit.tools.file_writer_tool.file_writer_tool',
                'class': 'FileWriterTool',
                'category': 'file_operations',
                'api_keys': [],
                'test_params': {'filename': 'test_output.txt', 'content': 'Test content'}
            },
            {
                'name': 'directory_read',
                'module': 'tools.crewai_toolkit.tools.directory_read_tool.directory_read_tool',
                'class': 'DirectoryReadTool',
                'category': 'file_operations',
                'api_keys': [],
                'test_params': {'directory_path': str(project_root)}
            },
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
            {
                'name': 'brave_search',
                'module': 'tools.crewai_toolkit.tools.brave_search_tool.brave_search_tool',
                'class': 'BraveSearchTool',
                'category': 'web_search',
                'api_keys': ['BRAVE_API_KEY'],
                'test_params': {'query': 'python programming'}
            },
            {
                'name': 'serper_dev',
                'module': 'tools.crewai_toolkit.tools.serper_dev_tool.serper_dev_tool',
                'class': 'SerperDevTool',
                'category': 'web_search',
                'api_keys': ['SERPER_API_KEY'],
                'test_params': {'query': 'artificial intelligence'}
            },
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            {
                'name': 'scrape_website',
                'module': 'tools.crewai_toolkit.tools.scrape_website_tool.scrape_website_tool',
                'class': 'ScrapeWebsiteTool',
                'category': 'web_scraping',
                'api_keys': [],
                'test_params': {'website_url': 'https://example.com'}
            },
            {
                'name': 'selenium_scraping',
                'module': 'tools.crewai_toolkit.tools.selenium_scraping_tool.selenium_scraping_tool',
                'class': 'SeleniumScrapingTool',
                'category': 'web_scraping',
                'api_keys': [],
                'test_params': {'website_url': 'https://example.com'}
            },
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö
            {
                'name': 'csv_search',
                'module': 'tools.crewai_toolkit.tools.csv_search_tool.csv_search_tool',
                'class': 'CSVSearchTool',
                'category': 'file_search',
                'api_keys': [],
                'test_params': {'csv_file_path': 'test.csv', 'query': 'test'}
            },
            {
                'name': 'json_search',
                'module': 'tools.crewai_toolkit.tools.json_search_tool.json_search_tool',
                'class': 'JSONSearchTool',
                'category': 'file_search',
                'api_keys': [],
                'test_params': {'json_file_path': 'test.json', 'query': 'test'}
            },
        ]
    
    def check_api_keys(self, tool_info: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
        missing_keys = []
        available_keys = []
        
        for key in tool_info['api_keys']:
            value = os.getenv(key)
            if value and value != f'your_{key.lower()}_here':
                available_keys.append(key)
            else:
                missing_keys.append(key)
        
        return {
            'has_all_keys': len(missing_keys) == 0,
            'available_keys': available_keys,
            'missing_keys': missing_keys
        }
    
    def test_tool_import(self, tool_info: Dict) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            module_parts = tool_info['module'].split('.')
            module = __import__(tool_info['module'], fromlist=[tool_info['class']])
            tool_class = getattr(module, tool_info['class'])
            
            return {
                'success': True,
                'class': tool_class,
                'module_path': tool_info['module']
            }
        except ImportError as e:
            return {
                'success': False,
                'error': f'ImportError: {e}',
                'error_type': 'import'
            }
        except AttributeError as e:
            return {
                'success': False,
                'error': f'AttributeError: {e}',
                'error_type': 'class_not_found'
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'Unknown error: {e}',
                'error_type': 'unknown'
            }
    
    def test_tool_creation(self, tool_class, tool_info: Dict) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
            tool_instance = tool_class()
            
            return {
                'success': True,
                'instance': tool_instance,
                'name': getattr(tool_instance, 'name', 'Unknown'),
                'description': getattr(tool_instance, 'description', 'No description')
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'error_type': type(e).__name__
            }
    
    def test_tool_execution(self, tool_instance, test_params: Dict) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            has_run = hasattr(tool_instance, '_run')
            has_run_method = hasattr(tool_instance, 'run')
            
            if not has_run and not has_run_method:
                return {
                    'success': False,
                    'error': 'No _run or run method found',
                    'error_type': 'no_run_method'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            method_name = '_run' if has_run else 'run'
            method = getattr(tool_instance, method_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
            import inspect
            sig = inspect.signature(method)
            params = list(sig.parameters.keys())
            
            return {
                'success': True,
                'result': f'Method {method_name} available with parameters: {params}',
                'method_info': {
                    'method_name': method_name,
                    'parameters': params,
                    'signature': str(sig)
                }
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'error_type': type(e).__name__
            }
    
    def test_single_tool(self, tool_info: Dict) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {tool_info['name']}...")
        
        result = {
            'name': tool_info['name'],
            'category': tool_info['category'],
            'module': tool_info['module'],
            'class': tool_info['class']
        }
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        api_check = self.check_api_keys(tool_info)
        result['api_keys'] = api_check
        
        if tool_info['api_keys'] and not api_check['has_all_keys']:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {api_check['missing_keys']}")
            result['status'] = 'missing_api_keys'
            result['can_test'] = False
            return result
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
        import_result = self.test_tool_import(tool_info)
        result['import'] = import_result
        
        if not import_result['success']:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {import_result['error']}")
            result['status'] = 'import_failed'
            result['can_test'] = False
            return result
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        creation_result = self.test_tool_creation(import_result['class'], tool_info)
        result['creation'] = creation_result
        
        if not creation_result['success']:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_result['error']}")
            result['status'] = 'creation_failed'
            result['can_test'] = False
            return result
        
        print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω: {creation_result['name']}")
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_result = self.test_tool_execution(creation_result['instance'], tool_info['test_params'])
        result['execution'] = execution_result
        
        if not execution_result['success']:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_result['error']}")
            result['status'] = 'execution_failed'
            result['can_test'] = True  # –ú–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        else:
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {execution_result['result']}")
            result['status'] = 'fully_working'
            result['can_test'] = True
        
        return result
    
    def test_all_priority_tools(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CrewAI Toolkit –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        print("=" * 70)
        
        for tool_info in self.priority_tools:
            result = self.test_single_tool(tool_info)
            self.results[tool_info['name']] = result
        
        self.print_summary()
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 70)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        categories = {}
        status_counts = {
            'fully_working': 0,
            'execution_failed': 0,
            'creation_failed': 0,
            'import_failed': 0,
            'missing_api_keys': 0
        }
        
        for tool_name, result in self.results.items():
            category = result['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
            
            status = result['status']
            if status in status_counts:
                status_counts[status] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—Ç: {status_counts['fully_working']}")
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {status_counts['execution_failed']}")
        print(f"   ‚ùå –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è: {status_counts['creation_failed']}")
        print(f"   ‚ùå –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {status_counts['import_failed']}")
        print(f"   üîë –ù–µ—Ç API –∫–ª—é—á–µ–π: {status_counts['missing_api_keys']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìÇ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, tools in categories.items():
            print(f"\n   üìÅ {category.upper()}:")
            for tool in tools:
                status_emoji = {
                    'fully_working': '‚úÖ',
                    'execution_failed': '‚ö†Ô∏è',
                    'creation_failed': '‚ùå',
                    'import_failed': '‚ùå',
                    'missing_api_keys': 'üîë'
                }.get(tool['status'], '‚ùì')
                
                print(f"      {status_emoji} {tool['name']}")
                if tool['status'] == 'execution_failed':
                    print(f"         üí° –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")
                elif tool['status'] == 'missing_api_keys':
                    missing = tool['api_keys']['missing_keys']
                    print(f"         üîë –ù—É–∂–Ω—ã –∫–ª—é—á–∏: {', '.join(missing)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        working_tools = [t for t in self.results.values() if t['status'] == 'fully_working']
        failed_execution = [t for t in self.results.values() if t['status'] == 'execution_failed']
        
        if working_tools:
            print(f"   ‚úÖ {len(working_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        if failed_execution:
            print(f"   üîß {len(failed_execution)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞—Ö")
            print("      –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω GitHub Integration Tool")

if __name__ == "__main__":
    tester = CrewAIToolsTester()
    tester.test_all_priority_tools()
