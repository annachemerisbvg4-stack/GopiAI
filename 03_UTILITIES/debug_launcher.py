#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π launcher –¥–ª—è GopiAI —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ù–µ –∏–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã!
"""

import os
import sys
import logging
import time
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ['GOPIAI_DEBUG'] = 'true'
os.environ['GOPIAI_LOG_LEVEL'] = 'DEBUG'
os.environ['PYTHONPATH'] = '.'

class SuperDetailedFormatter(logging.Formatter):
    """–°—É–ø–µ—Ä-–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    def format(self, record):
        timestamp = datetime.now().strftime('%H:%M:%S.%f')[:-3]
        level = record.levelname
        location = f"{record.filename}:{record.lineno}"
        function = record.funcName
        message = record.getMessage()
        
        # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        colors = {
            'DEBUG': '\033[36m',    # Cyan
            'INFO': '\033[32m',     # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m',    # Red
            'CRITICAL': '\033[35m', # Magenta
        }
        reset = '\033[0m'
        
        color = colors.get(level, '')
        
        return f"{color}[{timestamp}] {level:8} | {location:35} | {function:30} | {message}{reset}"

def setup_detailed_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Console handler —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG)
    console_handler.setFormatter(SuperDetailedFormatter())
    root_logger.addHandler(console_handler)
    
    # File handler –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
    log_filename = f"gopiai_debug_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    file_handler = logging.FileHandler(log_filename, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
    file_formatter = logging.Formatter(
        '[%(asctime)s.%(msecs)03d] %(levelname)-8s | %(filename)s:%(lineno)d | %(funcName)s | %(message)s',
        datefmt='%H:%M:%S'
    )
    file_handler.setFormatter(file_formatter)
    root_logger.addHandler(file_handler)
    
    print(f"üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    print(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_filename}")
    print(f"üéØ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: DEBUG")
    print("=" * 80)
    
    return log_filename

def monkey_patch_imports():
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    original_import = __builtins__.__import__
    
    def logged_import(name, globals=None, locals=None, fromlist=(), level=0):
        start_time = time.time()
        logger = logging.getLogger('IMPORT')
        
        try:
            logger.debug(f"üì¶ –ò–ú–ü–û–†–¢: {name} (level={level}, fromlist={fromlist})")
            result = original_import(name, globals, locals, fromlist, level)
            duration = time.time() - start_time
            logger.debug(f"‚úÖ –ò–ú–ü–û–†–¢ OK: {name} –∑–∞ {duration:.3f}s")
            return result
        except Exception as e:
            duration = time.time() - start_time
            logger.error(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {name} –∑–∞ {duration:.3f}s: {e}")
            raise
    
    __builtins__.__import__ = logged_import
    logging.getLogger('IMPORT').debug("üîß Monkey-patch –∏–º–ø–æ—Ä—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

def patch_pyside_logging():
    """–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è PySide6 —Å–æ–±—ã—Ç–∏–π"""
    
    try:
        from PySide6.QtCore import QObject, QEvent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_event = QObject.event
        
        def logged_event(self, event):
            logger = logging.getLogger('QT_EVENTS')
            event_type = event.type()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            important_events = {
                QEvent.Type.Show: "Show",
                QEvent.Type.Hide: "Hide", 
                QEvent.Type.Close: "Close",
                QEvent.Type.Resize: "Resize",
                QEvent.Type.Paint: "Paint",
                QEvent.Type.MouseButtonPress: "MousePress",
                QEvent.Type.KeyPress: "KeyPress",
            }
            
            if event_type in important_events:
                logger.debug(f"üé≠ QT_EVENT: {self.__class__.__name__}.{important_events[event_type]}")
            
            return original_event(self, event)
        
        QObject.event = logged_event
        logging.getLogger('QT_EVENTS').debug("üé≠ PySide6 event logging –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
    except ImportError:
        logging.getLogger('QT_EVENTS').warning("‚ö†Ô∏è PySide6 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º event logging")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print("üöÄ GopiAI Debug Launcher")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_file = setup_detailed_logging()
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    monkey_patch_imports()
    
    logger = logging.getLogger('LAUNCHER')
    logger.info("üöÄ –ó–ê–ü–£–°–ö GopiAI —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º GopiAI
        current_dir = os.path.dirname(os.path.abspath(__file__))
        sys.path.insert(0, current_dir)
        sys.path.insert(0, os.path.join(current_dir, 'GopiAI-UI'))
        
        logger.debug(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
        logger.debug(f"üêç Python paths: {sys.path[:3]}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GopiAI UI...")
        
        # –ü–∞—Ç—á–∏–º Qt —Å–æ–±—ã—Ç–∏—è
        patch_pyside_logging()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
        import GopiAI_UI.gopiai.ui.main as gopiai_main
        
        logger.info("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main() —Ñ—É–Ω–∫—Ü–∏—é...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        gopiai_main.main()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.critical("üìã FULL TRACEBACK:")
        import traceback
        logger.critical(traceback.format_exc())
        
        print(f"\nüí• –û–®–ò–ë–ö–ê! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ: {log_file}")
        return 1
    
    logger.info("‚úÖ GopiAI –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"\nüìÅ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {log_file}")
    return 0

if __name__ == "__main__":
    sys.exit(main())