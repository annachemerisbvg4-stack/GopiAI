#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GopiAI - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
===============================================
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""
import os
import sys
from pathlib import Path

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º)
MODULES = [
    "GopiAI-Core",        # –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å
    "GopiAI-Widgets",     # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç Core
    "GopiAI-UI",          # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç Core + Widgets (–≤–∫–ª—é—á–∞–µ—Ç –±—ã–≤—à–∏–µ Assets)
    "GopiAI-WebView",     # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç Core + UI
    "GopiAI-Extensions",  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç Core + Widgets + UI  
    "GopiAI-App",         # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
]

# RAG Memory –æ—Ç–¥–µ–ª—å–Ω–æ - —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞
RAG_MODULE = "rag_memory_system"

def check_module_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π")
    print("=" * 50)
    
    for module in MODULES:
        print(f"\nüì¶ {module}:")
        module_path = Path(module)
        
        if not module_path.exists():
            print(f"  ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_path}")
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pyproject.toml
        pyproject = module_path / "pyproject.toml"
        if pyproject.exists():
            print(f"  ‚úÖ pyproject.toml –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"  ‚ùå pyproject.toml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º gopiai namespace
        gopiai_path = module_path / "gopiai"
        if gopiai_path.exists():
            print(f"  ‚úÖ gopiai/ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º __init__.py
            init_file = gopiai_path / "__init__.py"
            if init_file.exists():
                with open(init_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                if "extend_path" in content:
                    print(f"  ‚úÖ namespace package –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    print(f"  ‚ö†Ô∏è  namespace package –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"  ‚ùå gopiai/__init__.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå gopiai/ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def setup_namespace_packages():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç namespace packages –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ namespace packages")
    print("=" * 50)
    
    namespace_content = '''"""GopiAI namespace package"""
__path__ = __import__('pkgutil').extend_path(__path__, __name__)
'''
    
    for module in MODULES:
        module_path = Path(module)
        if not module_path.exists():
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {module} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        gopiai_path = module_path / "gopiai"
        gopiai_path.mkdir(exist_ok=True)
        
        init_file = gopiai_path / "__init__.py"
        with open(init_file, 'w', encoding='utf-8') as f:
            f.write(namespace_content)
            
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω namespace –¥–ª—è {module}")

def update_dependencies():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ pyproject.toml —Ñ–∞–π–ª–∞—Ö"""
    print("\nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
    dependencies = {
        "GopiAI-Core": [
            "PySide6>=6.5.0",
        ],
        "GopiAI-Widgets": [
            "PySide6>=6.5.0",
            "gopiai-core",
        ],
        "GopiAI-UI": [
            "PySide6>=6.5.0", 
            "gopiai-core",
            "gopiai-widgets",
        ],
        "GopiAI-WebView": [
            "PySide6>=6.5.0",
            "gopiai-core", 
            "gopiai-ui",
        ],
        "GopiAI-Extensions": [
            "PySide6>=6.5.0",
            "gopiai-core",
            "gopiai-widgets", 
            "gopiai-ui",
        ],
        "GopiAI-App": [
            "PySide6>=6.5.0",
            "gopiai-core",
            "gopiai-widgets",
            "gopiai-ui", 
            "gopiai-webview",
            "gopiai-extensions",
        ],
    }
    
    for module in MODULES:
        if module not in dependencies:
            continue
            
        pyproject_path = Path(module) / "pyproject.toml"
        if not pyproject_path.exists():
            print(f"‚ùå {module}: pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {module}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(pyproject_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps_list = dependencies[module]
        deps_str = ',\n    '.join(f'"{dep}"' for dep in deps_list)
        new_deps = f'''dependencies = [
    {deps_str},
]'''
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import re
        pattern = r'dependencies = \[.*?\]'
        content = re.sub(pattern, new_deps, content, flags=re.DOTALL)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(pyproject_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        print(f"‚úÖ {module}: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def generate_install_script():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    script_content = f'''#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π GopiAI –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π GopiAI"
echo "=" * 50

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
'''
    
    for module in MODULES:
        script_content += f'''
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {module}..."
cd {module}
pip install -e .
if [ $? -eq 0 ]; then
    echo "‚úÖ {module} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {module}"
    exit 1
fi
cd ..
'''
    
    script_content += '''
echo ""
echo "üéâ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:"
echo "python GopiAI-UI/gopiai/ui/main.py"
'''
    
    with open("install_all_modules.sh", 'w', encoding='utf-8') as f:
        f.write(script_content)
        
    # Windows –≤–µ—Ä—Å–∏—è
    win_script = script_content.replace('#!/bin/bash', '@echo off').replace('echo "', 'echo ').replace('"', '').replace('[ $? -eq 0 ]', '%ERRORLEVEL% EQU 0').replace('exit 1', 'exit /b 1')
    
    with open("install_all_modules.bat", 'w', encoding='utf-8') as f:
        f.write(win_script)
        
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã:")
    print("  - install_all_modules.sh (Linux/Mac)")  
    print("  - install_all_modules.bat (Windows)")

if __name__ == "__main__":
    print("üîß GopiAI Modular Setup - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 60)
    
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π:")
    check_module_structure()
    
    print("\n2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ namespace packages:")
    setup_namespace_packages()
    
    print("\n3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    update_dependencies()
    
    print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    generate_install_script()
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash install_all_modules.sh")
    print("   –∏–ª–∏:      install_all_modules.bat")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python test_bridge_imports.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python GopiAI-UI/gopiai/ui/main.py")