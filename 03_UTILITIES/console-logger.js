/**
 * JavaScript Console Logging System for WebView Debugging
 * ========================================================
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã (log, warn, error, etc.)
 * –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ Python —á–µ—Ä–µ–∑ QWebChannel bridge –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebView.
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è logging bridge
window.consoleLogger = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ console logging bridge
function setupConsoleLogging(bridge) {
    if (!bridge) {
        console.warn('‚ö†Ô∏è Bridge not available for console logging setup');
        return;
    }
    
    window.consoleLogger = bridge;
    console.log('üîß Console logging bridge established');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Å–æ–ª–∏
    const originalConsole = {
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error,
        debug: console.debug
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Python
    function safeLogToPython(level, message, source = '') {
        try {
            if (window.consoleLogger && typeof window.consoleLogger[`log_js_${level}`] === 'function') {
                window.consoleLogger[`log_js_${level}`](String(message));
            }
        } catch (e) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.error –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            originalConsole.error('Console logging error:', e);
        }
    }
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.log
    console.log = function(...args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        
        originalConsole.log(...args); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        safeLogToPython('log', message);
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.info
    console.info = function(...args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        
        originalConsole.info(...args);
        safeLogToPython('info', message);
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.warn
    console.warn = function(...args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        
        originalConsole.warn(...args);
        safeLogToPython('warn', message);
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.error
    console.error = function(...args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        
        originalConsole.error(...args);
        safeLogToPython('error', message);
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.debug
    console.debug = function(...args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');
        
        originalConsole.debug(...args);
        safeLogToPython('debug', message);
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ JavaScript
    window.addEventListener('error', function(event) {
        const errorMessage = `${event.message} at ${event.filename}:${event.lineno}:${event.colno}`;
        const stackTrace = event.error ? event.error.stack : '';
        
        if (window.consoleLogger && typeof window.consoleLogger.log_js_exception === 'function') {
            try {
                window.consoleLogger.log_js_exception(errorMessage, stackTrace);
            } catch (e) {
                originalConsole.error('Exception logging error:', e);
            }
        }
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Promise –æ—à–∏–±–æ–∫
    window.addEventListener('unhandledrejection', function(event) {
        const errorMessage = `Unhandled Promise rejection: ${event.reason}`;
        const stackTrace = event.reason && event.reason.stack ? event.reason.stack : '';
        
        if (window.consoleLogger && typeof window.consoleLogger.log_js_exception === 'function') {
            try {
                window.consoleLogger.log_js_exception(errorMessage, stackTrace);
            } catch (e) {
                originalConsole.error('Promise rejection logging error:', e);
            }
        }
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —á–∞—Ç–∞
    
    window.logChatEvent = function(eventData) {
        if (window.consoleLogger && typeof window.consoleLogger.log_chat_event === 'function') {
            try {
                const message = typeof eventData === 'object' ? JSON.stringify(eventData) : String(eventData);
                window.consoleLogger.log_chat_event(message);
            } catch (e) {
                originalConsole.error('Chat event logging error:', e);
            }
        }
    };
    
    console.log('‚úÖ Console logging system activated');
    console.info('‚ÑπÔ∏è All console messages will now be forwarded to Python');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ DOM loaded, waiting for WebChannel bridge...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100ms –¥–æ —É—Å–ø–µ—Ö–∞
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    const setupInterval = setInterval(function() {
        attempts++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å bridge –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        let bridge = null;
        
        if (window.chat && window.chat.bridge) {
            bridge = window.chat.bridge;
        } else if (window.gopiaiChat && window.gopiaiChat.bridge) {
            bridge = window.gopiaiChat.bridge;
        } else if (window.bridge) {
            bridge = window.bridge;
        }
        
        if (bridge) {
            setupConsoleLogging(bridge);
            clearInterval(setupInterval);
            console.log(`‚úÖ Console logging established after ${attempts} attempts`);
        } else if (attempts >= maxAttempts) {
            clearInterval(setupInterval);
            console.warn('‚ö†Ô∏è Failed to establish console logging - bridge not found');
        }
    }, 100);
});