"""
–ú–æ–¥—É–ª—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è GopiAI
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ monkey-patching
"""

import logging
import sys
import time
import functools
import traceback
from datetime import datetime
import os
from pathlib import Path

class GopiAIDetailedLogger:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, log_level=logging.DEBUG):
        self.log_level = log_level
        self.log_file = None
        self.original_functions = {}
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.log_file = f"gopiai_detailed_{timestamp}.log"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '[%(asctime)s.%(msecs)03d] %(levelname)-8s | %(name)-15s | %(filename)s:%(lineno)d | %(funcName)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # Console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(self.log_level)
        console_handler.setFormatter(formatter)
        
        # File handler  
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setLevel(self.log_level)
        file_handler.setFormatter(formatter)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(self.log_level)
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
            
        root_logger.addHandler(console_handler)
        root_logger.addHandler(file_handler)
        
        print(f"üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GopiAI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"üìÅ –õ–æ–≥–∏: {self.log_file}")
        print("=" * 80)
    
    def patch_imports(self):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
        
        original_import = __builtins__.__import__
        logger = logging.getLogger('IMPORTS')
        
        def logged_import(name, globals=None, locals=None, fromlist=(), level=0):
            start_time = time.time()
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if name.startswith(('_', 'encodings', 'codecs')):
                return original_import(name, globals, locals, fromlist, level)
            
            try:
                logger.debug(f"üì¶ –ò–ú–ü–û–†–¢: {name}")
                result = original_import(name, globals, locals, fromlist, level)
                duration = time.time() - start_time
                if duration > 0.01:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                    logger.debug(f"‚úÖ –ò–ú–ü–û–†–¢: {name} ({duration:.3f}s)")
                return result
            except Exception as e:
                duration = time.time() - start_time
                logger.error(f"‚ùå –ò–ú–ü–û–†–¢: {name} –û–®–ò–ë–ö–ê ({duration:.3f}s): {e}")
                raise
        
        __builtins__.__import__ = logged_import
        logger.debug("üîß Import monitoring –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def patch_qt_events(self):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Qt —Å–æ–±—ã—Ç–∏—è"""
        
        try:
            from PySide6.QtCore import QObject, QEvent
            from PySide6.QtWidgets import QWidget
            
            # –ü–∞—Ç—á–∏–º QWidget.event
            original_event = QWidget.event
            logger = logging.getLogger('QT_EVENTS')
            
            def logged_event(self, event):
                event_type = event.type()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                important_events = {
                    QEvent.Type.Show: "Show",
                    QEvent.Type.Hide: "Hide",
                    QEvent.Type.Close: "Close", 
                    QEvent.Type.Resize: "Resize",
                    QEvent.Type.WindowActivate: "Activate",
                    QEvent.Type.WindowDeactivate: "Deactivate",
                }
                
                if event_type in important_events:
                    widget_name = self.__class__.__name__
                    event_name = important_events[event_type]
                    logger.debug(f"üé≠ {widget_name}.{event_name}")
                
                return original_event(self, event)
            
            QWidget.event = logged_event
            logger.debug("üé≠ Qt events monitoring –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError:
            logging.getLogger('QT_EVENTS').warning("‚ö†Ô∏è PySide6 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def patch_functions(self, module_name, function_names):
        """–ü–∞—Ç—á–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        
        try:
            module = sys.modules.get(module_name)
            if not module:
                return
                
            logger = logging.getLogger(f'FUNC_{module_name}')
            
            for func_name in function_names:
                if hasattr(module, func_name):
                    original_func = getattr(module, func_name)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                    key = f"{module_name}.{func_name}"
                    self.original_functions[key] = original_func
                    
                    # –°–æ–∑–¥–∞–µ–º logged wrapper
                    def create_logged_wrapper(orig_func, name):
                        @functools.wraps(orig_func)
                        def wrapper(*args, **kwargs):
                            start_time = time.time()
                            logger.debug(f"üîµ –í–•–û–î: {name}()")
                            try:
                                result = orig_func(*args, **kwargs)
                                duration = time.time() - start_time
                                if duration > 0.01:
                                    logger.debug(f"‚úÖ –í–´–•–û–î: {name}() ({duration:.3f}s)")
                                return result
                            except Exception as e:
                                duration = time.time() - start_time
                                logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {name}() ({duration:.3f}s): {e}")
                                raise
                        return wrapper
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ç—á
                    logged_func = create_logged_wrapper(original_func, f"{module_name}.{func_name}")
                    setattr(module, func_name, logged_func)
                    
            logger.debug(f"üîß Patched {len(function_names)} functions in {module_name}")
            
        except Exception as e:
            logging.getLogger('PATCHER').error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ {module_name}: {e}")
    
    def activate_for_gopiai(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GopiAI"""
        
        logger = logging.getLogger('ACTIVATOR')
        logger.info("üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è GopiAI")
        
        # –ü–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç—ã
        self.patch_imports()
        
        # –ü–∞—Ç—á–∏–º Qt —Å–æ–±—ã—Ç–∏—è
        self.patch_qt_events()
        
        logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return self.log_file

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_detailed_logger = None

def activate_detailed_logging(log_level=logging.DEBUG):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    global _detailed_logger
    
    if _detailed_logger is None:
        _detailed_logger = GopiAIDetailedLogger(log_level)
        return _detailed_logger.activate_for_gopiai()
    
    return _detailed_logger.log_file

def deactivate_detailed_logging():
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)"""
    global _detailed_logger
    
    if _detailed_logger:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("üõë –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        _detailed_logger = None