#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Claude Tools Handler
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
ui_path = Path(__file__).parent / "GopiAI-UI"
sys.path.insert(0, str(ui_path))

def test_claude_tools_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ ClaudeToolsHandler"""
    print("üîß Testing ClaudeToolsHandler import...")
    
    try:
        from gopiai.ui.components.claude_tools_handler import ClaudeToolsHandler
        print("‚úÖ ClaudeToolsHandler imported successfully")
        return True
    except ImportError as e:
        print(f"‚ùå Failed to import ClaudeToolsHandler: {e}")
        return False

def test_webview_chat_widget_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ WebViewChatWidget —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Claude Tools"""
    print("\nüîß Testing WebViewChatWidget import...")
    
    try:
        from gopiai.ui.components.webview_chat_widget import WebViewChatWidget, WebViewChatBridge
        print("‚úÖ WebViewChatWidget imported successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π CLAUDE_TOOLS_AVAILABLE
        from gopiai.ui.components import webview_chat_widget
        if hasattr(webview_chat_widget, 'CLAUDE_TOOLS_AVAILABLE'):
            print(f"‚úÖ CLAUDE_TOOLS_AVAILABLE = {webview_chat_widget.CLAUDE_TOOLS_AVAILABLE}")
        else:
            print("‚ö†Ô∏è CLAUDE_TOOLS_AVAILABLE variable not found")
        
        return True
    except ImportError as e:
        print(f"‚ùå Failed to import WebViewChatWidget: {e}")
        return False

def test_claude_tools_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ ClaudeToolsHandler"""
    print("\nüîß Testing ClaudeToolsHandler methods...")
    
    try:
        from gopiai.ui.components.claude_tools_handler import ClaudeToolsHandler
        
        # –°–æ–∑–¥–∞–µ–º mock WebView –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockWebView:
            def page(self):
                return MockPage()
        
        class MockPage:
            def url(self):
                return MockUrl()
            
            def title(self):
                return "Test Page"
            
            def runJavaScript(self, script, callback=None):
                if callback:
                    callback("test result")
        
        class MockUrl:
            def toString(self):
                return "about:blank"
        
        # –°–æ–∑–¥–∞–µ–º handler —Å mock WebView
        mock_webview = MockWebView()
        handler = ClaudeToolsHandler(mock_webview)
        
        print("‚úÖ ClaudeToolsHandler instance created")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        result = handler.get_current_url()
        print(f"‚úÖ get_current_url(): {result}")
        
        result = handler.get_page_title()
        print(f"‚úÖ get_page_title(): {result}")
        
        result = handler.get_available_tools()
        print(f"‚úÖ get_available_tools(): {result}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL
        test_urls = [
            "https://google.com",
            "https://github.com", 
            "https://malicious-site.com",
            "file:///test.html",
            "about:blank"
        ]
        
        print("\nüîí Testing URL security:")
        for url in test_urls:
            is_safe = handler._is_url_allowed(url)
            status = "‚úÖ" if is_safe else "‚ùå"
            print(f"  {status} {url}: {'allowed' if is_safe else 'blocked'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing ClaudeToolsHandler methods: {e}")
        return False

def test_bridge_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebViewChatBridge"""
    print("\nüîß Testing Bridge integration...")
    
    try:
        from gopiai.ui.components.webview_chat_widget import WebViewChatBridge
        
        # –°–æ–∑–¥–∞–µ–º bridge
        bridge = WebViewChatBridge()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        claude_methods = [
            'execute_claude_tool',
            'get_claude_tools_list', 
            'get_pending_claude_requests'
        ]
        
        for method in claude_methods:
            if hasattr(bridge, method):
                print(f"‚úÖ Bridge method {method} available")
            else:
                print(f"‚ùå Bridge method {method} missing")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing bridge integration: {e}")
        return False

def test_file_operations():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîß Testing file operations...")
    
    try:
        from gopiai.ui.components.claude_tools_handler import ClaudeToolsHandler
        
        class MockWebView:
            def page(self):
                return None
        
        handler = ClaudeToolsHandler(MockWebView())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        result = handler.read_file("nonexistent.txt")
        result_data = json.loads(result)
        print(f"‚úÖ read_file (nonexistent): success={result_data.get('success', False)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        test_content = "Test content for Claude Tools"
        temp_file = Path.cwd() / "test_claude_tools.txt"
        
        result = handler.write_file(str(temp_file), test_content)
        result_data = json.loads(result)
        print(f"‚úÖ write_file: success={result_data.get('success', False)}")
        
        if temp_file.exists():
            result = handler.read_file(str(temp_file))
            result_data = json.loads(result)
            if result_data.get('success') and result_data.get('content') == test_content:
                print("‚úÖ File read/write cycle successful")
            else:
                print("‚ùå File content mismatch")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            temp_file.unlink()
            print("‚úÖ Test file cleaned up")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing file operations: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Claude Tools Handler Integration Test")
    print("=" * 50)
    
    tests = [
        test_claude_tools_import,
        test_webview_chat_widget_import,
        test_claude_tools_methods,
        test_bridge_integration,
        test_file_operations
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Claude Tools integration is working.")
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the issues above.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)