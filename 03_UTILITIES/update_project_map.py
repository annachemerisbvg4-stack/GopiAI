#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
===============================

–ó–∞–ø—É—Å–∫–∞–µ—Ç dependency_mapper.py –∏ sync_to_rag.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
–∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π.

–ê–≤—Ç–æ—Ä: Crazy Coder
–î–∞—Ç–∞: 2025-06-05
"""

import subprocess
import sys
import os
from pathlib import Path

def main():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å RAG"""
    
    project_root = Path(__file__).parent
    os.chdir(project_root)
    
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º dependency_mapper.py
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        result = subprocess.run([
            sys.executable, 
            "project_health/analyzers/dependency_mapper.py"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:")
            print(result.stderr)
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º sync_to_rag.py
        print("\nüß† –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å RAG —Å–∏—Å—Ç–µ–º–æ–π...")
        result = subprocess.run([
            sys.executable, 
            "project_health/scripts/utils/sync_to_rag.py"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å RAG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            print(result.stderr)
        
        print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_root}/project_health/reports/project_map.json")
        print(f"üß† RAG –∏–Ω–¥–µ–∫—Å: {project_root}/rag_memory_system/project_sync/project_index.json")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
