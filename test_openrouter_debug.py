#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å OpenRouter API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import json
import requests
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
def load_env_file():
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_path}")
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")

def test_openrouter_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API"""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENROUTER API ===")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now()}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_env_file()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    url = "https://openrouter.ai/api/v1/models"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}",
        "User-Agent": "GopiAI/1.0"
    }
    
    print(f"üåê URL: {url}")
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {json.dumps({k: v if k != 'Authorization' else f'Bearer {api_key[:10]}...' for k, v in headers.items()}, indent=2)}")
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        response = requests.get(url, headers=headers, timeout=30)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            data = response.json()
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text[:500]}...")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        print(f"üîç –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
        
        models_data = data.get('data', [])
        print(f"üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(models_data)}")
        
        if len(models_data) == 0:
            print("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª 0 –º–æ–¥–µ–ª–µ–π!")
            print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
        active_count = 0
        inactive_count = 0
        
        print("\nüìã –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 5 –º–æ–¥–µ–ª–µ–π:")
        for i, model_data in enumerate(models_data[:5]):
            model_id = model_data.get('id', 'unknown')
            is_active = model_data.get('is_active', False)
            pricing = model_data.get('pricing', {})
            
            print(f"  {i+1}. ID: {model_id}")
            print(f"     –ê–∫—Ç–∏–≤–Ω–∞: {is_active}")
            print(f"     –¶–µ–Ω—ã: {pricing}")
            
            if is_active:
                active_count += 1
            else:
                inactive_count += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_active = sum(1 for m in models_data if m.get('is_active', False))
        total_inactive = len(models_data) - total_active
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(models_data)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_active}")
        print(f"   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_inactive}")
        
        if total_active == 0:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã!")
            print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ API OpenRouter")
            print("   2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏–ª–∏ API –∫–ª—é—á–æ–º")
            print("   3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenRouter")
        else:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_openrouter_api()
