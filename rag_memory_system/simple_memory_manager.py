"""
üß† –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è GopiAI –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ similarity.py - –Ω–∏–∫–∞–∫–æ–≥–æ –æ–≤–µ—Ä–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞!
"""

import json
import os
import uuid
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å txtai
try:
    from txtai.embeddings import Embeddings
    TXTAI_AVAILABLE = True
except ImportError:
    TXTAI_AVAILABLE = False
    print("‚ö†Ô∏è txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai sentence-transformers")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FAISS
try:
    import faiss
    import numpy as np
    FAISS_AVAILABLE = True
    print("FAISS –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    FAISS_AVAILABLE = False
    print("FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ txtai-only —Ä–µ–∂–∏–º–µ")

class SimpleMemoryManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai"""
    
    def __init__(self, data_dir: str = "conversations"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
        self.chats_file = self.data_dir / "chats.json"
        
        # –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        self.chats = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.sessions = {}  # –°–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        disable_embeddings = os.getenv('GOPI_DISABLE_EMBEDDINGS', 'false').lower() == 'true'
        
        # txtai embeddings (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        if TXTAI_AVAILABLE and not disable_embeddings:
            try:
                print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è txtai embeddings...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å —á—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–µ
                self.embeddings = Embeddings({"path": "sentence-transformers/nli-mpnet-base-v2"})
                print("‚úÖ txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ txtai: {e}")
                print("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                self.embeddings = None
        else:
            self.embeddings = None
            if disable_embeddings:
                print("‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ GOPI_DISABLE_EMBEDDINGS")
            else:
                print("‚ö†Ô∏è txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ–∏—Å–∫–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAISS-–∏–Ω–¥–µ–∫—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.dim = 768  # —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è nli-mpnet-base-v2
        
        if FAISS_AVAILABLE and self.embeddings:
            # –°–æ–∑–¥–∞–µ–º FAISS –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ (Inner Product)
            self.index = faiss.IndexFlatIP(self.dim)
            self.vector_ids = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∑–∏—Ü–∏—è ‚Üî id —Å–æ–æ–±—â–µ–Ω–∏—è
            print("‚úÖ FAISS –∏–Ω–¥–µ–∫—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.index = None
            self.vector_ids = []
            if not FAISS_AVAILABLE:
                print("‚ö†Ô∏è FAISS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å txtai")
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        self.vectors_file = self.data_dir / "vectors.npy"
        self.idmap_file = self.data_dir / "vector_ids.json"
        self.migration_done_file = self.data_dir / "migration_complete.flag"  # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._load_data()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã FAISS (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç –ª–µ–Ω–∏–≤–æ–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ)
        if self.embeddings:
            self._load_embeddings()
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FAISS –∏–Ω–¥–µ–∫—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
            self._rebuild_embeddings_if_needed()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.session_id = "default_session"  # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        if self.chats_file.exists():
            try:
                with open(self.chats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.chats = data.get('chats', [])
                    self.sessions = data.get('sessions', {})
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chats)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        try:
            data = {
                'chats': self.chats,
                'sessions': self.sessions
            }
            with open(self.chats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _compute_embedding(self, text: str) -> np.ndarray:
        """
        –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–∏—á–Ω–æ-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ self.embeddings.transform([text])[0]
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ï–¥–∏–Ω–∏—á–Ω–æ-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π numpy –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ self.dim
        """
        if not self.embeddings:
            raise RuntimeError("Embeddings –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ transform (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞—á–µ)
            vector = self.embeddings.transform([text])[0]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫
            if not isinstance(vector, np.ndarray):
                vector = np.array(vector)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –¥–æ –µ–¥–∏–Ω–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã
            norm = np.linalg.norm(vector)
            if norm > 0:
                vector = vector / norm
            else:
                # –í —Å–ª—É—á–∞–µ –Ω—É–ª–µ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏
                vector = np.zeros_like(vector)
            
            return vector.astype(np.float32)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return np.zeros(self.dim, dtype=np.float32)
    
    def _save_embeddings(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è—Ç—å faiss –∏–Ω–¥–µ–∫—Å (—á–µ—Ä–µ–∑ faiss.write_index) –ò–õ–ò np.save –º–∞—Ç—Ä–∏—Ü—É + json id-mapping
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (np.save + json) —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω
        –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è faiss –∏–Ω–¥–µ–∫—Å–æ–≤
        """
        if not FAISS_AVAILABLE or self.index is None:
            print("‚ö†Ô∏è FAISS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ FAISS –∏–Ω–¥–µ–∫—Å–∞
            if self.index.ntotal > 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
                vectors = self.index.reconstruct_n(0, self.index.ntotal)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –≤ numpy —Ñ–∞–π–ª
                np.save(self.vectors_file, vectors)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vectors)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ {self.vectors_file}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ ID –≤ JSON
                with open(self.idmap_file, 'w', encoding='utf-8') as f:
                    json.dump(self.vector_ids, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥ ID –≤ {self.idmap_file}")
            else:
                print("üìÅ –ù–µ—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")

    def _load_embeddings(self):
        """
        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å –∏ self.vector_ids.
        –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ.
        """
        if not FAISS_AVAILABLE or self.index is None:
            print("‚ö†Ô∏è FAISS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if self.vectors_file.exists() and self.idmap_file.exists():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã
                vectors = np.load(self.vectors_file)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID
                with open(self.idmap_file, 'r', encoding='utf-8') as f:
                    self.vector_ids = json.load(f)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –≤ FAISS –∏–Ω–¥–µ–∫—Å
                if len(vectors) > 0:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
                    norms = np.linalg.norm(vectors, axis=1, keepdims=True)
                    vectors_normalized = vectors / (norms + 1e-8)  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    
                    self.index.add(vectors_normalized.astype(np.float32))
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vectors)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ FAISS –∏–Ω–¥–µ–∫—Å")
                else:
                    print("üìÅ –§–∞–π–ª –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç—ã–º")
            else:
                print("üìÅ –§–∞–π–ª—ã –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∑–∂–µ")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                self.vector_ids = []
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self.index = faiss.IndexFlatIP(self.dim)
            self.vector_ids = []

    def _rebuild_embeddings_if_needed(self):
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –µ—Å–ª–∏ FAISS –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç,
        –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º self.chats, –≤—ã—á–∏—Å–ª–∏—Ç—å embedding, –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–¥–µ–∫—Å, –ø–æ–ø–æ–ª–Ω–∏—Ç—å self.vector_ids.
        
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤.
        –¢–µ–ø–µ—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏.
        """
        if not FAISS_AVAILABLE or self.index is None:
            print("‚ö†Ô∏è FAISS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–∏–≥—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
        if self.migration_done_file.exists():
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω–µ–µ (–Ω–∞–π–¥–µ–Ω —Ñ–ª–∞–≥)")
            return
            
        if self.index.ntotal > 0:
            print(f"üìä FAISS –∏–Ω–¥–µ–∫—Å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {self.index.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤ - —Å–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –º–∏–≥—Ä–∞—Ü–∏–∏")
            # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
            self.migration_done_file.touch()
            return
            
        if not self.chats:
            print("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥")
            # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.migration_done_file.touch()
            return
            
        if not self.embeddings:
            print("‚ö†Ô∏è Embeddings –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return
            
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ï–î–ò–ù–û–ö–†–ê–¢–ù–£–Æ –º–∏–≥—Ä–∞—Ü–∏—é {len(self.chats)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FAISS –∏–Ω–¥–µ–∫—Å...")
        
        try:
            migrated_count = 0
            failed_count = 0
            
            for chat in self.chats:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    content = chat.get('content', '')
                    if not content.strip():
                        continue
                        
                    # –í—ã—á–∏—Å–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                    embedding = self._compute_embedding(content)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ FAISS –∏–Ω–¥–µ–∫—Å
                    # embedding –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2D –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è faiss
                    embedding_2d = embedding.reshape(1, -1)
                    self.index.add(embedding_2d)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏—è -> id —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id = chat.get('id', str(len(self.vector_ids)))
                    self.vector_ids.append(chat_id)
                    
                    migrated_count += 1
                    
                except Exception as e:
                    failed_count += 1
                    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–∞–º–∞
                    if failed_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat.get('id', 'unknown')}: {e}")
                    elif failed_count == 6:
                        print("‚ö†Ô∏è ... (—Å–∫—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏)")
                    continue
                    
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {migrated_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if migrated_count > 0:
                self._save_embeddings()
                print(f"üíæ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.migration_done_file.touch()
            print(f"üèÅ –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {self.migration_done_file}")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if FAISS_AVAILABLE:
                self.index = faiss.IndexFlatIP(self.dim)
                self.vector_ids = []
            # –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏
            self.migration_done_file.touch()
    
    def create_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            'id': session_id,
            'title': title,
            'created_at': datetime.now().isoformat(),
            'message_count': 0
        }
        self._save_data()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {title}")
        return session_id
    
    def add_message(self, session_id: str, role: str, content: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if session_id not in self.sessions:
            # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            self.sessions[session_id] = {
                'id': session_id,
                'title': 'Auto Session',
                'created_at': datetime.now().isoformat(),
                'message_count': 0
            }
        
        message_id = str(uuid.uuid4())
        message = {
            'id': message_id,
            'session_id': session_id,
            'role': role,
            'content': content,
            'timestamp': datetime.now().isoformat()
        }
        
        self.chats.append(message)
        self.sessions[session_id]['message_count'] += 1
        self._save_data()
        
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é {session_id}")
        return message_id
    
    def search_memory(self, query: str, limit: int = 5) -> List[Dict]:
        """
        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ FAISS
        
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ FAISS_AVAILABLE –∏ self.index.ntotal > 0 ‚Äî –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        2. Fallback: —Å—Ç–∞—Ä–∞—è txtai –∏–ª–∏ ¬´–Ω–µ—Ç –ø–æ–∏—Å–∫–∞¬ª
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–µ–∂–Ω–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        if not self.chats:
            print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return []
        
        # 1. –ï—Å–ª–∏ FAISS –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤ –∏–Ω–¥–µ–∫—Å–µ –µ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        if FAISS_AVAILABLE and self.index.ntotal > 0:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º embedding –∑–∞–ø—Ä–æ—Å–∞
                query_vector = self._compute_embedding(query)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è FAISS (–¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å batch)
                query_vector = query_vector.reshape(1, -1)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: D - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, I - –∏–Ω–¥–µ–∫—Å—ã
                D, I = self.index.search(query_vector, limit)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = []
                for k in range(len(I[0])):
                    idx = I[0][k]
                    if idx != -1 and idx < len(self.vector_ids):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
                        real_id = self.vector_ids[idx]  # –ü–æ–ª—É—á–∞–µ–º real-id —Å–æ–æ–±—â–µ–Ω–∏—è
                        score = float(D[0][k])  # –ü–æ–ª—É—á–∞–µ–º score
                        
                        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ real_id –≤ self.chats
                        chat = None
                        for chat_item in self.chats:
                            if chat_item.get('id') == real_id:
                                chat = chat_item
                                break
                        
                        if chat:
                            results.append({
                                'content': chat['content'],
                                'score': score,
                                'session_id': chat['session_id'],
                                'role': chat['role'],
                                'timestamp': chat['timestamp']
                            })
                
                print(f"üîç FAISS –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                return results
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ FAISS –ø–æ–∏—Å–∫–∞: {e}")
                # –ü–∞–¥–∞–µ–º –Ω–∞ fallback
        
        # 2. Fallback: —Å—Ç–∞—Ä–∞—è txtai –∏–ª–∏ ¬´–Ω–µ—Ç –ø–æ–∏—Å–∫–∞¬ª
        if self.embeddings:
            try:
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
                data = [chat['content'] for chat in self.chats]
                
                if not data:
                    return []
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ (–º–µ—Ç–æ–¥ –∏–∑ similarity.py)
                similarities = self.embeddings.similarity(query, data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = []
                for idx, score in similarities[:limit]:
                    chat = self.chats[idx]
                    results.append({
                        'content': chat['content'],
                        'score': score,
                        'session_id': chat['session_id'],
                        'role': chat['role'],
                        'timestamp': chat['timestamp']
                    })
                
                print(f"üîç txtai –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                return results
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ txtai –ø–æ–∏—Å–∫–∞: {e}")
                return []
        else:
            print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∏ FAISS, –Ω–∏ txtai –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return []
    
    def get_session_messages(self, session_id: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏"""
        messages = [chat for chat in self.chats if chat['session_id'] == session_id]
        return messages[-limit:] if limit else messages
    
    def get_all_sessions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        return list(self.sessions.values())
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        return {
            'total_messages': len(self.chats),
            'total_sessions': len(self.sessions),
            'txtai_available': self.embeddings is not None,
            'vector_messages': self.index.ntotal if self.index is not None else 0,
            'faiss_available': FAISS_AVAILABLE,
            'data_dir': str(self.data_dir)
        }
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API GopiAI
    
    def enrich_message(self, message: str) -> str:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏.
        
        –î–æ–±–∞–≤–ª—è–µ—Ç:
        1. –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞)
        2. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–¥–æ 5)
            recent_messages = self._format_recent_messages(self.session_id, 5)
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É (–¥–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            memory_results = self.search_memory(message, limit=3)
            memory_context = self._format_memory_results(memory_results)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
            parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            parts.append(message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            context_parts = []
            
            if recent_messages:
                context_parts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{recent_messages}")
            
            if memory_context:
                context_parts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–∞–º—è—Ç–∏:\n{memory_context}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if context_parts:
                parts.append("\n\n--- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ---\n" + "\n\n".join(context_parts))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                parts.append("–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Ç–≤–µ—Ç–µ.")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            enriched_message = "\n\n".join(parts)
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            enrichment_stats = {
                "original_length": len(message),
                "enriched_length": len(enriched_message),
                "memory_results": len(memory_results) if memory_results else 0,
                "has_recent_context": bool(recent_messages)
            }
            print(f"üß† Message enriched: {enrichment_stats}")
            
            return enriched_message
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"‚ùå Error enriching message: {e}")
            return message

    def _format_recent_messages(self, session_id: str, limit: int = 5) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        messages = self.get_session_messages(session_id, limit=limit)
        if not messages:
            return ""
        
        formatted = []
        for msg in messages:
            role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
            formatted.append(f"{role_emoji} {msg['content']}")
        
        return "\n\n".join(formatted)

    def _format_memory_results(self, results: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if not results:
            return ""
        
        formatted = []
        for result in results:
            content = result.get('content', '')
            formatted.append(content)
        
        return "\n\n---\n\n".join(formatted)

    def start_new_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å js_bridge)"""
        self.session_id = self.create_session(title)
        return self.session_id

    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ (–∞–ª–∏–∞—Å –¥–ª—è get_stats)"""
        stats = self.get_stats()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        stats.update({
            'current_session': self.session_id,
            'memory_available': True,
            'recent_messages': len(self.get_session_messages(self.session_id, limit=10))
        })
        return stats

    def save_chat_exchange(self, user_msg_or_session: str, ai_response_or_user: str, ai_response: Optional[str] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        –ï—Å–ª–∏ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response) - –Ω–æ–≤—ã–π API
        –ï—Å–ª–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(user_msg, ai_response) - —Å—Ç–∞—Ä—ã–π API –¥–ª—è js_bridge
        """
        try:
            if ai_response is None:
                # –°—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(user_msg, ai_response)
                user_message = user_msg_or_session
                ai_message = ai_response_or_user
                session_id = self.session_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            else:
                # –ù–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response)  
                session_id = user_msg_or_session
                user_message = ai_response_or_user
                ai_message = ai_response
            
            self.add_message(session_id, "user", user_message)
            self.add_message(session_id, "assistant", ai_message)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_memory_manager = None

def get_memory_manager() -> SimpleMemoryManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _memory_manager
    if _memory_manager is None:
        _memory_manager = SimpleMemoryManager()
    return _memory_manager


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class TxtAIMemoryManager(SimpleMemoryManager):
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    pass


""" if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Simple Memory Manager...")
    
    manager = SimpleMemoryManager()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = manager.create_session("–¢–µ—Å—Ç txtai")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    manager.add_message(session_id, "user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π?")
    manager.add_message(session_id, "assistant", "–û—Ç–ª–∏—á–Ω–æ! txtai —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ GopiAI")
    manager.add_message(session_id, "user", "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    results = manager.search_memory("txtai –ø–æ–∏—Å–∫")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
print("üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!") """