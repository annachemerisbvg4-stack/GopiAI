"""
üß† –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è GopiAI –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ similarity.py - –Ω–∏–∫–∞–∫–æ–≥–æ –æ–≤–µ—Ä–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞!
"""

import json
import uuid
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å txtai
try:
    from txtai.embeddings import Embeddings
    TXTAI_AVAILABLE = True
except ImportError:
    TXTAI_AVAILABLE = False
    print("‚ö†Ô∏è txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai sentence-transformers")

class SimpleMemoryManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai"""
    
    def __init__(self, data_dir: str = "conversations"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
        self.chats_file = self.data_dir / "chats.json"
        
        # –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        self.chats = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.sessions = {}  # –°–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π
        
        # txtai embeddings (–∫–∞–∫ –≤ similarity.py)
        if TXTAI_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å —á—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–µ
            self.embeddings = Embeddings({"path": "sentence-transformers/nli-mpnet-base-v2"})
            print("‚úÖ txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.embeddings = None
            print("‚ö†Ô∏è txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ–∏—Å–∫–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._load_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.session_id = "default_session"  # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        if self.chats_file.exists():
            try:
                with open(self.chats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.chats = data.get('chats', [])
                    self.sessions = data.get('sessions', {})
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chats)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        try:
            data = {
                'chats': self.chats,
                'sessions': self.sessions
            }
            with open(self.chats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def create_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            'id': session_id,
            'title': title,
            'created_at': datetime.now().isoformat(),
            'message_count': 0
        }
        self._save_data()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {title}")
        return session_id
    
    def add_message(self, session_id: str, role: str, content: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if session_id not in self.sessions:
            # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            self.sessions[session_id] = {
                'id': session_id,
                'title': 'Auto Session',
                'created_at': datetime.now().isoformat(),
                'message_count': 0
            }
        
        message_id = str(uuid.uuid4())
        message = {
            'id': message_id,
            'session_id': session_id,
            'role': role,
            'content': content,
            'timestamp': datetime.now().isoformat()
        }
        
        self.chats.append(message)
        self.sessions[session_id]['message_count'] += 1
        self._save_data()
        
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é {session_id}")
        return message_id
    
    def search_memory(self, query: str, limit: int = 5) -> List[Dict]:
        """
        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏
        –¢–æ—á–Ω–æ –∫–∞–∫ –≤ similarity.py!
        """
        if not self.embeddings or not self.chats:
            print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        
        try:
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∫ –≤ similarity.py)
            data = [chat['content'] for chat in self.chats]
            
            if not data:
                return []
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ (–º–µ—Ç–æ–¥ –∏–∑ similarity.py)
            similarities = self.embeddings.similarity(query, data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            for idx, score in similarities[:limit]:
                chat = self.chats[idx]
                results.append({
                    'content': chat['content'],
                    'score': score,
                    'session_id': chat['session_id'],
                    'role': chat['role'],
                    'timestamp': chat['timestamp']
                })
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_session_messages(self, session_id: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏"""
        messages = [chat for chat in self.chats if chat['session_id'] == session_id]
        return messages[-limit:] if limit else messages
    
    def get_all_sessions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        return list(self.sessions.values())
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        return {
            'total_messages': len(self.chats),
            'total_sessions': len(self.sessions),
            'txtai_available': self.embeddings is not None,
            'data_dir': str(self.data_dir)
        }
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API GopiAI
    
    def enrich_message(self, message: str) -> str:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            results = self.search_memory(message, limit=2)
            if results:
                context = "\n".join([f"‚Ä¢ {r['content'][:100]}..." for r in results])
                return f"{message}\n\nüìã –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
            return message
        except:
            return message
    
    def _format_recent_context(self, limit: int = 3) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å js_bridge)"""
        try:
            recent_messages = self.get_session_messages(self.session_id, limit=limit)
            if not recent_messages:
                return ""
            
            context_lines = []
            for msg in recent_messages[-limit:]:
                role = "üë§" if msg['role'] == 'user' else "ü§ñ"
                content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
                context_lines.append(f"{role} {content}")
            
            return "\n".join(context_lines)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""

    def start_new_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å js_bridge)"""
        self.session_id = self.create_session(title)
        return self.session_id

    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ (–∞–ª–∏–∞—Å –¥–ª—è get_stats)"""
        stats = self.get_stats()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        stats.update({
            'current_session': self.session_id,
            'memory_available': True,
            'recent_messages': len(self.get_session_messages(self.session_id, limit=10))
        })
        return stats

    def save_chat_exchange(self, user_msg_or_session: str, ai_response_or_user: str, ai_response: Optional[str] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        –ï—Å–ª–∏ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response) - –Ω–æ–≤—ã–π API
        –ï—Å–ª–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(user_msg, ai_response) - —Å—Ç–∞—Ä—ã–π API –¥–ª—è js_bridge
        """
        try:
            if ai_response is None:
                # –°—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(user_msg, ai_response)
                user_message = user_msg_or_session
                ai_message = ai_response_or_user
                session_id = self.session_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            else:
                # –ù–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response)  
                session_id = user_msg_or_session
                user_message = ai_response_or_user
                ai_message = ai_response
            
            self.add_message(session_id, "user", user_message)
            self.add_message(session_id, "assistant", ai_message)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_memory_manager = None

def get_memory_manager() -> SimpleMemoryManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _memory_manager
    if _memory_manager is None:
        _memory_manager = SimpleMemoryManager()
    return _memory_manager


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class TxtAIMemoryManager(SimpleMemoryManager):
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    pass


if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Simple Memory Manager...")
    
    manager = SimpleMemoryManager()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = manager.create_session("–¢–µ—Å—Ç txtai")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    manager.add_message(session_id, "user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π?")
    manager.add_message(session_id, "assistant", "–û—Ç–ª–∏—á–Ω–æ! txtai —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ GopiAI")
    manager.add_message(session_id, "user", "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    results = manager.search_memory("txtai –ø–æ–∏—Å–∫")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")