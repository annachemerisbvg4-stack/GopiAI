"""
üß† –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è GopiAI –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ similarity.py - –Ω–∏–∫–∞–∫–æ–≥–æ –æ–≤–µ—Ä–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞!
"""

import json
import os
import uuid
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional
import numpy as np


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å txtai
try:
    from txtai.embeddings import Embeddings
    TXTAI_AVAILABLE = True
except ImportError:
    TXTAI_AVAILABLE = False
    print(" txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai sentence-transformers")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FAISS
try:
    import faiss
    import numpy as np
    FAISS_AVAILABLE = True
except ImportError:
    FAISS_AVAILABLE = False
    print(" FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: pip install faiss-cpu")


class SimpleMemoryManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ txtai –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏."""

    def __init__(self, data_dir: str = "conversations"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)

        self.chats_file = self.data_dir / "chats.json"
        self.chats = []
        self.sessions = {}

        disable_embeddings = os.getenv('GOPI_DISABLE_EMBEDDINGS', 'false').lower() == 'true'
        self.embeddings = None

        if TXTAI_AVAILABLE and not disable_embeddings:
            try:
                print(" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è txtai embeddings...")
                embeddings_path = self.data_dir.joinpath("vectors").as_posix()
                self.embeddings = Embeddings({
                    "path": embeddings_path,
                    "model": "sentence-transformers/nli-mpnet-base-v2",
                    "content": True,
                    "objects": True,
                    "backend": "faiss" if FAISS_AVAILABLE else "annoy",
                })
                print(f" txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {self.embeddings.count()}")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ txtai: {e}")
        else:
            if disable_embeddings:
                print(" –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ GOPI_DISABLE_EMBEDDINGS")
            else:
                print(" txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ–∏—Å–∫–∞")

        self._load_data()

        if self.embeddings:
            self._migrate_old_chats_to_txtai()

        self.session_id = "default_session"

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        try:
            if self.chats_file.exists():
                with open(self.chats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.chats = data.get('chats', [])
                    self.sessions = data.get('sessions', {})
                    print(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chats)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ {len(self.sessions)} —Å–µ—Å—Å–∏–π")
            else:
                print(" –§–∞–π–ª —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
        except (json.JSONDecodeError, IOError) as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
            self.chats = []
            self.sessions = {}

    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        try:
            with open(self.chats_file, 'w', encoding='utf-8') as f:
                json.dump({'chats': self.chats, 'sessions': self.sessions}, f, ensure_ascii=False, indent=2)
        except IOError as e:
            print(f" –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")

    def _migrate_old_chats_to_txtai(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã –∏–∑ chats.json –≤ –∏–Ω–¥–µ–∫—Å txtai, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
        if not self.chats or not self.embeddings:
            return

        print(" –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ txtai...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            if self.embeddings.count() > 0:
                existing_ids = {str(row["id"]) for row in self.embeddings.search("select id from txtai", limit=self.embeddings.count() + 1)}
            else:
                existing_ids = set()
            
            new_data_to_index = []
            for chat in self.chats:
                if self._should_index_message(chat.get('content', ''), chat.get('role', '')):
                    if chat['id'] not in existing_ids:
                        new_data_to_index.append((chat['id'], chat, None)) # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            if new_data_to_index:
                print(f" –ù–∞–π–¥–µ–Ω—ã {len(new_data_to_index)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏. –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º...")
                self.embeddings.index(new_data_to_index)
                self.embeddings.save() # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                print(" –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            else:
                print(" –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –≤ –∏–Ω–¥–µ–∫—Å–µ.")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    def create_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            'id': session_id,
            'title': title,
            'created_at': datetime.now().isoformat(),
            'message_count': 0
        }
        self._save_data()
        return session_id

    def _should_index_message(self, content: str, role: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not content or len(content.strip()) < 10 or role in ['system', 'assistant']:
            return False
        return True

    def add_message(self, session_id: str, content: str, role: str = "user") -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –≤ –∏–Ω–¥–µ–∫—Å txtai."""
        message_id = str(uuid.uuid4())
        should_index = self._should_index_message(content, role)

        message = {
            'id': message_id,
            'session_id': session_id,
            'role': role,
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'should_index': should_index
        }
        self.chats.append(message)

        if session_id in self.sessions:
            self.sessions[session_id]['message_count'] += 1

        if should_index and self.embeddings:
            try:
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º (id, object, tags). txtai –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
                self.embeddings.index([(message_id, message, None)])
                self.embeddings.save()
                print(f" –°–æ–æ–±—â–µ–Ω–∏–µ '{content[:30]}...' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É txtai: {e}")

        self._save_data()
        return message_id

    def search(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º txtai."""
        if not self.embeddings or self.embeddings.count() == 0:
            print(" –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞.")
            return []

        try:
            # –í–∞–∂–Ω–æ: –¥–ª—è similar() –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
            safe_query = query.replace("'", "''")
            # –ò—â–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
            results = self.embeddings.search(f"select object, score from txtai where similar('{safe_query}') limit {limit}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º score –∫ –æ–±—ä–µ–∫—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            formatted_results = []
            for res in results:
                message_object = res['object']
                message_object['score'] = res['score']
                formatted_results.append(message_object)
            
            print(f" –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ txtai –¥–ª—è: '{query[:30]}...' ")
            return formatted_results
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ txtai: {e}")
            return []

    def get_session_messages(self, session_id: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏"""
        messages = [chat for chat in self.chats if chat['session_id'] == session_id]
        return messages[-limit:] if limit else messages
    
    def get_all_sessions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        return list(self.sessions.values())
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        vector_count = 0
        if self.embeddings:
            try:
                vector_count = self.embeddings.count()
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")

        return {
            'total_messages': len(self.chats),
            'total_sessions': len(self.sessions),
            'txtai_available': self.embeddings is not None,
            'vector_messages': vector_count,
            'faiss_available': FAISS_AVAILABLE,
            'data_dir': str(self.data_dir)
        }
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API GopiAI
    
    def enrich_message(self, message: str) -> str:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏.
        
        –î–æ–±–∞–≤–ª—è–µ—Ç:
        1. –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞)
        2. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–¥–æ 5)
            recent_messages = self._format_recent_messages(self.session_id, 5)
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É (–¥–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            memory_results = self.search(message, limit=3)
            memory_context = self._format_memory_results(memory_results)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
            parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            parts.append(message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            context_parts = []
            
            if recent_messages:
                context_parts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{recent_messages}")
            
            if memory_context:
                context_parts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–∞–º—è—Ç–∏:\n{memory_context}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if context_parts:
                parts.append("\n\n--- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ---\n" + "\n\n".join(context_parts))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                parts.append("–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Ç–≤–µ—Ç–µ.")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            enriched_message = "\n\n".join(parts)
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            enrichment_stats = {
                "original_length": len(message),
                "enriched_length": len(enriched_message),
                "memory_results": len(memory_results) if memory_results else 0,
                "has_recent_context": bool(recent_messages)
            }
            print(f"üß† Message enriched: {enrichment_stats}")
            
            return enriched_message
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"‚ùå Error enriching message: {e}")
            return message

    def _format_recent_messages(self, session_id: str, limit: int = 5) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        messages = self.get_session_messages(session_id, limit=limit)
        if not messages:
            return ""
        
        formatted = []
        for msg in messages:
            role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
            formatted.append(f"{role_emoji} {msg['content']}")
        
        return "\n\n".join(formatted)

    def _format_memory_results(self, results: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if not results:
            return ""
        
        formatted = []
        for result in results:
            content = result.get('content', '')
            formatted.append(content)
        
        return "\n\n---\n\n".join(formatted)

    def start_new_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å js_bridge)"""
        self.session_id = self.create_session(title)
        return self.session_id

    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ (–∞–ª–∏–∞—Å –¥–ª—è get_stats)"""
        stats = self.get_stats()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        stats.update({
            'current_session': self.session_id,
            'memory_available': True,
            'recent_messages': len(self.get_session_messages(self.session_id, limit=10))
        })
        return stats

    def save_chat_exchange(self, user_msg_or_session: str, ai_response_or_user: str, ai_response: Optional[str] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        –ï—Å–ª–∏ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response) - –Ω–æ–≤—ã–π API
        –ï—Å–ª–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: save_chat_exchange(user_msg, ai_response) - —Å—Ç–∞—Ä—ã–π API –¥–ª—è js_bridge
        """
        try:
            if ai_response is None:
                # –°—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(user_msg, ai_response)
                user_message = user_msg_or_session
                ai_message = ai_response_or_user
                session_id = self.session_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            else:
                # –ù–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: save_chat_exchange(session_id, user_msg, ai_response)  
                session_id = user_msg_or_session
                user_message = ai_response_or_user
                ai_message = ai_response
            
            self.add_message(session_id, "user", user_message)
            self.add_message(session_id, "assistant", ai_message)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_memory_manager = None

def get_memory_manager() -> SimpleMemoryManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _memory_manager
    if _memory_manager is None:
        _memory_manager = SimpleMemoryManager()
    return _memory_manager


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class TxtAIMemoryManager(SimpleMemoryManager):
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    pass


""" if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Simple Memory Manager...")
    
    manager = SimpleMemoryManager()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = manager.create_session("–¢–µ—Å—Ç txtai")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    manager.add_message(session_id, "user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π?")
    manager.add_message(session_id, "assistant", "–û—Ç–ª–∏—á–Ω–æ! txtai —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ GopiAI")
    manager.add_message(session_id, "user", "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    results = manager.search_memory("txtai –ø–æ–∏—Å–∫")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
print("üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!") """