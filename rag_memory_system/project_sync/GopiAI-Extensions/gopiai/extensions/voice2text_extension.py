"""
GopiAI Voice2Text Extension
===========================

–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å Whisper –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper
- –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
- –ü–µ—Ä–µ–≤–æ–¥ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —è–∑—ã–∫–∞
"""

import os
import sys
import threading
import wave
import tempfile
from pathlib import Path
from typing import Optional

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QTextEdit, QLabel, QComboBox, QProgressBar,
    QMessageBox, QCheckBox, QSpinBox, QGroupBox
)
from PySide6.QtCore import Qt, QTimer, Signal, QThread
from PySide6.QtGui import QFont

try:
    import pyaudio
    import numpy as np
    AUDIO_AVAILABLE = True
except ImportError:
    AUDIO_AVAILABLE = False

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å whisper
    import whisper
    WHISPER_AVAILABLE = True
except ImportError:
    WHISPER_AVAILABLE = False


class AudioRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    
    def __init__(self):
        self.is_recording = False
        self.frames = []
        self.audio = None
        self.stream = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
        self.chunk = 1024
        self.format = pyaudio.paInt16
        self.channels = 1
        self.rate = 16000  # Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å 16kHz
        
    def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if not AUDIO_AVAILABLE:
            raise Exception("PyAudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.audio = pyaudio.PyAudio()
        self.stream = self.audio.open(
            format=self.format,
            channels=self.channels,
            rate=self.rate,
            input=True,
            frames_per_buffer=self.chunk
        )
        
        self.is_recording = True
        self.frames = []
        
    def record_chunk(self):
        """–ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"""
        if self.is_recording and self.stream:
            data = self.stream.read(self.chunk)
            self.frames.append(data)
            return True
        return False
        
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        self.is_recording = False
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
        if self.audio:
            self.audio.terminate()
            
    def save_recording(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"""
        if not self.audio:
            raise RuntimeError("Audio interface is not initialized")
            
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.audio.get_sample_size(self.format))
            wf.setframerate(self.rate)
            wf.writeframes(b''.join(self.frames))


class WhisperThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper"""
    
    transcription_ready = Signal(str)
    error_occurred = Signal(str)
    
    def __init__(self, audio_file, model_path, language: Optional[str] = None):
        super().__init__()
        self.audio_file = audio_file
        self.model_path = model_path
        self.language = language if language is not None else "ru"
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        try:
            if WHISPER_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É whisper
                model = whisper.load_model("small")
                result = model.transcribe(self.audio_file, language=self.language)
                text = str(result["text"]).strip() if isinstance(result["text"], list) else result["text"].strip()
            else:
                # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ whisper –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                text = f"[–ó–ê–ì–õ–£–®–ö–ê] –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥: –∞—É–¥–∏–æ —Ñ–∞–π–ª {os.path.basename(self.audio_file)}"
                
            self.transcription_ready.emit(text)
            
        except Exception as e:
            self.error_occurred.emit(str(e))


class Voice2TextWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    text_transcribed = Signal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("voice2text")
        self.setWindowTitle("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
        
        # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        self.model_path = self._find_model_path()
        
        # –ê—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä
        self.recorder = AudioRecorder() if AUDIO_AVAILABLE else None
        self.recording_timer = QTimer()
        self.recording_timer.timeout.connect(self._update_recording)
        
        # –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.whisper_thread = None
        
        self._setup_ui()
        
    def _find_model_path(self):
        """–ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ Whisper"""
        # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
        current_dir = Path(__file__).parent
        model_path = current_dir / "Voice2Text_Extension" / "models" / "whisper" / "ggml-small.bin"
        
        if model_path.exists():
            return str(model_path)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        alt_paths = [
            Path(__file__).parent.parent / "Voice2Text_Extension" / "models" / "whisper" / "ggml-small.bin",
            Path("models/whisper/ggml-small.bin"),
        ]
        
        for path in alt_paths:
            if path.exists():
                return str(path)
                
        return None
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
        header.setObjectName("panelHeader")
        header.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        layout.addWidget(header)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        status_layout = QVBoxLayout(status_group)
        
        self.audio_status = QLabel("üî¥ –ê—É–¥–∏–æ: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ" if not AUDIO_AVAILABLE else "üü¢ –ê—É–¥–∏–æ: –ì–æ—Ç–æ–≤–æ")
        self.whisper_status = QLabel("üî¥ Whisper: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" if not WHISPER_AVAILABLE else "üü¢ Whisper: –ì–æ—Ç–æ–≤")
        self.model_status = QLabel(f"üü¢ –ú–æ–¥–µ–ª—å: –ù–∞–π–¥–µ–Ω–∞" if self.model_path else "üî¥ –ú–æ–¥–µ–ª—å: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        status_layout.addWidget(self.audio_status)
        status_layout.addWidget(self.whisper_status)
        status_layout.addWidget(self.model_status)
        layout.addWidget(status_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_layout = QVBoxLayout(settings_group)
        
        # –Ø–∑—ã–∫
        lang_layout = QHBoxLayout()
        lang_layout.addWidget(QLabel("–Ø–∑—ã–∫:"))
        self.language_combo = QComboBox()
        self.language_combo.addItems(["ru", "en", "auto"])
        self.language_combo.setCurrentText("ru")
        lang_layout.addWidget(self.language_combo)
        lang_layout.addStretch()
        settings_layout.addLayout(lang_layout)
        
        # –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞
        self.auto_insert_check = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä")
        self.auto_insert_check.setChecked(True)
        settings_layout.addWidget(self.auto_insert_check)
        
        layout.addWidget(settings_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        
        self.record_button = QPushButton("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.record_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #7f8c8d;
            }
        """)
        self.record_button.clicked.connect(self._toggle_recording)
        self.record_button.setEnabled(AUDIO_AVAILABLE)
        
        self.transcribe_button = QPushButton("üìù –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
        self.transcribe_button.clicked.connect(self._transcribe_file)
        
        controls_layout.addWidget(self.record_button)
        controls_layout.addWidget(self.transcribe_button)
        layout.addLayout(controls_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        result_layout = QVBoxLayout(result_group)
        
        self.result_text = QTextEdit()
        self.result_text.setPlaceholderText("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...")
        self.result_text.setMaximumHeight(150)
        result_layout.addWidget(self.result_text)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_buttons = QHBoxLayout()
        
        self.copy_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        self.copy_button.clicked.connect(self._copy_text)
        
        self.insert_button = QPushButton("üìù –í—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
        self.insert_button.clicked.connect(self._insert_text)
        
        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.clicked.connect(self.result_text.clear)
        
        result_buttons.addWidget(self.copy_button)
        result_buttons.addWidget(self.insert_button)
        result_buttons.addWidget(self.clear_button)
        result_layout.addLayout(result_buttons)
        
        layout.addWidget(result_group)
        layout.addStretch()
        
    def _toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        if not self.recorder:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        if not self.recorder.is_recording:
            self._start_recording()
        else:
            self._stop_recording()
            
    def _start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if not AUDIO_AVAILABLE or not self.recorder:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        try:
            self.recorder.start_recording()
            self.record_button.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            self.record_button.setStyleSheet("""
                QPushButton {
                    background-color: #27ae60;
                    color: white;
                    font-weight: bold;
                    padding: 10px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #229954;
                }
            """)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
            self.recording_timer.start(100)  # –∫–∞–∂–¥—ã–µ 100–º—Å
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", str(e))
            
    def _update_recording(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        if self.recorder and not self.recorder.record_chunk():
            self.recording_timer.stop()
            
    def _stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        self.recording_timer.stop()
        if self.recorder:
            self.recorder.stop_recording()          
        self.record_button.setText("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.record_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        temp_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
        if self.recorder:
            self.recorder.save_recording(temp_file.name)
            temp_file.close()
            self._process_audio_file(temp_file.name)
        else:
            temp_file.close()
            os.unlink(temp_file.name)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")       
    def _transcribe_file(self):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        from PySide6.QtWidgets import QFileDialog
        
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª", 
            "", 
            "–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (*.wav *.mp3 *.m4a *.ogg);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        
        if file_path:
            self._process_audio_file(file_path)
            
    def _process_audio_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        if not self.model_path and not WHISPER_AVAILABLE:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–æ–¥–µ–ª—å Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate progress
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        language = self.language_combo.currentText()
        if language == "auto":
            language = None
            
        self.whisper_thread = WhisperThread(file_path, self.model_path, language)
        self.whisper_thread.transcription_ready.connect(self._on_transcription_ready)
        self.whisper_thread.error_occurred.connect(self._on_transcription_error)
        self.whisper_thread.finished.connect(lambda: self.progress_bar.setVisible(False))
        self.whisper_thread.start()
        
    def _on_transcription_ready(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        self.result_text.setPlainText(text)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if self.auto_insert_check.isChecked():
            self._insert_text()
            
        self.text_transcribed.emit(text)
        
    def _on_transcription_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏", error)
        
    def _copy_text(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        from PySide6.QtWidgets import QApplication
        
        text = self.result_text.toPlainText()
        if text:
            QApplication.clipboard().setText(text)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
    def _insert_text(self):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        text = self.result_text.toPlainText()
        if text:
            # –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
            main_window = self.window()
            try:
                # Try to get the current editor through the main window's interface
                if hasattr(main_window, 'get_current_editor'):
                    current_editor = main_window.get_current_editor()
                    if current_editor and hasattr(current_editor, 'insertPlainText'):
                        current_editor.insertPlainText(text + " ")
                        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
                        return
                # Fallback to traditional tab structure if available
                elif hasattr(main_window, 'tab_document') and hasattr(main_window.tab_document, 'tab_widget'):
                    current_tab = main_window.tab_document.tab_widget.currentWidget()
                    if current_tab and hasattr(current_tab, 'insertPlainText'):
                        current_tab.insertPlainText(text + " ")
                        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
                        return
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except AttributeError:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def init_voice2text_extension(main_window):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    
    Args:
        main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        voice_widget = Voice2TextWidget()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if hasattr(main_window, 'add_dock_widget'):
            main_window.add_dock_widget("voice2text", voice_widget, "bottom")
            
        print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
        print(f"   üé§ –ê—É–¥–∏–æ: {'–î–æ—Å—Ç—É–ø–Ω–æ' if AUDIO_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyaudio)'}")
        print(f"   üß† Whisper: {'–î–æ—Å—Ç—É–ø–µ–Ω' if WHISPER_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openai-whisper)'}")
        print(f"   üìÅ –ú–æ–¥–µ–ª—å: {'–ù–∞–π–¥–µ–Ω–∞' if voice_widget.model_path else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
        return False


def auto_init(main_window):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    return init_voice2text_extension(main_window)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    from PySide6.QtWidgets import QApplication
    
    app = QApplication([])
    widget = Voice2TextWidget()
    widget.show()
    app.exec()
