"""
–ú–µ–Ω–µ–¥–∂–µ—Ä RAG —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å GopiAI –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
"""

import os
import sys
import time
import atexit
import logging
import threading
import subprocess
from pathlib import Path
from typing import Optional
import requests

logger = logging.getLogger(__name__)


class RAGServerManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞
    –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI
    """
    
    def __init__(self, 
                 port: int = 8080,
                 host: str = "127.0.0.1",
                 auto_start: bool = True,
                 silent: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            port: –ü–æ—Ä—Ç –¥–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞
            host: –•–æ—Å—Ç –¥–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞  
            auto_start: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            silent: –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤)
        """
        self.port = port
        self.host = host
        self.auto_start = auto_start
        self.silent = silent
        self.server_process: Optional[subprocess.Popen] = None
        self.server_thread: Optional[threading.Thread] = None
        self.is_running = False
        self.base_url = f"http://{host}:{port}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
        self.current_dir = Path(__file__).parent
        self.python_executable = sys.executable
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self.stop_server)
        
        if self.auto_start:
            self.start_server()
    
    def is_server_running(self, timeout: float = 2.0) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ RAG —Å–µ—Ä–≤–µ—Ä
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
        """
        try:
            response = requests.get(f"{self.base_url}/health", timeout=timeout)
            return response.status_code == 200
        except Exception:
            return False
    
    def start_server(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        if self.is_server_running():
            if not self.silent:
                print(f"üß† RAG —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.base_url}")
            self.is_running = True
            return True
        
        try:
            if not self.silent:
                print(f"üöÄ –ó–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.base_url}...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            server_script = self.current_dir / "run_server.py"
            
            if not server_script.exists():
                # –ï—Å–ª–∏ run_server.py –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º api.py –Ω–∞–ø—Ä—è–º—É—é
                server_script = self.current_dir / "api.py"
            
            if not server_script.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            env = os.environ.copy()
            env['PYTHONPATH'] = str(self.current_dir.parent)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
            
            # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω silent —Ä–µ–∂–∏–º
            stdout = subprocess.DEVNULL if self.silent else None
            stderr = subprocess.DEVNULL if self.silent else None
            
            self.server_process = subprocess.Popen(
                [self.python_executable, str(server_script), "--port", str(self.port), "--host", self.host],
                cwd=str(self.current_dir),
                env=env,
                stdout=stdout,
                stderr=stderr
            )
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
            max_attempts = 15  # 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            for attempt in range(max_attempts):
                time.sleep(1)
                if self.is_server_running():
                    self.is_running = True
                    if not self.silent:
                        print(f"‚úÖ RAG —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.base_url}")
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                if self.server_process.poll() is not None:
                    logger.error(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {self.server_process.returncode}")
                    return False
            
            logger.warning(f"‚ö†Ô∏è RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ {self.base_url}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server_process and self.server_process.poll() is None:
            try:
                if not self.silent:
                    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞...")
                self.server_process.terminate()
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                try:
                    self.server_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    self.server_process.kill()
                    self.server_process.wait()
                
                if not self.silent:
                    print("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            finally:
                self.server_process = None
                self.is_running = False
    
    def restart_server(self) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω
        """
        if not self.silent:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞...")
        self.stop_server()
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        return self.start_server()
    
    def get_server_status(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        """
        status = {
            "running": self.is_running,
            "url": self.base_url,
            "process_alive": self.server_process.poll() is None if self.server_process else False,
            "responding": self.is_server_running(timeout=1.0)
        }
        
        if status["responding"]:
            try:
                response = requests.get(f"{self.base_url}/stats", timeout=2)
                if response.status_code == 200:
                    status["stats"] = response.json()
            except Exception:
                pass
        
        return status


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
_global_server_manager: Optional[RAGServerManager] = None


def start_rag_server(port: int = 8080, host: str = "127.0.0.1", silent: bool = True) -> RAGServerManager:
    """
    –ó–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py)
    
    Args:
        port: –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
        host: –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        silent: –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä RAGServerManager
    """
    global _global_server_manager
    
    if _global_server_manager is None:
        _global_server_manager = RAGServerManager(port=port, host=host, silent=silent)
    
    return _global_server_manager


def stop_rag_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    global _global_server_manager
    
    if _global_server_manager:
        _global_server_manager.stop_server()
        _global_server_manager = None


def get_rag_server_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞
    
    Returns:
        –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
    """
    global _global_server_manager
    
    if _global_server_manager:
        return _global_server_manager.get_server_status()
    
    return {
        "running": False,
        "error": "RAG server manager not initialized"
    }


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def _cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è atexit"""
    stop_rag_server()


atexit.register(_cleanup)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Server Manager...")
    
    manager = RAGServerManager(silent=False)
    
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:")
    status = manager.get_server_status()
    for key, value in status.items():
        print(f"  {key}: {value}")
    
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
    time.sleep(5)
    
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    manager.stop_server()
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")