#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ txtchat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GopiAI

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ë–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
2. RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω
5. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import os
import sys
import time
import json
import asyncio
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –∞–≥–µ–Ω—Ç—É
sys.path.append(str(Path(__file__).parent))

from gopiai_agent import GopiAIAgent, create_agent, quick_chat

def test_rag_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG —Å–µ—Ä–≤–µ—Ä—É"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG —Å–µ—Ä–≤–µ—Ä—É...")
    
    try:
        response = requests.get("http://127.0.0.1:5051/api/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data.get('indexed_documents', 0)}")
            return True
        else:
            print(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RAG —Å–µ—Ä–≤–µ—Ä—É")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python rag_server.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG: {e}")
        return False

def test_agent_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        agent = create_agent()
        print(f"‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {agent.config['agent']['name']}")
        print(f"   –ü–µ—Ä—Å–æ–Ω–∞: {agent.config['agent']['persona']}")
        print(f"   RAG –≤–∫–ª—é—á–µ–Ω: {agent.config['rag']['enabled']}")
        print(f"   –ö—ç—à –≤–∫–ª—é—á–µ–Ω: {agent.config['cache']['enabled']}")
        return agent
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

def test_health_check(agent):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    print("\nü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        health = agent.health_check()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {health['agent_status']}")
        print(f"   RAG —Å—Ç–∞—Ç—É—Å: {health['rag_status']}")
        print(f"   –¢–µ–∫—É—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞: {health['current_persona']}")
        
        metrics = health['metrics']
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['total_requests']}")
        print(f"   RAG –≤—ã–∑–æ–≤–æ–≤: {metrics['rag_calls']}")
        print(f"   –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {metrics['cache_hits']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False

def test_basic_messages(agent):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n   –¢–µ—Å—Ç {i}: '{message}'")
        try:
            start_time = time.time()
            result = agent.process_message(message)
            processing_time = time.time() - start_time
            
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.3f}—Å")
            print(f"   üìù –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
            print(f"   üß† RAG –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result['metadata']['rag_used']}")
            print(f"   üíæ –ò–∑ –∫—ç—à–∞: {result['metadata']['cache_hit']}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_rag_context_enrichment(agent):
    """–¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ RAG"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    # –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ RAG
    rag_test_messages = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ CrewAI?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ multi-agent —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç GopiAI?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG?"
    ]
    
    for i, message in enumerate(rag_test_messages, 1):
        print(f"\n   RAG —Ç–µ—Å—Ç {i}: '{message}'")
        try:
            result = agent.process_message(message)
            
            context_used = result.get('context_used')
            rag_used = result['metadata']['rag_used']
            
            if rag_used and context_used:
                print(f"   ‚úÖ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω ({len(context_used)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"   üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_used[:150]}...")
            elif rag_used and not context_used:
                print(f"   ‚ö†Ô∏è RAG –≤—ã–∑–≤–∞–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ÑπÔ∏è RAG –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_persona_switching(agent):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω...")
    
    personas_to_test = ["technical_expert", "creative_writer", "helpful_assistant"]
    test_message = "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏"
    
    for persona in personas_to_test:
        print(f"\n   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É: {persona}")
        
        if agent.switch_persona(persona):
            print(f"   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {persona}")
            
            try:
                result = agent.process_message(test_message)
                response = result['response']
                
                print(f"   üìù –û—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ {persona}: {response[:100]}...")
                print(f"   üå°Ô∏è Temperature: {agent.config['personas'][persona]['temperature']}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É")

def test_caching(agent):
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    test_message = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∞"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–π—Ç–∏ –≤ RAG)
    print("   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞):")
    result1 = agent.process_message(test_message)
    cache_hit1 = result1['metadata']['cache_hit']
    rag_used1 = result1['metadata']['rag_used']
    
    print(f"   üì§ –ò–∑ –∫—ç—à–∞: {cache_hit1}")
    print(f"   üß† RAG –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {rag_used1}")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
    print("\n   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º):")
    result2 = agent.process_message(test_message)
    cache_hit2 = result2['metadata']['cache_hit']
    rag_used2 = result2['metadata']['rag_used']
    
    print(f"   üì§ –ò–∑ –∫—ç—à–∞: {cache_hit2}")
    print(f"   üß† RAG –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {rag_used2}")
    
    if cache_hit2 and not cache_hit1:
        print("   ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("   ‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")

def test_error_handling(agent):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    error_test_cases = [
        ("", "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("x" * 10000, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
    ]
    
    for message, description in error_test_cases:
        print(f"\n   –¢–µ—Å—Ç: {description}")
        try:
            result = agent.process_message(message)
            
            if "error" in result:
                print(f"   ‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result['error']}")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def print_final_metrics(agent):
    """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞:")
    print("="*50)
    
    metrics = agent.get_metrics()
    
    for key, value in metrics.items():
        if key == "avg_response_time":
            print(f"   {key}: {value:.3f}s")
        elif key == "rag_usage_rate":
            print(f"   {key}: {value:.1f}%")
        else:
            print(f"   {key}: {value}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ txtchat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GopiAI")
    print("="*60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–µ—Ä
    rag_available = test_rag_server_connection()
    
    # 2. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = test_agent_initialization()
    if not agent:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    test_health_check(agent)
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_basic_messages(agent)
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω)
    if rag_available:
        test_rag_context_enrichment(agent)
    else:
        print("\n‚ö†Ô∏è RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º RAG —Ç–µ—Å—Ç—ã")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—ã
    test_persona_switching(agent)
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_caching(agent)
    
    # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    test_error_handling(agent)
    
    # 9. –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print_final_metrics(agent)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π LLM –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω—ã –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
    print("3. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç")

if __name__ == "__main__":
    main()
