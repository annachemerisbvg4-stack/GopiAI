"""
API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG Memory —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ—Å—Ç–æ–π REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
"""
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from typing import List, Optional
import uvicorn
from datetime import datetime
import json

from memory_manager import RAGMemoryManager
from models import ConversationSession, MessageRole, SearchResult, MemoryStats, CreateSessionRequest, AddMessageRequest

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="GopiAI RAG Memory API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ GopiAI",
    version="1.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
memory_manager = RAGMemoryManager()

@app.get("/", response_class=HTMLResponse)
async def get_dashboard():
    """–ü—Ä–æ—Å—Ç–∞—è –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    stats = memory_manager.get_memory_stats()
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>GopiAI RAG Memory Dashboard</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .card {{ background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
            .stats-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }}
            .stat-item {{ text-align: center; }}
            .stat-number {{ font-size: 2em; font-weight: bold; color: #007acc; }}
            .stat-label {{ color: #666; margin-top: 5px; }}
            h1 {{ color: #333; text-align: center; }}
            h2 {{ color: #555; border-bottom: 2px solid #007acc; padding-bottom: 10px; }}
            .search-form {{ margin: 20px 0; }}
            .search-input {{ width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px; }}
            .search-button {{ background: #007acc; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; }}
            .search-button:hover {{ background: #005999; }}
            .tag {{ background: #e1f5fe; color: #0277bd; padding: 4px 8px; border-radius: 4px; margin: 2px; display: inline-block; font-size: 0.9em; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üß† GopiAI RAG Memory Dashboard</h1>
            
            <div class="card">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏</h2>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">{stats.total_sessions}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{stats.total_messages}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{stats.total_documents}</div>
                        <div class="stat-label">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{stats.storage_size_mb:.1f} –ú–ë</div>
                        <div class="stat-label">–†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</div>
                    </div>
                </div>
                
                {f'''
                <div style="margin-top: 20px;">
                    <strong>–ü–µ—Ä–∏–æ–¥:</strong> 
                    {stats.oldest_session.strftime("%d.%m.%Y") if stats.oldest_session else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"} - 
                    {stats.newest_session.strftime("%d.%m.%Y") if stats.newest_session else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
                </div>
                ''' if stats.oldest_session else ''}
                
                {f'''
                <div style="margin-top: 15px;">
                    <strong>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:</strong><br>
                    {"".join([f'<span class="tag">{tag}</span>' for tag in stats.most_active_tags[:10]])}
                </div>
                ''' if stats.most_active_tags else ''}
            </div>
            
            <div class="card">
                <h2>üîç –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏</h2>
                <div class="search-form">
                    <input type="text" id="searchQuery" class="search-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤...">
                    <button onclick="searchMemory()" class="search-button">–ü–æ–∏—Å–∫</button>
                </div>
                <div id="searchResults"></div>
            </div>
            
            <div class="card">
                <h2>‚ö° API Endpoints</h2>
                <ul>
                    <li><strong>GET /stats</strong> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</li>
                    <li><strong>POST /sessions</strong> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é</li>
                    <li><strong>POST /sessions/{{session_id}}/messages</strong> - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
                    <li><strong>GET /search?q={{query}}</strong> - –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö</li>
                    <li><strong>GET /sessions/{{session_id}}</strong> - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä</li>
                </ul>
            </div>
        </div>
        
        <script>
            async function searchMemory() {{
                const query = document.getElementById('searchQuery').value;
                if (!query.trim()) return;
                
                try {{
                    const response = await fetch(`/search?q=${{encodeURIComponent(query)}}`);
                    const results = await response.json();
                    
                    const resultsDiv = document.getElementById('searchResults');
                    if (results.length === 0) {{
                        resultsDiv.innerHTML = '<p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
                        return;
                    }}
                    
                    let html = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</h3>';
                    results.forEach(result => {{
                        html += `
                            <div style="border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 4px;">
                                <h4>${{result.title}} <span style="color: #666; font-size: 0.9em;">(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${{(result.relevance_score * 100).toFixed(1)}}%)</span></h4>
                                <p>${{result.context_preview}}</p>
                                <small>–î–∞—Ç–∞: ${{new Date(result.timestamp).toLocaleDateString('ru-RU')}} | –¢–µ–≥–∏: ${{result.tags.join(', ')}}</small>
                            </div>
                        `;
                    }});
                    resultsDiv.innerHTML = html;
                }} catch (error) {{
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                    document.getElementById('searchResults').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</p>';
                }}
            }}
            
            // –ü–æ–∏—Å–∫ –ø–æ Enter
            document.getElementById('searchQuery').addEventListener('keypress', function(e) {{
                if (e.key === 'Enter') {{
                    searchMemory();
                }}
            }});
        </script>
    </body>
    </html>
    """
    return html_content

@app.get("/stats")
async def get_stats() -> MemoryStats:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏"""
    return memory_manager.get_memory_stats()

@app.post("/sessions")
async def create_session(request: CreateSessionRequest) -> dict:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    try:
        session = memory_manager.create_session(request.title, request.project_context, request.tags)
        return {"session_id": session.session_id, "message": "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/sessions/{session_id}/messages")
async def add_message(session_id: str, request: AddMessageRequest) -> dict:
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é"""
    try:
        message = memory_manager.add_message(session_id, request.role, request.content, request.metadata)
        return {"message_id": message.id, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/search")
async def search_conversations(q: str, limit: int = 5) -> List[SearchResult]:
    """–ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö"""
    if not q.strip():
        raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
    
    try:
        results = memory_manager.search_conversations(q, limit)
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/sessions/{session_id}")
async def get_session(session_id: str) -> Optional[ConversationSession]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é"""
    session = memory_manager.get_conversation_history(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return session

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

def start_server(host: str = "127.0.0.1", port: int = 8080):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ RAG Memory API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{host}:{port}")
    print(f"üìä Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}:{port}")
    print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{host}:{port}/docs")
    
    uvicorn.run(app, host=host, port=port)

if __name__ == "__main__":
    start_server()
