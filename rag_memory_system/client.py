"""
–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG Memory —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json
from datetime import datetime
from typing import List, Optional

class RAGMemoryClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å RAG Memory API"""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8080"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
    
    def create_conversation(self, title: str, project_context: Optional[str] = None, tags: Optional[List[str]] = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        data = {"title": title}
        if project_context:
            data["project_context"] = project_context
        if tags:
            data["tags"] = tags
        
        response = self.session.post(f"{self.base_url}/sessions", params=data)
        response.raise_for_status()
        return response.json()["session_id"]
    
    def add_message(self, session_id: str, role: str, content: str, metadata: Optional[dict] = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        data = {
            "role": role,
            "content": content,
            "metadata": metadata or {}
        }
        
        response = self.session.post(f"{self.base_url}/sessions/{session_id}/messages", json=data)
        response.raise_for_status()
        return response.json()
    
    def search_memory(self, query: str, limit: int = 5) -> List[dict]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
        params = {"q": query, "limit": limit}
        response = self.session.get(f"{self.base_url}/search", params=params)
        response.raise_for_status()
        return response.json()
    
    def get_conversation(self, session_id: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        response = self.session.get(f"{self.base_url}/sessions/{session_id}")
        response.raise_for_status()
        return response.json()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        response = self.session.get(f"{self.base_url}/stats")
        response.raise_for_status()
        return response.json()

def demo_conversation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å RAG Memory —Å–∏—Å—Ç–µ–º–æ–π"""
    print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG Memory —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    client = RAGMemoryClient()
    
    try:
        # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health = client.session.get("http://127.0.0.1:8080/health").json()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {health['status']}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        session_id = client.create_conversation(
            title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã",
            project_context="GopiAI-Core",
            tags=["—Ç–µ—Å—Ç", "rag", "–ø–∞–º—è—Ç—å"]
        )
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä: {session_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        client.add_message(session_id, "user", 
                          "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–∏—Ä—É—é –Ω–æ–≤—É—é RAG Memory —Å–∏—Å—Ç–µ–º—É –¥–ª—è GopiAI. –ö–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        
        client.add_message(session_id, "assistant", 
                          "–ü—Ä–∏–≤–µ—Ç! RAG Memory —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. "
                          "–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ChromaDB –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–∑–±–µ–∂–∞—Ç—å "
                          "–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.")
        
        client.add_message(session_id, "user", 
                          "–û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É GopiAI –∏ –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.")
        
        client.add_message(session_id, "assistant", 
                          "GopiAI –∏–º–µ–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:\n"
                          "- GopiAI-Core: –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∞–≥–µ–Ω—Ç—ã\n"
                          "- GopiAI-Extensions: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n"
                          "- GopiAI-Widgets: UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n"
                          "- GopiAI-Assets: —Ä–µ—Å—É—Ä—Å—ã –∏ –º–µ–¥–∏–∞\n"
                          "- GopiAI-App: –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        session_id2 = client.create_conversation(
            title="–û–±—Å—É–∂–¥–µ–Ω–∏–µ UI/UX —É–ª—É—á—à–µ–Ω–∏–π",
            project_context="GopiAI-Widgets",
            tags=["ui", "ux", "–¥–∏–∑–∞–π–Ω"]
        )
        
        client.add_message(session_id2, "user", 
                          "–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–∂–µ—Ç–æ–≤ GopiAI")
        
        client.add_message(session_id2, "assistant", 
                          "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è UI –≤–∏–¥–∂–µ—Ç–æ–≤ GopiAI —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
                          "1. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É\n"
                          "2. –£–ª—É—á—à–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
                          "3. –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"
                          "4. –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É")
        
        print("üì± –°–æ–∑–¥–∞–Ω –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä –ø—Ä–æ UI/UX")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
        print("-" * 30)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        results = client.search_memory("–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ GopiAI")
        print(f"–ó–∞–ø—Ä–æ—Å: '–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ GopiAI' -> –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(results, 1):
            print(f"  {i}. {result['title']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']:.2f})")
            print(f"     {result['context_preview'][:100]}...")
        print()
        
        # –ü–æ–∏—Å–∫ –ø–æ UI
        results = client.search_memory("—É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∏–¥–∂–µ—Ç–æ–≤")
        print(f"–ó–∞–ø—Ä–æ—Å: '—É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∏–¥–∂–µ—Ç–æ–≤' -> –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(results, 1):
            print(f"  {i}. {result['title']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']:.2f})")
            print(f"     {result['context_preview'][:100]}...")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = client.get_stats()
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  - –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats['total_sessions']}")
        print(f"  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
        print(f"  - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {stats['total_documents']}")
        print(f"  - –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats['storage_size_mb']:.2f} –ú–ë")
        print(f"  - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(stats['most_active_tags'][:5])}")
        print()
        
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8080 –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python -m rag_memory_system.api")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    demo_conversation()
