{
  "session_id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27",
  "title": "GopiAI Chat Session 2025-06-17 05:04",
  "created_at": "2025-06-17 05:04:47.174754",
  "updated_at": "2025-06-17 05:26:39.680789",
  "messages": [
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_1",
      "role": "user",
      "content": "–ø—Ä–∏–≤–µ—Ç!",
      "timestamp": "2025-06-17 05:05:27.158905",
      "metadata": {
        "timestamp": "2025-06-17T05:05:27.153706"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_2",
      "role": "assistant",
      "content": "–ü—Ä–∏–≤–µ—Ç! üëã \n\n–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
      "timestamp": "2025-06-17 05:05:27.406762",
      "metadata": {
        "timestamp": "2025-06-17T05:05:27.153706"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_3",
      "role": "user",
      "content": "–°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \"–î–µ—Ç–µ–∫—Ç–∏–≤ –ø–∞–º—è—Ç–∏\" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–æ–µ–π RAG-–ø–∞–º—è—Ç–∏, —Å–æ–≥–ª–∞—Å–µ–Ω?",
      "timestamp": "2025-06-17 05:08:04.837727",
      "metadata": {
        "timestamp": "2025-06-17T05:08:04.834727"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_4",
      "role": "assistant",
      "content": "–ö–æ–Ω–µ—á–Ω–æ, —Å–æ–≥–ª–∞—Å–µ–Ω! –ò–≥—Ä–∞ \"–î–µ—Ç–µ–∫—Ç–∏–≤ –ø–∞–º—è—Ç–∏\" –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n–Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏ –∞–Ω–∞–ª–∏–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞ - –∫–∞–∫ –º—ã –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å? –¢—ã –±—É–¥–µ—à—å –¥–∞–≤–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –≤ –≤–∏–¥—É?\n\n–î–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å! üéØ",
      "timestamp": "2025-06-17 05:08:04.942725",
      "metadata": {
        "timestamp": "2025-06-17T05:08:04.834727"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_5",
      "role": "user",
      "content": "–¢–∏–ø–∞ —Ç–æ–≥–æ üòÉ –ò–°–¢–û–†–ò–Ø 1:–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Ññ7 –Ω–∞ 3-–º —ç—Ç–∞–∂–µ. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã. –í—á–µ—Ä–∞ –≤ 15:30 –æ–Ω –∑–∞–±—ã–ª –±–ª–æ–∫–Ω–æ—Ç –≤ –∫–∞—Ñ–µ—Ç–µ—Ä–∏–∏ –∏ –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è. –û—Ö—Ä–∞–Ω–Ω–∏–∫ –ü–µ—Ç—Ä –Ω–∞—à–µ–ª –±–ª–æ–∫–Ω–æ—Ç –∏ –æ—Ç–Ω–µ—Å –µ–≥–æ –≤ –±—é—Ä–æ –Ω–∞—Ö–æ–¥–æ–∫ –Ω–∞ 1-–º —ç—Ç–∞–∂–µ.–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ –¥–µ—Ç–∞–ª–∏. –°–∫–∞–∂–∏, –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º?",
      "timestamp": "2025-06-17 05:10:22.364717",
      "metadata": {
        "timestamp": "2025-06-17T05:10:22.361719"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_6",
      "role": "assistant",
      "content": "–î–∞, –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º! üòä\n\n–Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:\n- –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Ññ7 –Ω–∞ 3-–º —ç—Ç–∞–∂–µ\n- –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ä–º—É–ª\n- –í—á–µ—Ä–∞ –≤ 15:30 –æ–Ω –∑–∞–±—ã–ª –±–ª–æ–∫–Ω–æ—Ç –≤ –∫–∞—Ñ–µ—Ç–µ—Ä–∏–∏ –∏ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è\n- –û—Ö—Ä–∞–Ω–Ω–∏–∫ –ü–µ—Ç—Ä –Ω–∞—à–µ–ª –±–ª–æ–∫–Ω–æ—Ç –∏ –æ—Ç–Ω–µ—Å –≤ –±—é—Ä–æ –Ω–∞—Ö–æ–¥–æ–∫ –Ω–∞ 1-–º —ç—Ç–∞–∂–µ\n\n–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏! üìù",
      "timestamp": "2025-06-17 05:10:22.658717",
      "metadata": {
        "timestamp": "2025-06-17T05:10:22.361719"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_7",
      "role": "user",
      "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ:1. –í –∫–∞–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä?",
      "timestamp": "2025-06-17 05:10:45.219120",
      "metadata": {
        "timestamp": "2025-06-17T05:10:45.216120"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_8",
      "role": "assistant",
      "content": "–ú–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –û –∫–∞–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–µ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ?",
      "timestamp": "2025-06-17 05:10:45.442121",
      "metadata": {
        "timestamp": "2025-06-17T05:10:45.216120"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_9",
      "role": "user",
      "content": "2. –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –µ–≥–æ –±–ª–æ–∫–Ω–æ—Ç?",
      "timestamp": "2025-06-17 05:11:32.695201",
      "metadata": {
        "timestamp": "2025-06-17T05:11:32.689197"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_10",
      "role": "assistant",
      "content": "–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –∑–Ω–∞—é, –æ —á—å–µ–º –±–ª–æ–∫–Ω–æ—Ç–µ –∏–¥–µ—Ç —Ä–µ—á—å. –í –Ω–∞—à–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–ª—Å—è –Ω–∏–∫—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, —á–µ–π –±–ª–æ–∫–Ω–æ—Ç –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–ø–∏—Å–∞—Ç—å.\n\n–ï—Å–ª–∏ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É –±–ª–æ–∫–Ω–æ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫–Ω–∏–≥–∏, —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–æ–º –∏–º–µ–Ω–Ω–æ –∏–¥–µ—Ç —Ä–µ—á—å. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –¥–∞—Ç—å –≤–∞–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.",
      "timestamp": "2025-06-17 05:11:32.987199",
      "metadata": {
        "timestamp": "2025-06-17T05:11:32.689197"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_11",
      "role": "user",
      "content": "–ê –≤–æ—Ç –Ω–∞—à —Ç–µ–∫—É—â–∏–π —á–∞—Ç: System05:04:49üß† AI –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!üë§ You05:05:11–ø—Ä–∏–≤–µ—Ç!ü§ñ Assistantclaude-sonnet-405:05:26–ü—Ä–∏–≤–µ—Ç! üëã–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?üë§ You05:07:55–°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \"–î–µ—Ç–µ–∫—Ç–∏–≤ –ø–∞–º—è—Ç–∏\" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–æ–µ–π RAG-–ø–∞–º—è—Ç–∏, —Å–æ–≥–ª–∞—Å–µ–Ω?ü§ñ Assistantclaude-sonnet-405:08:01–ö–æ–Ω–µ—á–Ω–æ, —Å–æ–≥–ª–∞—Å–µ–Ω! –ò–≥—Ä–∞ \"–î–µ—Ç–µ–∫—Ç–∏–≤ –ø–∞–º—è—Ç–∏\" –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üïµÔ∏è‚Äç‚ôÇÔ∏è–Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏ –∞–Ω–∞–ª–∏–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞ - –∫–∞–∫ –º—ã –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å? –¢—ã –±—É–¥–µ—à—å –¥–∞–≤–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –≤ –≤–∏–¥—É?–î–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å! üéØüë§ You05:10:14–¢–∏–ø–∞ —Ç–æ–≥–æ üòÉ –ò–°–¢–û–†–ò–Ø 1:–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Ññ7 –Ω–∞ 3-–º —ç—Ç–∞–∂–µ. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã. –í—á–µ—Ä–∞ –≤ 15:30 –æ–Ω –∑–∞–±—ã–ª –±–ª–æ–∫–Ω–æ—Ç –≤ –∫–∞—Ñ–µ—Ç–µ—Ä–∏–∏ –∏ –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è. –û—Ö—Ä–∞–Ω–Ω–∏–∫ –ü–µ—Ç—Ä –Ω–∞—à–µ–ª –±–ª–æ–∫–Ω–æ—Ç –∏ –æ—Ç–Ω–µ—Å –µ–≥–æ –≤ –±—é—Ä–æ –Ω–∞—Ö–æ–¥–æ–∫ –Ω–∞ 1-–º —ç—Ç–∞–∂–µ.–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ –¥–µ—Ç–∞–ª–∏. –°–∫–∞–∂–∏, –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º?ü§ñ Assistantclaude-sonnet-405:10:18–î–∞, –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º! üòä–Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:- –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Ññ7 –Ω–∞ 3-–º —ç—Ç–∞–∂–µ- –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ä–º—É–ª- –í—á–µ—Ä–∞ –≤ 15:30 –æ–Ω –∑–∞–±—ã–ª –±–ª–æ–∫–Ω–æ—Ç –≤ –∫–∞—Ñ–µ—Ç–µ—Ä–∏–∏ –∏ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è- –û—Ö—Ä–∞–Ω–Ω–∏–∫ –ü–µ—Ç—Ä –Ω–∞—à–µ–ª –±–ª–æ–∫–Ω–æ—Ç –∏ –æ—Ç–Ω–µ—Å –≤ –±—é—Ä–æ –Ω–∞—Ö–æ–¥–æ–∫ –Ω–∞ 1-–º —ç—Ç–∞–∂–µ–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏! üìùüë§ You05:10:41–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ:1. –í –∫–∞–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä?ü§ñ Assistantclaude-sonnet-405:10:44–ú–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –û –∫–∞–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–µ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ?üë§ You05:11:262. –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –µ–≥–æ –±–ª–æ–∫–Ω–æ—Ç?ü§ñ Assistantclaude-sonnet-405:11:30–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –∑–Ω–∞—é, –æ —á—å–µ–º –±–ª–æ–∫–Ω–æ—Ç–µ –∏–¥–µ—Ç —Ä–µ—á—å. –í –Ω–∞—à–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–ª—Å—è –Ω–∏–∫—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, —á–µ–π –±–ª–æ–∫–Ω–æ—Ç –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–ø–∏—Å–∞—Ç—å.–ï—Å–ª–∏ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É –±–ª–æ–∫–Ω–æ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫–Ω–∏–≥–∏, —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–æ–º –∏–º–µ–Ω–Ω–æ –∏–¥–µ—Ç —Ä–µ—á—å. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –¥–∞—Ç—å –≤–∞–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.",
      "timestamp": "2025-06-17 05:12:25.742497",
      "metadata": {
        "timestamp": "2025-06-17T05:12:25.739498"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_12",
      "role": "assistant",
      "content": "–ö—Ä–∞—Å–Ω—ã–π.\n\n(–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—É—Ç–∞–Ω–∏—Ü—É –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö - —è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–Ω—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –ò–≤–∞–Ω–æ–≤–∞ –∏ –µ–≥–æ –∫—Ä–∞—Å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç! üòÖ)",
      "timestamp": "2025-06-17 05:12:26.499167",
      "metadata": {
        "timestamp": "2025-06-17T05:12:25.739498"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_13",
      "role": "user",
      "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞ chat.js - –æ–¥–Ω—É. –ì–ª–∞–≤–Ω–æ–µ, —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –Ω–∏—á–µ–≥–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Å–ª–æ–º–∞—Ç—å. –°–ø—Ä–∞–≤–∏—à—å—Å—è? –í–æ—Ç –≤–µ—Ä—Å–∏—è –ø–µ—Ä–≤–∞—è: // JavaScript –¥–ª—è GopiAI WebView Chat —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ puter.jsfunction waitForPuter() {    return new Promise((resolve, reject) => {        if (typeof puter !== 'undefined') {            resolve();        } else {            let attempts = 0;            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥            const checkInterval = setInterval(() => {                attempts++;                if (typeof puter !== 'undefined') {                    clearInterval(checkInterval);                    resolve();                } else if (attempts >= maxAttempts) {                    clearInterval(checkInterval);                    reject(new Error('puter.js failed to load'));                }            }, 100);        }    });}class GopiAIChatInterface {    constructor() {        this.bridge = null;        this.currentModel = 'claude-sonnet-4';        this.isStreaming = true;        this.autoScroll = true;        this.theme = 'dark';        this.chatHistory = [];        this.memoryEnabled = false; // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏                this.initializeElements();        this.initializeWebChannel();        this.setupEventListeners();        this.loadSettings();        this.initializePuter();    }        initializeElements() {        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã        this.messagesContainer = document.getElementById('chat-messages');        this.messageInput = document.getElementById('message-input');        this.sendButton = document.getElementById('send-btn');        this.modelSelect = document.getElementById('model-select');        this.typingIndicator = document.getElementById('typing-indicator');                // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.clearButton = document.getElementById('clear-btn');        this.exportButton = document.getElementById('export-btn');        this.settingsButton = document.getElementById('settings-btn');                // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞        this.settingsModal = document.getElementById('settings-modal');        this.exportModal = document.getElementById('export-modal');                // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫        this.streamToggle = document.getElementById('stream-toggle');        this.autoScrollToggle = document.getElementById('auto-scroll-toggle');        this.themeSelect = document.getElementById('theme-select');                // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞        this.exportFormatSelect = document.getElementById('export-format');        this.downloadButton = document.getElementById('download-btn');        this.copyButton = document.getElementById('copy-btn');        this.exportContent = document.getElementById('export-content');    }        async initializeWebChannel() {        if (typeof QWebChannel !== 'undefined' && typeof qt !== 'undefined') {            try {                await new Promise((resolve) => {                    new QWebChannel(qt.webChannelTransport, (channel) => {                        this.bridge = channel.objects.bridge;                        console.log('‚úÖ WebChannel bridge connected');                                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏                        this.checkMemoryAvailability();                                                resolve();                    });                });            } catch (error) {                console.error('‚ùå Error initializing WebChannel:', error);            }        } else {            console.warn('‚ö†Ô∏è QWebChannel not available');        }    }        async checkMemoryAvailability() {        if (this.bridge && typeof this.bridge.is_memory_available === 'function') {            try {                this.memoryEnabled = await this.bridge.is_memory_available();                console.log(${this.memoryEnabled ? 'üß†' : '‚ö†Ô∏è'} Memory system: ${this.memoryEnabled ? 'Available' : 'Not available'});                                if (this.memoryEnabled) {                    this.addSystemMessage('üß† AI –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!');                                        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏                    const stats = await this.getMemoryStats();                    if (stats && stats.total_conversations) {                        this.addSystemMessage(üìä –í –ø–∞–º—è—Ç–∏: ${stats.total_conversations} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, ${stats.total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π);                    }                }            } catch (error) {                console.error('Error checking memory availability:', error);                this.memoryEnabled = false;            }        }    }        async getMemoryStats() {        if (this.bridge && typeof this.bridge.get_memory_stats === 'function') {            try {                const statsJson = await this.bridge.get_memory_stats();                return JSON.parse(statsJson);            } catch (error) {                console.error('Error getting memory stats:', error);                return null;            }        }        return null;    }        setupEventListeners() {        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è        this.sendButton.addEventListener('click', () => this.sendMessage());                // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ        this.messageInput.addEventListener('keydown', (e) => {            if (e.key === 'Enter' && !e.shiftKey) {                e.preventDefault();                this.sendMessage();            }        });                // –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏        this.modelSelect.addEventListener('change', (e) => {            this.changeModel(e.target.value);        });                // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.clearButton.addEventListener('click', () => this.clearChat());        this.exportButton.addEventListener('click', () => this.showExportModal());        this.settingsButton.addEventListener('click', () => this.showSettingsModal());                // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞        this.setupModalListeners();                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea        this.messageInput.addEventListener('input', () => this.adjustTextareaHeight());    }        setupModalListeners() {        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω        document.getElementById('close-settings').addEventListener('click', () => {            this.settingsModal.style.display = 'none';        });                document.getElementById('close-export').addEventListener('click', () => {            this.exportModal.style.display = 'none';        });                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏        this.streamToggle.addEventListener('change', (e) => {            this.isStreaming = e.target.checked;            this.saveSettings();        });                this.autoScrollToggle.addEventListener('change', (e) => {            this.autoScroll = e.target.checked;            this.saveSettings();        });                this.themeSelect.addEventListener('change', (e) => {            this.theme = e.target.value;            this.applyTheme();            this.saveSettings();        });                // –≠–∫—Å–ø–æ—Ä—Ç        this.exportFormatSelect.addEventListener('change', () => this.updateExportPreview());        this.downloadButton.addEventListener('click', () => this.downloadChat());        this.copyButton.addEventListener('click', () => this.copyToClipboard());                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–∏—Ö        window.addEventListener('click', (e) => {            if (e.target === this.settingsModal) {                this.settingsModal.style.display = 'none';            }            if (e.target === this.exportModal) {                this.exportModal.style.display = 'none';            }        });    }        async initializePuter() {        try {            await waitForPuter();            console.log('‚úÖ Puter.js loaded successfully');        } catch (error) {            console.error('‚ùå Failed to load puter.js:', error);            this.addSystemMessage('‚ö†Ô∏è Error: Failed to load puter.js. Please check your internet connection.');        }    }        async sendMessage() {        const message = this.messageInput.value.trim();        if (!message) return;                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞        this.messageInput.value = '';        this.adjustTextareaHeight();                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è        this.addUserMessage(message);                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞        this.showTypingIndicator();                try {            // üß† –ù–û–í–û–ï: –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏            let enrichedMessage = message;            if (this.memoryEnabled && this.bridge && typeof this.bridge.enrich_message === 'function') {                try {                    enrichedMessage = await this.bridge.enrich_message(message);                    console.log('üß† Message enriched with memory context');                } catch (error) {                    console.error('Memory enrichment failed:', error);                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º                }            }                        // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è            if (this.bridge && typeof this.bridge.send_message === 'function') {                await this.bridge.send_message(message);            }                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ò–ò            const response = await puter.ai.chat(enrichedMessage, {                model: this.currentModel,                stream: this.isStreaming            });                        this.hideTypingIndicator();                        if (this.isStreaming) {                await this.handleStreamingResponse(response);            } else {                await this.handleSimpleResponse(response);            }                    } catch (error) {            this.hideTypingIndicator();            console.error('‚ùå Error sending message:', error);            this.addSystemMessage(‚ùå Error: ${error.message});                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Python            if (this.bridge && typeof this.bridge.log_error === 'function') {                await this.bridge.log_error(error.message);            }        }    }        async handleStreamingResponse(response) {        const messageElement = this.addAIMessage('', true);        let fullResponse = '';                try {            for await (const part of response) {                if (part?.text) {                    fullResponse += part.text;                    this.updateMessage(messageElement, fullResponse);                }            }                        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥            messageElement.classList.remove('streaming');                        // üß† –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –ø–∞–º—è—Ç—å            await this.saveToMemory(this.getLastUserMessage(), fullResponse);                        // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ            if (this.bridge && typeof this.bridge.receive_ai_message === 'function') {                await this.bridge.receive_ai_message(this.currentModel, fullResponse);            }                    } catch (error) {            console.error('Streaming error:', error);            this.updateMessage(messageElement, ‚ùå Streaming error: ${error.message});            messageElement.classList.remove('streaming');        }    }        async handleSimpleResponse(response) {        try {            const content = response.message?.content?.[0]?.text || response.text || 'No response';            this.addAIMessage(content);                        // üß† –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –ø–∞–º—è—Ç—å            await this.saveToMemory(this.getLastUserMessage(), content);                        // –£–≤–µ–¥–æ–º–ª—è–µ–º Python            if (this.bridge && typeof this.bridge.receive_ai_message === 'function') {                await this.bridge.receive_ai_message(this.currentModel, content);            }                    } catch (error) {            console.error('Response handling error:', error);            this.addSystemMessage(‚ùå Response error: ${error.message});        }    }        // üß† –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ        async saveToMemory(userMessage, aiResponse) {        if (this.memoryEnabled && this.bridge && typeof this.bridge.save_chat_exchange === 'function') {            try {                const result = await this.bridge.save_chat_exchange(userMessage, aiResponse);                if (result === 'OK') {                    console.log('üß† Chat exchange saved to memory');                } else {                    console.warn('‚ö†Ô∏è Failed to save to memory:', result);                }            } catch (error) {                console.error('Memory save error:', error);            }        }    }        async startNewMemorySession() {        if (this.memoryEnabled && this.bridge && typeof this.bridge.start_new_chat_session === 'function') {            try {                const sessionId = await this.bridge.start_new_chat_session();                console.log('üß† New memory session started:', sessionId);                this.addSystemMessage('üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–∞–º—è—Ç–∏ –Ω–∞—á–∞—Ç–∞');            } catch (error) {                console.error('Failed to start new memory session:', error);            }        }    }        getLastUserMessage() {        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è        const messages = this.messagesContainer.querySelectorAll('.user-message');        if (messages.length > 0) {            const lastMessage = messages[messages.length - 1];            return lastMessage.querySelector('.message-content').textContent;        }        return '';    }        // –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê        addUserMessage(message) {        const messageDiv = this.createMessageElement('user', message);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }        addAIMessage(message, isStreaming = false) {        const messageDiv = this.createMessageElement('ai', message, isStreaming);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }        addSystemMessage(message) {        const messageDiv = this.createMessageElement('system', message);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }        createMessageElement(type, content, isStreaming = false) {        const messageDiv = document.createElement('div');        messageDiv.className = message ${type}-message${isStreaming ? ' streaming' : ''};                const timestamp = new Date().toLocaleTimeString();        let senderLabel = '';        let modelBadge = '';                if (type === 'user') {            senderLabel = 'üë§ You';        } else if (type === 'ai') {            senderLabel = 'ü§ñ Assistant';            modelBadge = ${this.currentModel};        } else if (type === 'system') {            senderLabel = '‚öôÔ∏è System';        }                messageDiv.innerHTML =                             ${senderLabel}                ${modelBadge}                ${timestamp}                        ${this.formatMessage(content)}        ;                return messageDiv;    }        updateMessage(messageElement, content) {        const contentElement = messageElement.querySelector('.message-content');        contentElement.innerHTML = this.formatMessage(content);        this.scrollToBottom();    }        formatMessage(content) {        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞        return content            .replace(/\\n/g, '')            .replace(/\\\\(.?)\\\\/g, '$1')            .replace(/\\(.?)\\/g, '$1')            .replace(/(.?)/g, '$1');    }        showTypingIndicator() {        this.typingIndicator.style.display = 'flex';        this.scrollToBottom();    }        hideTypingIndicator() {        this.typingIndicator.style.display = 'none';    }        scrollToBottom() {        if (this.autoScroll) {            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;        }    }        adjustTextareaHeight() {        this.messageInput.style.height = 'auto';        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';    }        async changeModel(model) {        this.currentModel = model;        this.addSystemMessage(üîÑ Model changed to ${model});                // –£–≤–µ–¥–æ–º–ª—è–µ–º Python        if (this.bridge && typeof this.bridge.change_model === 'function') {            await this.bridge.change_model(model);        }    }        async clearChat() {        if (confirm('Are you sure you want to clear the chat history?')) {            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å            const messages = this.messagesContainer.querySelectorAll('.message:not(.welcome-message .ai-message)');            messages.forEach(msg => msg.remove());                        // üß† –ù–û–í–û–ï: –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–∞–º—è—Ç–∏            await this.startNewMemorySession();                        // –£–≤–µ–¥–æ–º–ª—è–µ–º Python            if (this.bridge && typeof this.bridge.clear_chat === 'function') {                await this.bridge.clear_chat();            }                        this.addSystemMessage('üóëÔ∏è Chat cleared');        }    }        // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ù–ê–°–¢–†–û–ô–ö–ò        showSettingsModal() {        this.settingsModal.style.display = 'flex';    }        showExportModal() {        this.exportModal.style.display = 'flex';        this.updateExportPreview();    }        async updateExportPreview() {        const format = this.exportFormatSelect.value;        let content = '';                if (this.bridge && typeof this.bridge.get_chat_history_json === 'function') {            try {                const historyJson = await this.bridge.get_chat_history_json();                const history = JSON.parse(historyJson);                                if (format === 'json') {                    content = JSON.stringify(history, null, 2);                } else if (format === 'txt') {                    content = this.formatHistoryAsText(history);                } else if (format === 'md') {                    content = this.formatHistoryAsMarkdown(history);                }            } catch (error) {                content = 'Error generating preview: ' + error.message;            }        } else {            content = 'Export not available - WebChannel not connected';        }                this.exportContent.textContent = content;    }        formatHistoryAsText(history) {        return history.map(msg => {            const role = msg.role === 'user' ? 'User' : AI (${msg.model});            return [${msg.timestamp}] ${role}: ${msg.content};        }).join('\\\\n\\\\n');    }        formatHistoryAsMarkdown(history) {        let md = '# Chat History\\\\n\\\\n';        history.forEach(msg => {            const role = msg.role === 'user' ? 'User' : AI (${msg.model});            md += ## ${role} - ${msg.timestamp}\\\\n\\\\n${msg.content}\\\\n\\\\n;        });        return md;    }        async downloadChat() {        const format = this.exportFormatSelect.value;        const content = this.exportContent.textContent;                const blob = new Blob([content], { type: 'text/plain' });        const url = URL.createObjectURL(blob);        const a = document.createElement('a');        a.href = url;        a.download = gopiai-chat-${new Date().toISOString().split('T')[0]}.${format};        document.body.appendChild(a);        a.click();        document.body.removeChild(a);        URL.revokeObjectURL(url);    }        async copyToClipboard() {        try {            await navigator.clipboard.writeText(this.exportContent.textContent);            alert('Chat history copied to clipboard!');        } catch (error) {            console.error('Failed to copy:', error);            alert('Failed to copy to clipboard');        }    }        saveSettings() {        const settings = {            isStreaming: this.isStreaming,            autoScroll: this.autoScroll,            theme: this.theme,            currentModel: this.currentModel        };        localStorage.setItem('gopiai-chat-settings', JSON.stringify(settings));    }        loadSettings() {        try {            const settings = JSON.parse(localStorage.getItem('gopiai-chat-settings') || '{}');                        this.isStreaming = settings.isStreaming !== undefined ? settings.isStreaming : true;            this.autoScroll = settings.autoScroll !== undefined ? settings.autoScroll : true;            this.theme = settings.theme || 'dark';            this.currentModel = settings.currentModel || 'claude-sonnet-4';                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º            this.streamToggle.checked = this.isStreaming;            this.autoScrollToggle.checked = this.autoScroll;            this.themeSelect.value = this.theme;            this.modelSelect.value = this.currentModel;                        this.applyTheme();        } catch (error) {            console.error('Error loading settings:', error);        }    }        applyTheme() {        document.body.setAttribute('data-theme', this.theme);    }}// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞let chatInterface;document.addEventListener('DOMContentLoaded', () => {    chatInterface = new GopiAIChatInterface();        // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è    window.gopiaiChat = chatInterface;        console.log('üöÄ GopiAI Chat Interface initialized'); - —ç—Ç–æ –Ω–æ–≤–∞—è, –Ω–æ —Å–ª–æ–º–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.}); –ò –≤–æ—Ç –≤—Ç–æ—Ä–∞—è - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è: // JavaScript –¥–ª—è GopiAI WebView Chat —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ puter.jsfunction waitForPuter() {    return new Promise((resolve, reject) => {        if (typeof puter !== 'undefined') {            resolve();        } else {            let attempts = 0;            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥            const checkInterval = setInterval(() => {                attempts++;                if (typeof puter !== 'undefined') {                    clearInterval(checkInterval);                    resolve();                } else if (attempts >= maxAttempts) {                    clearInterval(checkInterval);                    reject(new Error('puter.js failed to load'));                }            }, 100);        }    });}class GopiAIChatInterface {    constructor() {        this.bridge = null;        this.currentModel = 'claude-sonnet-4';        this.isStreaming = true;        this.autoScroll = true;        this.theme = 'dark';        this.chatHistory = [];        this.memoryEnabled = false; // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏        this.initializeElements();        this.initializeWebChannel();        this.setupEventListeners();        this.loadSettings();        this.initializePuter();    }    initializeElements() {        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã        this.messagesContainer = document.getElementById('chat-messages');        this.messageInput = document.getElementById('message-input');        this.sendButton = document.getElementById('send-btn');        this.modelSelect = document.getElementById('model-select');        this.typingIndicator = document.getElementById('typing-indicator');        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.clearButton = document.getElementById('clear-btn');        this.exportButton = document.getElementById('export-btn');        this.settingsButton = document.getElementById('settings-btn');        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞        this.settingsModal = document.getElementById('settings-modal');        this.exportModal = document.getElementById('export-modal');        // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫        this.streamToggle = document.getElementById('stream-toggle');        this.autoScrollToggle = document.getElementById('auto-scroll-toggle');        this.themeSelect = document.getElementById('theme-select');        // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞        this.exportFormatSelect = document.getElementById('export-format');        this.downloadButton = document.getElementById('download-btn');        this.copyButton = document.getElementById('copy-btn');        this.exportContent = document.getElementById('export-content');    }    async initializeWebChannel() {        if (typeof QWebChannel !== 'undefined' && typeof qt !== 'undefined') {            try {                await new Promise((resolve) => {                    new QWebChannel(qt.webChannelTransport, (channel) => {                        this.bridge = channel.objects.bridge;                        console.log('‚úÖ WebChannel bridge connected');                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏                        this.checkMemoryAvailability();                        resolve();                    });                });            } catch (error) {                console.error('‚ùå Error initializing WebChannel:', error);            }        } else {            console.warn('‚ö†Ô∏è QWebChannel not available');        }    }    async checkMemoryAvailability() {        if (this.bridge && typeof this.bridge.is_memory_available === 'function') {            try {                this.memoryEnabled = await this.bridge.is_memory_available();                console.log(${this.memoryEnabled ? 'üß†' : '‚ö†Ô∏è'} Memory system: ${this.memoryEnabled ? 'Available' : 'Not available'});                if (this.memoryEnabled) {                    this.addSystemMessage('üß† AI –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!');                    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏                    const stats = await this.getMemoryStats();                    if (stats && stats.total_conversations) {                        this.addSystemMessage(üìä –í –ø–∞–º—è—Ç–∏: ${stats.total_conversations} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, ${stats.total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π);                    }                }            } catch (error) {                console.error('Error checking memory availability:', error);                this.memoryEnabled = false;            }        }    }    async getMemoryStats() {        if (this.bridge && typeof this.bridge.get_memory_stats === 'function') {            try {                const statsJson = await this.bridge.get_memory_stats();                return JSON.parse(statsJson);            } catch (error) {                console.error('Error getting memory stats:', error);                return null;            }        }        return null;    }    setupEventListeners() {        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è        this.sendButton.addEventListener('click', () => this.sendMessage());        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ        this.messageInput.addEventListener('keydown', (e) => {            if (e.key === 'Enter' && !e.shiftKey) {                e.preventDefault();                this.sendMessage();            }        });        // –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏        this.modelSelect.addEventListener('change', (e) => {            this.changeModel(e.target.value);        });        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.clearButton.addEventListener('click', () => this.clearChat());        this.exportButton.addEventListener('click', () => this.showExportModal());        this.settingsButton.addEventListener('click', () => this.showSettingsModal());        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞        this.setupModalListeners();        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea        this.messageInput.addEventListener('input', () => this.adjustTextareaHeight());    }    setupModalListeners() {        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω        document.getElementById('close-settings').addEventListener('click', () => {            this.settingsModal.style.display = 'none';        });        document.getElementById('close-export').addEventListener('click', () => {            this.exportModal.style.display = 'none';        });        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏        this.streamToggle.addEventListener('change', (e) => {            this.isStreaming = e.target.checked;            this.saveSettings();        });        this.autoScrollToggle.addEventListener('change', (e) => {            this.autoScroll = e.target.checked;            this.saveSettings();        });        this.themeSelect.addEventListener('change', (e) => {            this.theme = e.target.value;            this.applyTheme();            this.saveSettings();        });        // –≠–∫—Å–ø–æ—Ä—Ç        this.exportFormatSelect.addEventListener('change', () => this.updateExportPreview());        this.downloadButton.addEventListener('click', () => this.downloadChat());        this.copyButton.addEventListener('click', () => this.copyToClipboard());        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–∏—Ö        window.addEventListener('click', (e) => {            if (e.target === this.settingsModal) {                this.settingsModal.style.display = 'none';            }            if (e.target === this.exportModal) {                this.exportModal.style.display = 'none';            }        });    }    async initializePuter() {        try {            await waitForPuter();            console.log('‚úÖ Puter.js loaded successfully');        } catch (error) {            console.error('‚ùå Failed to load puter.js:', error);            this.addSystemMessage('‚ö†Ô∏è Error: Failed to load puter.js. Please check your internet connection.');        }    }    async sendMessage() {        const message = this.messageInput.value.trim();        if (!message) return;        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞        this.messageInput.value = '';        this.adjustTextareaHeight();        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è        this.addUserMessage(message);        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞        this.showTypingIndicator();        try {            // üß† –ù–û–í–û–ï: –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏            let enrichedMessage = message;            if (this.memoryEnabled && this.bridge && typeof this.bridge.enrich_message === 'function') {                try {                    enrichedMessage = await this.bridge.enrich_message(message);                    console.log('üß† Message enriched with memory context');                } catch (error) {                    console.error('Memory enrichment failed:', error);                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º                }            }            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è            if (this.bridge && typeof this.bridge.send_message === 'function') {                await this.bridge.send_message(message);            }            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ò–ò            const response = await puter.ai.chat(enrichedMessage, {                model: this.currentModel,                stream: this.isStreaming            });            this.hideTypingIndicator();            if (this.isStreaming) {                await this.handleStreamingResponse(response);            } else {                await this.handleSimpleResponse(response);            }        } catch (error) {            this.hideTypingIndicator();            console.error('‚ùå Error sending message:', error);            this.addSystemMessage(‚ùå Error: ${error.message});            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Python            if (this.bridge && typeof this.bridge.log_error === 'function') {                await this.bridge.log_error(error.message);            }        }    }    async handleStreamingResponse(response) {        const messageElement = this.addAIMessage('', true);        let fullResponse = '';        try {            for await (const part of response) {                if (part?.text) {                    fullResponse += part.text;                    this.updateMessage(messageElement, fullResponse);                }            }            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥            messageElement.classList.remove('streaming');            // üß† –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –ø–∞–º—è—Ç—å            await this.saveToMemory(this.getLastUserMessage(), fullResponse);            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ            if (this.bridge && typeof this.bridge.receive_ai_message === 'function') {                await this.bridge.receive_ai_message(this.currentModel, fullResponse);            }        } catch (error) {            console.error('Streaming error:', error);            this.updateMessage(messageElement, ‚ùå Streaming error: ${error.message});            messageElement.classList.remove('streaming');        }    }    async handleSimpleResponse(response) {        try {            const content = response.message?.content?.[0]?.text || response.text || 'No response';            this.addAIMessage(content);            // üß† –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –ø–∞–º—è—Ç—å            await this.saveToMemory(this.getLastUserMessage(), content);            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python            if (this.bridge && typeof this.bridge.receive_ai_message === 'function') {                await this.bridge.receive_ai_message(this.currentModel, content);            }        } catch (error) {            console.error('Response handling error:', error);            this.addSystemMessage(‚ùå Response error: ${error.message});        }    }    // üß† –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ    async saveToMemory(userMessage, aiResponse) {        if (this.memoryEnabled && this.bridge && typeof this.bridge.save_chat_exchange === 'function') {            try {                const result = await this.bridge.save_chat_exchange(userMessage, aiResponse);                if (result === 'OK') {                    console.log('üß† Chat exchange saved to memory');                } else {                    console.warn('‚ö†Ô∏è Failed to save to memory:', result);                }            } catch (error) {                console.error('Memory save error:', error);            }        }    }    async startNewMemorySession() {        if (this.memoryEnabled && this.bridge && typeof this.bridge.start_new_chat_session === 'function') {            try {                const sessionId = await this.bridge.start_new_chat_session();                console.log('üß† New memory session started:', sessionId);                this.addSystemMessage('üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–∞–º—è—Ç–∏ –Ω–∞—á–∞—Ç–∞');            } catch (error) {                console.error('Failed to start new memory session:', error);            }        }    }    getLastUserMessage() {        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è        const messages = this.messagesContainer.querySelectorAll('.user-message');        if (messages.length > 0) {            const lastMessage = messages[messages.length - 1];            return lastMessage.querySelector('.message-content').textContent;        }        return '';    }    // –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê    addUserMessage(message) {        const messageDiv = this.createMessageElement('user', message);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }    addAIMessage(message, isStreaming = false) {        const messageDiv = this.createMessageElement('ai', message, isStreaming);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }    addSystemMessage(message) {        const messageDiv = this.createMessageElement('system', message);        this.messagesContainer.appendChild(messageDiv);        this.scrollToBottom();        return messageDiv;    }    createMessageElement(type, content, isStreaming = false) {        const messageDiv = document.createElement('div');        messageDiv.className = message ${type}-message${isStreaming ? ' streaming' : ''};        const timestamp = new Date().toLocaleTimeString();        let senderLabel = '';        let modelBadge = '';        if (type === 'user') {            senderLabel = 'üë§ You';        } else if (type === 'ai') {            senderLabel = 'ü§ñ Assistant';            modelBadge = ${this.currentModel};        } else if (type === 'system') {            senderLabel = '‚öôÔ∏è System';        }        messageDiv.innerHTML =                             ${senderLabel}                ${modelBadge}                ${timestamp}                        ${this.formatMessage(content)}        ;        return messageDiv;    }    updateMessage(messageElement, content) {        const contentElement = messageElement.querySelector('.message-content');        contentElement.innerHTML = this.formatMessage(content);        this.scrollToBottom();    }    formatMessage(content) {        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞        return content            .replace(/\\n/g, '')            .replace(/\\\\(.?)\\\\/g, '$1')            .replace(/\\(.?)\\/g, '$1')            .replace(/(.?)/g, '$1');    }    showTypingIndicator() {        this.typingIndicator.style.display = 'flex';        this.scrollToBottom();    }    hideTypingIndicator() {        this.typingIndicator.style.display = 'none';    }    scrollToBottom() {        if (this.autoScroll) {            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;        }    }    adjustTextareaHeight() {        this.messageInput.style.height = 'auto';        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';    }    async changeModel(model) {        this.currentModel = model;        this.addSystemMessage(üîÑ Model changed to ${model});        // –£–≤–µ–¥–æ–º–ª—è–µ–º Python        if (this.bridge && typeof this.bridge.change_model === 'function') {            await this.bridge.change_model(model);        }    }    async clearChat() {        if (confirm('Are you sure you want to clear the chat history?')) {            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å            const messages = this.messagesContainer.querySelectorAll('.message:not(.welcome-message .ai-message)');            messages.forEach(msg => msg.remove());            // üß† –ù–û–í–û–ï: –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–∞–º—è—Ç–∏            await this.startNewMemorySession();            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python            if (this.bridge && typeof this.bridge.clear_chat === 'function') {                await this.bridge.clear_chat();            }            this.addSystemMessage('üóëÔ∏è Chat cleared');        }    }    // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ù–ê–°–¢–†–û–ô–ö–ò    showSettingsModal() {        this.settingsModal.style.display = 'flex';    }    showExportModal() {        this.exportModal.style.display = 'flex';        this.updateExportPreview();    }    async updateExportPreview() {        const format = this.exportFormatSelect.value;        let content = '';        if (this.bridge && typeof this.bridge.get_chat_history_json === 'function') {            try {                const historyJson = await this.bridge.get_chat_history_json();                const history = JSON.parse(historyJson);                if (format === 'json') {                    content = JSON.stringify(history, null, 2);                } else if (format === 'txt') {                    content = this.formatHistoryAsText(history);                } else if (format === 'md') {                    content = this.formatHistoryAsMarkdown(history);                }            } catch (error) {                content = 'Error generating preview: ' + error.message;            }        } else {            content = 'Export not available - WebChannel not connected';        }        this.exportContent.textContent = content;    }    formatHistoryAsText(history) {        return history.map(msg => {            const role = msg.role === 'user' ? 'User' : AI (${msg.model});            return [${msg.timestamp}] ${role}: ${msg.content};        }).join('\\\\n\\\\n');    }    formatHistoryAsMarkdown(history) {        let md = '# Chat History\\\\n\\\\n';        history.forEach(msg => {            const role = msg.role === 'user' ? 'User' : AI (${msg.model});            md += ## ${role} - ${msg.timestamp}\\\\n\\\\n${msg.content}\\\\n\\\\n;        });        return md;    }    async downloadChat() {        const format = this.exportFormatSelect.value;        const content = this.exportContent.textContent;        const blob = new Blob([content], { type: 'text/plain' });        const url = URL.createObjectURL(blob);        const a = document.createElement('a');        a.href = url;        a.download = gopiai-chat-${new Date().toISOString().split('T')[0]}.${format};        document.body.appendChild(a);        a.click();        document.body.removeChild(a);        URL.revokeObjectURL(url);    }    async copyToClipboard() {        try {            await navigator.clipboard.writeText(this.exportContent.textContent);            alert('Chat history copied to clipboard!');        } catch (error) {            console.error('Failed to copy:', error);            alert('Failed to copy to clipboard');        }    }    saveSettings() {        const settings = {            isStreaming: this.isStreaming,            autoScroll: this.autoScroll,            theme: this.theme,            currentModel: this.currentModel        };        localStorage.setItem('gopiai-chat-settings', JSON.stringify(settings));    }    loadSettings() {        try {            const settings = JSON.parse(localStorage.getItem('gopiai-chat-settings') || '{}');            this.isStreaming = settings.isStreaming !== undefined ? settings.isStreaming : true;            this.autoScroll = settings.autoScroll !== undefined ? settings.autoScroll : true;            this.theme = settings.theme || 'dark';            this.currentModel = settings.currentModel || 'claude-sonnet-4';            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º            this.streamToggle.checked = this.isStreaming;            this.autoScrollToggle.checked = this.autoScroll;            this.themeSelect.value = this.theme;            this.modelSelect.value = this.currentModel;            this.applyTheme();        } catch (error) {            console.error('Error loading settings:', error);        }    }    applyTheme() {        document.body.setAttribute('data-theme', this.theme);    }}// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞let chatInterface;document.addEventListener('DOMContentLoaded', () => {    chatInterface = new GopiAIChatInterface();    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è    window.gopiaiChat = chatInterface;    console.log('üöÄ GopiAI Chat Interface initialized');});",
      "timestamp": "2025-06-17 05:18:58.588774",
      "metadata": {
        "timestamp": "2025-06-17T05:18:58.583775"
      }
    },
    {
      "id": "ae33d8ef-2fa2-4190-8fc2-bba42e205a27_msg_14",
      "role": "user",
      "content": "–ò—Å–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–¥–µ—Å—å –æ—à–∏–±–∫—É –∏ –≤—ã—à–ª–∏ –º–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º: // JavaScript –¥–ª—è GopiAI WebView Chat// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ puter.jsfunction waitForPuter() {    return new Promise((resolve, reject) => {        if (typeof puter !== 'undefined') {            resolve();        } else {            let attempts = 0;            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥            const checkInterval = setInterval(() => {                attempts++;                if (typeof puter !== 'undefined') {                    clearInterval(checkInterval);                    resolve();                } else if (attempts >= maxAttempts) {                    clearInterval(checkInterval);                    reject(new Error('puter.js failed to load'));                }            }, 100);        }    });}class GopiAIChatInterface {    constructor() {        this.bridge = null;        this.currentModel = 'claude-sonnet-4';        this.isStreaming = true;        this.autoScroll = true;        this.theme = 'dark';        this.chatHistory = [];        this.memoryEnabled = false; // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏        this.initializeElements();        this.initializeWebChannel();        this.setupEventListeners();        this.loadSettings();        this.initializePuter();    }    initializeElements() {        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã        this.messagesContainer = document.getElementById('chat-messages');        this.messageInput = document.getElementById('message-input');        this.sendButton = document.getElementById('send-btn');        this.modelSelect = document.getElementById('model-select');        this.typingIndicator = document.getElementById('typing-indicator');        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.clearButton = document.getElementById('clear-btn');        this.exportButton = document.getElementById('export-btn');        this.historyButton = document.getElementById('history-btn');        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞        this.historyModal = document.getElementById('history-modal');        this.exportModal = document.getElementById('export-modal');        this.closeHistoryBtn = document.getElementById('close-settings'); // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID        this.closeExportBtn = document.getElementById('close-export');        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏        this.streamToggle = document.getElementById('stream-toggle');        this.autoScrollToggle = document.getElementById('auto-scroll-toggle');        this.themeSelect = document.getElementById('theme-select');        // –≠–∫—Å–ø–æ—Ä—Ç        this.exportFormatSelect = document.getElementById('export-format');        this.downloadBtn = document.getElementById('download-btn');        this.copyBtn = document.getElementById('copy-btn');        this.exportContent = document.getElementById('export-content');    }    async initializePuter() {        try {            await waitForPuter();            console.log('puter.js loaded successfully');            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ            this.addAIMessage('Welcome to GopiAI WebView Chat! I\\'m powered by puter.js and ready to help you. You can switch between Claude Sonnet 4 and Claude Opus 4 models using the dropdown above.');        } catch (error) {            console.error('Failed to load puter.js:', error);            this.addSystemMessage('‚ö†Ô∏è Error: Failed to load puter.js. Please check your internet connection and refresh the page.');        }    }    async checkMemoryAvailability() {        try {            if (!this.bridge) {                console.log('Bridge not available for memory check');                return false;            }            if (typeof this.bridge.execute_claude_tool === 'function') {                const toolsList = await this.getClaudeToolsList(true);                console.log('Tools list received for memory check:', toolsList);                if (toolsList && toolsList.success) {                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞                    let tools = null;                    if (Array.isArray(toolsList.tools)) {                        tools = toolsList.tools;                        console.log('Found tools array in toolsList.tools');                    } else if (Array.isArray(toolsList.result)) {                        tools = toolsList.result;                        console.log('Found tools array in toolsList.result');                    } else if (Array.isArray(toolsList.data)) {                        tools = toolsList.data;                        console.log('Found tools array in toolsList.data');                    } else if (Array.isArray(toolsList)) {                        tools = toolsList;                        console.log('toolsList itself is an array');                    } else if (toolsList.tools && typeof toolsList.tools === 'object') {                        // –ï—Å–ª–∏ tools - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏                        if (Array.isArray(Object.values(toolsList.tools))) {                            tools = Object.values(toolsList.tools);                            console.log('Converted tools object to array');                        } else {                            // –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏-–∏–º–µ–Ω–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤                            tools = Object.keys(toolsList.tools).map(key => ({                                name: key,                                ...toolsList.tools[key]                            }));                            console.log('Created tools array from object keys');                        }                    } else {                        console.log('Could not extract tools array from response structure:', Object.keys(toolsList));                        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤                        for (const [key, value] of Object.entries(toolsList)) {                            if (Array.isArray(value) && value.length > 0) {                                tools = value;                                console.log(Found tools array in toolsList.${key});                                break;                            }                        }                    }                    console.log('Final parsed tools array:', tools);                    if (Array.isArray(tools) && tools.length > 0) {                        const memoryTool = tools.find(t => {                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ tool                            const name = t?.name || t?.tool_name || t?.id || t?.function_name || String(t);                            return name === 'search_memory';                        });                        this.memoryEnabled = !!memoryTool;                        console.log('Memory tool search result:', memoryTool);                        console.log('Memory availability set to:', this.memoryEnabled);                        if (this.memoryEnabled) {                            console.log('üß† Memory system is available');                        } else {                            console.log('‚ö†Ô∏è search_memory tool not found in tools list');                        }                        return this.memoryEnabled;                    } else {                        console.log('No valid tools array found. Tools value:', tools, 'Type:', typeof tools);                    }                } else {                    console.log('Invalid toolsList response:', toolsList);                }            } else {                console.log('execute_claude_tool method not available in bridge');            }            this.memoryEnabled = false;            console.log('Memory availability set to false (fallback)');            return false;        } catch (error) {            console.error('Error checking memory availability:', error);            this.memoryEnabled = false;            return false;        }    }    async searchMemory(query, limit = 10) {        try {            if (!this.memoryEnabled) {                console.log('Memory not available');                return null;            }            const result = await this.executeClaudeTool('search_memory', {                query: query,                limit: limit            });            if (result && result.success) {                return result.results || [];            }            return [];        } catch (error) {            console.error('Error searching memory:', error);            return [];        }    }    async loadChatHistory() {        try {            if (!this.memoryEnabled) {                console.log('Memory not available for history');                return [];            }            const result = await this.searchMemory('', 50);            if (result && Array.isArray(result)) {                const sessionMap = new Map();                result.forEach(item => {                    if (item.metadata && item.metadata.session_id) {                        const sessionId = item.metadata.session_id;                        if (!sessionMap.has(sessionId)) {                            sessionMap.set(sessionId, {                                session_id: sessionId,                                timestamp: item.metadata.timestamp || new Date().toISOString(),                                messages: []                            });                        }                        sessionMap.get(sessionId).messages.push(item);                    }                });                const sessions = Array.from(sessionMap.values());                sessions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));                return sessions;            }            return [];        } catch (error) {            console.error('Error loading chat history:', error);            return [];        }    }    async displayChatHistory() {        try {            const historyContainer = document.getElementById('history-list');            if (!historyContainer) {                console.error('History container not found');                return;            }            historyContainer.innerHTML = 'üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤...';            const sessions = await this.loadChatHistory();            if (!sessions || sessions.length === 0) {                historyContainer.innerHTML = 'üìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞';                return;            }            const dateGroups = new Map();            sessions.forEach(session => {                const date = new Date(session.timestamp).toDateString();                if (!dateGroups.has(date)) {                    dateGroups.set(date, []);                }                dateGroups.get(date).push(session);            });            let html = '';            for (const [date, dateSessions] of dateGroups) {                html += '' + date + '';                dateSessions.forEach(session => {                    const firstMessage = session.messages[0];                    const preview = firstMessage ?                        (firstMessage.content || firstMessage.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ').substring(0, 100) + '...' :                        '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';                    html += '';                    html += '';                    html += '' + new Date(session.timestamp).toLocaleTimeString() + '';                    html += '' + session.messages.length + ' —Å–æ–æ–±—â–µ–Ω–∏–π';                    html += '';                    html += '' + preview + '';                    html += '';                });                html += '';            }            historyContainer.innerHTML = html;            historyContainer.querySelectorAll('.history-session').forEach(sessionEl => {                sessionEl.addEventListener('click', (e) => {                    const sessionId = e.currentTarget.dataset.sessionId;                    this.loadChatSession(sessionId);                });            });        } catch (error) {            console.error('Error displaying chat history:', error);            const historyContainer = document.getElementById('history-list');            if (historyContainer) {                historyContainer.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏';            }        }    }    async searchChatHistory(query) {        try {            if (!query || query.trim() === '') {                await this.displayChatHistory();                return;            }            const historyContainer = document.getElementById('history-list');            if (!historyContainer) return;            historyContainer.innerHTML = 'üîç –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏...';            const results = await this.searchMemory(query, 20);            if (!results || results.length === 0) {                historyContainer.innerHTML = 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';                return;            }            let html = 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:';            results.forEach((result, index) => {                const relevance = Math.round((result.score || 0) * 100);                const content = result.content || result.text || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ';                const timestamp = result.metadata && result.metadata.timestamp ?                    new Date(result.metadata.timestamp).toLocaleString() :                    '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';                const highlightedContent = this.highlightSearchTerms(content, query);                html += '';                html += '';                html += '' + timestamp + '';                html += '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ' + relevance + '%';                html += '';                html += '' + highlightedContent + '';                html += '';            });            historyContainer.innerHTML = html;        } catch (error) {            console.error('Error searching chat history:', error);            const historyContainer = document.getElementById('history-list');            if (historyContainer) {                historyContainer.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞';            }        }    }    highlightSearchTerms(content, query) {        if (!query || query.trim() === '') return content;        const terms = query.toLowerCase().split(/\\s+/);        let highlighted = content;        terms.forEach(term => {            if (term.length > 2) {                const regex = new RegExp('(' + term + ')', 'gi');                highlighted = highlighted.replace(regex, '$1');            }        });        return highlighted;    }    async loadChatSession(sessionId) {        try {            console.log('Loading chat session:', sessionId);            const modal = document.getElementById('history-modal');            if (modal) {                modal.style.display = 'none';            }            this.addSystemMessage('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è: ' + sessionId);        } catch (error) {            console.error('Error loading chat session:', error);        }    }    async exportChatHistory(format = 'txt') {        try {            const sessions = await this.loadChatHistory();            if (!sessions || sessions.length === 0) {                this.addSystemMessage('üìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞');                return;            }            let content = '';            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');            if (format === 'md') {                content = '# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ GopiAI\\n\\n';                content += '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ' + new Date().toLocaleString() + '\\n\\n';                sessions.forEach(session => {                    content += '## –°–µ—Å—Å–∏—è ' + session.session_id + '\\n';                    content += '–í—Ä–µ–º—è: ' + new Date(session.timestamp).toLocaleString() + '\\n';                    content += '–°–æ–æ–±—â–µ–Ω–∏–π: ' + session.messages.length + '\\n\\n';                    session.messages.forEach(msg => {                        const msgContent = msg.content || msg.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';                        content += '### –°–æ–æ–±—â–µ–Ω–∏–µ\\n' + msgContent + '\\n\\n';                    });                    content += '---\\n\\n';                });            } else {                content = '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ GopiAI\\n';                content += '='.repeat(50) + '\\n\\n';                content += '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ' + new Date().toLocaleString() + '\\n\\n';                sessions.forEach(session => {                    content += '–°–µ—Å—Å–∏—è: ' + session.session_id + '\\n';                    content += '–í—Ä–µ–º—è: ' + new Date(session.timestamp).toLocaleString() + '\\n';                    content += '–°–æ–æ–±—â–µ–Ω–∏–π: ' + session.messages.length + '\\n';                    content += '-'.repeat(30) + '\\n';                    session.messages.forEach(msg => {                        const msgContent = msg.content || msg.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';                        content += msgContent + '\\n\\n';                    });                    content += '='.repeat(50) + '\\n\\n';                });            }            const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });            const url = URL.createObjectURL(blob);            const a = document.createElement('a');            a.href = url;            a.download = 'gopiai_chat_history_' + timestamp + '.' + format;            document.body.appendChild(a);            a.click();            document.body.removeChild(a);            URL.revokeObjectURL(url);            this.addSystemMessage('üì• –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ' + format.toUpperCase());        } catch (error) {            console.error('Error exporting chat history:', error);            this.addSystemMessage('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏');        }    }    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Claude Tools    async getClaudeToolsList(silent = false) {        try {            if (!this.bridge || typeof this.bridge.get_claude_tools_list !== 'function') {                if (!silent) {                    console.warn('‚ö†Ô∏è bridge.get_claude_tools_list method not available');                }                return { success: false, tools: [], error: 'Method not available' };            }            const result = await this.bridge.get_claude_tools_list();            if (!silent) {                console.log('üîß Claude tools list received:', result);            }            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞            if (typeof result === 'string') {                try {                    const parsed = JSON.parse(result);                    return { success: true, tools: parsed.tools || parsed.result || parsed || [] };                } catch (e) {                    if (!silent) {                        console.warn('‚ö†Ô∏è Failed to parse tools list JSON:', e);                    }                    return { success: false, tools: [], error: 'JSON parse error' };                }            }            if (result && typeof result === 'object') {                return {                    success: true,                    tools: result.tools || result.result || result.data || (Array.isArray(result) ? result : [])                };            }            return { success: false, tools: [], error: 'Invalid response format' };        } catch (error) {            if (!silent) {                console.error('‚ùå Error getting Claude tools list:', error);            }            return { success: false, tools: [], error: error.message };        }    }    setupEventListeners() {        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏        this.sendButton?.addEventListener('click', () => this.sendMessage());        // –ü–æ–ª–µ –≤–≤–æ–¥–∞        this.messageInput?.addEventListener('keydown', (e) => {            if (e.key === 'Enter' && !e.shiftKey) {                e.preventDefault();                this.sendMessage();            }        });        this.messageInput?.addEventListener('input', () => this.autoResizeTextarea());        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞        this.historyButton?.addEventListener('click', () => this.showHistoryModal());        this.exportButton?.addEventListener('click', () => this.showExportModal());        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏        this.closeHistoryBtn?.addEventListener('click', () => this.hideHistoryModal());        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞        this.closeExportBtn?.addEventListener('click', () => this.hideExportModal());        // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏—Å—Ç–æ—Ä–∏–∏        document.getElementById('new-chat-btn')?.addEventListener('click', () => this.clearChat());        document.getElementById('export-history-btn')?.addEventListener('click', () => this.exportCurrentChat());        document.getElementById('history-search')?.addEventListener('input', (e) => this.searchChatHistory(e.target.value));        // –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞        this.downloadBtn?.addEventListener('click', () => this.downloadChatHistory());        this.copyBtn?.addEventListener('click', () => this.copyChatHistory());        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–∏—Ö        this.historyModal?.addEventListener('click', (e) => {            if (e.target === this.historyModal) {                this.hideHistoryModal();            }        });        this.exportModal?.addEventListener('click', (e) => {            if (e.target === this.exportModal) {                this.hideExportModal();            }        });        // –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏        this.modelSelect?.addEventListener('change', (e) => {            this.currentModel = e.target.value;            this.saveSettings();        });    }    showHistoryModal() {        if (this.historyModal) {            this.historyModal.style.display = 'flex';            this.displayChatHistory();        }    }    hideHistoryModal() {        if (this.historyModal) {            this.historyModal.style.display = 'none';        }    }    showExportModal() {        if (this.exportModal) {            this.exportModal.style.display = 'flex';            this.updateExportPreview();        }    }    hideExportModal() {        if (this.exportModal) {            this.exportModal.style.display = 'none';        }    }    autoResizeTextarea() {        if (this.messageInput) {            this.messageInput.style.height = 'auto';            this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';        }    }    updateExportPreview() {        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞        const format = document.getElementById('export-format')?.value || 'json';        const content = this.exportContent;        if (content) {            const exportData = this.formatChatHistory(format);            content.textContent = exportData.substring(0, 500) + (exportData.length > 500 ? '...' : '');        }    }    formatChatHistory(format) {        const messages = this.chatHistory;        switch (format) {            case 'txt':                return messages.map(msg => ${msg.sender}: ${msg.content}).join('\\n\\n');            case 'md':                return messages.map(msg => ${msg.sender}:\\n${msg.content}\\n).join('\\n');            case 'json':            default:                return JSON.stringify(messages, null, 2);        }    }    downloadChatHistory() {        const format = document.getElementById('export-format')?.value || 'json';        const content = this.formatChatHistory(format);        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');        const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });        const url = URL.createObjectURL(blob);        const a = document.createElement('a');        a.href = url;        a.download = gopiai_chat_history_${timestamp}.${format};        document.body.appendChild(a);        a.click();        document.body.removeChild(a);        URL.revokeObjectURL(url);        this.addSystemMessage(üìÅ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${format.toUpperCase()} —Ñ–æ—Ä–º–∞—Ç–µ);    }    copyChatHistory() {        const format = document.getElementById('export-format')?.value || 'json';        const content = this.formatChatHistory(format);        navigator.clipboard.writeText(content).then(() => {            this.addSystemMessage('üìã –ò—Å—Ç–æ—Ä–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');        }).catch(error => {            console.error('Error copying to clipboard:', error);            this.addSystemMessage('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');        });    }    clearChat() {        this.chatHistory = [];        this.messagesContainer.innerHTML = '';        this.hideHistoryModal();        this.addSystemMessage('üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω');    }    saveSettings() {        const settings = {            currentModel: this.currentModel,            isStreaming: this.isStreaming,            autoScroll: this.autoScroll,            theme: this.theme        };        localStorage.setItem('gopiaiChatSettings', JSON.stringify(settings));    }    loadSettings() {        try {            const settings = JSON.parse(localStorage.getItem('gopiaiChatSettings') || '{}');            this.currentModel = settings.currentModel || 'claude-sonnet-4';            this.isStreaming = settings.isStreaming !== false;            this.autoScroll = settings.autoScroll !== false;            this.theme = settings.theme || 'dark';            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º            if (this.modelSelect) {                this.modelSelect.value = this.currentModel;            }        } catch (error) {            console.warn('Failed to load settings:', error);        }    }    async sendMessage() {        const message = this.messageInput?.value.trim();        if (!message) return;        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞        this.messageInput.value = '';        this.autoResizeTextarea();        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è        this.addUserMessage(message);        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞        this.showTypingIndicator();        try {            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å puter.js            if (typeof puter === 'undefined') {                throw new Error('puter.js is not available');            }            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ puter.js            const response = await puter.ai.chat([                { role: 'user', content: message }            ], {                model: this.currentModel,                stream: this.isStreaming            });            this.hideTypingIndicator();            this.addAIMessage(response.message || response.content || 'No response');            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é            this.chatHistory.push({                timestamp: new Date().toISOString(),                sender: 'User',                content: message            });            this.chatHistory.push({                timestamp: new Date().toISOString(),                sender: 'AI',                content: response.message || response.content,                model: this.currentModel            });        } catch (error) {            this.hideTypingIndicator();            console.error('Error sending message:', error);            this.addSystemMessage('‚ùå Error: ' + error.message);        }    }    addUserMessage(message) {        const messageDiv = this.createMessageElement('user', 'You', message);        this.messagesContainer?.appendChild(messageDiv);        this.scrollToBottom();    }    addAIMessage(message) {        const messageDiv = this.createMessageElement('ai', 'ü§ñ GopiAI Assistant', message, this.currentModel);        this.messagesContainer?.appendChild(messageDiv);        this.scrollToBottom();    }    addSystemMessage(message) {        const messageDiv = this.createMessageElement('system', 'üîß System', message);        this.messagesContainer?.appendChild(messageDiv);        this.scrollToBottom();    }    createMessageElement(type, sender, content, model = null) {        const messageDiv = document.createElement('div');        messageDiv.className = message ${type}-message;        const bubbleDiv = document.createElement('div');        bubbleDiv.className = 'message-bubble';        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è        const headerDiv = document.createElement('div');        headerDiv.className = 'message-header';        const senderSpan = document.createElement('span');        senderSpan.className = 'sender';        senderSpan.textContent = sender;        headerDiv.appendChild(senderSpan);        if (model) {            const modelBadge = document.createElement('span');            modelBadge.className = 'model-badge';            modelBadge.textContent = model;            headerDiv.appendChild(modelBadge);        }        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è        const contentDiv = document.createElement('div');        contentDiv.className = 'message-content';        contentDiv.textContent = content;        // –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è        const timeDiv = document.createElement('div');        timeDiv.className = 'message-time';        timeDiv.textContent = new Date().toLocaleTimeString();        bubbleDiv.appendChild(headerDiv);        bubbleDiv.appendChild(contentDiv);        bubbleDiv.appendChild(timeDiv);        messageDiv.appendChild(bubbleDiv);        return messageDiv;    }    showTypingIndicator() {        if (this.typingIndicator) {            this.typingIndicator.style.display = 'flex';        }    }    hideTypingIndicator() {        if (this.typingIndicator) {            this.typingIndicator.style.display = 'none';        }    }    scrollToBottom() {        if (this.autoScroll && this.messagesContainer) {            setTimeout(() => {                this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;            }, 100);        }    }    initializeWebChannel() {        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebChannel –¥–ª—è —Å–≤—è–∑–∏ —Å Python        if (typeof QWebChannel !== 'undefined') {            new QWebChannel(qt.webChannelTransport, (channel) => {                this.bridge = channel.objects.bridge;                console.log('‚úÖ WebChannel bridge initialized');                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ—Å—Ç–∞                this.checkMemoryAvailability().then(() => {                    console.log('Memory availability check completed');                });            });        } else {            console.warn('‚ö†Ô∏è QWebChannel not available');        }    }}document.addEventListener('DOMContentLoaded', () => {    window.gopiaiChat = new GopiAIChatInterface();    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Python bridge    window.chat = window.gopiaiChat;    console.log('GopiAI Chat Interface initialized');});",
      "timestamp": "2025-06-17 05:26:39.680789",
      "metadata": {
        "timestamp": "2025-06-17T05:26:39.672794"
      }
    }
  ],
  "tags": [
    "webview",
    "chat",
    "interactive"
  ],
  "summary": "",
  "project_context": "GopiAI-WebView"
}