#!/usr/bin/env python3
"""
üìö –°–∫—Ä–∏–ø—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sys
from pathlib import Path
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
script_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(script_dir)
sys.path.append(parent_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ RAG —Å–∏—Å—Ç–µ–º—ã
try:
    from rag_memory_system import index_documents, search_documents
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ rag_memory_system: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

def index_crewai_documentation():
    """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é CrewAI –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI...")
    
    # –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    doc_path = os.path.join(parent_dir, "GopiAI-CrewAI", "crewai_complete_documentation.md")
    if not os.path.exists(doc_path):
        print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {doc_path}")
        return False
        
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {doc_path}")
    
    # –ß–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    try:
        with open(doc_path, 'r', encoding='utf-8') as f:
            doc_text = f.read()
            
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {len(doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
        chunks = []
        chunk_size = 1000
        overlap = 200
        
        for i in range(0, len(doc_text), chunk_size - overlap):
            chunk = doc_text[i:i+chunk_size]
            chunk_id = f"crewai_doc_{i//(chunk_size - overlap)}"
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç.–¥.)
            metadata = {
                "type": "crewai_documentation",
                "chunk_id": chunk_id,
                "position": i,
                "source": "crewai_complete_documentation.md"
            }
            
            chunks.append({
                "id": chunk_id,
                "text": chunk,
                "metadata": metadata
            })
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —á–∞–Ω–∫–∏
        index_documents(chunks, index_name="crewai_docs")
        
        print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        results = search_documents("How to create a crew with multiple agents", 
                                   index_name="crewai_docs",
                                   limit=1)
        
        if results:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
            print(f"–ù–∞–π–¥–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {results[0]['id']}")
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    index_crewai_documentation()