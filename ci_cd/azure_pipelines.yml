# Azure DevOps Pipeline for GopiAI Testing
# This file should be placed as azure-pipelines.yml in your repository root

trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
  paths:
    exclude:
    - docs/*
    - README.md

pr:
  branches:
    include:
    - main
    - develop

schedules:
- cron: "0 2 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - main
  always: true

variables:
  pythonVersion: '3.9'
  vmImageName: 'ubuntu-latest'
  
parameters:
- name: environment
  displayName: 'Target Environment'
  type: string
  default: 'development'
  values:
  - development
  - staging
  - production

- name: testTypes
  displayName: 'Test Types'
  type: string
  default: 'unit integration'

stages:
- stage: Build
  displayName: 'Build and Setup'
  jobs:
  - job: Setup
    displayName: 'Setup Environment'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        mkdir -p ci_cd/{logs,reports,artifacts}
      displayName: 'Create directories'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: 'source-code'
        publishLocation: 'pipeline'

- stage: CodeQuality
  displayName: 'Code Quality Analysis'
  dependsOn: Build
  jobs:
  - job: Linting
    displayName: 'Code Linting'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        pip install flake8 black isort mypy
        black --check --diff .
        isort --check-only --diff .
        flake8 . --format=junit-xml --output-file=flake8-results.xml
      displayName: 'Run linting'
      continueOnError: true
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'flake8-results.xml'
        testRunTitle: 'Linting Results'
      condition: always()

  - job: Security
    displayName: 'Security Analysis'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json
        safety check --json --output safety-report.json
      displayName: 'Run security analysis'
      continueOnError: true
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: 'security-reports'
      condition: always()

- stage: UnitTests
  displayName: 'Unit Tests'
  dependsOn: Build
  jobs:
  - job: UnitTestsMatrix
    displayName: 'Unit Tests'
    strategy:
      matrix:
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types unit
      displayName: 'Run unit tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'Unit Tests (Python $(python.version))'
      condition: always()
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'ci_cd/reports/*/coverage.xml'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'unit-test-results-$(python.version)'
      condition: always()

- stage: IntegrationTests
  displayName: 'Integration Tests'
  dependsOn: UnitTests
  condition: succeeded()
  jobs:
  - job: IntegrationTests
    displayName: 'Integration Tests'
    pool:
      vmImage: $(vmImageName)
    
    services:
      redis: redis:alpine
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types integration
      displayName: 'Run integration tests'
      env:
        OPENAI_API_KEY: $(OPENAI_API_KEY)
        ANTHROPIC_API_KEY: $(ANTHROPIC_API_KEY)
        GOOGLE_API_KEY: $(GOOGLE_API_KEY)
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'Integration Tests'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'integration-test-results'
      condition: always()

- stage: UITests
  displayName: 'UI Tests'
  dependsOn: UnitTests
  condition: succeeded()
  jobs:
  - job: UITests
    displayName: 'UI Tests'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
      displayName: 'Install system dependencies'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        xvfb-run -a python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types ui
      displayName: 'Run UI tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'UI Tests'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'ui-test-results'
      condition: always()

- stage: E2ETests
  displayName: 'End-to-End Tests'
  dependsOn: [IntegrationTests, UITests]
  condition: succeeded()
  jobs:
  - job: E2ETests
    displayName: 'E2E Tests'
    pool:
      vmImage: $(vmImageName)
    timeoutInMinutes: 45
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
      displayName: 'Install system dependencies'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        xvfb-run -a python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types e2e
      displayName: 'Run E2E tests'
      env:
        OPENAI_API_KEY: $(OPENAI_API_KEY)
        ANTHROPIC_API_KEY: $(ANTHROPIC_API_KEY)
        GOOGLE_API_KEY: $(GOOGLE_API_KEY)
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'E2E Tests'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'e2e-test-results'
      condition: always()

- stage: PerformanceTests
  displayName: 'Performance Tests'
  dependsOn: IntegrationTests
  condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Schedule'), eq('${{ parameters.testTypes }}', 'performance')))
  jobs:
  - job: PerformanceTests
    displayName: 'Performance Tests'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types performance
      displayName: 'Run performance tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'Performance Tests'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'performance-test-results'
      condition: always()

- stage: SecurityTests
  displayName: 'Security Tests'
  dependsOn: UnitTests
  condition: succeeded()
  jobs:
  - job: SecurityTests
    displayName: 'Security Tests'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ./GopiAI-Core
        pip install -e ./GopiAI-UI
        pip install -e ./GopiAI-CrewAI
      displayName: 'Install dependencies'
    
    - script: |
        python ci_cd/automated_test_runner.py \
          --environment ${{ parameters.environment }} \
          --test-types security
      displayName: 'Run security tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'ci_cd/reports/*/junit_results.xml'
        testRunTitle: 'Security Tests'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'ci_cd/reports'
        artifact: 'security-test-results'
      condition: always()

- stage: GenerateReports
  displayName: 'Generate Final Reports'
  dependsOn: [UnitTests, IntegrationTests, UITests, E2ETests, SecurityTests]
  condition: always()
  jobs:
  - job: GenerateReports
    displayName: 'Generate Comprehensive Report'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'source-code'
        targetPath: '$(System.DefaultWorkingDirectory)'
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: 'artifacts/'
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        python ci_cd/generate_ci_report.py \
          --artifacts-dir artifacts/ \
          --output-dir final-report/
      displayName: 'Generate comprehensive report'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'final-report'
        artifact: 'final-test-report'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'final-report/consolidated-junit.xml'
        testRunTitle: 'All Tests Summary'
      condition: always()

- stage: Deploy
  displayName: 'Deploy'
  dependsOn: [GenerateReports]
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq('${{ parameters.environment }}', 'production'))
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'source-code'
              targetPath: '$(System.DefaultWorkingDirectory)'
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
          
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install dependencies'
          
          - script: |
              python ci_cd/deploy.py \
                --environment production \
                --version $(Build.BuildNumber)
            displayName: 'Deploy to production'
          
          - script: |
              python ci_cd/send_notification.py \
                --type deployment \
                --status success \
                --environment production \
                --build-number $(Build.BuildNumber)
            displayName: 'Send deployment notification'