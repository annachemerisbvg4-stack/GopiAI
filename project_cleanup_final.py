#!/usr/bin/env python3
"""
üßπ –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –£–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê GOPIAI
===================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:
- –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤
- –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞  
- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 3 –∏—é–Ω—è 2025 –≥.
"""

import os
import shutil
import json
from pathlib import Path
from datetime import datetime
import zipfile

class ProjectCleaner:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —É–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.backup_path = self.base_path / "project_cleanup_backup"
        self.archive_path = self.base_path / "archive"
        self.report = []
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
        print(message)
        self.report.append(f"{datetime.now().strftime('%H:%M:%S')} - {message}")
    
    def create_backup_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
        self.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±—ç–∫–∞–ø–æ–≤...")
        
        directories = [
            self.backup_path / "legacy_interfaces",
            self.backup_path / "test_files", 
            self.backup_path / "temporary_files",
            self.archive_path / "old_versions"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            self.log(f"   ‚úÖ {directory.name}")
    
    def archive_legacy_interfaces(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        self.log("üóÉÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
        
        legacy_files = [
            "gopiai_standalone_interface_backup_damaged.py",
            "gopiai_standalone_interface_broken.py", 
            "gopiai_standalone_interface_old.py",
            "gopiai_standalone_interface_simple.py"
        ]
        
        moved_count = 0
        for file_name in legacy_files:
            source = self.base_path / file_name
            if source.exists():
                target = self.backup_path / "legacy_interfaces" / file_name
                shutil.move(str(source), str(target))
                self.log(f"   üì¶ {file_name} ‚Üí backup/legacy_interfaces/")
                moved_count += 1
        
        self.log(f"   ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
    
    def archive_test_files(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üß™ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        test_files = [
            "test_icons.py",
            "test_icons_themes.py", 
            "test_icon_adapter.py",
            "test_icon_mapping.py",
            "test_lucide_direct.py",
            "test_svg_rendering.py"
        ]
        
        moved_count = 0
        for file_name in test_files:
            source = self.base_path / file_name
            if source.exists():
                target = self.backup_path / "test_files" / file_name
                shutil.move(str(source), str(target))
                self.log(f"   üß™ {file_name} ‚Üí backup/test_files/")
                moved_count += 1
        
        self.log(f"   ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    def clean_temporary_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        temp_patterns = [
            "*.pyc",
            "*.tmp", 
            "*.log",
            "*_backup_*",
            "ui_debug.log"
        ]
        
        cleaned_count = 0
        for pattern in temp_patterns:
            for file_path in self.base_path.glob(pattern):
                if file_path.is_file():
                    file_path.unlink()
                    self.log(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω: {file_path.name}")
                    cleaned_count += 1
        
        # –û—á–∏—Å—Ç–∫–∞ __pycache__
        pycache_dirs = list(self.base_path.glob("**/__pycache__"))
        for pycache_dir in pycache_dirs:
            if pycache_dir.is_dir():
                shutil.rmtree(pycache_dir)
                self.log(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω: {pycache_dir}")
                cleaned_count += 1
        
        self.log(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    def organize_documentation(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        self.log("üìö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        docs_path = self.base_path / "docs"
        docs_path.mkdir(exist_ok=True)
        
        doc_files = [
            "CLEAN_MODULAR.md",
            "CLEANUP_REPORT.md", 
            "CURRENT_STATUS_REPORT.md",
            "MODULAR_REFACTORING_REPORT.md",
            "REFACTORING_SUMMARY.md",
            "icon_mapping_extraction_report.md",
            "PROJECT_CLEANUP_ANALYSIS.md"
        ]
        
        moved_count = 0
        for file_name in doc_files:
            source = self.base_path / file_name
            if source.exists():
                target = docs_path / file_name
                shutil.move(str(source), str(target))
                self.log(f"   üìÑ {file_name} ‚Üí docs/")
                moved_count += 1
        
        self.log(f"   ‚úÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ {moved_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    def create_project_structure_doc(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.log("üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        structure_doc = """# üèóÔ∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê GOPIAI
=============================================

## üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
```
gopiai_standalone_interface_modular.py  # üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (394 —Å—Ç—Ä–æ–∫–∏)
gopiai_standalone_interface.py          # üìö –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å)
gopiai_standalone_interface_clean.py    # üßπ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
test_modular_interface.py               # üß™ –¢–µ—Å—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
sync_to_rag.py                          # üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
auto_cleanup.py                         # üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
project_cleanup_final.py                # üßΩ –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞
```

## üé® –ú–æ–¥—É–ª–∏ UI (ui_components/)
```
ui_components/
‚îú‚îÄ‚îÄ __init__.py              # üéØ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚îú‚îÄ‚îÄ menu_bar.py             # üìã –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é (StandaloneMenuBar)
‚îú‚îÄ‚îÄ titlebar.py             # üè† –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ (StandaloneTitlebar, StandaloneTitlebarWithMenu)
‚îú‚îÄ‚îÄ file_explorer.py        # üìÅ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (FileExplorerWidget)
‚îú‚îÄ‚îÄ tab_widget.py           # üìë –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ (TabDocumentWidget)
‚îú‚îÄ‚îÄ chat_widget.py          # üí¨ –ò–ò —á–∞—Ç (ChatWidget)
‚îî‚îÄ‚îÄ terminal_widget.py      # ‚å®Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª (TerminalWidget)
```

## üéØ GopiAI –ú–æ–¥—É–ª–∏
```
GopiAI-Core/        # üß† –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
GopiAI-Widgets/     # üé® –í–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
GopiAI-App/         # üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
GopiAI-Extensions/  # üîå –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
GopiAI-Assets/      # üñºÔ∏è –†–µ—Å—É—Ä—Å—ã
```

## üóÉÔ∏è –ê—Ä—Ö–∏–≤ –∏ –±—ç–∫–∞–ø—ã
```
project_cleanup_backup/
‚îú‚îÄ‚îÄ legacy_interfaces/      # üì¶ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚îú‚îÄ‚îÄ test_files/            # üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
‚îî‚îÄ‚îÄ temporary_files/       # üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

archive/
‚îî‚îÄ‚îÄ old_versions/          # üìö –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```
docs/
‚îú‚îÄ‚îÄ MODULAR_REFACTORING_REPORT.md    # üìä –û—Ç—á–µ—Ç –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
‚îú‚îÄ‚îÄ REFACTORING_SUMMARY.md           # üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
‚îú‚îÄ‚îÄ CLEANUP_REPORT.md                # üßπ –û—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
‚îî‚îÄ‚îÄ [–¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã]               # üìÑ –ü—Ä–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

## üß† RAG —Å–∏—Å—Ç–µ–º–∞
```
rag_memory_system/          # üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏
‚îú‚îÄ‚îÄ project_sync/          # üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚îî‚îÄ‚îÄ memory_manager.py      # üßÆ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
```

## ‚ú® –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- üìè –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ **75%** (1593 ‚Üí 394 —Å—Ç—Ä–æ–∫–∏)
- üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ **–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** –∏–∑ 7 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- üîÑ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω **fallback —Ä–µ–∂–∏–º** –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
- üß™ –î–æ–±–∞–≤–ª–µ–Ω—ã **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã**
- üßπ –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ **–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞** –ø—Ä–æ–µ–∫—Ç–∞
- üß† –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ **RAG —Å–∏—Å—Ç–µ–º–∞** –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

## üéØ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞: –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ‚úÖ
"""
        
        structure_file = self.base_path / "PROJECT_STRUCTURE_FINAL.md"
        with open(structure_file, 'w', encoding='utf-8') as f:
            f.write(structure_doc)
        
        self.log("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–∞")
    
    def create_cleanup_summary(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± —É–±–æ—Ä–∫–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        summary = {
            "cleanup_date": timestamp,
            "actions_performed": self.report,
            "project_status": "CLEANED AND ORGANIZED",
            "modular_architecture": "ACTIVE",
            "main_file_size_reduction": "75% (1593 ‚Üí 394 lines)",
            "modules_created": 7,
            "backup_location": str(self.backup_path),
            "archive_location": str(self.archive_path),
            "documentation_location": "docs/",
            "final_structure": "PROJECT_STRUCTURE_FINAL.md"
        }
        
        summary_file = self.base_path / "CLEANUP_FINAL_REPORT.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        self.log("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: CLEANUP_FINAL_REPORT.json")
    
    def run_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —É–±–æ—Ä–∫–∏"""
        self.log("üßπ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ô –£–ë–û–†–ö–ò –ü–†–û–ï–ö–¢–ê GOPIAI")
        self.log("=" * 60)
        
        try:
            self.create_backup_structure()
            self.archive_legacy_interfaces()
            self.archive_test_files()
            self.clean_temporary_files()
            self.organize_documentation()
            self.create_project_structure_doc()
            self.create_cleanup_summary()
            
            self.log("=" * 60)
            self.log("üéâ –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –£–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            self.log("‚ú® –ü—Ä–æ–µ–∫—Ç GopiAI —Ç–µ–ø–µ—Ä—å —á–∏—Å—Ç—ã–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π")
            self.log(f"üì¶ –ë—ç–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.backup_path}")
            self.log(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤: docs/")
            self.log("üöÄ –ì–æ—Ç–æ–≤ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é!")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–æ—Ä–∫–µ: {e}")
            raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    cleaner = ProjectCleaner()
    cleaner.run_cleanup()

if __name__ == "__main__":
    main()
