#!/usr/bin/env python3
"""
üßπü™Ñ RAG Cleanup Wizard - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ GopiAI –æ—Ç RAG –Ω–∞—Å–ª–µ–¥–∏—è
–ê–≤—Ç–æ—Ä: GitHub Copilot
–î–∞—Ç–∞: 2024

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. üîç –ù–∞—Ö–æ–¥–∏—Ç –í–°–ï —Ñ–∞–π–ª—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ RAG 
2. üóëÔ∏è –£–¥–∞–ª—è–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –∞—Ä—Ö–∏–≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
3. ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å txtai
4. üì¶ –î–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø—ã –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
5. üéØ –ì–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –∫ —á–∏—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å txtai
"""

import os
import sys
import shutil
import json
import re
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Set

class RAGCleanupWizard:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / f"rag_cleanup_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.log_file = self.project_root / "rag_cleanup.log"
        
        # –§–∞–π–ª—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        self.files_to_delete = [
            "start_rag_server.py",
            "test_rag_simple.py", 
            "test_rag_integration.py",
            "test_rag_integration_final.py", 
            "test_new_rag_integration.py",
            "test_final_integration.py",
            "fix_422_error.py",
            "windows_server_diagnostics.py",
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥ txtai)
        self.files_to_modify = [
            "GopiAI-UI/gopiai/ui/components/claude_tools_handler.py",
            "GopiAI-WebView/gopiai/webview/js_bridge.py",
            "GopiAI-WebView/gopiai/webview/chat_memory.py",
            "GopiAI-UI/gopiai/ui/components/memory_initializer.py"
        ]
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.dirs_to_backup_and_clean = [
            "rag_memory_system",
            "rag_memory_env",
            "tests",
            "project_health"
        ]
        
    def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_msg = f"[{timestamp}] {message}"
        print(log_msg)
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_msg + "\n")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π"""
        self.log("üîÑ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        
        try:
            self.backup_dir.mkdir(exist_ok=True)
            
            # –ë—ç–∫–∞–ø –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for file_name in self.files_to_delete:
                file_path = self.project_root / file_name
                if file_path.exists():
                    backup_path = self.backup_dir / file_name
                    if file_path.is_dir():
                        shutil.copytree(file_path, backup_path)
                    else:
                        shutil.copy2(file_path, backup_path)
                    self.log(f"üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {file_name}")
            
            # –ë—ç–∫–∞–ø –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for dir_name in self.dirs_to_backup_and_clean:
                dir_path = self.project_root / dir_name
                if dir_path.exists():
                    backup_path = self.backup_dir / dir_name
                    try:
                        shutil.copytree(dir_path, backup_path, dirs_exist_ok=True)
                        self.log(f"üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {dir_name}: {e}")
            
            self.log(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: {self.backup_dir}")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            raise
    
    def clean_obsolete_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ RAG —Ñ–∞–π–ª—ã...")
        
        deleted_count = 0
        for file_name in self.files_to_delete:
            file_path = self.project_root / file_name
            if file_path.exists():
                try:
                    if file_path.is_dir():
                        shutil.rmtree(file_path)
                    else:
                        file_path.unlink()
                    self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {file_name}")
                    deleted_count += 1
                except Exception as e:
                    self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_name}: {e}")
        
        self.log(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    
    def clean_rag_memory_system(self):
        """–û—á–∏—Å—Ç–∫–∞ rag_memory_system - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –¥–ª—è txtai"""
        rag_dir = self.project_root / "rag_memory_system"
        if not rag_dir.exists():
            self.log("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è rag_memory_system –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.log("üßπ –û—á–∏—â–∞–µ–º rag_memory_system...")
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω—É–∂–Ω—ã –¥–ª—è txtai)
        keep_files = {
            "models.py",
            "config.py", 
            "__init__.py",
            "txtai_memory_manager.py",
            "migrate_to_txtai.py"
        }
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        keep_dirs = {
            "conversations",
            "project_sync"
        }
        
        # –£–¥–∞–ª—è–µ–º –≤—Å—ë –ª–∏—à–Ω–µ–µ
        for item in rag_dir.iterdir():
            if item.name not in keep_files and item.name not in keep_dirs:
                try:
                    if item.is_dir():
                        shutil.rmtree(item)
                        self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: rag_memory_system/{item.name}")
                    else:
                        item.unlink()
                        self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: rag_memory_system/{item.name}")
                except Exception as e:
                    self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {item.name}: {e}")
    
    def update_init_file(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ __init__.py –¥–ª—è txtai"""
        init_file = self.project_root / "rag_memory_system" / "__init__.py"
        
        new_content = '''"""
GopiAI Memory System - TxtAI Integration
–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

from .txtai_memory_manager import TxtAIMemoryManager
from .models import ConversationSession, Message, MessageRole
from .config import MemoryConfig

__all__ = [
    "TxtAIMemoryManager",
    "ConversationSession", 
    "Message",
    "MessageRole",
    "MemoryConfig"
]

# –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ (txtai)
memory_manager = None

def get_memory_manager() -> TxtAIMemoryManager:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏"""
    global memory_manager
    if memory_manager is None:
        memory_manager = TxtAIMemoryManager()
    return memory_manager
'''
        
        try:
            with open(init_file, "w", encoding="utf-8") as f:
                f.write(new_content)
            self.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω __init__.py –¥–ª—è txtai")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è __init__.py: {e}")
    
    def update_requirements_txt(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt - —É–±–∏—Ä–∞–µ–º RAG –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º txtai"""
        req_file = self.project_root / "requirements.txt"
        if not req_file.exists():
            self.log("‚ö†Ô∏è requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.log("üìù –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt...")
        
        try:
            with open(req_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            
            # –£–±–∏—Ä–∞–µ–º RAG-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            rag_packages = ["chromadb", "sentence-transformers", "faiss-cpu", "langchain"]
            filtered_lines = []
            
            for line in lines:
                line = line.strip()
                if line and not any(pkg in line.lower() for pkg in rag_packages):
                    filtered_lines.append(line)
            
            # –î–æ–±–∞–≤–ª—è–µ–º txtai
            if not any("txtai" in line for line in filtered_lines):
                filtered_lines.append("txtai>=7.0.0")
                filtered_lines.append("sentence-transformers>=2.2.0")  # –ù—É–∂–µ–Ω –¥–ª—è txtai
            
            with open(req_file, "w", encoding="utf-8") as f:
                for line in filtered_lines:
                    f.write(line + "\n")
            
            self.log("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è txtai")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt: {e}")
    
    def update_integration_files(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        updates = {
            "GopiAI-UI/gopiai/ui/components/claude_tools_handler.py": self._update_claude_tools_handler,
            "GopiAI-WebView/gopiai/webview/js_bridge.py": self._update_js_bridge,
            "GopiAI-WebView/gopiai/webview/chat_memory.py": self._update_chat_memory,
            "GopiAI-UI/gopiai/ui/components/memory_initializer.py": self._update_memory_initializer
        }
        
        for file_path, update_func in updates.items():
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    update_func(full_path)
                    self.log(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.log(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def _update_claude_tools_handler(self, file_path: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ claude_tools_handler.py"""
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º RAG –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ txtai
        content = re.sub(
            r'from rag_memory_system\.memory_manager import.*',
            'from rag_memory_system import get_memory_manager',
            content
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º RAG API –≤—ã–∑–æ–≤—ã
        content = re.sub(
            r'requests\.(get|post)\(.*8080.*\)',
            '# –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ txtai - –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏',
            content
        )
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è RAG —Å–µ—Ä–≤–µ—Ä–∞
        content = re.sub(
            r'.*RAG server.*start_rag_server.*\n',
            '# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è txtai - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n',
            content
        )
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
    
    def _update_js_bridge(self, file_path: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ js_bridge.py"""
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        content = re.sub(
            r'from.*memory_manager.*import.*',
            'from rag_memory_system import get_memory_manager',
            content
        )
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
    
    def _update_chat_memory(self, file_path: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_memory.py"""
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è txtai
        content = re.sub(
            r'from.*memory_manager.*',
            'from rag_memory_system import get_memory_manager',
            content
        )
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
    
    def _update_memory_initializer(self, file_path: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ memory_initializer.py"""
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        content = re.sub(
            r'.*RAG.*memory.*manager.*',
            'memory_manager = get_memory_manager()  # txtai integration',
            content,
            flags=re.IGNORECASE
        )
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
    
    def clean_test_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üß™ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã...")
        
        test_dirs = [
            self.project_root / "tests",
            self.project_root / "GopiAI" / "tests"
        ]
        
        for test_dir in test_dirs:
            if test_dir.exists():
                for test_file in test_dir.glob("*rag*.py"):
                    try:
                        test_file.unlink()
                        self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç: {test_file.name}")
                    except Exception as e:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {test_file.name}: {e}")
    
    def create_new_test_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è txtai"""
        test_content = '''"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ txtai —Å GopiAI
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–µ –ø–∞–º—è—Ç–∏
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def test_txtai_integration():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ txtai"""
    try:
        from rag_memory_system import get_memory_manager
        
        manager = get_memory_manager()
        print("‚úÖ TxtAI –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = manager.create_session("TxtAI Test", "GopiAI-Testing")
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session.session_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = manager.add_message(
            session.session_id, 
            "user", 
            "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é txtai —Å GopiAI"
        )
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {message.message_id}")
        
        # –ü–æ–∏—Å–∫
        results = manager.search_conversations("txtai GopiAI", 5)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 40)
    
    if test_txtai_integration():
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! TxtAI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
'''
        
        test_file = self.project_root / "test_txtai_integration.py"
        try:
            with open(test_file, "w", encoding="utf-8") as f:
                f.write(test_content)
            self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç: {test_file.name}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
    
    def create_migration_summary(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        summary = f"""
# üéØ RAG ‚Üí TxtAI Migration Report
**–î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–ü—Ä–æ–µ–∫—Ç:** GopiAI Memory System

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

### üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã):
{chr(10).join('- ' + f for f in self.files_to_delete)}

### üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- rag_memory_system/ - –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–ª—è txtai —Ñ–∞–π–ª—ã
- tests/ - —É–¥–∞–ª–µ–Ω—ã RAG —Ç–µ—Å—Ç—ã
- project_health/ - –æ—á–∏—â–µ–Ω—ã RAG –º–µ—Ç—Ä–∏–∫–∏

### üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- rag_memory_system/__init__.py - –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è txtai  
- requirements.txt - txtai –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- claude_tools_handler.py - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å txtai
- js_bridge.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
- chat_memory.py - txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- memory_initializer.py - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è txtai

### üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:
–í—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: `{self.backup_dir.name}/`

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å txtai:**
   ```bash
   pip install txtai>=7.0.0 sentence-transformers>=2.2.0
   ```

2. **–°–æ–∑–¥–∞—Ç—å txtai_memory_manager.py** –≤ rag_memory_system/

3. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:**
   ```bash
   python test_txtai_integration.py
   ```

4. **–ó–∞–ø—É—Å—Ç–∏—Ç—å GopiAI UI:**
   ```bash
   python GopiAI-UI/gopiai/ui/main.py
   ```

## üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ txtai

- ‚úÖ –ù–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç embedded
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ  
- ‚úÖ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
- ‚úÖ –ú–µ–Ω—å—à–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
- ‚úÖ –õ—É—á—à–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Python –∫–æ–¥–æ–º

## üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
```bash
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
cp -r {self.backup_dir.name}/* ./
```

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ RAG Cleanup Wizard v1.0*
"""
        
        summary_file = self.project_root / "RAG_TO_TXTAI_MIGRATION_REPORT.md"
        try:
            with open(summary_file, "w", encoding="utf-8") as f:
                f.write(summary)
            self.log(f"üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏: {summary_file.name}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.log("ü™Ñ –ó–ê–ü–£–°–ö RAG CLEANUP WIZARD")
        self.log("=" * 50)
        
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self.create_backup()
            
            # 2. –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
            self.clean_obsolete_files()
            
            # 3. –û—á–∏—â–∞–µ–º rag_memory_system
            self.clean_rag_memory_system()
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º __init__.py
            self.update_init_file()
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
            self.update_requirements_txt()
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            self.update_integration_files()
            
            # 7. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç—ã
            self.clean_test_files()
            
            # 8. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
            self.create_new_test_file()
            
            # 9. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            self.create_migration_summary()
            
            self.log("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            self.log(f"üì¶ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.backup_dir}")
            self.log("üìä –°–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç: RAG_TO_TXTAI_MIGRATION_REPORT.md")
            self.log("üöÄ –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ txtai_memory_manager.py –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã!")
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            self.log("üîß –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞")
            raise

if __name__ == "__main__":
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent
    
    print("ü™Ñ RAG Cleanup Wizard v1.0")
    print("=" * 40)
    print("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ GopiAI –∫ txtai –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print()
    
    answer = input("ü§î –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É RAG —Å–∏—Å—Ç–µ–º—ã? (y/n): ").strip().lower()
    
    if answer in ['y', 'yes', '–¥–∞', '–¥']:
        wizard = RAGCleanupWizard(str(project_root))
        wizard.run_cleanup()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")