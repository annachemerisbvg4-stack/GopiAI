#!/usr/bin/env python3
"""
GopiAI Standalone Interface - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
=====================================

–ú–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GopiAI —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:
- Frameless –æ–∫–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ 
- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —á–∞—Ç —Å –ò–ò
- –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å: —Ç–µ—Ä–º–∏–Ω–∞–ª
- –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é: –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥

–ê–≤—Ç–æ—Ä: Crazy Coder
–í–µ—Ä—Å–∏—è: 0.2.0
–î–∞—Ç–∞: 2025-01-12
"""

import sys
import os
import warnings
from pathlib import Path
from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
gopiai_modules_root = os.path.abspath(script_dir) # GOPI_AI_MODULES

module_paths = [
    os.path.join(gopiai_modules_root, "GopiAI-Core"),
    os.path.join(gopiai_modules_root, "GopiAI-Widgets"),
    os.path.join(gopiai_modules_root, "GopiAI-App"),
    os.path.join(gopiai_modules_root, "GopiAI-Extensions"),
    os.path.join(gopiai_modules_root, "rag_memory_system"),
]

for path in module_paths:
    if path not in sys.path:
        sys.path.insert(0, path)

print("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ sys.path:")
for p in module_paths:
    print(f"- {p} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(p)})")

# –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º –∏–∫–æ–Ω–æ–∫ –∏ —Ç–µ–º
try:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–∑ minimal_app.py
    current_dir = os.path.dirname(os.path.abspath(__file__))
    gopi_modules_dir = current_dir  # –ú—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –º–æ–¥—É–ª–µ–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫–∞–∫ –≤ minimal_app.py
    app_path = os.path.join(gopi_modules_dir, "GopiAI-App")
    core_path = os.path.join(gopi_modules_dir, "GopiAI-Core")
    assets_path = os.path.join(gopi_modules_dir, "GopiAI-Assets")
    widgets_path = os.path.join(gopi_modules_dir, "GopiAI-Widgets")
    
    for path in [app_path, core_path, assets_path, widgets_path]:
        if os.path.exists(path) and path not in sys.path:
            sys.path.insert(0, path)      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ GopiAI Core
    from gopiai.core.simple_theme_manager import (
        load_theme, apply_theme, save_theme,
        MATERIAL_SKY_THEME, EMERALD_GARDEN_THEME,        CRIMSON_RELIC_THEME, GOLDEN_EMBER_THEME
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ThemeManager –∏–∑ GopiAI-Widgets
    from gopiai.widgets.managers.theme_manager import ThemeManager
      
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫
    class LucideIconManager:
        _instance = None
        
        def __init__(self):
            self.icons_path = Path(__file__).parent / "node_modules" / "lucide-static" / "icons"
            self._icon_cache = {}
            print(f"üîç LucideIconManager: –∏—â–µ–º –∏–∫–æ–Ω–∫–∏ –≤ {self.icons_path}")
            print(f"üìÇ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.icons_path.exists()}")
        
        @classmethod
        def instance(cls):
            if cls._instance is None:
                cls._instance = cls()
            return cls._instance
            
        def get_icon(self, icon_name: str, color_override=None, size=None):
            """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏"""
            if icon_name in self._icon_cache:
                return self._icon_cache[icon_name]
            
            # –ò—â–µ–º SVG —Ñ–∞–π–ª
            svg_path = self.icons_path / f"{icon_name}.svg"
            
            if svg_path.exists():
                # –°–æ–∑–¥–∞–µ–º QIcon –∏–∑ SVG —Ñ–∞–π–ª–∞
                icon = QIcon(str(svg_path))
                self._icon_cache[icon_name] = icon
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: {icon_name}")
                return icon
            else:
                print(f"‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icon_name} (–ø—É—Ç—å: {svg_path})")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
                empty_icon = QIcon()
                self._icon_cache[icon_name] = empty_icon
                return empty_icon
    
    ICON_MANAGER_AVAILABLE = True# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
    THEME_FILE = None
    
    # –ò–º–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∫–æ–Ω–æ–∫
    from icon_mapping import get_lucide_name
    
    THEMES_AVAILABLE = True
    ICON_MANAGER_AVAILABLE = True
    print("‚úì –ù–ê–°–¢–û–Ø–©–ò–ï —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º –∏ –∏–∫–æ–Ω–æ–∫ GopiAI –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
except ImportError as e:
    THEMES_AVAILABLE = False
    ICON_MANAGER_AVAILABLE = False
    print(f"‚ö† –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º/–∏–∫–æ–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
      # STUB: –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π GopiAI
    def load_theme():
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—É")
        return None
    
    def apply_theme(app):
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        return False
    
    def save_theme(theme_data):
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É")
        return False
    
    # STUB: –ó–∞–≥–ª—É—à–∫–∏ —Ç–µ–º
    MATERIAL_SKY_THEME = {"name": "Material Sky", "light": {}, "dark": {}}
    EMERALD_GARDEN_THEME = {"name": "Emerald Garden", "light": {}, "dark": {}}
    CRIMSON_RELIC_THEME = {"name": "Crimson Relic", "light": {}, "dark": {}}
    GOLDEN_EMBER_THEME = {"name": "Golden Ember", "light": {}, "dark": {}}
      # –£–¥–∞–ª–µ–Ω–æ: –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∞—è –∑–∞–≥–ª—É—à–∫–∞ LucideIconManager
    
    THEME_FILE = None  # STUB: –∑–∞–≥–ª—É—à–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Ç–µ–º—ã
    
    class ThemeManager:  # STUB: –∑–∞–≥–ª—É—à–∫–∞ ThemeManager
        def __init__(self):
            pass
    
    class icons_rc:
        pass
    def show_theme_dialog(parent=None):
        """–ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        from PySide6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel
        
        dialog = QDialog(parent)
        dialog.setWindowTitle("–í—ã–±–æ—Ä —Ç–µ–º—ã")
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"))
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ–º
        button_layout = QHBoxLayout()
        
        light_btn = QPushButton("–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
        dark_btn = QPushButton("–¢—ë–º–Ω–∞—è —Ç–µ–º–∞")
        
        button_layout.addWidget(light_btn)
        button_layout.addWidget(dark_btn)
        layout.addLayout(button_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –û–ö/–û—Ç–º–µ–Ω–∞
        ok_cancel_layout = QHBoxLayout()
        ok_btn = QPushButton("–û–ö")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        ok_cancel_layout.addWidget(ok_btn)
        ok_cancel_layout.addWidget(cancel_btn)
        layout.addLayout(ok_cancel_layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        ok_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥
        return dialog.exec() == QDialog.DialogCode.Accepted
    
    def apply_theme(*args, **kwargs):        pass


# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã PySide6
from PySide6.QtCore import Qt, Signal, QPoint, QSize, QRect, QTimer
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QMenuBar, QMenu, QFrame, QLabel, QPushButton, QSplitter,
    QTreeView, QFileSystemModel, QTabWidget, QTextEdit, QFileDialog,
    QMessageBox
)
from PySide6.QtGui import QIcon, QFont, QPalette, QMouseEvent, QAction, QResizeEvent

# =============================================================================
# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# =============================================================================

class StandaloneMenuBar(QMenuBar):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω—é
    newFileRequested = Signal()
    openFileRequested = Signal()
    openFolderRequested = Signal()
    saveRequested = Signal()
    saveAsRequested = Signal()
    exitRequested = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã –º–µ–Ω—é –≤–∏–¥–∞
    openTextEditorRequested = Signal()
    openProjectExplorerRequested = Signal()
    openChatRequested = Signal()
    openBrowserRequested = Signal()
    openTerminalRequested = Signal()
      # –°–∏–≥–Ω–∞–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    toggleProductivityExtension = Signal()
    toggleVoiceExtension = Signal()
    toggleAiToolsExtension = Signal()
      # –°–∏–≥–Ω–∞–ª—ã —Ç–µ–º—ã
    changeThemeRequested = Signal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self._build_menu()

    def _build_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é"""
        # –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
        file_menu = self.addMenu("–§–∞–π–ª")
        self.new_action = file_menu.addAction("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π")
        self.open_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        self.open_folder_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        file_menu.addSeparator()
        self.save_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_as_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫")
        file_menu.addSeparator()
        self.exit_action = file_menu.addAction("–í—ã—Ö–æ–¥")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.new_action.triggered.connect(self.newFileRequested.emit)
        self.open_action.triggered.connect(self.openFileRequested.emit)
        self.open_folder_action.triggered.connect(self.openFolderRequested.emit)
        self.save_action.triggered.connect(self.saveRequested.emit)
        self.save_as_action.triggered.connect(self.saveAsRequested.emit)
        self.exit_action.triggered.connect(self.exitRequested.emit)
        
        # –ú–µ–Ω—é –ø—Ä–∞–≤–∫–∏
        edit_menu = self.addMenu("–ü—Ä–∞–≤–∫–∞")
        self.undo_action = edit_menu.addAction("–û—Ç–º–µ–Ω–∞")
        self.redo_action = edit_menu.addAction("–ü–æ–≤—Ç–æ—Ä")
        edit_menu.addSeparator()
        self.cut_action = edit_menu.addAction("–í—ã—Ä–µ–∑–∞—Ç—å")
        self.copy_action = edit_menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        self.paste_action = edit_menu.addAction("–í—Å—Ç–∞–≤–∏—Ç—å")
        self.delete_action = edit_menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        edit_menu.addSeparator()
        self.select_all_action = edit_menu.addAction("–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë")
          # –ú–µ–Ω—é –≤–∏–¥–∞
        view_menu = self.addMenu("–í–∏–¥")
        project_explorer_action = view_menu.addAction("–§–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫")
        chat_action = view_menu.addAction("–ò–ò —á–∞—Ç")
        browser_action = view_menu.addAction("–ë—Ä–∞—É–∑–µ—Ä")
        terminal_action = view_menu.addAction("–¢–µ—Ä–º–∏–Ω–∞–ª")
        text_editor_action = view_menu.addAction("–†–µ–¥–∞–∫—Ç–æ—Ä")
        
        view_menu.addSeparator()
          # –ü–æ–¥–º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        extensions_menu = view_menu.addMenu("üîå –†–∞—Å—à–∏—Ä–µ–Ω–∏—è")
        self.productivity_action = extensions_menu.addAction("üìù –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        self.voice_action = extensions_menu.addAction("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.ai_tools_action = extensions_menu.addAction("ü§ñ –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        # –ü–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
        view_menu.addSeparator()
        theme_menu = view_menu.addMenu("üé® –¢–µ–º–∞")
        change_theme_action = theme_menu.addAction("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É...")
        change_theme_action.triggered.connect(self.changeThemeRequested.emit)
        
        # –î–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è checkable (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å)
        self.productivity_action.setCheckable(True)
        self.voice_action.setCheckable(True)
        self.ai_tools_action.setCheckable(True)
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
        self.productivity_action.setChecked(True)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∏–¥–∞
        project_explorer_action.triggered.connect(self.openProjectExplorerRequested.emit)
        chat_action.triggered.connect(self.openChatRequested.emit)
        browser_action.triggered.connect(self.openBrowserRequested.emit)
        terminal_action.triggered.connect(self.openTerminalRequested.emit)
        text_editor_action.triggered.connect(self.openTextEditorRequested.emit)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        self.productivity_action.triggered.connect(self.toggleProductivityExtension.emit)
        self.voice_action.triggered.connect(self.toggleVoiceExtension.emit)
        self.ai_tools_action.triggered.connect(self.toggleAiToolsExtension.emit)


class StandaloneTitlebar(QWidget):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π titlebar —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º"""
    
    minimizeClicked = Signal()
    maximizeClicked = Signal()
    restoreClicked = Signal()
    closeClicked = Signal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("titlebarWidget")
        self.setFixedHeight(40)
        self._drag_active = False
        self._drag_pos = QPoint()
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ titlebar"""
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 0, 10, 0)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.window_title = QLabel("üöÄ GopiAI v0.2.0", self)
        self.window_title.setObjectName("windowTitle")
        self.window_title.setAlignment(Qt.AlignmentFlag.AlignVCenter | Qt.AlignmentFlag.AlignLeft)
        layout.addWidget(self.window_title, 1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        self.minimize_button = QPushButton("‚Äî", self)
        self.minimize_button.setObjectName("minimizeButton")
        self.minimize_button.setFixedSize(40, 40)
        self.minimize_button.clicked.connect(self.minimizeClicked.emit)
        layout.addWidget(self.minimize_button)
        
        self.restore_button = QPushButton("‚ùê", self)
        self.restore_button.setObjectName("restoreButton")
        self.restore_button.setFixedSize(40, 40)
        self.restore_button.setVisible(False)
        self.restore_button.clicked.connect(self.restoreClicked.emit)
        layout.addWidget(self.restore_button)
        
        self.maximize_button = QPushButton("‚ñ°", self)
        self.maximize_button.setObjectName("maximizeButton")
        self.maximize_button.setFixedSize(40, 40)
        self.maximize_button.clicked.connect(self.maximizeClicked.emit)
        layout.addWidget(self.maximize_button)
        
        self.close_button = QPushButton("√ó", self)
        self.close_button.setObjectName("closeButton")
        self.close_button.setFixedSize(40, 40)
        self.close_button.clicked.connect(self.closeClicked.emit)
        layout.addWidget(self.close_button)

    def set_title(self, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        self.window_title.setText(text)

    def mousePressEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.button() == Qt.MouseButton.LeftButton:
            self._drag_active = True
            self._drag_pos = event.globalPosition().toPoint() - self.window().frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.buttons() == Qt.MouseButton.LeftButton and self._drag_active:
            self.window().move(event.globalPosition().toPoint() - self._drag_pos)
            event.accept()

    def mouseReleaseEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏"""
        self._drag_active = False


class StandaloneTitlebarWithMenu(QWidget):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π titlebar —Å –º–µ–Ω—é"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("titlebarWithMenu")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Titlebar
        self.titlebar = StandaloneTitlebar(self)
        layout.addWidget(self.titlebar)
        
        # –ú–µ–Ω—é
        self.menu_bar = StandaloneMenuBar(self)
        layout.addWidget(self.menu_bar)

    def set_window(self, window):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–∫–Ω—É"""
        self.window_ref = window
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ titlebar –∫ –æ–∫–Ω—É
        self.titlebar.minimizeClicked.connect(window.showMinimized)
        self.titlebar.maximizeClicked.connect(self._toggle_maximize)
        self.titlebar.restoreClicked.connect(self._toggle_maximize)
        self.titlebar.closeClicked.connect(window.close)

    def _toggle_maximize(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –∏ –æ–±—ã—á–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        if hasattr(self, 'window_ref'):
            if self.window_ref.isMaximized():
                self.window_ref.showNormal()
                self.titlebar.maximize_button.setVisible(True)
                self.titlebar.restore_button.setVisible(False)
            else:
                self.window_ref.showMaximized()
                self.titlebar.maximize_button.setVisible(False)
                self.titlebar.restore_button.setVisible(True)


class CustomGrip(QWidget):
    """–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
    
    def __init__(self, parent, direction):
        super().__init__(parent)
        self.direction = direction
        self._setup_cursor()

    def _setup_cursor(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≥—Ä–∏–ø–∞"""
        if self.direction in ['top', 'bottom']:
            self.setCursor(Qt.CursorShape.SizeVerCursor)
        elif self.direction in ['left', 'right']:
            self.setCursor(Qt.CursorShape.SizeHorCursor)
        elif self.direction in ['top-left', 'bottom-right']:
            self.setCursor(Qt.CursorShape.SizeFDiagCursor)
        elif self.direction in ['top-right', 'bottom-left']:
            self.setCursor(Qt.CursorShape.SizeBDiagCursor)

    def mousePressEvent(self, event):
        """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.start_pos = event.globalPosition().toPoint()
            self.start_geometry = self.window().geometry()

    def mouseMoveEvent(self, event):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if hasattr(self, 'start_pos'):
            delta = event.globalPosition().toPoint() - self.start_pos
            self._resize_window(delta)

    def _resize_window(self, delta):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        geo = self.start_geometry
        new_geo = QRect(geo)
        
        if 'top' in self.direction:
            new_geo.setTop(geo.top() + delta.y())
        if 'bottom' in self.direction:
            new_geo.setBottom(geo.bottom() + delta.y())
        if 'left' in self.direction:
            new_geo.setLeft(geo.left() + delta.x())
        if 'right' in self.direction:
            new_geo.setRight(geo.right() + delta.x())
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if new_geo.width() < 600:
            new_geo.setWidth(600)
        if new_geo.height() < 400:
            new_geo.setHeight(400)
        
        self.window().setGeometry(new_geo)


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# =============================================================================

class FileExplorerWidget(QWidget):
    """–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ä–µ–≤–æ–º –ø–∞–ø–æ–∫"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("fileExplorer")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìÅ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫")
        header.setObjectName("panelHeader")
        header.setFixedHeight(30)
        layout.addWidget(header)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.tree_view = QTreeView()
        self.file_model = QFileSystemModel()
        self.file_model.setRootPath("")
        self.tree_view.setModel(self.file_model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.tree_view.setRootIndex(self.file_model.index(os.path.expanduser("~")))
        self.tree_view.hideColumn(1)  # –†–∞–∑–º–µ—Ä
        self.tree_view.hideColumn(2)  # –¢–∏–ø
        self.tree_view.hideColumn(3)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        layout.addWidget(self.tree_view)


class TabDocumentWidget(QWidget):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("tabDocument")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–æ–∫"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # –í–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.setMovable(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        welcome_tab = QTextEdit()
        welcome_tab.setPlainText("""
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GopiAI v0.2.0!

–≠—Ç–æ –º–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üìÅ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å)
‚Ä¢ üìù –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å)
‚Ä¢ ü§ñ –ò–ò —á–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)  
‚Ä¢ üíª –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å)
‚Ä¢ üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é "–§–∞–π–ª" –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ "–í–∏–¥" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—è–º–∏.

–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∫–æ–º–∞–Ω–¥–æ–π GopiAI
        """)
        welcome_tab.setReadOnly(True)
        
        self.tab_widget.addTab(welcome_tab, "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
        layout.addWidget(self.tab_widget)

    def add_new_tab(self, title="–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", content=""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        editor = QTextEdit()
        editor.setPlainText(content)
        index = self.tab_widget.addTab(editor, title)
        self.tab_widget.setCurrentIndex(index)
        return editor


class ChatWidget(QWidget):
    """–ß–∞—Ç —Å –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("chatWidget")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        header.setObjectName("panelHeader")
        header.setFixedHeight(30)
        layout.addWidget(header)
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_area = QTextEdit()
        self.chat_area.setReadOnly(True)
        self.chat_area.setPlainText("""
ü§ñ GopiAI: –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏  
‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter!
        """)
        layout.addWidget(self.chat_area, 1)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_layout = QHBoxLayout()
        self.input_field = QTextEdit()
        self.input_field.setFixedHeight(60)
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        self.send_button = QPushButton("‚û§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.setFixedSize(100, 60)
        self.send_button.clicked.connect(self._send_message)
        
        input_layout.addWidget(self.input_field)
        input_layout.addWidget(self.send_button)
        layout.addLayout(input_layout)

    def _send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        message = self.input_field.toPlainText().strip()
        if message:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_text = self.chat_area.toPlainText()
            new_text = f"{current_text}\n\nüë§ –í—ã: {message}\n\nü§ñ GopiAI: –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏. –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
            self.chat_area.setPlainText(new_text)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            cursor = self.chat_area.textCursor()
            cursor.movePosition(cursor.MoveOperation.End)
            self.chat_area.setTextCursor(cursor)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.input_field.clear()


class TerminalWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("terminalWidget")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        header_layout = QHBoxLayout()
        header_label = QLabel("üíª –¢–µ—Ä–º–∏–Ω–∞–ª")
        header_label.setObjectName("panelHeader")
        
        new_tab_btn = QPushButton("+ –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
        new_tab_btn.setFixedHeight(25)
        new_tab_btn.clicked.connect(self._add_terminal_tab)
        
        header_layout.addWidget(header_label)
        header_layout.addStretch()
        header_layout.addWidget(new_tab_btn)
        layout.addLayout(header_layout)
        
        # –í–∫–ª–∞–¥–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        self.terminal_tabs = QTabWidget()
        self.terminal_tabs.setTabsClosable(True)
        self.terminal_tabs.tabCloseRequested.connect(self._close_terminal_tab)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self._add_terminal_tab()
        layout.addWidget(self.terminal_tabs)

    def _add_terminal_tab(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        terminal = QTextEdit()
        terminal.setStyleSheet("""
            QTextEdit {
                background-color: #1a1a1a;
                color: #00ff00;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 12px;
                border: none;
            }
        """)
        
        terminal.setPlainText("""
Microsoft Windows PowerShell
Copyright (C) Microsoft Corporation. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.

PS C:\\Users\\crazy\\GOPI_AI_MODULES> # –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
PS C:\\Users\\crazy\\GOPI_AI_MODULES> 
        """)
        
        tab_index = self.terminal_tabs.addTab(terminal, f"–¢–µ—Ä–º–∏–Ω–∞–ª {self.terminal_tabs.count() + 1}")
        self.terminal_tabs.setCurrentIndex(tab_index)

    def _close_terminal_tab(self, index):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        if self.terminal_tabs.count() > 1:
            self.terminal_tabs.removeTab(index)


# =============================================================================
# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
# =============================================================================

class FramelessGopiAIStandaloneWindow(QMainWindow):
    """–û—Å–Ω–æ–≤–Ω–æ–µ frameless –æ–∫–Ω–æ GopiAI —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GopiAI v0.2.0 - –ú–æ–¥—É–ª—å–Ω—ã–π –ò–ò –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        self.setMinimumSize(1000, 700)
        self.resize(1400, 900)
          # Frameless –æ–∫–Ω–æ
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground, False)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.TITLEBAR_HEIGHT = 40
        self.GRIP_SIZE = 10
        
        self._setup_ui()
        self._init_grips()
        self._init_themes_and_icons()
        self._apply_styles()
        self._connect_signals()
        self._setup_menu_icons()
        
        print("‚úì FramelessGopiAIStandaloneWindow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Titlebar —Å –º–µ–Ω—é
        self.titlebar_with_menu = StandaloneTitlebarWithMenu(self)
        self.titlebar_with_menu.set_window(self)
        self.titlebar_with_menu.setFixedHeight(self.TITLEBAR_HEIGHT * 2)  # –ú–µ—Å—Ç–æ –¥–ª—è –º–µ–Ω—é –∏ titlebar
        main_layout.addWidget(self.titlebar_with_menu)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–ª–∏—Ç—Ç–µ—Ä (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–ª—è –ø–∞–Ω–µ–ª–µ–π)
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(main_splitter, 1)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤)
        self.file_explorer = FileExplorerWidget()
        main_splitter.addWidget(self.file_explorer)
        
        # –ü—Ä–∞–≤—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∏ –Ω–∏–∑–∞)
        right_splitter = QSplitter(Qt.Orientation.Vertical)
        main_splitter.addWidget(right_splitter)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä (–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —á–∞—Ç–∞)
        center_splitter = QSplitter(Qt.Orientation.Horizontal)
        right_splitter.addWidget(center_splitter)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–≤–∫–ª–∞–¥–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        self.tab_document = TabDocumentWidget()
        center_splitter.addWidget(self.tab_document)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (—á–∞—Ç —Å –ò–ò)
        self.chat_widget = ChatWidget()
        center_splitter.addWidget(self.chat_widget)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (—Ç–µ—Ä–º–∏–Ω–∞–ª)
        self.terminal_widget = TerminalWidget()
        right_splitter.addWidget(self.terminal_widget)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        main_splitter.setSizes([250, 1150])  # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å : –û—Å—Ç–∞–ª—å–Ω–æ–µ
        center_splitter.setSizes([800, 350])  # –î–æ–∫—É–º–µ–Ω—Ç—ã : –ß–∞—Ç
        right_splitter.setSizes([700, 200])   # –í–µ—Ä—Ö : –¢–µ—Ä–º–∏–Ω–∞–ª

    def _init_grips(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∏–ø–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        self.grips = {}
        directions = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right']
        
        for direction in directions:
            grip = CustomGrip(self, direction)
            self.grips[direction] = grip
        
        self._update_grips()
        print("‚úì –ì—Ä–∏–ø—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def _update_grips(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≥—Ä–∏–ø–æ–≤"""
        rect = self.rect()
        grip_size = self.GRIP_SIZE
        
        # –£–≥–ª–æ–≤—ã–µ –≥—Ä–∏–ø—ã
        self.grips['top-left'].setGeometry(0, 0, grip_size, grip_size)
        self.grips['top-right'].setGeometry(rect.width() - grip_size, 0, grip_size, grip_size)
        self.grips['bottom-left'].setGeometry(0, rect.height() - grip_size, grip_size, grip_size)
        self.grips['bottom-right'].setGeometry(rect.width() - grip_size, rect.height() - grip_size, grip_size, grip_size)
        
        # –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∏–ø—ã
        self.grips['top'].setGeometry(grip_size, 0, rect.width() - 2 * grip_size, grip_size)
        self.grips['bottom'].setGeometry(grip_size, rect.height() - grip_size, rect.width() - 2 * grip_size, grip_size)
        self.grips['left'].setGeometry(0, grip_size, grip_size, rect.height() - 2 * grip_size)
        self.grips['right'].setGeometry(rect.width() - grip_size, grip_size, grip_size, rect.height() - 2 * grip_size)

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π Material Sky"""
        self.setStyleSheet("""
            /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–∫–Ω–∞ */
            QMainWindow {
                background-color: #1a1a1a;
                color: #ffffff;
                border: 1px solid #333333;
            }
            
            /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∞–Ω–µ–ª–µ–π */
            QLabel[objectName="panelHeader"] {
                background-color: #2d2d2d;
                color: #ffffff;
                padding: 5px 10px;
                font-weight: bold;
                border-bottom: 1px solid #444444;
            }
            
            /* Titlebar */
            QWidget[objectName="titlebarWidget"] {
                background-color: #2d2d2d;
                border-bottom: 1px solid #444444;
            }
            
            QLabel[objectName="windowTitle"] {
                color: #ffffff;
                font-size: 14px;
                font-weight: bold;
            }
            
            /* –ö–Ω–æ–ø–∫–∏ titlebar */
            QPushButton[objectName="minimizeButton"], 
            QPushButton[objectName="maximizeButton"],
            QPushButton[objectName="restoreButton"] {
                background-color: transparent;
                color: #ffffff;
                border: none;
                font-size: 16px;
            }
            
            QPushButton[objectName="minimizeButton"]:hover,
            QPushButton[objectName="maximizeButton"]:hover,
            QPushButton[objectName="restoreButton"]:hover {
                background-color: #404040;
            }
            
            QPushButton[objectName="closeButton"] {
                background-color: transparent;
                color: #ffffff;
                border: none;
                font-size: 16px;
            }
            
            QPushButton[objectName="closeButton"]:hover {
                background-color: #e74c3c;
            }
            
            /* –ú–µ–Ω—é */
            QMenuBar {
                background-color: #2d2d2d;
                color: #ffffff;
                border: none;
                padding: 2px;
            }
            
            QMenuBar::item {
                background-color: transparent;
                padding: 4px 8px;
                margin: 0px;
            }
            
            QMenuBar::item:selected {
                background-color: #404040;
            }
            
            QMenuBar::item:pressed {
                background-color: #505050;
            }
            
            QMenu {
                background-color: #2d2d2d;
                color: #ffffff;
                border: 1px solid #444444;
            }
            
            QMenu::item {
                padding: 5px 20px;
            }
            
            QMenu::item:selected {
                background-color: #404040;
            }
            
            /* –í–∏–¥–∂–µ—Ç—ã –ø–∞–Ω–µ–ª–µ–π */
            QWidget[objectName="fileExplorer"],
            QWidget[objectName="chatWidget"],
            QWidget[objectName="terminalWidget"] {
                background-color: #1e1e1e;
                border: 1px solid #333333;
            }
            
            QWidget[objectName="tabDocument"] {
                background-color: #1e1e1e;
            }
            
            /* –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ */
            QTreeView {
                background-color: #1e1e1e;
                color: #ffffff;
                border: none;
                selection-background-color: #404040;
            }
            
            QTreeView::item:hover {
                background-color: #333333;
            }
            
            /* –í–∫–ª–∞–¥–∫–∏ */
            QTabWidget::pane {
                background-color: #1e1e1e;
                border: 1px solid #333333;
            }
            
            QTabBar::tab {
                background-color: #2d2d2d;
                color: #ffffff;
                padding: 8px 12px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            
            QTabBar::tab:selected {
                background-color: #404040;
            }
            
            QTabBar::tab:hover {
                background-color: #505050;
            }
            
            /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ */
            QTextEdit {
                background-color: #1a1a1a;
                color: #ffffff;
                border: 1px solid #333333;
                font-family: 'Segoe UI', sans-serif;
                font-size: 12px;
                selection-background-color: #404040;
            }
            
            /* –ö–Ω–æ–ø–∫–∏ */
            QPushButton {
                background-color: #404040;
                color: #ffffff;
                border: 1px solid #555555;
                padding: 5px 10px;
                border-radius: 3px;
            }
            
            QPushButton:hover {
                background-color: #505050;
            }
            
            QPushButton:pressed {
                background-color: #606060;
            }
            
            /* –°–ø–ª–∏—Ç—Ç–µ—Ä—ã */
            QSplitter::handle {
                background-color: #333333;
            }
            
            QSplitter::handle:horizontal {
                width: 3px;
            }
            
            QSplitter::handle:vertical {
                height: 3px;
            }
        """)
        print("‚úì –¢–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–µ–Ω—é"""
        menu_bar = self.titlebar_with_menu.menu_bar
        
        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        menu_bar.newFileRequested.connect(self._handle_new_file)
        menu_bar.openFileRequested.connect(self._handle_open_file)
        menu_bar.openFolderRequested.connect(self._handle_open_folder)
        menu_bar.saveRequested.connect(self._handle_save)
        menu_bar.saveAsRequested.connect(self._handle_save_as)
        menu_bar.exitRequested.connect(self.close)
          # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        menu_bar.toggleProductivityExtension.connect(self._toggle_productivity_extension)
        menu_bar.toggleVoiceExtension.connect(self._toggle_voice_extension)
        menu_bar.toggleAiToolsExtension.connect(self._toggle_ai_tools_extension)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏
        menu_bar.changeThemeRequested.connect(self._handle_change_theme)
        
        print("‚úì –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        self._init_extensions()

    def _init_extensions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            import sys
            import os
            current_dir = os.path.dirname(__file__)
            extensions_path = os.path.join(current_dir, 'GopiAI-Extensions')
            
            if os.path.exists(extensions_path) and extensions_path not in sys.path:
                sys.path.insert(0, extensions_path)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            from gopiai.extensions import init_all_extensions
            init_all_extensions(self)
            print("‚úì –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except ImportError as e:
            print(f"‚ö† –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self._init_builtin_extensions()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}")
            self._init_builtin_extensions()

    def _init_builtin_extensions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π-–∑–∞–≥–ª—É—à–µ–∫"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è dock-–≤–∏–¥–∂–µ—Ç–æ–≤
        self._register_dock_handlers()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        self._load_local_extensions()
        
        print("‚úì –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def _load_local_extensions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –≤ sys.path
        extensions_path = os.path.join(os.path.dirname(__file__), "GopiAI-Extensions", "gopiai", "extensions")
        if os.path.exists(extensions_path) and extensions_path not in sys.path:
            sys.path.insert(0, extensions_path)
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º: {extensions_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try:
            import productivity_extension
            productivity_extension.auto_init(self)
        except ImportError as e:
            print(f"‚ö† –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        try:
            # Create a placeholder for voice extension since it's not available yet
            class VoicePlaceholder(QWidget):
                def __init__(self, parent=None):
                    super().__init__(parent)
                    layout = QVBoxLayout(self)
                    label = QLabel("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
                    layout.addWidget(label)
            
            # Register placeholder instead of real extension
            self.add_dock_widget("voice2text", VoicePlaceholder(self), "right")
            print("‚úì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω placeholder –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è")
            
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ placeholder –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")

    def _register_dock_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è dock-–≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
        self.dock_widgets = {}
        
    def add_dock_widget(self, name, widget, area='left'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ dock-–≤–∏–¥–∂–µ—Ç–∞"""
        # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if name in self.dock_widgets:
            existing = self.dock_widgets[name]
            existing.show()
            return existing

        self.dock_widgets[name] = widget

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if area == 'left':
            self._add_to_left_panel(widget)
        elif area == 'right':
            self._add_to_right_panel(widget)
        elif area == 'bottom':
            self._add_to_bottom_panel(widget)
        else:
            # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._add_to_right_panel(widget)

        widget.show()
        print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω dock-–≤–∏–¥–∂–µ—Ç: {name} –≤ –æ–±–ª–∞—Å—Ç—å {area}")
        
    def _add_to_left_panel(self, widget):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å"""
        # –ù–∞—Ö–æ–¥–∏–º –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
        file_explorer_parent = self.file_explorer.parent()
        if hasattr(file_explorer_parent, 'addWidget'):
            file_explorer_parent.addWidget(widget)

    def _add_to_right_panel(self, widget):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ–¥ —á–∞—Ç–æ–º
        chat_parent = self.chat_widget.parent()
        if hasattr(chat_parent, 'addWidget'):
            chat_parent.addWidget(widget)

    def _add_to_bottom_panel(self, widget):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å"""        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        if hasattr(self.terminal_widget, 'terminal_tabs'):
            tab_name = getattr(widget, 'objectName', lambda: '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞')()
            self.terminal_widget.terminal_tabs.addTab(widget, tab_name)
        
    def get_dock_widget(self, name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ dock-–≤–∏–¥–∂–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return self.dock_widgets.get(name)

    def _handle_new_file(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.tab_document.add_new_tab("–ù–æ–≤—ã–π —Ñ–∞–π–ª.txt", "# –ù–æ–≤—ã–π —Ñ–∞–π–ª\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")

    def _handle_open_file(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(self, "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                file_name = os.path.basename(file_path)
                self.tab_document.add_new_tab(file_name, content)
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{e}")

    def _handle_open_folder(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏"""
        folder_path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder_path:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
            index = self.file_explorer.file_model.index(folder_path)
            self.file_explorer.tree_view.setRootIndex(index)

    def _handle_save(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
    
    def _handle_save_as(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫"""
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫", "–§—É–Ω–∫—Ü–∏—è '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫' –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")

    def _handle_change_theme(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã —á–µ—Ä–µ–∑ –ù–ê–°–¢–û–Ø–©–£–Æ —Å–∏—Å—Ç–µ–º—É GopiAI"""
        if THEMES_AVAILABLE:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ –ù–ê–°–¢–û–Ø–©–ò–• —Ç–µ–º GopiAI
            self._show_theme_selection_dialog()
        else:
            # Fallback –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ GopiAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self._show_fallback_theme_dialog()

    def _show_theme_selection_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ç–µ–º GopiAI"""
        from PySide6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QComboBox
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–í—ã–±–æ—Ä —Ç–µ–º—ã GopiAI")
        dialog.setModal(True)
        dialog.resize(400, 300)
        
        layout = QVBoxLayout(dialog)
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ GopiAI:"))
        
        # –ö–æ–º–±–æ–±–æ–∫—Å —Å –ù–ê–°–¢–û–Ø–©–ò–ú–ò —Ç–µ–º–∞–º–∏
        theme_combo = QComboBox()
        theme_combo.addItem("Material Sky", MATERIAL_SKY_THEME)
        theme_combo.addItem("Emerald Garden", EMERALD_GARDEN_THEME)
        theme_combo.addItem("Crimson Relic", CRIMSON_RELIC_THEME)
        theme_combo.addItem("Golden Ember", GOLDEN_EMBER_THEME)
        layout.addWidget(theme_combo)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        mode_layout = QHBoxLayout()
        light_btn = QPushButton("–°–≤–µ—Ç–ª–∞—è")
        dark_btn = QPushButton("–¢—ë–º–Ω–∞—è")
        mode_layout.addWidget(QLabel("–†–µ–∂–∏–º:"))
        mode_layout.addWidget(light_btn)
        mode_layout.addWidget(dark_btn)
        layout.addLayout(mode_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_layout = QHBoxLayout()
        apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        button_layout.addWidget(apply_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        selected_mode = {"mode": "light"}
        
        def set_light():
            selected_mode["mode"] = "light"
            light_btn.setStyleSheet("background-color: #0078d4; color: white;")
            dark_btn.setStyleSheet("")
            
        def set_dark():
            selected_mode["mode"] = "dark"
            dark_btn.setStyleSheet("background-color: #0078d4; color: white;")
            light_btn.setStyleSheet("")
        
        light_btn.clicked.connect(set_light)
        dark_btn.clicked.connect(set_dark)
        apply_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        set_light()
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
            selected_theme = theme_combo.currentData()
            self._apply_gopi_theme(selected_theme, selected_mode["mode"])
    
    def _apply_gopi_theme(self, theme_data, mode="light"):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é —Ç–µ–º—É GopiAI"""
        try:
            if theme_data and mode in theme_data:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                colors = theme_data[mode]
                
                # –°–æ–∑–¥–∞—ë–º CSS —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤ GopiAI —Ç–µ–º—ã
                style = f"""
                QMainWindow {{
                    background-color: {colors.get('main_color', '#ffffff')};
                    color: {colors.get('text_color', '#000000')};
                }}
                QMenuBar {{
                    background-color: {colors.get('header_color', '#f0f0f0')};
                    color: {colors.get('titlebar_text', '#000000')};
                    border: 1px solid {colors.get('border_color', '#cccccc')};
                }}
                QMenu {{
                    background-color: {colors.get('header_color', '#f0f0f0')};
                    color: {colors.get('text_color', '#000000')};
                    border: 1px solid {colors.get('border_color', '#cccccc')};
                }}
                QPushButton {{
                    background-color: {colors.get('button_color', '#0078d4')};
                    color: {colors.get('text_color', '#ffffff')};
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                }}
                QPushButton:hover {{
                    background-color: {colors.get('button_hover_color', '#106ebe')};
                }}
                QTextEdit {{
                    background-color: {colors.get('main_color', '#ffffff')};
                    color: {colors.get('text_color', '#000000')};
                    border: 1px solid {colors.get('border_color', '#cccccc')};
                }}
                QTreeView {{
                    background-color: {colors.get('main_color', '#ffffff')};
                    color: {colors.get('text_color', '#000000')};
                    border: 1px solid {colors.get('border_color', '#cccccc')};
                }}
                """
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
                app = QApplication.instance()
                if app and hasattr(app, 'setStyleSheet'):
                    app.setStyleSheet(style)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    if save_theme({"selected_theme": theme_data["name"], "mode": mode, **colors}):
                        print(f"‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞ GopiAI: {theme_data['name']} ({mode})")
                        QMessageBox.information(self, "–¢–µ–º–∞", 
                            f"–¢–µ–º–∞ '{theme_data['name']}' ({mode}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
                    else:
                        print("‚ö† –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã")
                
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã GopiAI: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã:\n{e}")
            
    def _show_fallback_theme_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ GopiAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        from PySide6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–°–º–µ–Ω–∞ —Ç–µ–º—ã")
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        layout.addWidget(QLabel("–°–∏—Å—Ç–µ–º–∞ —Ç–µ–º GopiAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ç–µ–º—É:"))
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ç–µ–º—É")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        button_layout.addWidget(apply_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)
        
        apply_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self._apply_simple_theme()

    def _apply_simple_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–µ–º—ã"""
        app = QApplication.instance()
        if app and hasattr(app, 'setStyleSheet'):
            simple_theme = """
            QWidget {
                background-color: #2b2b2b;
                color: #ffffff;
                font-family: 'Segoe UI', sans-serif;
            }
            QMenuBar {
                background-color: #3c3c3c;
                color: #ffffff;
                border: none;
            }
            QPushButton {
                background-color: #0078d4;
                color: #ffffff;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            """
            app.setStyleSheet(simple_theme)
            print("‚úì –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É - QApplication –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    def _toggle_productivity_extension(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        widget_name = "productivity"
        if widget_name in self.dock_widgets:
            # –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
            widget = self.dock_widgets[widget_name]
            if widget.isVisible():
                widget.hide()
                print("üìù –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫—Ä—ã—Ç–æ")
            else:
                widget.show()
                print("üìù –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")
        else:
            print("‚ö† –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    def _toggle_voice_extension(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        widget_name = "voice2text"
        if widget_name in self.dock_widgets:
            # –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
            widget = self.dock_widgets[widget_name]
            if widget.isVisible():
                widget.hide()
                print("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
            else:
                widget.show()
                print("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
        else:
            print("‚ö† –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    def _toggle_ai_tools_extension(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        widget_name = "ai_tools"

        # –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if widget_name in self.dock_widgets:
            widget = self.dock_widgets[widget_name]
            widget.setVisible(not widget.isVisible())
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É gopiai.extensions
        try:
            from gopiai.extensions import _safely_import
            module = _safely_import("gopiai.extensions.ai_tools_extension")
            if module and hasattr(module, "init_extension"):
                module.init_extension(self)
                # –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
                if widget_name in self.dock_widgets:
                    self.dock_widgets[widget_name].show()
                    return
            QMessageBox.warning(self, "–ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ai_tools_extension –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {e}")

    def resizeEvent(self, event: QResizeEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
        self._update_grips()

    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞"""
        super().showEvent(event)
        self._update_grips()

    def _init_themes_and_icons(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º –∏ –∏–∫–æ–Ω–æ–∫"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
        self.theme_applied = False
        
        if ICON_MANAGER_AVAILABLE:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º –∏–∫–æ–Ω–æ–∫ –∫–∞–∫ –≤ GopiAI-App
                print("‚úì –°–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ LucideIconManager")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫: {e}")
                
        if THEMES_AVAILABLE:
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É—è –ù–ê–°–¢–û–Ø–©–£–Æ —Å–∏—Å—Ç–µ–º—É GopiAI
                app = QApplication.instance()
                if apply_theme(app):
                    self.theme_applied = True
                    print("‚úì –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GopiAI")
                print("‚úì –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º: {e}")

    def get_icon(self, icon_name: str, size: QSize = QSize(24, 24)) -> QIcon:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ LucideIconManager"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é LucideIconManager
            icon_manager = LucideIconManager.instance()
            icon = icon_manager.get_icon(icon_name, size=size)
            
            if not icon.isNull():
                print(f"‚úì –ò–∫–æ–Ω–∫–∞ {icon_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ LucideIconManager")
                return icon
            else:
                print(f"‚ö† –ò–∫–æ–Ω–∫–∞ {icon_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ LucideIconManager")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ {icon_name} —á–µ—Ä–µ–∑ LucideIconManager: {e}")
        
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ Qt
        try:
            theme_icon = QIcon.fromTheme(icon_name)
            if not theme_icon.isNull():
                print(f"‚úì –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ {icon_name} –Ω–∞–π–¥–µ–Ω–∞")
                return theme_icon
        except Exception as e:
            print(f"‚ö† –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ {icon_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        print(f"‚ùå –ò–∫–æ–Ω–∫–∞ {icon_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏–≥–¥–µ")
        return QIcon()
        print(f"‚ö† –ò–∫–æ–Ω–∫–∞ {icon_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è")
        return QIcon()

    def _setup_menu_icons(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"""
        if not ICON_MANAGER_AVAILABLE:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω—é —á–µ—Ä–µ–∑ titlebar
            menu_bar = self.titlebar_with_menu.menu_bar
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º –º–µ–Ω—é (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
            icon_size = QSize(24, 24)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–æ–∫
            
            if hasattr(menu_bar, 'new_action'):
                icon = self.get_icon("file-plus", icon_size)
                menu_bar.new_action.setIcon(icon)
                menu_bar.new_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ new_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
                
            if hasattr(menu_bar, 'open_action'):
                icon = self.get_icon("folder-open", icon_size)
                menu_bar.open_action.setIcon(icon)
                menu_bar.open_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ open_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
                
            if hasattr(menu_bar, 'save_action'):
                icon = self.get_icon("save", icon_size)
                menu_bar.save_action.setIcon(icon)
                menu_bar.save_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ save_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
                
            if hasattr(menu_bar, 'productivity_action'):
                icon = self.get_icon("wrench", icon_size)
                menu_bar.productivity_action.setIcon(icon)
                menu_bar.productivity_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ productivity_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
                
            if hasattr(menu_bar, 'voice_action'):
                icon = self.get_icon("mic", icon_size)
                menu_bar.voice_action.setIcon(icon)
                menu_bar.voice_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ voice_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
                
            if hasattr(menu_bar, 'ai_tools_action'):
                icon = self.get_icon("cpu", icon_size)
                menu_bar.ai_tools_action.setIcon(icon)
                menu_bar.ai_tools_action.setIconVisibleInMenu(True)
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ ai_tools_action: {not icon.isNull()}, —Ä–∞–∑–º–µ—Ä: {icon.actualSize(icon_size)}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
            menu_bar.update()
            self.titlebar_with_menu.update()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
            QTimer.singleShot(100, lambda: self._force_menu_update(menu_bar))
            
            print("üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫ –º–µ–Ω—é: {e}")

    def _force_menu_update(self, menu_bar):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            menu_bar.repaint()
            self.titlebar_with_menu.repaint()
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫
    class AutoIconManager:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∏–∫–æ–Ω–∫–∏
        AUTO_ICON_MAPPING = {
            # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            'new': 'file-plus', 'create': 'file-plus', '–Ω–æ–≤—ã–π': 'file-plus',
            'open': 'folder-open', '–æ—Ç–∫—Ä—ã—Ç—å': 'folder-open',
            'save': 'save', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å': 'save', 'save_as': 'save',
            'close': 'x', '–∑–∞–∫—Ä—ã—Ç—å': 'x',
            'exit': 'log-out', '–≤—ã—Ö–æ–¥': 'log-out', 'quit': 'log-out',
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            'copy': 'copy', '–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å': 'copy',
            'paste': 'clipboard', '–≤—Å—Ç–∞–≤–∏—Ç—å': 'clipboard',
            'cut': 'scissors', '–≤—ã—Ä–µ–∑–∞—Ç—å': 'scissors',
            'undo': 'undo', '–æ—Ç–º–µ–Ω–∏—Ç—å': 'undo',
            'redo': 'redo', '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å': 'redo',
            
            # –ü–æ–∏—Å–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            'search': 'search', '–ø–æ–∏—Å–∫': 'search', 'find': 'search',
            'replace': 'replace', '–∑–∞–º–µ–Ω–∏—Ç—å': 'replace',
            'refresh': 'refresh-cw', '–æ–±–Ω–æ–≤–∏—Ç—å': 'refresh-cw',
            
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'settings': 'settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏': 'settings', 'preferences': 'settings',
            'tools': 'wrench', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'wrench', 'productivity': 'wrench',
            'help': 'help-circle', '–ø–æ–º–æ—â—å': 'help-circle', 'about': 'info',
            
            # AI –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'ai': 'cpu', '–∏–∏': 'cpu', 'ai_tools': 'cpu',
            'voice': 'mic', '–≥–æ–ª–æ—Å': 'mic', 'speech': 'mic',
            'chat': 'message-circle', '—á–∞—Ç': 'message-circle',
            'code': 'code', '–∫–æ–¥': 'code', 'editor': 'code',
            'terminal': 'terminal', '—Ç–µ—Ä–º–∏–Ω–∞–ª': 'terminal',
            
            # –ü—Ä–æ–µ–∫—Ç –∏ —Ñ–∞–π–ª—ã
            'project': 'folder', '–ø—Ä–æ–µ–∫—Ç': 'folder',
            'folder': 'folder', '–ø–∞–ø–∫–∞': 'folder', 'directory': 'folder',
            'file': 'file', '—Ñ–∞–π–ª': 'file',
            
            # –†–∞–∑–Ω–æ–µ
            'run': 'play', '–∑–∞–ø—É—Å—Ç–∏—Ç—å': 'play', 'execute': 'play',
            'stop': 'square', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å': 'square',
            'pause': 'pause', '–ø–∞—É–∑–∞': 'pause',
            'download': 'download', '—Å–∫–∞—á–∞—Ç—å': 'download',
            'upload': 'upload', '–∑–∞–≥—Ä—É–∑–∏—Ç—å': 'upload',
        }
        
        @classmethod
        def auto_apply_icons(cls, widget, icon_manager):
            """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫–∏ –∫–æ –≤—Å–µ–º QAction –≤ –≤–∏–¥–∂–µ—Ç–µ"""
            applied_count = 0
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ QAction –≤ –≤–∏–¥–∂–µ—Ç–µ
            actions = cls._find_all_actions(widget)
            
            for action in actions:
                icon_name = cls._detect_icon_for_action(action)
                if icon_name:
                    try:
                        icon = icon_manager.get_icon(icon_name, QSize(24, 24))
                        if not icon.isNull():
                            action.setIcon(icon)
                            action.setIconVisibleInMenu(True)
                            applied_count += 1
                            print(f"üé® –ê–≤—Ç–æ–∏–∫–æ–Ω–∫–∞: {action.objectName() or action.text()} -> {icon_name}")
                    except Exception as e:
                        print(f"‚ö† –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–∫–æ–Ω–∫–∏ –¥–ª—è {action.text()}: {e}")
            
            print(f"‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ {applied_count} –∏–∫–æ–Ω–æ–∫")
            return applied_count
        
        @classmethod
        def _find_all_actions(cls, widget):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ QAction –≤ –≤–∏–¥–∂–µ—Ç–µ –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö"""
            actions = []
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            if hasattr(widget, 'actions'):
                actions.extend(widget.actions())
            
            # –ò—â–µ–º –≤ –º–µ–Ω—é
            if hasattr(widget, 'menuBar') and widget.menuBar():
                for menu in widget.menuBar().findChildren(QMenu):
                    actions.extend(menu.actions())
            
            # –ò—â–µ–º –≤ —Ç—É–ª–±–∞—Ä–∞—Ö
            for toolbar in widget.findChildren(QToolBar):
                actions.extend(toolbar.actions())
            
            # –ò—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–∞—Ö
            for child in widget.findChildren(QWidget):
                if hasattr(child, 'actions'):
                    actions.extend(child.actions())
            
            return actions
        
        @classmethod
        def _detect_icon_for_action(cls, action):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º objectName
            if action.objectName():
                name = action.objectName().lower().replace('_action', '').replace('action', '')
                if name in cls.AUTO_ICON_MAPPING:
                    return cls.AUTO_ICON_MAPPING[name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if action.text():
                text = action.text().lower().replace('&', '').replace('...', '').strip()
                
                # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if text in cls.AUTO_ICON_MAPPING:
                    return cls.AUTO_ICON_MAPPING[text]
                
                # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                for keyword, icon in cls.AUTO_ICON_MAPPING.items():
                    if keyword in text or text in keyword:
                        return icon
            
            return None
        
        @classmethod
        def register_module_icons(cls, module_widget, icon_manager):
            """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è"""
            print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –º–æ–¥—É–ª—è: {module_widget.__class__.__name__}")
            return cls.auto_apply_icons(module_widget, icon_manager)

    # ...existing code...
# –ò–º–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∫–æ–Ω–æ–∫
from icon_mapping import get_lucide_name


# =============================================================================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =============================================================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = QApplication(sys.argv)
        app.setApplicationName("GopiAI")
        app.setApplicationVersion("0.2.0")
        app.setOrganizationName("GopiAI Team")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window = FramelessGopiAIStandaloneWindow()
        window.show()
        
        print("üöÄ GopiAI Standalone Interface –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
