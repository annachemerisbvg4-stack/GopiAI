"""
üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
"""

def test_simple_memory():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Simple Memory Manager...")
    
    try:
        from rag_memory_system.simple_memory_manager import get_memory_manager
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = get_memory_manager()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = manager.create_session("–¢–µ—Å—Ç GopiAI")
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        manager.add_message(session_id, "user", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç txtai –≤ GopiAI?")
        manager.add_message(session_id, "assistant", "txtai –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤")
        manager.add_message(session_id, "user", "–ê —á—Ç–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å?")
        manager.add_message(session_id, "assistant", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ WebViewChatBridge –∏ JavaScript")
        
        print("‚úÖ –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        results = manager.search_memory("–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è txtai")
        print(f"‚úÖ –ü–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        for i, result in enumerate(results, 1):
            print(f"  {i}. {result['content'][:50]}... (score: {result['score']:.3f})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        enriched = manager.enrich_message("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ: {len(enriched)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = manager.get_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_simple_memory()
    print(f"\n{'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –ü–†–û–í–ê–õ'}")