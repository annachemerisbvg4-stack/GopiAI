#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å bridge –≤ GopiAI
=====================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—É—Ç—è–º–∏ –∫ bridge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º.
"""
import os
import sys
import shutil
from pathlib import Path

def fix_imports():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ chat.js
    chat_js_path = Path("GopiAI-WebView/gopiai/webview/assets/chat.js")
    if chat_js_path.exists():
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω {chat_js_path}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(chat_js_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebChannel
        if 'QWebChannel' in content:
            print("‚úÖ QWebChannel —É–∂–µ –µ—Å—Ç—å –≤ chat.js")
        else:
            print("‚ùå QWebChannel –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chat.js")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º webview_chat_widget.py
    widget_path = Path("GopiAI-UI/gopiai/ui/components/webview_chat_widget.py")
    if widget_path.exists():
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω {widget_path}")
        
        with open(widget_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        if 'js_bridge' in content:
            print("‚úÖ js_bridge –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        else:
            print("‚ùå js_bridge –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        if 'claude_tools_handler' in content:
            print("‚úÖ claude_tools_handler –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        else:
            print("‚ùå claude_tools_handler –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    js_bridge_path = Path("GopiAI-WebView/gopiai/webview/js_bridge.py")
    claude_tools_path = Path("GopiAI-UI/gopiai/ui/components/claude_tools_handler.py")
    
    print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π:")
    print(f"js_bridge.py: {'‚úÖ' if js_bridge_path.exists() else '‚ùå'} {js_bridge_path}")
    print(f"claude_tools_handler.py: {'‚úÖ' if claude_tools_path.exists() else '‚ùå'} {claude_tools_path}")

def create_bridge_test():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ bridge"""
    
    test_script = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Bridge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ GopiAI
=============================
"""
import sys
import os
sys.path.append(os.getcwd())

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã bridge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ bridge...")
    
    # –¢–µ—Å—Ç 1: js_bridge
    try:
        from GopiAI_WebView.gopiai.webview.js_bridge import JavaScriptBridge
        print("‚úÖ JavaScriptBridge –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ JavaScriptBridge: {e}")
    
    # –¢–µ—Å—Ç 2: claude_tools_handler
    try:
        from GopiAI_UI.gopiai.ui.components.claude_tools_handler import ClaudeToolsHandler
        print("‚úÖ ClaudeToolsHandler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ClaudeToolsHandler: {e}")
    
    # –¢–µ—Å—Ç 3: webview_chat_widget
    try:
        from GopiAI_UI.gopiai.ui.components.webview_chat_widget import WebViewChatWidget
        print("‚úÖ WebViewChatWidget –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ WebViewChatWidget: {e}")

if __name__ == "__main__":
    test_imports()
'''
    
    with open("test_bridge_imports.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω test_bridge_imports.py")

def create_detailed_diagnostic():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    
    diagnostic_script = '''#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GopiAI Bridge
==================================
"""
import sys
import os
from pathlib import Path

def diagnose_structure():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ GopiAI\\n")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
    paths_to_check = [
        "GopiAI-WebView/gopiai/webview/js_bridge.py",
        "GopiAI-WebView/gopiai/webview/assets/chat.js",
        "GopiAI-UI/gopiai/ui/components/claude_tools_handler.py",
        "GopiAI-UI/gopiai/ui/components/webview_chat_widget.py",
        "GopiAI-UI/gopiai/ui/main.py",
    ]
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    for path in paths_to_check:
        file_path = Path(path)
        status = "‚úÖ" if file_path.exists() else "‚ùå"
        size = f"({file_path.stat().st_size} bytes)" if file_path.exists() else ""
        print(f"  {status} {path} {size}")
    
    print("\\nüêç Python paths:")
    for path in sys.path:
        print(f"  {path}")
    
    print("\\nüîç –ü–æ–∏—Å–∫ bridge —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö bridge —Ñ–∞–π–ª–æ–≤
    bridge_files = []
    for root, dirs, files in os.walk("."):
        for file in files:
            if "bridge" in file.lower() and file.endswith(".py"):
                bridge_files.append(os.path.join(root, file))
    
    if bridge_files:
        print("üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ bridge —Ñ–∞–π–ª—ã:")
        for file in bridge_files:
            print(f"  ‚úÖ {file}")
    else:
        print("‚ùå Bridge —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def check_webchannel_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É WebChannel"""
    
    print("\\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ WebChannel setup...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat.js
    chat_js = Path("GopiAI-WebView/gopiai/webview/assets/chat.js")
    if chat_js.exists():
        with open(chat_js, 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = [
            ("QWebChannel", "QWebChannel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"),
            ("qt.webChannelTransport", "WebChannel transport"),
            ("execute_claude_tool", "Claude tool execution"),
            ("get_claude_tools_list", "Claude tools list"),
        ]
        
        for check, description in checks:
            status = "‚úÖ" if check in content else "‚ùå"
            print(f"  {status} {description}")
    
    print("\\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_bridge_imports.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –≤ WebView")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ editable —Ä–µ–∂–∏–º–µ")

if __name__ == "__main__":
    diagnose_structure()
    check_webchannel_setup()
'''
    
    with open("detailed_diagnostic.py", "w", encoding="utf-8") as f:
        f.write(diagnostic_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω detailed_diagnostic.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß GopiAI Bridge Issue Fixer")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    fix_imports()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    create_bridge_test()
    create_detailed_diagnostic()
    
    print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. python test_bridge_imports.py")
    print("2. python detailed_diagnostic.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å interaction_debug_logger.py")

if __name__ == "__main__":
    main()