#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG –ø–∞–º—è—Ç–∏ —Å GopiAI UI
================================================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∏ JavaScript —Ñ–∞–π–ª–æ–≤
2. –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG API 
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ClaudeToolsHandler
5. WebView —á–∞—Ç –≤–∏–¥–∂–µ—Ç
6. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
7. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
"""

import sys
import os
import json
import asyncio
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "GopiAI-Core"))
sys.path.insert(0, str(project_root / "GopiAI-UI"))
sys.path.insert(0, str(project_root / "GopiAI-WebView"))
sys.path.insert(0, str(project_root / "rag_memory_system"))

def test_python_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    files_to_check = [
        "rag_memory_system/models.py",
        "rag_memory_system/api.py", 
        "rag_memory_system/memory_manager.py",
        "GopiAI-UI/gopiai/ui/components/claude_tools_handler.py",
        "GopiAI-UI/gopiai/ui/components/webview_chat_widget.py"
    ]
    
    errors = []
    for file_path in files_to_check:
        full_path = project_root / file_path
        if full_path.exists():
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    compile(f.read(), str(full_path), 'exec')
                print(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
            except SyntaxError as e:
                error_msg = f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}"
                print(error_msg)
                errors.append(error_msg)
        else:
            error_msg = f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(error_msg)
            errors.append(error_msg)
    
    return errors

def test_javascript_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript —Ñ–∞–π–ª–æ–≤...")
    
    js_files = [
        "GopiAI-WebView/gopiai/webview/assets/chat.js"
    ]
    
    errors = []
    for js_file in js_files:
        full_path = project_root / js_file
        if full_path.exists():
            try:
                result = subprocess.run(
                    ["node", "-c", str(full_path)], 
                    capture_output=True, 
                    text=True,
                    cwd=project_root
                )
                if result.returncode == 0:
                    print(f"‚úÖ {js_file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
                else:
                    error_msg = f"‚ùå {js_file} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}"
                    print(error_msg)
                    errors.append(error_msg)
            except FileNotFoundError:
                error_msg = f"‚ö†Ô∏è Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {js_file}"
                print(error_msg)
        else:
            error_msg = f"‚ö†Ô∏è {js_file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(error_msg)
            errors.append(error_msg)
    
    return errors

def test_rag_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    errors = []
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependencies = [
        "fastapi", "uvicorn", "chromadb", 
        "langchain", "langchain_community", "sentence_transformers"
    ]
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} - –∏–º–ø–æ—Ä—Ç OK")
        except ImportError as e:
            error_msg = f"‚ùå {dep} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
            print(error_msg)
            errors.append(error_msg)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π RAG
    try:
        from rag_memory_system.models import ChatMessage, SearchResult, MemoryStats
        print("‚úÖ rag_memory_system.models - –∏–º–ø–æ—Ä—Ç OK")
    except ImportError as e:
        error_msg = f"‚ùå rag_memory_system.models - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
        print(error_msg)
        errors.append(error_msg)
    
    try:
        from rag_memory_system.memory_manager import MemoryManager
        print("‚úÖ rag_memory_system.memory_manager - –∏–º–ø–æ—Ä—Ç OK")
    except ImportError as e:
        error_msg = f"‚ùå rag_memory_system.memory_manager - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
        print(error_msg)
        errors.append(error_msg)
    
    return errors

def test_claude_tools_handler():
    """–¢–µ—Å—Ç ClaudeToolsHandler"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ClaudeToolsHandler...")
    
    errors = []
    
    try:
        from GopiAI.UI.gopiai.ui.components.claude_tools_handler import ClaudeToolsHandler
        print("‚úÖ ClaudeToolsHandler - –∏–º–ø–æ—Ä—Ç OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ search_memory
        if hasattr(ClaudeToolsHandler, 'search_memory'):
            print("‚úÖ ClaudeToolsHandler.search_memory - –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω")
        else:
            error_msg = "‚ùå ClaudeToolsHandler.search_memory - –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(error_msg)
            errors.append(error_msg)
            
    except ImportError as e:
        error_msg = f"‚ùå ClaudeToolsHandler - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
        print(error_msg)
        errors.append(error_msg)
    
    return errors

def test_webview_widget():
    """–¢–µ—Å—Ç WebView –≤–∏–¥–∂–µ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WebView —á–∞—Ç –≤–∏–¥–∂–µ—Ç–∞...")
    
    errors = []
    
    try:
        from GopiAI.UI.gopiai.ui.components.webview_chat_widget import WebViewChatWidget, WebViewChatBridge
        print("‚úÖ WebViewChatWidget - –∏–º–ø–æ—Ä—Ç OK")
        print("‚úÖ WebViewChatBridge - –∏–º–ø–æ—Ä—Ç OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ bridge
        bridge_methods = ['send_message', 'receive_ai_message', 'log_error']
        for method in bridge_methods:
            if hasattr(WebViewChatBridge, method):
                print(f"‚úÖ WebViewChatBridge.{method} - –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω")
            else:
                error_msg = f"‚ùå WebViewChatBridge.{method} - –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                print(error_msg)
                errors.append(error_msg)
                
    except ImportError as e:
        error_msg = f"‚ùå WebView –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
        print(error_msg)
        errors.append(error_msg)
    
    return errors

def test_html_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML —Ñ–∞–π–ª–æ–≤...")
    
    errors = []
    
    html_file = project_root / "GopiAI-WebView/gopiai/webview/assets/chat.html"
    if html_file.exists():
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            required_elements = [
                'id="history-btn"',
                'id="history-modal"', 
                'id="history-list"',
                'id="history-search"',
                'id="export-history-btn"',
                'id="new-chat-btn"',
                'id="close-history"'
            ]
            
            for element in required_elements:
                if element in html_content:
                    print(f"‚úÖ {element} - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                else:
                    error_msg = f"‚ùå {element} - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    print(error_msg)
                    errors.append(error_msg)
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SVG path
            if 'path d="M21 21L16.65 16.65"' in html_content:
                print("‚úÖ SVG path –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            elif 'path d="M21 21l-4.35-4.35"' in html_content:
                error_msg = "‚ùå SVG path –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É"
                print(error_msg)
                errors.append(error_msg)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML: {e}"
            print(error_msg)
            errors.append(error_msg)
    else:
        error_msg = "‚ùå chat.html –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(error_msg)
        errors.append(error_msg)
    
    return errors

async def test_rag_api():
    """–¢–µ—Å—Ç RAG API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG API...")
    
    errors = []
    
    try:
        import aiohttp
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get('http://localhost:8001/health', timeout=5) as response:
                    if response.status == 200:
                        print("‚úÖ RAG API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        error_msg = f"‚ùå RAG API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}"
                        print(error_msg)
                        errors.append(error_msg)
            except Exception as e:
                error_msg = f"‚ö†Ô∏è RAG API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}"
                print(error_msg)
                errors.append(error_msg)
                
    except ImportError:
        error_msg = "‚ùå aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(error_msg)
        errors.append(error_msg)
    
    return errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò RAG –ü–ê–ú–Ø–¢–ò –° GopiAI UI")
    print("=" * 70)
    
    all_errors = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    all_errors.extend(test_python_syntax())
    all_errors.extend(test_javascript_syntax())
    all_errors.extend(test_rag_imports())
    all_errors.extend(test_claude_tools_handler())
    all_errors.extend(test_webview_widget())
    all_errors.extend(test_html_structure())
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç API
    try:
        all_errors.extend(asyncio.run(test_rag_api()))
    except Exception as e:
        all_errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    if not all_errors:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ RAG –ø–∞–º—è—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GopiAI UI")
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ JavaScript –∏ HTML —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã")
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return 0
    else:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û {len(all_errors)} –û–®–ò–ë–û–ö:")
        print("-" * 50)
        for error in all_errors:
            print(error)
        print("\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return 1

if __name__ == "__main__":
    sys.exit(main())