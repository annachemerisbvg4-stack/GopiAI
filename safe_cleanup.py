#!/usr/bin/env python3
"""
üßπ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í
=====================================

–£–¥–∞–ª—è–µ—Ç/–∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:
- –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã (–º–æ–≥—É—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏)
- –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Å—Ç—ã–ª–∏

–í–ù–ò–ú–ê–ù–ò–ï: –°–æ–∑–¥–∞—ë—Ç –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º!
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

class SafeCleaner:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.base_path = Path(".")
        self.backup_path = self.base_path / "cleanup_backup" / datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_path.mkdir(parents=True, exist_ok=True)
        
    def log(self, message):
        print(f"üßπ {message}")
    
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        backup_file = self.backup_path / file_path.name
        shutil.copy2(file_path, backup_file)
        self.log(f"   üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
    
    def remove_empty_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ (–û–ü–ê–°–ù–û –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤!)"""
        self.log("–£–î–ê–õ–ï–ù–ò–ï –ü–£–°–¢–´–• –§–ê–ô–õ–û–í:")
        
        empty_files = [
            "icon_manager.py",
            "integrated_theme_manager.py", 
            "productivity_extension.py",
            "simple_module_connector.py"
        ]
        
        for file_name in empty_files:
            file_path = self.base_path / file_name
            if file_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                
                if not content:
                    self.backup_file(file_path)
                    file_path.unlink()
                    self.log(f"   ‚ùå –£–î–ê–õ–ï–ù: {file_name} (–±—ã–ª –ø—É—Å—Ç–æ–π)")
                else:
                    self.log(f"   ‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù: {file_name} (–Ω–µ –ø—É—Å—Ç–æ–π)")
            else:
                self.log(f"   ‚ùì –ù–ï –ù–ê–ô–î–ï–ù: {file_name}")
    
    def archive_duplicate_files(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("\\n–ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –§–ê–ô–õ–û–í:")
        
        archive_path = self.base_path / "archive" / "duplicates"
        archive_path.mkdir(parents=True, exist_ok=True)
        
        duplicates = [
            "gopiai_standalone_interface_clean.py"  # –î—É–±–ª–∏—Ä—É–µ—Ç modular –≤–µ—Ä—Å–∏—é
        ]
        
        for file_name in duplicates:
            file_path = self.base_path / file_name
            if file_path.exists():
                target_path = archive_path / file_name
                self.backup_file(file_path)
                shutil.move(str(file_path), str(target_path))
                self.log(f"   üì¶ –ê–†–•–ò–í–ò–†–û–í–ê–ù: {file_name} ‚Üí archive/duplicates/")
    
    def clean_temporary_adapters(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤-–∫–æ—Å—Ç—ã–ª–µ–π"""
        self.log("\\n–û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ö–û–°–¢–´–õ–ï–ô:")
        
        temp_files = [
            "simple_icon_adapter.py"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å –¥–ª—è IconAdapter
        ]
        
        for file_name in temp_files:
            file_path = self.base_path / file_name
            if file_path.exists():
                self.backup_file(file_path)
                file_path.unlink()
                self.log(f"   üóëÔ∏è –£–î–ê–õ–ï–ù: {file_name} (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å)")
    
    def organize_tests(self):
        """–ü–µ—Ä–µ–Ω–æ—Å —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫—É tests/"""
        self.log("\\n–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –¢–ï–°–¢–û–í:")
        
        tests_path = self.base_path / "tests"
        tests_path.mkdir(exist_ok=True)
        
        test_files = [
            "test_modular_interface.py"
        ]
        
        for file_name in test_files:
            file_path = self.base_path / file_name
            if file_path.exists():
                target_path = tests_path / file_name
                shutil.move(str(file_path), str(target_path))
                self.log(f"   üìÅ –ü–ï–†–ï–ú–ï–©–ï–ù: {file_name} ‚Üí tests/")
    
    def clean_node_modules(self):
        """–û—á–∏—Å—Ç–∫–∞ node_modules (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã)"""
        self.log("\\n–ü–†–û–í–ï–†–ö–ê NODE_MODULES:")
        
        node_modules = self.base_path / "node_modules"
        package_json = self.base_path / "package.json"
        
        if node_modules.exists():
            if package_json.exists():
                with open(package_json, 'r') as f:
                    content = f.read()
                    if len(content.strip()) < 100:  # –ü–æ—á—Ç–∏ –ø—É—Å—Ç–æ–π package.json
                        self.log(f"   ‚ö†Ô∏è package.json –≤—ã–≥–ª—è–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º: {len(content)} –±–∞–π—Ç")
                        response = input("   ü§î –£–¥–∞–ª–∏—Ç—å node_modules? (y/N): ")
                        if response.lower() == 'y':
                            shutil.rmtree(node_modules)
                            self.log(f"   üóëÔ∏è –£–î–ê–õ–ï–ù: node_modules/")
                        else:
                            self.log(f"   ‚úã –û–°–¢–ê–í–õ–ï–ù: node_modules/")
                    else:
                        self.log(f"   ‚úÖ –û–°–¢–ê–í–õ–ï–ù: node_modules/ (package.json –Ω–µ –ø—É—Å—Ç–æ–π)")
            else:
                self.log(f"   ‚ö†Ô∏è node_modules –±–µ–∑ package.json - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ")
    
    def create_safety_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏"""
        report = f"""# üßπ –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–ô –û–ß–ò–°–¢–ö–ï
=====================================

–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–ë—ç–∫–∞–ø: {self.backup_path}

## –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Å—Ç—ã–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã
- –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã

## –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- –î—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã ‚Üí archive/duplicates/

## –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- –¢–µ—Å—Ç—ã ‚Üí tests/

## ‚ö†Ô∏è –í–ê–ñ–ù–û:
–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±—ç–∫–∞–ø–µ: {self.backup_path}
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª!

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:
- –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤
- –û—á–∏—â–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø)
"""
        
        report_file = self.base_path / "SAFETY_CLEANUP_REPORT.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        self.log(f"\\nüìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    def run_safe_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ë–ï–ó–û–ü–ê–°–ù–û–ô –û–ß–ò–°–¢–ö–ò –ü–†–û–ï–ö–¢–ê")
        self.log("=" * 50)
        self.log(f"üì¶ –ë—ç–∫–∞–ø –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: {self.backup_path}")
        
        try:
            self.remove_empty_files()
            self.archive_duplicate_files()
            self.clean_temporary_adapters()
            self.organize_tests()
            self.clean_node_modules()
            self.create_safety_report()
            
            self.log("=" * 50)
            self.log("üéâ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            self.log("‚ú® –ü—Ä–æ–µ–∫—Ç —Å—Ç–∞–ª —á–∏—â–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ")
            self.log(f"üíæ –í—Å–µ –±—ç–∫–∞–ø—ã –≤: {self.backup_path}")
            
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            self.log("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç/–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç —Ñ–∞–π–ª—ã!")
    print("‚úÖ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø")
    
    response = input("\\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É? (y/N): ")
    
    if response.lower() == 'y':
        cleaner = SafeCleaner()
        cleaner.run_safe_cleanup()
    else:
        print("‚úã –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    main()
