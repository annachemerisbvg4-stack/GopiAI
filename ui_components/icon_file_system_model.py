"""
Custom File System Model —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∫–æ–Ω–æ–∫
===========================================

–ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.
"""

import os
from typing import Optional, Any
from PySide6.QtCore import QModelIndex, Qt
from PySide6.QtGui import QIcon, QPixmap, QPainter, QColor, QFont, QPen
from PySide6.QtWidgets import QFileSystemModel
from .file_type_detector import FileTypeDetector


class IconFileSystemModel(QFileSystemModel):
    """–ú–æ–¥–µ–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫"""
    
    def __init__(self, icon_manager=None, parent=None):
        super().__init__(parent)
        self.icon_manager = icon_manager
        self._icon_cache = {}  # –ö—ç—à –¥–ª—è –∏–∫–æ–Ω–æ–∫
        
    def data(self, index: QModelIndex, role: int = Qt.ItemDataRole.DisplayRole) -> Any:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫"""
        
        if role == Qt.ItemDataRole.DecorationRole:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = self.filePath(index)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if file_path in self._icon_cache:
                cached_icon = self._icon_cache[file_path]
                if cached_icon is not None:
                    return cached_icon
                else:
                    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É
                    return super().data(index, role)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞
            icon = self._get_file_icon(file_path)
            
            # –ö—ç—à–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É (–≤–∫–ª—é—á–∞—è None)
            self._icon_cache[file_path] = icon
            
            # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
            if icon is not None:
                return icon
            else:
                return super().data(index, role)
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        return super().data(index, role)
    
    def _get_file_icon(self, file_path: str) -> Optional[QIcon]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏–∫–æ–Ω–∫—É
            icon_name = FileTypeDetector.get_icon_for_file(file_path)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å SVG –∏–∫–æ–Ω–∫—É –∏–∑ assets/icons/lucide
            svg_icon = self._load_svg_icon(icon_name)
            if svg_icon and not svg_icon.isNull():
                return svg_icon
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.icon_manager:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    if hasattr(self.icon_manager, 'get_icon'):
                        icon = self.icon_manager.get_icon(icon_name)
                        if icon and not icon.isNull():
                            return icon
                    elif hasattr(self.icon_manager, 'create_icon'):
                        pixmap = self.icon_manager.create_icon(icon_name, size=16)
                        if pixmap and not pixmap.isNull():
                            return QIcon(pixmap)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ {icon_name}: {e}")
            
            # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
            return self._create_detailed_icon(file_path)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è {file_path}: {e}")
            return None
    
    def _load_svg_icon(self, icon_name: str) -> Optional[QIcon]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SVG –∏–∫–æ–Ω–∫—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ assets/icons/lucide"""
        try:
            # –ü—É—Ç—å –∫ SVG —Ñ–∞–π–ª—É
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            svg_path = os.path.join(base_dir, "assets", "icons", "lucide", f"{icon_name}.svg")
            
            if os.path.exists(svg_path):
                icon = QIcon(svg_path)
                if not icon.isNull():
                    return icon
                    
        except Exception as e:
            pass  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ SVG
            
        return None
    
    def _create_detailed_icon(self, file_path: str) -> QIcon:
        """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = FileTypeDetector.get_file_type(file_path)
            
            # –°–æ–∑–¥–∞—ë–º –∏–∫–æ–Ω–∫—É 16x16
            pixmap = QPixmap(16, 16)
            pixmap.fill(Qt.GlobalColor.transparent)
            
            painter = QPainter(pixmap)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
            
            if os.path.isdir(file_path):
                # –†–∏—Å—É–µ–º –ø–∞–ø–∫—É
                self._draw_folder_icon(painter)
            else:
                # –†–∏—Å—É–µ–º —Ñ–∞–π–ª –ø–æ —Ç–∏–ø—É
                self._draw_file_icon(painter, file_type)
            
            painter.end()
            
            return QIcon(pixmap)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–∏: {e}")
            return QIcon()  # –ü—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞
    
    def _draw_folder_icon(self, painter: QPainter):
        """–†–∏—Å—É–µ—Ç –∏–∫–æ–Ω–∫—É –ø–∞–ø–∫–∏"""
        # –¶–≤–µ—Ç –ø–∞–ø–∫–∏
        folder_color = QColor(255, 193, 7)  # –ñ—ë–ª—Ç—ã–π
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø–∞–ø–∫–∏
        painter.fillRect(2, 6, 12, 8, folder_color)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–∞–ø–∫–∏
        painter.fillRect(2, 4, 6, 3, folder_color.lighter(120))
        
        # –¢–µ–Ω—å
        painter.setPen(QPen(folder_color.darker(150), 1))
        painter.drawRect(2, 6, 12, 8)
    
    def _draw_file_icon(self, painter: QPainter, file_type: str):
        """–†–∏—Å—É–µ—Ç –∏–∫–æ–Ω–∫—É —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É"""
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        type_colors = {
            'image': QColor(76, 175, 80),      # –ó–µ–ª—ë–Ω—ã–π
            'document': QColor(33, 150, 243),  # –°–∏–Ω–∏–π
            'text': QColor(96, 125, 139),      # –°–µ—Ä—ã–π
            'spreadsheet': QColor(76, 175, 80), # –ó–µ–ª—ë–Ω—ã–π
            'presentation': QColor(255, 152, 0), # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'code': QColor(156, 39, 176),      # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'archive': QColor(121, 85, 72),    # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            'audio': QColor(233, 30, 99),      # –†–æ–∑–æ–≤—ã–π
            'video': QColor(244, 67, 54),      # –ö—Ä–∞—Å–Ω—ã–π
            'executable': QColor(255, 87, 34), # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'system': QColor(158, 158, 158),   # –°–µ—Ä—ã–π
            'config': QColor(255, 193, 7),     # –ñ—ë–ª—Ç—ã–π
            'font': QColor(63, 81, 181),       # –ò–Ω–¥–∏–≥–æ
            'database': QColor(139, 195, 74),  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
            'markdown': QColor(96, 125, 139),  # –°–µ—Ä—ã–π
            'log': QColor(158, 158, 158),      # –°–µ—Ä—ã–π
            'readme': QColor(3, 169, 244),     # –ì–æ–ª—É–±–æ–π
            'docker': QColor(33, 150, 243),    # –°–∏–Ω–∏–π
            'git': QColor(255, 152, 0),        # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'package': QColor(121, 85, 72),    # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            'python-package': QColor(76, 175, 80), # –ó–µ–ª—ë–Ω—ã–π
            'makefile': QColor(255, 87, 34),   # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'hidden': QColor(158, 158, 158),   # –°–µ—Ä—ã–π
            'file': QColor(96, 125, 139),      # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
        color = type_colors.get(file_type, QColor(96, 125, 139))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        painter.fillRect(3, 2, 9, 12, color)
        
        # –ó–∞–≥–Ω—É—Ç—ã–π —É–≥–æ–ª–æ–∫
        painter.fillRect(12, 2, 2, 3, color.darker(150))
        painter.fillRect(10, 4, 2, 1, color.darker(150))
        
        # –†–∞–º–∫–∞
        painter.setPen(QPen(color.darker(150), 1))
        painter.drawRect(3, 2, 9, 12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        self._draw_file_type_symbol(painter, file_type, color)
    
    def _draw_file_type_symbol(self, painter: QPainter, file_type: str, base_color: QColor):
        """–†–∏—Å—É–µ—Ç —Å–∏–º–≤–æ–ª —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        painter.setPen(QPen(base_color.darker(200), 1))
        font = QFont()
        font.setPixelSize(8)
        painter.setFont(font)
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        symbols = {
            'image': 'üñº',
            'document': 'DOC',
            'text': 'TXT',
            'spreadsheet': 'XLS',
            'presentation': 'PPT',
            'code': '</>', 
            'archive': 'ZIP',
            'audio': '‚ô™',
            'video': '‚ñ∂',
            'executable': 'EXE',
            'database': 'DB',
            'markdown': 'MD',
            'python-package': 'PY',
        }
        
        symbol = symbols.get(file_type, '')
        if symbol and len(symbol) <= 3:  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            painter.drawText(4, 10, symbol)
    
    def set_icon_manager(self, icon_manager):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫"""
        self.icon_manager = icon_manager
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self._icon_cache.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
        self.layoutChanged.emit()
    
    def clear_icon_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∏–∫–æ–Ω–æ–∫"""
        self._icon_cache.clear()
        self.layoutChanged.emit()
