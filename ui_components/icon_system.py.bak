"""
GopiAI Icon System - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫
================================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Lucide SVG –∏–∫–æ–Ω–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞–ø–ø–∏–Ω–≥–æ–º –Ω–∞–∑–≤–∞–Ω–∏–π.

–ê–≤—Ç–æ—Ä: Crazy Coder  
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
from pathlib import Path
from typing import Dict, Optional
from PySide6.QtCore import QSize, QTimer
from PySide6.QtGui import QIcon, QAction
from PySide6.QtWidgets import QMenuBar, QWidget

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫
try:
    from .simple_icon_manager import SimpleIconManager, get_icon
    icon_manager = SimpleIconManager.instance()
    print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫")
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SimpleIconManager: {e}")
    icon_manager = None

class AutoIconMapper:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–∫–æ–Ω–∫–∏"""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –≤ Lucide –∏–∫–æ–Ω–∫–∏
    AUTO_ICON_MAP = {
        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        'new': 'file-plus',
        'new_action': 'file-plus', 
        'create': 'file-plus',
        'open': 'folder-open',
        'open_action': 'folder-open',
        'save': 'save',
        'save_action': 'save',
        'save_as': 'save',
        'export': 'download',
        'import': 'upload',
        
        # –ü—Ä–∞–≤–∫–∞
        'edit': 'edit',
        'copy': 'copy',
        'paste': 'clipboard',
        'cut': 'scissors',
        'undo': 'undo',
        'redo': 'redo',
        'find': 'search',
        'replace': 'replace',
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        'tools': 'wrench',
        'productivity_action': 'wrench',
        'settings': 'settings',
        'config': 'settings',
        'preferences': 'sliders-horizontal',
        
        # AI –∏ –≥–æ–ª–æ—Å
        'ai_tools_action': 'cpu',
        'ai': 'cpu',
        'voice_action': 'mic',
        'voice': 'mic',
        'chat': 'message-circle',
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        'home': 'home',
        'back': 'arrow-left',
        'forward': 'arrow-right',
        'up': 'arrow-up',
        'down': 'arrow-down',
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä
        'view': 'eye',
        'zoom_in': 'zoom-in',
        'zoom_out': 'zoom-out',
        'fullscreen': 'maximize',
        
        # –ü–æ–º–æ—â—å
        'help': 'help-circle',
        'about': 'info',
        'documentation': 'book-open',
        
        # –ü—Ä–æ–µ–∫—Ç
        'project': 'folder',
        'workspace': 'folder-open',
        'terminal': 'terminal',
        'console': 'terminal',
        
        # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        'debug': 'bug',
        'run': 'play',
        'stop': 'square',
        'pause': 'pause',
        'code': 'code',
        'git': 'git-branch',
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        'exit': 'x',
        'quit': 'x',
        'close': 'x',
        'minimize': 'minus',
        'maximize': 'maximize',
        'refresh': 'refresh-cw',
        'reload': 'refresh-cw',
    }
    
    @classmethod
    def get_icon_name(cls, action_name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–µ–π—Å—Ç–≤–∏—è"""
        # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤/—Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        clean_name = action_name.lower().replace('_action', '').replace('action_', '')
        
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if clean_name in cls.AUTO_ICON_MAP:
            return cls.AUTO_ICON_MAP[clean_name]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for key, icon in cls.AUTO_ICON_MAP.items():
            if key in clean_name or clean_name in key:
                return icon
                
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if 'file' in clean_name:
            return 'file'
        elif 'folder' in clean_name or 'dir' in clean_name:
            return 'folder'
        elif 'save' in clean_name:
            return 'save'
        elif 'open' in clean_name:
            return 'folder-open'
        elif 'edit' in clean_name:
            return 'edit'
        elif 'tool' in clean_name:
            return 'wrench'
        elif 'setting' in clean_name:
            return 'settings'
        elif 'help' in clean_name:
            return 'help-circle'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 'circle'

class LucideIconManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Lucide SVG –∏–∫–æ–Ω–æ–∫"""
    
    _instance = None
    
    def __init__(self):
        self.icons_path = Path(__file__).parent.parent / "node_modules" / "lucide-static" / "icons"
        self._icon_cache = {}
        print(f"üîç LucideIconManager: –∏—â–µ–º –∏–∫–æ–Ω–∫–∏ –≤ {self.icons_path}")
        print(f"üìÇ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.icons_path.exists()}")
    
    @classmethod
    def instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
        
    def get_icon(self, icon_name: str, color_override=None, size=None) -> QIcon:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        if icon_name in self._icon_cache:
            return self._icon_cache[icon_name]
        
        # –ò—â–µ–º SVG —Ñ–∞–π–ª
        svg_path = self.icons_path / f"{icon_name}.svg"
        
        if svg_path.exists():
            # –°–æ–∑–¥–∞–µ–º QIcon –∏–∑ SVG —Ñ–∞–π–ª–∞
            icon = QIcon(str(svg_path))
            self._icon_cache[icon_name] = icon
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: {icon_name}")
            return icon
        else:
            print(f"‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icon_name} (–ø—É—Ç—å: {svg_path})")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
            empty_icon = QIcon()
            self._icon_cache[icon_name] = empty_icon
            return empty_icon

class AutoIconSystem:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫"""
    
    def __init__(self, icon_manager=None):
        if icon_manager is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π icon_manager –∏–∑ –º–æ–¥—É–ª—è
            global icon_manager
            if icon_manager is None:
                # –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∂–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SimpleIconManager
                try:
                    from .simple_icon_manager import SimpleIconManager
                    self.icon_manager = SimpleIconManager.instance()
                    print("‚úÖ AutoIconSystem –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SimpleIconManager")
                except ImportError:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SimpleIconManager, –∏–∫–æ–Ω–∫–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                    self.icon_manager = None
            else:
                self.icon_manager = icon_manager
        else:            self.icon_manager = icon_manager
            
        self.mapper = AutoIconMapper()
        self.default_size = QSize(24, 24)
        
    def apply_icons_to_menu(self, menu_bar: QMenuBar, icon_size: Optional[QSize] = None) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –∫–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –º–µ–Ω—é"""
        if icon_size is None:
            icon_size = self.default_size
            
        # –ï—Å–ª–∏ icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.icon_manager is None:
            print("‚ö†Ô∏è icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫ –º–µ–Ω—é")
            return 0
            
        applied_count = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –º–µ–Ω—é
        for action in menu_bar.findChildren(QAction):
            if action.objectName():  # –ï—Å–ª–∏ —É –¥–µ–π—Å—Ç–≤–∏—è –µ—Å—Ç—å –∏–º—è
                try:
                    icon_name = self.mapper.get_icon_name(action.objectName())
                    icon = self.icon_manager.get_icon(icon_name)
                    
                    if not icon.isNull():
                        action.setIcon(icon)
                        action.setIconVisibleInMenu(True)
                        applied_count += 1
                        print(f"‚úì –ê–≤—Ç–æ–∏–∫–æ–Ω–∫–∞: {action.objectName()} -> {icon_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫ {action.objectName()}: {e}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        menu_bar.update()
          # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        QTimer.singleShot(100, lambda: menu_bar.repaint())
        print(f"üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ {applied_count} –∏–∫–æ–Ω–æ–∫ –∫ –º–µ–Ω—é")
        return applied_count
        
    def apply_icons_to_widget(self, widget: QWidget, icon_size: Optional[QSize] = None) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –∫–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –≤–∏–¥–∂–µ—Ç–µ"""
        if icon_size is None:
            icon_size = self.default_size
            
        # –ï—Å–ª–∏ icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.icon_manager is None:
            print("‚ö†Ô∏è icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫ –≤–∏–¥–∂–µ—Ç—É")
            return 0
            
        applied_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–∏–¥–∂–µ—Ç–µ
        for action in widget.findChildren(QAction):
            if action.objectName():
                try:
                    icon_name = self.mapper.get_icon_name(action.objectName())
                    icon = self.icon_manager.get_icon(icon_name)
                    
                    if not icon.isNull():
                        action.setIcon(icon)
                        applied_count += 1
                        print(f"‚úì –ê–≤—Ç–æ–∏–∫–æ–Ω–∫–∞ –≤–∏–¥–∂–µ—Ç–∞: {action.objectName()} -> {icon_name}")                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫ {action.objectName()}: {e}")
        
        widget.update()
        print(f"üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ {applied_count} –∏–∫–æ–Ω–æ–∫ –∫ –≤–∏–¥–∂–µ—Ç—É")
        return applied_count
        
    def get_icon_for_action_name(self, action_name: str, icon_size: Optional[QSize] = None) -> QIcon:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        icon_name = self.mapper.get_icon_name(action_name)
        
        if self.icon_manager is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            print(f"‚ö†Ô∏è icon_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è {action_name}")
            return QIcon()
        
        return self.icon_manager.get_icon(icon_name)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_auto_icon_system = None

def get_auto_icon_system() -> AutoIconSystem:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫"""
    global _auto_icon_system
    if _auto_icon_system is None:
        _auto_icon_system = AutoIconSystem()
    return _auto_icon_system

def apply_auto_icons_to_menu(menu_bar: QMenuBar, icon_size: QSize = QSize(24, 24)) -> int:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–∏–∫–æ–Ω–æ–∫ –∫ –º–µ–Ω—é"""
    return get_auto_icon_system().apply_icons_to_menu(menu_bar, icon_size)

def apply_auto_icons_to_widget(widget: QWidget, icon_size: QSize = QSize(24, 24)) -> int:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–∏–∫–æ–Ω–æ–∫ –∫ –≤–∏–¥–∂–µ—Ç—É"""
    return get_auto_icon_system().apply_icons_to_widget(widget, icon_size)
