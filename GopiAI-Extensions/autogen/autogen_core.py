"""
AutoGen Core - –Ø–¥—Ä–æ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è GopiAI
"""

import os
import random
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AutoGen
try:
    from autogen import AssistantAgent, UserProxyAgent
    AUTOGEN_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è AutoGen –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install 'pyautogen[cerebras]'")
    AUTOGEN_AVAILABLE = False

class AutoGenConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è AutoGen –∞–≥–µ–Ω—Ç–æ–≤"""
    
    # üìä –ú–æ–¥–µ–ª–∏ Cerebras —Å –ª–∏–º–∏—Ç–∞–º–∏ Free Tier
    CEREBRAS_MODELS = [
        {
            "model": "llama3.1-8b",
            "api_key": os.environ.get("CEREBRAS_API_KEY"),
            "api_type": "cerebras"
            # –õ–∏–º–∏—Ç—ã: 30 req/min, 900 req/hour, 14400 req/day, 60k tokens/min
        },
        {
            "model": "llama-3.3-70b", 
            "api_key": os.environ.get("CEREBRAS_API_KEY"),
            "api_type": "cerebras"
            # –õ–∏–º–∏—Ç—ã: 30 req/min, 900 req/hour, 14400 req/day, 60k tokens/min
        },
        {
            "model": "llama-4-scout-17b-16e-instruct",
            "api_key": os.environ.get("CEREBRAS_API_KEY"),
            "api_type": "cerebras"
            # –õ–∏–º–∏—Ç—ã: 30 req/min, 900 req/hour, 14400 req/day, 60k tokens/min
        },
        {
            "model": "qwen-3-32b",
            "api_key": os.environ.get("CEREBRAS_API_KEY"),
            "api_type": "cerebras"
            # –õ–∏–º–∏—Ç—ã: 30 req/min, 900 req/hour, 14400 req/day, 60k tokens/min
        }
    ]
    
    # üîÑ –ó–∞–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
    OPENAI_CONFIG = [
        {
            "model": "gpt-4o-mini",
            "api_key": os.environ.get("OPENAI_API_KEY"),
            "api_type": "openai"
        }
    ]
    
    @classmethod
    def get_config_list(cls, strategy: str = "best_first") -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ ("best_first", "random", "all_rotation", "openai_fallback")
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–µ–π
        """
        if strategy == "random":
            return [random.choice(cls.CEREBRAS_MODELS)]
        elif strategy == "best_first":
            return [cls.CEREBRAS_MODELS[1]]  # llama-3.3-70b
        elif strategy == "all_rotation":
            return cls.CEREBRAS_MODELS
        elif strategy == "openai_fallback":
            return cls.OPENAI_CONFIG
        else:
            return [cls.CEREBRAS_MODELS[0]]  # –î–µ—Ñ–æ–ª—Ç

class AutoGenAgent:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è AutoGen –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, name: str, role: str = "assistant", strategy: str = "best_first"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            role: –†–æ–ª—å –∞–≥–µ–Ω—Ç–∞ ("assistant" –∏–ª–∏ "user_proxy")
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        """
        self.name = name
        self.role = role
        self.strategy = strategy
        self.agent = None
        
        if not AUTOGEN_AVAILABLE:
            print(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ {name}: AutoGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        self._create_agent()
    
    def _create_agent(self):
        """–°–æ–∑–¥–∞–µ—Ç AutoGen –∞–≥–µ–Ω—Ç–∞"""
        try:
            config_list = AutoGenConfig.get_config_list(self.strategy)
            
            if self.role == "assistant":
                self.agent = AssistantAgent(
                    name=self.name,
                    llm_config={"config_list": config_list},
                    system_message="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ GopiAI. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
                )
            elif self.role == "user_proxy":
                self.agent = UserProxyAgent(
                    name=self.name,
                    human_input_mode="NEVER",
                    max_consecutive_auto_reply=1,
                    code_execution_config=False
                )
            
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {self.name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
    
    def chat(self, message: str, recipient_agent: 'AutoGenAgent') -> Optional[Any]:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            recipient_agent: –ê–≥–µ–Ω—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —á–∞—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.agent or not recipient_agent.agent:
            print("‚ùå –û–¥–∏–Ω –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            if self.role == "user_proxy":
                result = self.agent.initiate_chat(recipient_agent.agent, message=message)
                return result
            else:
                print("‚ùå –¢–æ–ª—å–∫–æ user_proxy –∞–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
            return None

class AutoGenManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AutoGen –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.agents = {}
        self.is_available = AUTOGEN_AVAILABLE
    
    def create_agent(self, name: str, role: str = "assistant", strategy: str = "best_first") -> Optional[AutoGenAgent]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            role: –†–æ–ª—å –∞–≥–µ–Ω—Ç–∞
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–ª–∏ None
        """
        if not self.is_available:
            print("‚ö†Ô∏è AutoGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        agent = AutoGenAgent(name, role, strategy)
        if agent.agent:
            self.agents[name] = agent
            return agent
        return None
    
    def get_agent(self, name: str) -> Optional[AutoGenAgent]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return self.agents.get(name)
    
    def list_agents(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–≥–µ–Ω—Ç–æ–≤"""
        return list(self.agents.keys())
    
    def simple_chat(self, message: str, strategy: str = "best_first") -> Optional[str]:
        """
        –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        
        Returns:
            –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        if not self.is_available:
            return "‚ùå AutoGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            user_agent = AutoGenAgent("User", "user_proxy", strategy)
            assistant_agent = AutoGenAgent("Assistant", "assistant", strategy)
            
            if not user_agent.agent or not assistant_agent.agent:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç
            result = user_agent.chat(message, assistant_agent)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if result and hasattr(result, 'chat_history') and result.chat_history:
                for msg in reversed(result.chat_history):
                    if msg.get('name') == 'Assistant':
                        return msg.get('content', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
            
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
autogen_manager = AutoGenManager()