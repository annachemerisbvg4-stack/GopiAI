#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üßπ SIMPLE MODULE CLEANUP 
üéØ –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –æ—Ç stub-—Ñ–∞–π–ª–æ–≤
"""

import os
import json
import shutil
from pathlib import Path
from datetime import datetime

def load_analysis():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    analysis_file = Path(__file__).parent / 'MODULE_FOLDERS_ANALYSIS.json'
    
    if not analysis_file.exists():
        print(f"‚ùå –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {analysis_file}")
        return None
        
    with open(analysis_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def create_backup_dir():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    base_path = Path(__file__).parent
    backup_dir = base_path / 'cleanup_backup_modules' / datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir.mkdir(parents=True, exist_ok=True)
    return backup_dir

def cleanup_stub_files(stub_files, backup_dir):
    """–£–¥–∞–ª—è–µ—Ç stub-—Ñ–∞–π–ª—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ stub-—Ñ–∞–π–ª–æ–≤...")
    
    removed_count = 0
    base_path = Path(__file__).parent
    
    for file_path_str in stub_files:
        file_path = Path(file_path_str)
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            relative_path = file_path.relative_to(base_path)
            backup_path = backup_dir / 'stubs' / relative_path
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(file_path, backup_path)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            file_path.unlink()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {file_path.name}")
            removed_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
            
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ stub-—Ñ–∞–π–ª–æ–≤: {removed_count}")
    return removed_count

def archive_deprecated_files(deprecated_files, backup_dir):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã"""
    print("\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    base_path = Path(__file__).parent
    archive_dir = base_path / 'archive' / 'modules' / 'deprecated'
    archive_dir.mkdir(parents=True, exist_ok=True)
    
    archived_count = 0
    
    for file_path_str in deprecated_files:
        file_path = Path(file_path_str)
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ
            relative_path = file_path.relative_to(base_path)
            archive_path = archive_dir / relative_path
            archive_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = backup_dir / 'deprecated' / relative_path
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(file_path, backup_path)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∞—Ä—Ö–∏–≤
            shutil.move(str(file_path), str(archive_path))
            print(f"‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {file_path.name}")
            archived_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {e}")
            
    print(f"‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {archived_count}")
    return archived_count

def remove_empty_directories():
    """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüóÇÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    base_path = Path(__file__).parent
    removed_count = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—å–Ω—ã–º –ø–∞–ø–∫–∞–º
    for module_name in ['GopiAI-Core', 'GopiAI-Widgets', 'GopiAI-Extensions', 'GopiAI-App', 'GopiAI-Assets']:
        module_path = base_path / module_name
        
        if not module_path.exists():
            continue
            
        # –ò—â–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        for root, dirs, files in os.walk(module_path, topdown=False):
            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    if not any(dir_path.iterdir()):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if dir_name in ['__pycache__', '.pytest_cache', '.idea', 'venv', '.git']:
                            continue
                            
                        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path.relative_to(base_path)}")
                        dir_path.rmdir()
                        removed_count += 1
                        
                except OSError:
                    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    pass
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
                    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {removed_count}")
    return removed_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ü–†–û–°–¢–ê–Ø –û–ß–ò–°–¢–ö–ê –ú–û–î–£–õ–¨–ù–´–• –ü–ê–ü–û–ö GopiAI")
    print("="*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analysis = load_analysis()
    if not analysis:
        return 1
        
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = create_backup_dir()
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {backup_dir}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = analysis.get('recommendations', [])
    
    total_removed = 0
    total_archived = 0
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    for rec in recommendations:
        if rec['action'] == 'REMOVE' and rec['category'] == 'Stub Files':
            total_removed = cleanup_stub_files(rec['files'], backup_dir)
            
        elif rec['action'] == 'ARCHIVE' and rec['category'] == 'Deprecated Files':
            total_archived = archive_deprecated_files(rec['files'], backup_dir)
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    empty_dirs_removed = remove_empty_directories()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\n" + "="*50)
    print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*50)
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ stub-—Ñ–∞–π–ª–æ–≤: {total_removed}")
    print(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {total_archived}")
    print(f"üóÇÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {empty_dirs_removed}")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {backup_dir}")
    
    return 0

if __name__ == "__main__":
    exit(main())
