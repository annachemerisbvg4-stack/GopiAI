#!/usr/bin/env python3
"""
GopiAI Standalone Interface - —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
=====================================

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫ LucideIconManager
"""

import sys
import os
import warnings
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
module_paths = [
    os.path.join(script_dir, "GopiAI-Core"),
    os.path.join(script_dir, "GopiAI-Widgets"),
    os.path.join(script_dir, "GopiAI-App"),
    os.path.join(script_dir, "GopiAI-Extensions"),
    os.path.join(script_dir, "rag_memory_system"),
]

for path in module_paths:
    if path not in sys.path:
        sys.path.insert(0, path)

print("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ sys.path:")
for p in module_paths:
    print(f"- {p} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(p)})")

# –ü—Ä–æ—Å—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton, QMessageBox
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QIcon

# =============================================================================
# –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫ LucideIconManager
# =============================================================================

class LucideIconManager:
    _instance = None
    
    def __init__(self):
        self.icons_path = Path(__file__).parent / "node_modules" / "lucide-static" / "icons"
        self._icon_cache = {}
        print(f"üîç LucideIconManager: –∏—â–µ–º –∏–∫–æ–Ω–∫–∏ –≤ {self.icons_path}")
        print(f"üìÇ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.icons_path.exists()}")
        if self.icons_path.exists():
            icon_files = list(self.icons_path.glob("*.svg"))
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} SVG —Ñ–∞–π–ª–æ–≤")
    
    @classmethod
    def instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
        
    def get_icon(self, icon_name: str, color_override=None, size=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        if icon_name in self._icon_cache:
            return self._icon_cache[icon_name]
        
        # –ò—â–µ–º SVG —Ñ–∞–π–ª
        svg_path = self.icons_path / f"{icon_name}.svg"
        
        if svg_path.exists():
            # –°–æ–∑–¥–∞–µ–º QIcon –∏–∑ SVG —Ñ–∞–π–ª–∞
            icon = QIcon(str(svg_path))
            self._icon_cache[icon_name] = icon
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: {icon_name}")
            return icon
        else:
            print(f"‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icon_name} (–ø—É—Ç—å: {svg_path})")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
            empty_icon = QIcon()
            self._icon_cache[icon_name] = empty_icon
            return empty_icon

# =============================================================================
# –ò–º–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∫–æ–Ω–æ–∫
# =============================================================================

try:
    from icon_mapping import get_lucide_name
    print("‚úÖ –ú–æ–¥—É–ª—å icon_mapping –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ö† –ú–æ–¥—É–ª—å icon_mapping –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    def get_lucide_name(original_name):
        return original_name

# =============================================================================
# –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
# =============================================================================

class IconTestWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫ LucideIconManager")
        self.setGeometry(100, 100, 600, 400)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫ LucideIconManager")
        title.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        layout.addWidget(title)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫
        self.icon_manager = LucideIconManager.instance()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        test_icons = [
            ("file-plus", "–ù–æ–≤—ã–π —Ñ–∞–π–ª"),
            ("folder-open", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"),  
            ("save", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
            ("wrench", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"),
            ("mic", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω"),
            ("cpu", "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä"),
            ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("search", "–ü–æ–∏—Å–∫"),
            ("download", "–°–∫–∞—á–∞—Ç—å"),
            ("upload", "–ó–∞–≥—Ä—É–∑–∏—Ç—å")
        ]
        
        for icon_name, description in test_icons:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
            lucide_name = get_lucide_name(icon_name)
            print(f"üîç –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–∫–∏: {icon_name} -> {lucide_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
            icon = self.icon_manager.get_icon(lucide_name)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π
            button = QPushButton(f"{description} ({icon_name})")
            button.setIcon(icon)
            button.setStyleSheet("QPushButton { padding: 8px; margin: 2px; text-align: left; }")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            is_loaded = not icon.isNull()
            if is_loaded:
                button.setStyleSheet(button.styleSheet() + "background-color: #e8f5e8;")
                print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ {icon_name}: True")
            else:
                button.setStyleSheet(button.styleSheet() + "background-color: #ffe8e8;")
                print(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ {icon_name}: False")
            
            layout.addWidget(button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        layout.addWidget(close_button)

def main():
    app = QApplication(sys.argv)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    window = IconTestWindow()
    window.show()
    
    print("üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∏–∫–æ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
    
    return app.exec()

if __name__ == "__main__":
    sys.exit(main())