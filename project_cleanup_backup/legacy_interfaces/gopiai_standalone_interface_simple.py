#!/usr/bin/env python3
"""
GopiAI Standalone Interface - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
=====================================

–ú–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GopiAI —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:
- Frameless –æ–∫–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ 
- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —á–∞—Ç —Å –ò–ò

–í–µ—Ä—Å–∏—è: 0.2.0
–î–∞—Ç–∞: 2025-01-12
"""

import sys
import os
import warnings
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI –≤ sys.path
script_dir = os.path.dirname(os.path.abspath(__file__))
gopiai_modules_root = os.path.abspath(script_dir) # GOPI_AI_MODULES

module_paths = [
    os.path.join(gopiai_modules_root, "GopiAI-Core"),
    os.path.join(gopiai_modules_root, "GopiAI-Widgets"),
    os.path.join(gopiai_modules_root, "GopiAI-App"),
    os.path.join(gopiai_modules_root, "GopiAI-Extensions"),
    os.path.join(gopiai_modules_root, "rag_memory_system"),
]

for path in module_paths:
    if path not in sys.path:
        sys.path.insert(0, path)

print("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ sys.path:")
for p in module_paths:
    print(f"- {p} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(p)})")

# –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º –∏–∫–æ–Ω–æ–∫ –∏ —Ç–µ–º
try:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º GopiAI –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–∑ minimal_app.py
    current_dir = os.path.dirname(os.path.abspath(__file__))
    gopi_modules_dir = current_dir  # –ú—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –º–æ–¥—É–ª–µ–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫–∞–∫ –≤ minimal_app.py
    app_path = os.path.join(gopi_modules_dir, "GopiAI-App")
    core_path = os.path.join(gopi_modules_dir, "GopiAI-Core")
    assets_path = os.path.join(gopi_modules_dir, "GopiAI-Assets")
    widgets_path = os.path.join(gopi_modules_dir, "GopiAI-Widgets")
    
    for path in [app_path, core_path, assets_path, widgets_path]:
        if os.path.exists(path) and path not in sys.path:
            sys.path.insert(0, path)
            
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ GopiAI Core
    from gopiai.core.simple_theme_manager import (
        load_theme, apply_theme, save_theme,
        MATERIAL_SKY_THEME, EMERALD_GARDEN_THEME, 
        CRIMSON_RELIC_THEME, GOLDEN_EMBER_THEME
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ThemeManager –∏–∑ GopiAI-Widgets
    from gopiai.widgets.managers.theme_manager import ThemeManager
      
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫
    class LucideIconManager:
        _instance = None
        
        def __init__(self):
            self.icons_path = Path(__file__).parent / "node_modules" / "lucide-static" / "icons"
            self._icon_cache = {}
            print(f"üîç LucideIconManager: –∏—â–µ–º –∏–∫–æ–Ω–∫–∏ –≤ {self.icons_path}")
            print(f"üìÇ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.icons_path.exists()}")
        
        @classmethod
        def instance(cls):
            if cls._instance is None:
                cls._instance = cls()
            return cls._instance
            
        def get_icon(self, icon_name: str, color_override=None, size=None):
            """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏"""
            if icon_name in self._icon_cache:
                return self._icon_cache[icon_name]
            
            # –ò—â–µ–º SVG —Ñ–∞–π–ª
            svg_path = self.icons_path / f"{icon_name}.svg"
            
            if svg_path.exists():
                # –°–æ–∑–¥–∞–µ–º QIcon –∏–∑ SVG —Ñ–∞–π–ª–∞
                from PySide6.QtGui import QIcon
                icon = QIcon(str(svg_path))
                self._icon_cache[icon_name] = icon
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: {icon_name}")
                return icon
            else:
                print(f"‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icon_name} (–ø—É—Ç—å: {svg_path})")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
                from PySide6.QtGui import QIcon
                empty_icon = QIcon()
                self._icon_cache[icon_name] = empty_icon
                return empty_icon
    
    # –ò–º–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∫–æ–Ω–æ–∫
    from icon_mapping import get_lucide_name
    
    THEMES_AVAILABLE = True
    ICON_MANAGER_AVAILABLE = True
    print("‚úì –ù–ê–°–¢–û–Ø–©–ò–ï —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º –∏ –∏–∫–æ–Ω–æ–∫ GopiAI –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
except ImportError as e:
    THEMES_AVAILABLE = False
    ICON_MANAGER_AVAILABLE = False
    print(f"‚ö† –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º/–∏–∫–æ–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    # STUB: –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π GopiAI
    def load_theme():
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—É")
        return None
    
    def apply_theme(app):
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        return False
    
    def save_theme(theme_data):
        print("‚ö† STUB: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É")
        return False
    
    # STUB: –ó–∞–≥–ª—É—à–∫–∏ —Ç–µ–º
    MATERIAL_SKY_THEME = {"name": "Material Sky", "light": {}, "dark": {}}
    EMERALD_GARDEN_THEME = {"name": "Emerald Garden", "light": {}, "dark": {}}
    CRIMSON_RELIC_THEME = {"name": "Crimson Relic", "light": {}, "dark": {}}
    GOLDEN_EMBER_THEME = {"name": "Golden Ember", "light": {}, "dark": {}}
    
    # STUB: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è LucideIconManager
    class FakeLucideManager:
        def get_icon(self, icon_name, **kwargs):
            from PySide6.QtGui import QIcon
            return QIcon()
    
    LucideIconManager = type('LucideIconManager', (), {
        'instance': lambda: FakeLucideManager()
    })
    
    # STUB: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∫–æ–Ω–æ–∫
    def get_lucide_name(original_name):
        return original_name

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã PySide6
from PySide6.QtCore import Qt, Signal, QPoint, QSize, QRect, QTimer
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QMenuBar, QMenu, QFrame, QLabel, QPushButton, QSplitter,
    QTreeView, QFileSystemModel, QTabWidget, QTextEdit, QFileDialog,
    QMessageBox
)
from PySide6.QtGui import QIcon, QFont, QPalette, QMouseEvent, QAction, QResizeEvent


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    app = QApplication(sys.argv)
    
    print("üöÄ GopiAI Standalone Interface –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
    apply_simple_theme(app)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = FramelessWindow()
    window.setGeometry(100, 100, 1200, 800)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    window.show()
    
    return app.exec()


# =============================================================================
# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# =============================================================================

class StandaloneMenuBar(QMenuBar):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω—é
    newFileRequested = Signal()
    openFileRequested = Signal()
    openFolderRequested = Signal()
    saveRequested = Signal()
    saveAsRequested = Signal()
    exitRequested = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã –º–µ–Ω—é –≤–∏–¥–∞
    openTextEditorRequested = Signal()
    openProjectExplorerRequested = Signal()
    openChatRequested = Signal()
    openBrowserRequested = Signal()
    openTerminalRequested = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    toggleProductivityExtension = Signal()
    toggleVoiceExtension = Signal()
    toggleAiToolsExtension = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã —Ç–µ–º—ã
    changeThemeRequested = Signal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self._build_menu()

    def _build_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é"""
        # –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
        file_menu = self.addMenu("–§–∞–π–ª")
        self.new_action = file_menu.addAction("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π")
        self.open_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        self.open_folder_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        file_menu.addSeparator()
        self.save_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_as_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫")
        file_menu.addSeparator()
        self.exit_action = file_menu.addAction("–í—ã—Ö–æ–¥")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.new_action.triggered.connect(self.newFileRequested.emit)
        self.open_action.triggered.connect(self.openFileRequested.emit)
        self.open_folder_action.triggered.connect(self.openFolderRequested.emit)
        self.save_action.triggered.connect(self.saveRequested.emit)
        self.save_as_action.triggered.connect(self.saveAsRequested.emit)
        self.exit_action.triggered.connect(self.exitRequested.emit)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫
        self._set_menu_icons()
    
    def _set_menu_icons(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –º–µ–Ω—é"""
        try:
            icon_manager = LucideIconManager.instance()
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –º–µ–Ω—é
            icon_mappings = {
                'new_action': 'file-plus',
                'open_action': 'folder-open', 
                'save_action': 'save',
            }
            
            for action_name, icon_name in icon_mappings.items():
                if hasattr(self, action_name):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥
                    lucide_name = get_lucide_name(icon_name)
                    print(f"üîç –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–∫–∏: {icon_name} -> {lucide_name}")
                    
                    icon = icon_manager.get_icon(lucide_name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∫–∞–∫ fallback
                    if icon.isNull():
                        if icon_name == 'folder-open':
                            style = self.style()
                            icon = style.standardIcon(style.StandardPixmap.SP_DirOpenIcon)
                            if not icon.isNull():
                                print(f"‚úì –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ {icon_name} –Ω–∞–π–¥–µ–Ω–∞")
                    
                    action = getattr(self, action_name)
                    action.setIcon(icon)
                    
                    success = not icon.isNull()
                    print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ {action_name}: {success}")
                    
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫ –º–µ–Ω—é: {e}")
            
        print("‚úì –ò–∫–æ–Ω–∫–∏ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


class FileExplorerWidget(QWidget):
    """–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ä–µ–≤–æ–º –ø–∞–ø–æ–∫"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("fileExplorer")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìÅ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫")
        header.setObjectName("panelHeader")
        header.setFixedHeight(30)
        layout.addWidget(header)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.tree_view = QTreeView()
        self.file_model = QFileSystemModel()
        self.file_model.setRootPath("")
        self.tree_view.setModel(self.file_model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.tree_view.setRootIndex(self.file_model.index(""))
        self.tree_view.hideColumn(1)  # –†–∞–∑–º–µ—Ä
        self.tree_view.hideColumn(2)  # –¢–∏–ø
        self.tree_view.hideColumn(3)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        layout.addWidget(self.tree_view)


class SimpleChatWidget(QWidget):
    """–ü—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("chatWidget")
        self._setup_ui()

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üí¨ –ß–∞—Ç —Å –ò–ò")
        header.setObjectName("panelHeader")
        header.setFixedHeight(30)
        layout.addWidget(header)
        
        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_area = QTextEdit()
        self.messages_area.setReadOnly(True)
        self.messages_area.append("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GopiAI! ü§ñ")
        layout.addWidget(self.messages_area)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_layout = QHBoxLayout()
        self.input_field = QTextEdit()
        self.input_field.setMaximumHeight(60)
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.setMaximumWidth(100)
        
        input_layout.addWidget(self.input_field)
        input_layout.addWidget(self.send_button)
        layout.addLayout(input_layout)


class FramelessWindow(QMainWindow):
    """–û–∫–Ω–æ –±–µ–∑ —Ä–∞–º–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.border_width = 8
        self.corner_width = 16
        self.is_resizing = False
        self.resize_direction = None
        
        # –î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞
        self.dragging = False
        self.drag_position = QPoint()
        
        self._setup_ui()
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ frameless –æ–∫–Ω–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = QWidget()
        main_container.setObjectName("mainContainer")
        self.setCentralWidget(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(main_container)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å
        self._create_title_bar(layout)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self._create_main_content(layout)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self._apply_styles()
    
    def _create_title_bar(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        title_bar = QWidget()
        title_bar.setObjectName("titleBar")
        title_bar.setFixedHeight(40)
        
        title_layout = QHBoxLayout(title_bar)
        title_layout.setContentsMargins(10, 0, 5, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel("GopiAI Standalone Interface")
        self.title_label.setObjectName("titleLabel")
        title_layout.addWidget(self.title_label)
        
        title_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        self.minimize_btn = QPushButton("_")
        self.maximize_btn = QPushButton("‚ñ°")
        self.close_btn = QPushButton("√ó")
        
        for btn in [self.minimize_btn, self.maximize_btn, self.close_btn]:
            btn.setFixedSize(30, 30)
            btn.setObjectName("windowControl")
            title_layout.addWidget(btn)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.minimize_btn.clicked.connect(self.showMinimized)
        self.maximize_btn.clicked.connect(self._toggle_maximize)
        self.close_btn.clicked.connect(self.close)
        
        # –î–µ–ª–∞–µ–º title_bar –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
        title_bar.mousePressEvent = self._title_bar_press
        title_bar.mouseMoveEvent = self._title_bar_move
        title_bar.mouseReleaseEvent = self._title_bar_release
        
        parent_layout.addWidget(title_bar)
    
    def _create_main_content(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ú–µ–Ω—é
        self.menu_bar = StandaloneMenuBar(self)
        parent_layout.addWidget(self.menu_bar)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
        self.file_explorer = FileExplorerWidget()
        main_splitter.addWidget(self.file_explorer)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.addTab(QTextEdit(), "–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        main_splitter.addWidget(self.tab_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á–∞—Ç
        self.chat_widget = SimpleChatWidget()
        main_splitter.addWidget(self.chat_widget)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        main_splitter.setSizes([250, 400, 300])
        
        parent_layout.addWidget(main_splitter)
    
    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π"""
        style = """
        #mainContainer {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 8px;
        }
        
        #titleBar {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #e0e0e0, stop:1 #d0d0d0);
            border-bottom: 1px solid #bbb;
            border-radius: 8px 8px 0px 0px;
        }
        
        #titleLabel {
            font-weight: bold;
            color: #333;
            font-size: 14px;
        }
        
        #windowControl {
            border: 1px solid #bbb;
            background-color: #e8e8e8;
            border-radius: 4px;
            font-weight: bold;
        }
        
        #windowControl:hover {
            background-color: #d0d0d0;
        }
        
        #windowControl:pressed {
            background-color: #c0c0c0;
        }
        
        #panelHeader {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #f8f8f8, stop:1 #e8e8e8);
            border-bottom: 1px solid #ddd;
            font-weight: bold;
            padding: 5px;
        }
        """
        
        self.setStyleSheet(style)
    
    def _toggle_maximize(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        if self.isMaximized():
            self.showNormal()
            self.maximize_btn.setText("‚ñ°")
        else:
            self.showMaximized() 
            self.maximize_btn.setText("‚ùê")
    
    def _title_bar_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.dragging = True
            self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            event.accept()
    
    def _title_bar_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        if event.buttons() == Qt.MouseButton.LeftButton and self.dragging:
            self.move(event.globalPosition().toPoint() - self.drag_position)
            event.accept()
    
    def _title_bar_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.dragging = False


def apply_simple_theme(app):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–º—ã"""
    simple_theme = """
    QApplication {
        background-color: #f5f5f5;
        color: #333;
        font-family: 'Segoe UI', Arial, sans-serif;
        font-size: 10pt;
    }
    
    QMainWindow {
        background-color: #ffffff;
    }
    
    QMenuBar {
        background-color: #f0f0f0;
        border-bottom: 1px solid #ddd;
        padding: 2px;
    }
    
    QMenuBar::item {
        background-color: transparent;
        padding: 4px 8px;
        margin: 1px;
        border-radius: 3px;
    }
    
    QMenuBar::item:selected {
        background-color: #e0e0e0;
    }
    
    QTabWidget::pane {
        border: 1px solid #c0c0c0;
        top: -1px;
        background-color: white;
    }
    
    QTabBar::tab {
        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
            stop:0 #f0f0f0, stop:1 #e0e0e0);
        border: 1px solid #c0c0c0;
        padding: 6px 12px;
        margin-right: -1px;
    }
    
    QTabBar::tab:selected {
        background: white;
        border-bottom-color: white;
    }
    
    QTextEdit {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 4px;
    }
    
    QPushButton {
        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
            stop:0 #f8f8f8, stop:1 #e8e8e8);
        border: 1px solid #c0c0c0;
        border-radius: 4px;
        padding: 6px 12px;
        font-weight: bold;
    }
    
    QPushButton:hover {
        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
            stop:0 #f0f0f0, stop:1 #e0e0e0);
    }
    
    QPushButton:pressed {
        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
            stop:0 #e0e0e0, stop:1 #d0d0d0);
    }
    """
    
    app.setStyleSheet(simple_theme)


if __name__ == "__main__":
    sys.exit(main())

