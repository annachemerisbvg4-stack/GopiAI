#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ message-processing —Ñ—É–Ω–∫—Ü–∏–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_rag_context
2. –ü–æ–ª—É—á–µ–Ω–∏–µ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞  
3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
4. –ü—Ä–æ–≤–µ—Ä–∫—É fallback –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
app_path = os.path.join(os.path.dirname(__file__), 'GopiAI-App')
sys.path.insert(0, app_path)

def test_rag_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_rag_context"""
    print("üîç –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_rag_context")
    print("=" * 50)
    
    try:
        from gopiai.app.utils.common import get_rag_context
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è get_rag_context —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        return get_rag_context
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É—é fallback —Ñ—É–Ω–∫—Ü–∏—é")
        
        # Fallback —Ñ—É–Ω–∫—Ü–∏—è
        def get_rag_context_fallback(query: str, max_results: int = 3) -> str:
            return ""
        
        return get_rag_context_fallback

def test_rag_context_retrieval(get_rag_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("=" * 50)
    
    test_queries = [
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CrewAI –∞–≥–µ–Ω—Ç–æ–≤?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG –ø–∞–º—è—Ç—å?",
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GopiAI?",
        "Python –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: {query}")
        
        try:
            context = get_rag_context(query, max_results=3)
            
            if context:
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"   üìÑ –ü—Ä–µ–≤—å—é: {context[:100]}...")
            else:
                print("   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç (RAG —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_prompt_construction(get_rag_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    print("\nüîç –¢–µ—Å—Ç 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_message = "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –≤ CrewAI?"
    system_preamble = "–í—ã - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GopiAI. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ –∏ —Ç–æ—á–Ω–æ."
    
    print(f"üó£Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}")
    
    # –ü–æ–ª—É—á–∞–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç
    try:
        context = get_rag_context(user_message, max_results=5)
        print(f"üìö RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç: {'‚úÖ –ø–æ–ª—É—á–µ–Ω' if context else '‚ùå –ø—É—Å—Ç'}")
    except Exception as e:
        print(f"üìö RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç: ‚ùå –æ—à–∏–±–∫–∞ ({e})")
        context = ""
    
    # –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —Å—Ö–µ–º–µ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    # system_preamble + "\n\n" + ("Relevant context:\n" + context + "\n\n" if context else "") + "User:\n" + user_message
    final_prompt_parts = [system_preamble]
    
    # –î–æ–±–∞–≤–ª—è–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if context:
        final_prompt_parts.append(f"\n\nRelevant context:\n{context}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    final_prompt_parts.append(f"\n\nUser:\n{user_message}")
    
    final_prompt = "\n\n".join(final_prompt_parts)
    
    print("\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    print("-" * 40)
    print(final_prompt)
    print("-" * 40)
    print(f"üìä –î–ª–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    has_system = system_preamble in final_prompt
    has_context = bool(context) and ("Relevant context:" in final_prompt)
    has_user = f"User:\n{user_message}" in final_prompt
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    print(f"   - System preamble: {'‚úÖ' if has_system else '‚ùå'}")
    print(f"   - RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç: {'‚úÖ' if has_context or not context else '‚ùå'}")
    print(f"   - User —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ' if has_user else '‚ùå'}")

def test_fallback_behavior():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç 4: Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º fallback —Ñ—É–Ω–∫—Ü–∏—é
    def mock_get_rag_context(query: str, max_results: int = 3) -> str:
        print(f"   üîÑ –í—ã–∑–æ–≤ get_rag_context —Å –∑–∞–ø—Ä–æ—Å–æ–º: '{query[:50]}...'")
        return ""  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    user_message = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è fallback"
    system_preamble = "–í—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
    
    context = mock_get_rag_context(user_message)
    
    # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    final_prompt = system_preamble + "\n\nUser:\n" + user_message
    
    print(f"‚úÖ Fallback –ø—Ä–æ–º–ø—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:")
    print(f"   üìè –î–ª–∏–Ω–∞: {len(final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {final_prompt}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert system_preamble in final_prompt
    assert user_message in final_prompt
    assert "Relevant context:" not in final_prompt  # –ö–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    
    print("‚úÖ Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é get_rag_context –≤ message-processing —Ñ—É–Ω–∫—Ü–∏–∏")
    print()
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç
    get_rag_context = test_rag_import()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    test_rag_context_retrieval(get_rag_context)
    
    # –¢–µ—Å—Ç 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    test_prompt_construction(get_rag_context)
    
    # –¢–µ—Å—Ç 4: Fallback
    test_fallback_behavior()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print()
    print("üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   - –§—É–Ω–∫—Ü–∏—è get_rag_context –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    print("   - RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    print("   - Fallback –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:")
    print("     system_preamble + context (–µ—Å–ª–∏ –µ—Å—Ç—å) + user_message")

if __name__ == "__main__":
    main()
