#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üéØ –ï–¥–∏–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π GopiAI

–ó–∞–º–µ–Ω—è–µ—Ç —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –∏–∑:
- gopiai.app.logger  
- –°–∞–º–æ–¥–µ–ª—å–Ω—ã–µ logging –∏–º–ø–æ—Ä—Ç—ã –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É

–¢–µ–ø–µ—Ä—å –í–°–ï –º–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û–î–ò–ù –ª–æ–≥–≥–µ—Ä –æ—Ç—Å—é–¥–∞!
"""

import logging
import sys
from pathlib import Path
from typing import Optional
from datetime import datetime

class GopiAILogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ GopiAI üéØ"""
    
    _instance: Optional['GopiAILogger'] = None
    _logger: Optional[logging.Logger] = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        if self._logger is None:
            self._setup_logger()
    
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        self._logger = logging.getLogger('GopiAI')
        self._logger.setLevel(logging.DEBUG)
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ handlers –µ—Å–ª–∏ –µ—Å—Ç—å
        for handler in self._logger.handlers[:]:
            self._logger.removeHandler(handler)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        
        # –§–∞–π–ª–æ–≤—ã–π handler
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        log_file = log_dir / f"{datetime.now().strftime('%Y%m%d%H%M%S')}.log"
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        console_handler.setFormatter(formatter)
        file_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º handlers
        self._logger.addHandler(console_handler)
        self._logger.addHandler(file_handler)
        
        self._logger.info("üéØ GopiAI Unified Logger initialized")
    
    @property
    def logger(self) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        return self._logger
    
    def debug(self, message: str, *args, **kwargs):
        """Debug —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        self._logger.debug(message, *args, **kwargs)
    
    def info(self, message: str, *args, **kwargs):
        """Info —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        self._logger.info(message, *args, **kwargs)
    
    def warning(self, message: str, *args, **kwargs):
        """Warning —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        self._logger.warning(message, *args, **kwargs)
    
    def error(self, message: str, *args, **kwargs):
        """Error —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        self._logger.error(message, *args, **kwargs)
    
    def critical(self, message: str, *args, **kwargs):
        """Critical —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self._logger is None:
            self._setup_logger()
        assert self._logger is not None
        self._logger.critical(message, *args, **kwargs)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_global_logger = GopiAILogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
def get_gopiai_logger() -> GopiAILogger:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä GopiAI"""
    return _global_logger

def get_logger() -> GopiAILogger:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä GopiAI (–∞–ª–∏–∞—Å)"""
    return _global_logger

def debug(message: str, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _global_logger.debug(message, *args, **kwargs)

def info(message: str, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è info –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _global_logger.info(message, *args, **kwargs)

def warning(message: str, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è warning –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _global_logger.warning(message, *args, **kwargs)

def error(message: str, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è error –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _global_logger.error(message, *args, **kwargs)

def critical(message: str, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è critical –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _global_logger.critical(message, *args, **kwargs)

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å gopiai.app.logger
logger = _global_logger.logger
