#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üéØ –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π GopiAI

–ó–∞–º–µ–Ω—è–µ—Ç —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑:
- gopiai.app.utils.settings
- –°–∞–º–æ–¥–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É  

–¢–µ–ø–µ—Ä—å –í–°–ï –º–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û–î–ù–£ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç—Å—é–¥–∞!
"""

import os
import json
from pathlib import Path
from typing import Any, Dict, Optional, Union
from dataclasses import dataclass, asdict, field

@dataclass
class UIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    theme: str = "dark"
    font_size: int = 12
    font_family: str = "Consolas"
    icon_theme: str = "lucide"
    window_geometry: Dict[str, int] = field(default_factory=lambda: {
        "width": 1200, "height": 800, "x": 100, "y": 100
    })

@dataclass
class LoggingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level: str = "INFO"
    file_logging: bool = True
    console_logging: bool = True
    max_log_files: int = 10
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

@dataclass
class AgentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –∞–≥–µ–Ω—Ç–æ–≤"""
    default_model: str = "gpt-4"
    max_tokens: int = 4000
    temperature: float = 0.7
    timeout: int = 30
    retry_attempts: int = 3

@dataclass
class BrowserConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
    headless: bool = False
    user_agent: str = "GopiAI Browser Agent"
    viewport_width: int = 1280
    viewport_height: int = 720
    timeout: int = 30

@dataclass
class GopiAIConfig:
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GopiAI"""
    ui: UIConfig = field(default_factory=UIConfig)
    logging: LoggingConfig = field(default_factory=LoggingConfig)
    agent: AgentConfig = field(default_factory=AgentConfig)
    browser: BrowserConfig = field(default_factory=BrowserConfig)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    debug_mode: bool = False
    auto_save: bool = True
    language: str = "ru"

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GopiAI üéØ"""
    
    def __init__(self):
        self._config_file = Path.home() / ".gopiai" / "config.json"
        self._config = self._load_config()
    
    def _load_config(self) -> GopiAIConfig:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self._config_file.exists():
                with open(self._config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                return GopiAIConfig(
                    ui=UIConfig(**data.get('ui', {})),
                    logging=LoggingConfig(**data.get('logging', {})),
                    agent=AgentConfig(**data.get('agent', {})),
                    browser=BrowserConfig(**data.get('browser', {})),
                    debug_mode=data.get('debug_mode', False),
                    auto_save=data.get('auto_save', True),
                    language=data.get('language', 'ru')
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                config = GopiAIConfig()
                self._save_config(config)
                return config
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return GopiAIConfig()
    
    def _save_config(self, config: GopiAIConfig):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self._config_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(self._config_file, 'w', encoding='utf-8') as f:
                json.dump(asdict(config), f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    @property
    def config(self) -> GopiAIConfig:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return self._config
    
    def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É"""
        try:
            keys = key.split('.')
            value = self._config
            
            for k in keys:
                value = getattr(value, k)
            
            return value
        except (AttributeError, KeyError):
            return default
    
    def set(self, key: str, value: Any, save: bool = True):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            keys = key.split('.')
            target = self._config
            
            # –ù–∞–≤–∏–≥–∏—Ä—É–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–±—ä–µ–∫—Ç—É
            for k in keys[:-1]:
                target = getattr(target, k)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            setattr(target, keys[-1], value)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if save:
                self._save_config(self._config)
                
        except (AttributeError, KeyError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {key}: {e}")
    
    def reload(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self._config = self._load_config()
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self._save_config(self._config)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_global_config_manager: Optional[ConfigManager] = None

def _get_manager() -> ConfigManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _global_config_manager
    if _global_config_manager is None:
        _global_config_manager = ConfigManager()
    return _global_config_manager

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
def get_config() -> GopiAIConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GopiAI"""
    return _get_manager().config

def get_config_manager() -> ConfigManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GopiAI"""
    return _get_manager()

def get_setting(key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É"""
    return _get_manager().get(key, default)

def set_setting(key: str, value: Any, save: bool = True):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    _get_manager().set(key, value, save)

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å gopiai.app.utils.settings
def config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_config()
