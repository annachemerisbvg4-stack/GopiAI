#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
===================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è project_map.json –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
–ø—Ä–æ–µ–∫—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞

–ê–≤—Ç–æ—Ä: Crazy Coder
–î–∞—Ç–∞: 2025-06-02
"""

import os
import json
import shutil
from pathlib import Path
from datetime import datetime

def sync_project_to_rag():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (GOPI_AI_MODULES)
    base_path = Path(__file__).parent.parent.parent.parent
    reports_path = base_path / "project_health" / "reports"
    rag_path = base_path / "rag_memory_system" / "project_sync"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    rag_path.mkdir(parents=True, exist_ok=True)
    
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π...")
    print("=" * 50)
    
    # –§–∞–π–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏)
    files_to_sync = [
        ("project_health/reports/project_map.json", "project_map.json"),
        ("UI/main.py", "main_ui.py"),
        ("gopiai_standalone_interface.py", "standalone_interface.py"),
        ("README.md", "README.md")
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    folders_to_sync = {
        "UI/utils": ["*.py"],
        "UI/components": ["*.py"],
        "GopiAI-Core/gopiai": ["*.py"],
        "GopiAI-Extensions/gopiai": ["*.py"]
    }
    
    synced_files = []
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    for source_path, target_name in files_to_sync:
        source_file = base_path / source_path
        if source_file.exists():
            target_file = rag_path / target_name
            try:
                shutil.copy2(source_file, target_file)
                synced_files.append(target_name)
                print(f"üìÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {source_path} -> {target_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {source_path}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
    for folder_path, patterns in folders_to_sync.items():
        source_folder = base_path / folder_path
        if source_folder.exists():
            target_folder = rag_path / folder_path
            target_folder.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for pattern in patterns:
                for file_path in source_folder.glob(pattern):
                    if file_path.is_file():
                        target_file = target_folder / file_path.name
                        try:
                            shutil.copy2(file_path, target_file)
                            print(f"üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {folder_path}/{file_path.name}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    metadata = {
        "sync_time": datetime.now().isoformat(),
        "synced_files": synced_files,
        "total_files": len(synced_files),
        "source_path": str(base_path),
        "rag_path": str(rag_path)
    }
    
    metadata_file = rag_path / "sync_metadata.json"
    with open(metadata_file, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    print("=" * 50)
    print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(synced_files)}")
    print(f"üìÅ –ü—É—Ç—å RAG: {rag_path}")
    print(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    
    return rag_path

def create_rag_index():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ RAG –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ project_map.json –≤ reports
        base_path = Path(__file__).parent.parent.parent.parent
        project_map_path = base_path / "project_health" / "reports" / "project_map.json"
        
        print("\nüß† –°–æ–∑–¥–∞–Ω–∏–µ RAG –∏–Ω–¥–µ–∫—Å–∞...")
        
        if project_map_path.exists():
            with open(project_map_path, 'r', encoding='utf-8') as f:
                project_data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            index_data = {
                "project_overview": {
                    "name": project_data.get("project_name", "GopiAI"),
                    "total_files": project_data.get("summary", {}).get("total_files", 0),
                    "total_modules": project_data.get("summary", {}).get("total_modules", 0),
                    "modules": list(project_data.get("modules", {}).keys())
                },
                "modules_detail": project_data.get("modules", {}),
                "generated_at": project_data.get("generated_at"),
                "quick_access": {
                    "ui_files": [f for f in project_data.get("modules", {}).get("UI", {}).get("files", [])],
                    "core_files": [f for f in project_data.get("modules", {}).get("GopiAI-Core", {}).get("files", [])],
                    "extension_files": [f for f in project_data.get("modules", {}).get("GopiAI-Extensions", {}).get("files", [])]
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            rag_path = base_path / "rag_memory_system" / "project_sync"
            rag_path.mkdir(parents=True, exist_ok=True)
            
            index_file = rag_path / "project_index.json"
            with open(index_file, 'w', encoding='utf-8') as f:
                json.dump(index_data, f, indent=2, ensure_ascii=False)
            
            print("üìä Project index —Å–æ–∑–¥–∞–Ω –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã")
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {index_file}")
        else:
            print(f"‚ö†Ô∏è  Project map –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_map_path}")
        
        print("‚úÖ RAG –∏–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAG –∏–Ω–¥–µ–∫—Å–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    rag_path = sync_project_to_rag()
    
    # –°–æ–∑–¥–∞–µ–º RAG –∏–Ω–¥–µ–∫—Å
    create_rag_index()
    
    print(f"\\nüí° –¢–µ–ø–µ—Ä—å AI —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ!")
    print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RAG –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∫–æ–¥–∞")
