#!/usr/bin/env python3
"""
üßπ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import shutil
import glob
import time
from pathlib import Path
import argparse

def get_confirmation(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = input(f"{message} (y/n): ").lower().strip()
    return response == 'y' or response == 'yes'

def clean_pycache(root_dir, dry_run=True):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    pycache_dirs = []
    for root, dirs, files in os.walk(root_dir):
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            pycache_dirs.append(pycache_path)
    
    if not pycache_dirs:
        print("‚úÖ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(pycache_dirs)} __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    for path in pycache_dirs:
        print(f"  - {path}")
    
    if dry_run:
        print("‚ùó –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: —Ñ–∞–π–ª—ã –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return
    
    if get_confirmation("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏?"):
        for path in pycache_dirs:
            try:
                shutil.rmtree(path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

def clean_temp_files(root_dir, dry_run=True):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (.pyc, .tmp, .bak –∏ —Ç.–¥.)"""
    print("\nüîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    temp_extensions = ['*.pyc', '*.pyo', '*.tmp', '*.bak', '*.swp', '*.~*']
    temp_files = []
    
    for ext in temp_extensions:
        pattern = os.path.join(root_dir, '**', ext)
        temp_files.extend(glob.glob(pattern, recursive=True))
    
    if not temp_files:
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(temp_files)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    for path in temp_files[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        print(f"  - {path}")
    
    if len(temp_files) > 20:
        print(f"  ... –∏ –µ—â–µ {len(temp_files) - 20} —Ñ–∞–π–ª–æ–≤")
    
    if dry_run:
        print("‚ùó –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: —Ñ–∞–π–ª—ã –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return
    
    if get_confirmation("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã?"):
        for path in temp_files:
            try:
                os.remove(path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

def clean_egg_info(root_dir, dry_run=True):
    """–£–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ *.egg-info"""
    print("\nüîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ *.egg-info –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    egg_dirs = []
    for root, dirs, files in os.walk(root_dir):
        for dir_name in dirs:
            if dir_name.endswith('.egg-info'):
                egg_path = os.path.join(root, dir_name)
                egg_dirs.append(egg_path)
    
    if not egg_dirs:
        print("‚úÖ *.egg-info –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(egg_dirs)} *.egg-info –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    for path in egg_dirs:
        print(f"  - {path}")
    
    if dry_run:
        print("‚ùó –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return
    
    if get_confirmation("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ *.egg-info –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏?"):
        for path in egg_dirs:
            try:
                shutil.rmtree(path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

def clean_logs(root_dir, days=7, dry_run=True):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    log_extensions = ['*.log', '*.log.*']
    log_files = []
    current_time = time.time()
    
    for ext in log_extensions:
        pattern = os.path.join(root_dir, '**', ext)
        for file_path in glob.glob(pattern, recursive=True):
            file_time = os.path.getmtime(file_path)
            if (current_time - file_time) / (24 * 3600) > days:
                log_files.append(file_path)
    
    if not log_files:
        print(f"‚úÖ –õ–æ–≥-—Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(log_files)} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π:")
    for path in log_files[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        print(f"  - {path}")
    
    if len(log_files) > 20:
        print(f"  ... –∏ –µ—â–µ {len(log_files) - 20} —Ñ–∞–π–ª–æ–≤")
    
    if dry_run:
        print("‚ùó –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: —Ñ–∞–π–ª—ã –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return
    
    if get_confirmation(f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π?"):
        for path in log_files:
            try:
                os.remove(path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

def main():
    parser = argparse.ArgumentParser(description="–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--dry-run", action="store_true", help="–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)")
    parser.add_argument("--pycache", action="store_true", help="–£–¥–∞–ª–∏—Ç—å __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    parser.add_argument("--temp", action="store_true", help="–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    parser.add_argument("--egg-info", action="store_true", help="–£–¥–∞–ª–∏—Ç—å *.egg-info –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    parser.add_argument("--logs", action="store_true", help="–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã")
    parser.add_argument("--log-days", type=int, default=7, help="–£–¥–∞–ª—è—Ç—å –ª–æ–≥-—Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
    parser.add_argument("--all", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏")
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    if not any([args.pycache, args.temp, args.egg_info, args.logs, args.all]):
        parser.print_help()
        return
    
    root_dir = os.path.dirname(os.path.abspath(__file__))
    
    print("=" * 60)
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    if args.dry_run:
        print("‚ö†Ô∏è –†–ï–ñ–ò–ú –°–ò–ú–£–õ–Ø–¶–ò–ò: —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
    
    if args.all or args.pycache:
        clean_pycache(root_dir, args.dry_run)
    
    if args.all or args.temp:
        clean_temp_files(root_dir, args.dry_run)
    
    if args.all or args.egg_info:
        clean_egg_info(root_dir, args.dry_run)
    
    if args.all or args.logs:
        clean_logs(root_dir, args.log_days, args.dry_run)
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()