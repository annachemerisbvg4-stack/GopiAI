#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç MODULE FOLDERS DETECTIVE 
üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫ –º–æ–¥—É–ª–µ–π GopiAI –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤
üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import json
import re
from pathlib import Path
from datetime import datetime
from collections import defaultdict

class ModuleFoldersDetective:
    def __init__(self, base_path):
        self.base_path = Path(base_path)
        self.analysis_report = {
            'analysis_date': datetime.now().isoformat(),
            'base_path': str(self.base_path),
            'modules_analyzed': {},
            'deprecated_files': [],
            'stub_files': [],
            'conflicting_files': [],
            'unused_widgets': [],
            'recommendations': []
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.stub_patterns = [
            r'stub',
            r'TODO_STUB',
            r'–∑–∞–≥–ª—É—à–∫–∞',
            r'–ó–ê–ì–õ–£–®–ö–ê',
            r'STUB:',
            r'STUB_CREATED'
        ]
        
        self.deprecated_patterns = [
            r'deprecated',
            r'—É—Å—Ç–∞—Ä–µ–ª',
            r'old_',
            r'legacy',
            r'temp_',
            r'–≤—Ä–µ–º–µ–Ω–Ω—ã–π'
        ]
        
        # –ú–æ–¥—É–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.module_folders = [
            'GopiAI-Core',
            'GopiAI-Widgets', 
            'GopiAI-Extensions',
            'GopiAI-App',
            'GopiAI-Assets'
        ]
        
    def analyze_all_modules(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫...")
        
        for module_name in self.module_folders:
            module_path = self.base_path / module_name
            if module_path.exists():
                print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {module_name}...")
                self.analyze_module(module_name, module_path)
            else:
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        self.generate_recommendations()
        return self.analysis_report
    
    def analyze_module(self, module_name, module_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å"""
        module_info = {
            'path': str(module_path),
            'files_analyzed': 0,
            'python_files': [],
            'stub_files': [],
            'deprecated_files': [],
            'widget_files': [],
            'potential_conflicts': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –º–æ–¥—É–ª–µ
        for py_file in module_path.rglob('*.py'):
            if self._should_skip_file(py_file):
                continue
                
            module_info['files_analyzed'] += 1
            file_info = self.analyze_file(py_file)
            
            if file_info['is_stub']:
                module_info['stub_files'].append(file_info)
                self.analysis_report['stub_files'].append(file_info)
                
            if file_info['is_deprecated']:
                module_info['deprecated_files'].append(file_info)
                self.analysis_report['deprecated_files'].append(file_info)
                
            if file_info['is_widget']:
                module_info['widget_files'].append(file_info)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
            if self._check_conflict_with_new_modules(py_file):
                conflict_info = {
                    'file': str(py_file),
                    'module': module_name,
                    'reason': '–í–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –Ω–æ–≤—ã–º –º–æ–¥—É–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º'
                }
                module_info['potential_conflicts'].append(conflict_info)
                self.analysis_report['conflicting_files'].append(conflict_info)
                
            module_info['python_files'].append(file_info)
            
        self.analysis_report['modules_analyzed'][module_name] = module_info
        
    def analyze_file(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        file_info = {
            'path': str(file_path),
            'name': file_path.name,
            'size': file_path.stat().st_size,
            'is_stub': False,
            'is_deprecated': False,
            'is_widget': False,
            'is_empty': False,
            'content_analysis': {},
            'imports': [],
            'classes': [],
            'functions': []
        }
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª
            if len(content.strip()) == 0:
                file_info['is_empty'] = True
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            file_info['content_analysis'] = self._analyze_content(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ stub-—Ñ–∞–π–ª—ã
            for pattern in self.stub_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    file_info['is_stub'] = True
                    break
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ deprecated —Ñ–∞–π–ª—ã
            for pattern in self.deprecated_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    file_info['is_deprecated'] = True
                    break
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–∂–µ—Ç–æ–º
            if 'widget' in file_path.name.lower() or 'Widget' in content:
                file_info['is_widget'] = True
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã, –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            file_info['imports'] = self._extract_imports(content)
            file_info['classes'] = self._extract_classes(content)
            file_info['functions'] = self._extract_functions(content)
            
        except Exception as e:
            file_info['error'] = str(e)
            
        return file_info
    
    def _analyze_content(self, content):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
        lines = content.split('\n')
        return {
            'total_lines': len(lines),
            'code_lines': len([l for l in lines if l.strip() and not l.strip().startswith('#')]),
            'comment_lines': len([l for l in lines if l.strip().startswith('#')]),
            'empty_lines': len([l for l in lines if not l.strip()]),
            'has_main': '__main__' in content,
            'has_qt_imports': 'PySide6' in content or 'PyQt' in content,
            'has_tkinter_imports': 'tkinter' in content,
            'has_test_code': 'test_' in content or 'unittest' in content or 'pytest' in content
        }
    
    def _extract_imports(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        imports = []
        import_pattern = r'^(?:from\s+(.+?)\s+import\s+(.+)|import\s+(.+))$'
        
        for line in content.split('\n'):
            match = re.match(import_pattern, line.strip())
            if match:
                imports.append(line.strip())
        
        return imports
    
    def _extract_classes(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∞—Å—Å—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        classes = []
        class_pattern = r'^class\s+(\w+)(?:\([^)]*\))?:'
        
        for line in content.split('\n'):
            match = re.match(class_pattern, line.strip())
            if match:
                classes.append(match.group(1))
                
        return classes
    
    def _extract_functions(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        functions = []
        func_pattern = r'^def\s+(\w+)\s*\('
        
        for line in content.split('\n'):
            match = re.match(func_pattern, line.strip())
            if match:
                functions.append(match.group(1))
                
        return functions
    
    def _should_skip_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        skip_patterns = [
            '__pycache__',
            '.egg-info',
            'venv',
            '.pytest_cache',
            '.idea',
            '.git'
        ]
        
        path_str = str(file_path)
        return any(pattern in path_str for pattern in skip_patterns)
    
    def _check_conflict_with_new_modules(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        new_module_files = [
            'menu_bar.py',
            'titlebar.py', 
            'file_explorer.py',
            'tab_widget.py',
            'chat_widget.py',
            'terminal_widget.py'
        ]
        
        file_name = file_path.name.lower()
        for new_file in new_module_files:
            if new_file.lower() in file_name or file_name in new_file.lower():
                return True
                
        return False
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ stub-—Ñ–∞–π–ª–∞–º
        if self.analysis_report['stub_files']:
            recommendations.append({
                'category': 'Stub Files',
                'priority': 'HIGH',
                'action': 'REMOVE',
                'description': f"–ù–∞–π–¥–µ–Ω–æ {len(self.analysis_report['stub_files'])} stub-—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                'files': [f['path'] for f in self.analysis_report['stub_files']],
                'reason': '–ó–∞–≥–ª—É—à–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º —Ñ–∞–π–ª–∞–º
        if self.analysis_report['deprecated_files']:
            recommendations.append({
                'category': 'Deprecated Files',
                'priority': 'HIGH', 
                'action': 'ARCHIVE',
                'description': f"–ù–∞–π–¥–µ–Ω–æ {len(self.analysis_report['deprecated_files'])} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤",
                'files': [f['path'] for f in self.analysis_report['deprecated_files']],
                'reason': '–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º —Ñ–∞–π–ª–∞–º
        if self.analysis_report['conflicting_files']:
            recommendations.append({
                'category': 'Conflicting Files',
                'priority': 'MEDIUM',
                'action': 'REVIEW',
                'description': f"–ù–∞–π–¥–µ–Ω–æ {len(self.analysis_report['conflicting_files'])} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤",
                'files': [f['file'] for f in self.analysis_report['conflicting_files']],
                'reason': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏'
            })
        
        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        widget_files = []
        for module_data in self.analysis_report['modules_analyzed'].values():
            widget_files.extend(module_data['widget_files'])
            
        if len(widget_files) > 5:  # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–æ–≤
            recommendations.append({
                'category': 'Widget Duplication',
                'priority': 'MEDIUM',
                'action': 'CONSOLIDATE',
                'description': f"–ù–∞–π–¥–µ–Ω–æ {len(widget_files)} —Ñ–∞–π–ª–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
                'files': [f['path'] for f in widget_files],
                'reason': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤'
            })
        
        self.analysis_report['recommendations'] = recommendations
    
    def save_report(self, output_file='MODULE_FOLDERS_ANALYSIS.json'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        output_path = self.base_path / output_file
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(self.analysis_report, f, ensure_ascii=False, indent=2)
            
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        return output_path
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê –ú–û–î–£–õ–¨–ù–´–• –ü–ê–ü–û–ö")
        print("="*60)
        
        for module_name, module_data in self.analysis_report['modules_analyzed'].items():
            print(f"\nüìÅ {module_name}:")
            print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {module_data['files_analyzed']}")
            print(f"   ‚Ä¢ Stub-—Ñ–∞–π–ª–æ–≤: {len(module_data['stub_files'])}")
            print(f"   ‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(module_data['deprecated_files'])}")
            print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤: {len(module_data['widget_files'])}")
            print(f"   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(module_data['potential_conflicts'])}")
        
        print(f"\nüîç –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ stub-—Ñ–∞–π–ª–æ–≤: {len(self.analysis_report['stub_files'])}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(self.analysis_report['deprecated_files'])}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(self.analysis_report['conflicting_files'])}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in self.analysis_report['recommendations']:
            print(f"   ‚Ä¢ {rec['category']}: {rec['action']} ({rec['priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")
            print(f"     {rec['description']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    base_path = Path(__file__).parent
    detective = ModuleFoldersDetective(base_path)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    report = detective.analyze_all_modules()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    detective.save_report()
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    detective.print_summary()
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MODULE_FOLDERS_ANALYSIS.json")

if __name__ == "__main__":
    main()
