#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GopiAI Bridge
==================================
"""
import sys
import os
from pathlib import Path

def diagnose_structure():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ GopiAI\n")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
    paths_to_check = [
        "GopiAI-WebView/gopiai/webview/js_bridge.py",
        "GopiAI-WebView/gopiai/webview/assets/chat.js",
        "GopiAI-UI/gopiai/ui/components/claude_tools_handler.py",
        "GopiAI-UI/gopiai/ui/components/webview_chat_widget.py",
        "GopiAI-UI/gopiai/ui/main.py",
    ]
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    for path in paths_to_check:
        file_path = Path(path)
        status = "‚úÖ" if file_path.exists() else "‚ùå"
        size = f"({file_path.stat().st_size} bytes)" if file_path.exists() else ""
        print(f"  {status} {path} {size}")
    
    print("\nüêç Python paths:")
    for path in sys.path:
        print(f"  {path}")
    
    print("\nüîç –ü–æ–∏—Å–∫ bridge —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö bridge —Ñ–∞–π–ª–æ–≤
    bridge_files = []
    for root, dirs, files in os.walk("."):
        for file in files:
            if "bridge" in file.lower() and file.endswith(".py"):
                bridge_files.append(os.path.join(root, file))
    
    if bridge_files:
        print("üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ bridge —Ñ–∞–π–ª—ã:")
        for file in bridge_files:
            print(f"  ‚úÖ {file}")
    else:
        print("‚ùå Bridge —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def check_webchannel_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É WebChannel"""
    
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ WebChannel setup...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat.js
    chat_js = Path("GopiAI-WebView/gopiai/webview/assets/chat.js")
    if chat_js.exists():
        with open(chat_js, 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = [
            ("QWebChannel", "QWebChannel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"),
            ("qt.webChannelTransport", "WebChannel transport"),
            ("execute_claude_tool", "Claude tool execution"),
            ("get_claude_tools_list", "Claude tools list"),
        ]
        
        for check, description in checks:
            status = "‚úÖ" if check in content else "‚ùå"
            print(f"  {status} {description}")
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_bridge_imports.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –≤ WebView")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ editable —Ä–µ–∂–∏–º–µ")

if __name__ == "__main__":
    diagnose_structure()
    check_webchannel_setup()
