#!/usr/bin/env python3
"""
GopiAI Advanced Project Cleanup üßπ
===================================

–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
–£–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –∞ –∫–∞–∫–∏–µ —É–¥–∞–ª–∏—Ç—å.

–ê–≤—Ç–æ—Ä: Crazy Coder
–î–∞—Ç–∞: 2025-06-05
"""

import os
import sys
import json
import shutil
import hashlib
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Set, Tuple, Optional
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedProjectCleaner:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: Optional[Path] = None):
        self.project_root = project_root or Path(__file__).parent.parent
        self.reports_dir = self.project_root / "project_health" / "reports"
        
        # –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        self.ignore_dirs = {
            '__pycache__', '.git', 'node_modules', 'venv', 'env', '.venv',
            'rag_memory_env', '.pytest_cache', 'dist', 'build', '.egg-info',
            '.mypy_cache', '.tox', 'logs'
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.priority_rules = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –¥—É–±–ª—è–º–∏ –≤ GopiAI/
            (r'^GopiAI-', r'^GopiAI\\GopiAI-'),  # GopiAI-Core vs GopiAI/GopiAI-Core
            (r'^UI\\', r'^GopiAI-UI\\ui\\'),     # UI/ vs GopiAI-UI/ui/
            (r'^(?!rag_memory_system)', r'^rag_memory_system\\project_sync\\'),  # –û—Ä–∏–≥–∏–Ω–∞–ª vs —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        self.unsafe_patterns = [
            '*.tmp', '*.temp', '*.bak', '*.old', '*.backup',
            '*~', '*.pyc', '*.pyo', '*.pyd',
            'Thumbs.db', '.DS_Store', 'desktop.ini'
        ]
        
        self.removed_files = []
        self.removed_dirs = []
    
    def load_health_report(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ health checker'–∞"""
        reports = list(self.reports_dir.glob("health_check_*.json"))
        if not reports:
            raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç health checker'–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ health_checker.py")
        
        latest_report = max(reports, key=lambda x: x.stat().st_mtime)
        with open(latest_report, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def analyze_duplicates(self, duplicate_groups: List[List[str]]) -> List[Tuple[str, List[str]]]:
        """–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–∏—Ç—å"""
        files_to_remove = []
        
        for group in duplicate_groups:
            if len(group) < 2:
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            keep_file = None
            remove_files = []
            
            for priority_pattern, remove_pattern in self.priority_rules:
                keep_candidates = [f for f in group if self._matches_pattern(f, priority_pattern)]
                remove_candidates = [f for f in group if self._matches_pattern(f, remove_pattern)]
                
                if keep_candidates and remove_candidates:
                    keep_file = keep_candidates[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                    remove_files.extend(remove_candidates)
                    break
            
            # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å
            if not keep_file:
                group.sort(key=len)
                keep_file = group[0]
                remove_files = group[1:]
            
            # –£–±–∏—Ä–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            remove_files = [f for f in remove_files if f != keep_file]
            
            if remove_files:
                files_to_remove.append((keep_file, remove_files))
        
        return files_to_remove
    
    def _matches_pattern(self, path: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—É—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–ø—Ä–æ—Å—Ç–∞—è regex-–ø–æ–¥–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
        import re
        try:
            return bool(re.search(pattern, path.replace('/', '\\')))
        except:
            return False
    
    def remove_duplicate_files(self, duplicate_analysis: List[Tuple[str, List[str]]]) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        removed_count = 0
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        for keep_file, remove_files in duplicate_analysis:
            print(f"\nüìÅ –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            print(f"   ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: {keep_file}")
            
            for file_path in remove_files:
                full_path = self.project_root / file_path
                if full_path.exists():
                    try:
                        full_path.unlink()
                        self.removed_files.append(file_path)
                        removed_count += 1
                        print(f"   üóëÔ∏è –£–¥–∞–ª—ë–Ω: {file_path}")
                    except OSError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
                else:
                    print(f"   ‚ö†Ô∏è –£–∂–µ —É–¥–∞–ª—ë–Ω: {file_path}")
        
        return removed_count
    
    def remove_empty_directories(self) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)"""
        removed_count = 0
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
        for _ in range(3):
            empty_dirs = []
            
            for dir_path in self.project_root.rglob('*'):
                if (dir_path.is_dir() and 
                    not any(ignore in dir_path.parts for ignore in self.ignore_dirs)):
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                        has_files = any(p.is_file() for p in dir_path.rglob('*'))
                        if not has_files:
                            empty_dirs.append(dir_path)
                    except OSError:
                        continue
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –≥–ª—É–±–æ–∫–∏–µ)
            empty_dirs.sort(key=lambda x: len(x.parts), reverse=True)
            
            for dir_path in empty_dirs:
                try:
                    dir_path.rmdir()
                    rel_path = str(dir_path.relative_to(self.project_root))
                    self.removed_dirs.append(rel_path)
                    removed_count += 1
                    print(f"   üìÇ –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {rel_path}")
                except OSError:
                    # –ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞
                    pass
        
        return removed_count
    
    def clean_unsafe_files(self) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        removed_count = 0
        
        print("\nüö® –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        for pattern in self.unsafe_patterns:
            for file_path in self.project_root.rglob(pattern):
                if (file_path.is_file() and 
                    not any(ignore in file_path.parts for ignore in self.ignore_dirs)):
                    
                    try:
                        file_path.unlink()
                        rel_path = str(file_path.relative_to(self.project_root))
                        self.removed_files.append(rel_path)
                        removed_count += 1
                        print(f"   üóëÔ∏è –£–¥–∞–ª—ë–Ω: {rel_path}")
                    except OSError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        
        return removed_count
    
    def run_advanced_cleanup(self, auto_confirm: bool = False) -> Dict:
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        print("üßπ GopiAI Advanced Project Cleanup")
        print("=" * 50)
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {self.project_root}")
        print()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á—ë—Ç health checker'–∞
        try:
            report = self.load_health_report()
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á—ë—Ç health checker'–∞")
        except FileNotFoundError as e:
            print(f"‚ùå {e}")
            return {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicate_groups = report['details']['duplicate_files']
        duplicate_analysis = self.analyze_duplicates(duplicate_groups)
        
        total_files_to_remove = sum(len(remove_files) for _, remove_files in duplicate_analysis)
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:")
        print(f"   üîç –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicate_analysis)}")
        print(f"   üóëÔ∏è –§–∞–π–ª–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {total_files_to_remove}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not auto_confirm:
            print(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (y/N): ", end="")
            try:
                response = input().strip().lower()
                if response not in ['y', 'yes', '–¥–∞']:
                    print("–û—Ç–º–µ–Ω–∞.")
                    return {}
            except (EOFError, KeyboardInterrupt):
                print("\n–û—Ç–º–µ–Ω–∞.")
                return {}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        print("\nüßπ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        
        removed_duplicates = self.remove_duplicate_files(duplicate_analysis)
        removed_unsafe = self.clean_unsafe_files()
        removed_empty_dirs = self.remove_empty_directories()
        
        # –°–≤–æ–¥–∫–∞
        total_removed_files = removed_duplicates + removed_unsafe + len(self.removed_files)
        total_removed_dirs = removed_empty_dirs + len(self.removed_dirs)
        
        print(f"\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_removed_files}")
        print(f"   üìÇ –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {total_removed_dirs}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        cleanup_report = {
            'timestamp': datetime.now().isoformat(),
            'project_root': str(self.project_root),
            'removed_files': self.removed_files,
            'removed_dirs': self.removed_dirs,
            'summary': {
                'removed_duplicates': removed_duplicates,
                'removed_unsafe': removed_unsafe,
                'removed_empty_dirs': removed_empty_dirs,
                'total_files': total_removed_files,
                'total_dirs': total_removed_dirs
            }
        }
        
        report_file = self.reports_dir / f"advanced_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(cleanup_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìä –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–µ–∫—Ç–∞
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        try:
            import subprocess
            subprocess.run([
                sys.executable, 
                str(self.project_root / "update_project_map.py")
            ], cwd=self.project_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        
        return cleanup_report


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="GopiAI Advanced Project Cleanup")
    parser.add_argument('--project-root', type=Path, help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--auto-confirm', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä cleaner'–∞
    cleaner = AdvancedProjectCleaner(args.project_root)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        results = cleaner.run_advanced_cleanup(args.auto_confirm)
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
