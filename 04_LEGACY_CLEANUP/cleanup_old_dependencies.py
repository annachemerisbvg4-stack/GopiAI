#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç ChromaDB, AutoGen –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
"""

import subprocess
import sys

# –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
PACKAGES_TO_REMOVE = [
    # ChromaDB –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ
    "chromadb",
    "grpcio", 
    "grpcio-status",
    
    # AutoGen –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ  
    "autogen-agentchat",
    
    # LangChain (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "langchain",
    "langchain-anthropic", 
    "langchain-aws",
    "langchain-chroma",
    "langchain-core",
    "langchain-deepseek",
    "langchain-google-genai",
    "langchain-huggingface", 
    "langchain-ollama",
    "langchain-openai",
    "langchain-text-splitters",
    "langsmith",
    
    # LlamaIndex (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "llama-cloud",
    "llama-cloud-services", 
    "llama-index",
    "llama-index-agent-openai",
    "llama-index-cli",
    "llama-index-core",
    "llama-index-embeddings-openai",
    "llama-index-indices-managed-llama-cloud",
    "llama-index-llms-openai",
    "llama-index-multi-modal-llms-openai",
    "llama-index-program-openai", 
    "llama-index-question-gen-openai",
    "llama-index-readers-file",
    "llama-index-readers-llama-parse",
    "llama-parse",
    
    # Mem0AI (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "mem0ai",
    
    # Browser automation (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "browser-use",
    "playwright",
    "patchright",
    
    # ML –ø–∞–∫–µ—Ç—ã (–µ—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω)
    "sentence-transformers",
    "transformers", 
    "torch",
    "faiss-cpu",
    "scikit-learn",
    "scipy",
    
    # –î—Ä—É–≥–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
    "ollama",
    "qdrant-client",
    "kubernetes",
    "boto3",
    "botocore",
    "opentelemetry-api",
    "opentelemetry-exporter-otlp-proto-common",
    "opentelemetry-exporter-otlp-proto-grpc", 
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-asgi",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-proto",
    "opentelemetry-sdk",
    "opentelemetry-semantic-conventions",
    "opentelemetry-util-http",
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "matplotlib",
    "graphviz",
    "pyvis",
    
    # PDF –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "pypdf",
    "pdfminer.six", 
    "pdfplumber",
    "pypdfium2",
]

def remove_packages():
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    for package in PACKAGES_TO_REMOVE:
        try:
            print(f"–£–¥–∞–ª—è–µ–º {package}...")
            result = subprocess.run([
                sys.executable, "-m", "pip", "uninstall", package, "-y"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ {package} —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {package} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {package}: {e}")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞–∫–µ—Ç—ã...")
    subprocess.run([sys.executable, "-m", "pip", "list"])

def install_required():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt...")
    
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], check=True)
        print("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

if __name__ == "__main__":
    print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –º–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–æ–≤!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å backup –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞")
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() in ['yes', 'y', '–¥–∞']:
        remove_packages()
        install_required()
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")