#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –≤ chat.js –∏ —Ü–µ–ø–æ—á–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
"""

import os
import re
import json
from pathlib import Path

def analyze_chat_js_issues():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ chat.js"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ chat.js")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º chat.js
    chat_js_path = "GopiAI-WebView/gopiai/webview/assets/chat.js"
    
    if not os.path.exists(chat_js_path):
        print(f"‚ùå –§–∞–π–ª {chat_js_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(chat_js_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é puter.js
    if 'waitForPuter()' in content:
        print("‚úÖ –ï—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ puter.js")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ puter.js")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ sendMessage
    sendmessage_match = re.search(r'async sendMessage\(\)\s*{(.*?)}', content, re.DOTALL)
    if sendmessage_match:
        sendmessage_code = sendmessage_match.group(1)
        
        if 'try' in sendmessage_code and 'catch' in sendmessage_code:
            print("‚úÖ –ï—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ sendMessage")
        else:
            issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ sendMessage")
        
        if 'puter.ai.chat' in sendmessage_code:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è puter.ai.chat")
        else:
            issues.append("‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è puter.ai.chat")
    else:
        issues.append("‚ùå –ú–µ—Ç–æ–¥ sendMessage –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º WebChannel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if 'QWebChannel' in content and 'qt.webChannelTransport' in content:
        print("‚úÖ –ï—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebChannel")
    else:
        issues.append("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π WebChannel")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º bridge –º–µ—Ç–æ–¥—ã
    if 'execute_claude_tool' in content:
        print("‚úÖ –ï—Å—Ç—å –≤—ã–∑–æ–≤—ã execute_claude_tool")
    else:
        issues.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—ã–∑–æ–≤—ã execute_claude_tool")
    
    if 'get_claude_tools_list' in content:
        print("‚úÖ –ï—Å—Ç—å –≤—ã–∑–æ–≤—ã get_claude_tools_list")
    else:
        issues.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—ã–∑–æ–≤—ã get_claude_tools_list")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if 'console.log' in content:
        print("‚úÖ –ï—Å—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏")
    else:
        issues.append("‚ö†Ô∏è –ú–∞–ª–æ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if issues:
        print("\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("\n‚úÖ –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return issues

def analyze_webview_bridge():
    """–ê–Ω–∞–ª–∏–∑ WebView bridge"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ WebView Bridge")
    print("=" * 50)
    
    # –ò—â–µ–º webview_bridge.py
    possible_paths = [
        "GopiAI-WebView/gopiai/webview/webview_bridge.py",
        "GopiAI/GopiAI-WebView/gopiai/webview/webview_bridge.py"
    ]
    
    bridge_path = None
    for path in possible_paths:
        if os.path.exists(path):
            bridge_path = path
            break
    
    if not bridge_path:
        print("‚ùå WebView bridge –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω WebView bridge: {bridge_path}")
    
    with open(bridge_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    if 'execute_claude_tool' in content:
        print("‚úÖ –ú–µ—Ç–æ–¥ execute_claude_tool –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –ú–µ—Ç–æ–¥ execute_claude_tool –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if 'get_claude_tools_list' in content:
        print("‚úÖ –ú–µ—Ç–æ–¥ get_claude_tools_list –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –ú–µ—Ç–æ–¥ get_claude_tools_list –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if 'from GopiAI' in content or 'import GopiAI' in content:
        print("‚úÖ –ï—Å—Ç—å –∏–º–ø–æ—Ä—Ç—ã GopiAI –º–æ–¥—É–ª–µ–π")
    else:
        issues.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏")
    
    return issues

def analyze_claude_tools():
    """–ê–Ω–∞–ª–∏–∑ Claude Tools Handler"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ Claude Tools")
    print("=" * 50)
    
    # –ò—â–µ–º claude_tools_handler.py
    possible_paths = [
        "GopiAI-Extensions/claude_tools/claude_tools_handler.py",
        "GopiAI/GopiAI-Extensions/claude_tools/claude_tools_handler.py"
    ]
    
    tools_path = None
    for path in possible_paths:
        if os.path.exists(path):
            tools_path = path
            break
    
    if not tools_path:
        print("‚ùå Claude Tools Handler –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω Claude Tools Handler: {tools_path}")
    
    with open(tools_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    if 'execute_tool' in content:
        print("‚úÖ –ú–µ—Ç–æ–¥ execute_tool –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –ú–µ—Ç–æ–¥ execute_tool –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if 'list_tools' in content:
        print("‚úÖ –ú–µ—Ç–æ–¥ list_tools –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –ú–µ—Ç–æ–¥ list_tools –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    if 'try:' in content and 'except' in content:
        print("‚úÖ –ï—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    else:
        issues.append("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    
    return issues

def create_diagnostic_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    
    diagnostic_code = '''
import sys
import os
import json
import traceback
from pathlib import Path

def diagnose_gopiai():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GopiAI —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üîç GopiAI System Diagnostic")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø—É—Ç–µ–π
    print("üìÇ Python paths:")
    for path in sys.path:
        print(f"  {path}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    modules_to_check = [
        'GopiAI.GopiAI-WebView.gopiai.webview.webview_bridge',
        'GopiAI.GopiAI-Extensions.claude_tools.claude_tools_handler',
        'PySide6.QtCore',
        'PySide6.QtWebEngineWidgets',
        'PySide6.QtWebChannel'
    ]
    
    print("\\nüì¶ Module imports:")
    for module in modules_to_check:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}")
        except ImportError as e:
            print(f"  ‚ùå {module}: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        'GopiAI-UI/gopiai/ui/main.py',
        'GopiAI-WebView/gopiai/webview/webview_bridge.py',
        'GopiAI-WebView/gopiai/webview/assets/chat.js',
        'GopiAI-Extensions/claude_tools/claude_tools_handler.py'
    ]
    
    print("\\nüìÑ File existence:")
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\\nüåç Environment variables:")
    env_vars = ['PYTHONPATH', 'QT_LOGGING_RULES', 'PATH']
    for var in env_vars:
        value = os.environ.get(var, 'Not set')
        print(f"  {var}: {value}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ QtWebEngine
    try:
        from PySide6.QtWebEngineWidgets import QWebEngineView
        print("\\nüåê QtWebEngine: ‚úÖ Available")
    except ImportError as e:
        print(f"\\nüåê QtWebEngine: ‚ùå {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebChannel
    try:
        from PySide6.QtWebChannel import QWebChannel
        print("üåâ WebChannel: ‚úÖ Available")
    except ImportError as e:
        print(f"üåâ WebChannel: ‚ùå {e}")

if __name__ == "__main__":
    diagnose_gopiai()
'''
    
    with open('diagnostic.py', 'w', encoding='utf-8') as f:
        f.write(diagnostic_code)
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç: diagnostic.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üöÄ GopiAI Problem Analyzer")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    chat_issues = analyze_chat_js_issues() or []
    bridge_issues = analyze_webview_bridge() or []
    tools_issues = analyze_claude_tools() or []
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
    create_diagnostic_script()
    
    # –û–±—â–∏–π –æ—Ç—á–µ—Ç
    total_issues = len(chat_issues) + len(bridge_issues) + len(tools_issues)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
    
    if total_issues == 0:
        print("‚úÖ –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å interaction_debug_logger.py –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    else:
        print("üö® –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        
        all_issues = chat_issues + bridge_issues + tools_issues
        for i, issue in enumerate(all_issues, 1):
            print(f"  {i}. {issue}")
    
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ diagnostic.py –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ interaction_debug_logger.py –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –≤ WebView (F12)")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()