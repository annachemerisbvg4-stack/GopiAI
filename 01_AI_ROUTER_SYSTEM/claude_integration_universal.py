"""
üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è GopiAI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Claude –±–µ–∑ Anthropic API –∫–ª—é—á–∞
"""

import os
import json
import requests
import logging
from typing import Optional, Dict, Any, List
from dataclasses import dataclass
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ClaudeMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Claude"""
    role: str  # 'user', 'assistant', 'system'
    content: str

@dataclass
class ClaudeResponse:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude"""
    content: str
    model: str
    usage: Optional[Dict[str, int]] = None
    error: Optional[str] = None

class ClaudeIntegrator:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è Claude AI
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞
    """
    
    def __init__(self, method: str = "unofficial_server", **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            method: –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–∞ ('unofficial_server', 'session_cookie', 'free_trial')
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        """
        self.method = method
        self.config = kwargs
        self._setup_method()
    
    def _setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞"""
        if self.method == "unofficial_server":
            self._setup_unofficial_server()
        elif self.method == "session_cookie":
            self._setup_session_cookie()
        elif self.method == "free_trial":
            self._setup_free_trial()
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {self.method}")
    
    def _setup_unofficial_server(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UnofficialClaude —Å–µ—Ä–≤–µ—Ä–∞"""
        self.base_url = self.config.get('base_url', 'http://localhost:8008')
        self.api_key = self.config.get('api_key', 'local-claude-key')
        self.model = self.config.get('model', 'claude-3-5-sonnet-20240620')
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω unofficial server –º–µ—Ç–æ–¥")
    
    def _setup_session_cookie(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ session cookie"""
        try:
            from claude import claude_client, claude_wrapper
            
            session_key = self.config.get('session_key')
            if not session_key:
                raise ValueError("session_key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞")
            
            self.client = claude_client.ClaudeClient(session_key)
            organizations = self.client.get_organizations()
            
            org_uuid = self.config.get('organization_uuid')
            if not org_uuid and organizations:
                org_uuid = organizations[0]['uuid']
            
            self.claude = claude_wrapper.ClaudeWrapper(
                self.client, 
                organization_uuid=org_uuid
            )
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω session cookie –º–µ—Ç–æ–¥")
            
        except ImportError:
            raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ claude-api-py: pip install claude-api-py")
    
    def _setup_free_trial(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API —Å free trial"""
        self.api_key = self.config.get('anthropic_key')
        if not self.api_key:
            raise ValueError("anthropic_key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è free trial")
        
        self.base_url = 'https://api.anthropic.com'
        self.model = self.config.get('model', 'claude-3-haiku-20240307')
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω free trial –º–µ—Ç–æ–¥")
    
    def chat(self, message: str, history: Optional[List[ClaudeMessage]] = None) -> ClaudeResponse:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Claude
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            ClaudeResponse —Å –æ—Ç–≤–µ—Ç–æ–º
        """
        try:
            if self.method == "unofficial_server":
                return self._chat_unofficial_server(message, history)
            elif self.method == "session_cookie":
                return self._chat_session_cookie(message, history)
            elif self.method == "free_trial":
                return self._chat_free_trial(message, history)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat: {e}")
            return ClaudeResponse(
                content=f"–û—à–∏–±–∫–∞: {str(e)}",
                model=getattr(self, 'model', 'unknown'),
                error=str(e)
            )
    
    def _chat_unofficial_server(self, message: str, history: Optional[List[ClaudeMessage]] = None) -> ClaudeResponse:
        """–ß–∞—Ç —á–µ—Ä–µ–∑ UnofficialClaude —Å–µ—Ä–≤–µ—Ä"""
        messages = []
        
        if history:
            messages.extend([
                {"role": msg.role, "content": msg.content} 
                for msg in history
            ])
        
        messages.append({"role": "user", "content": message})
        
        url = urljoin(self.base_url, '/v1/chat/completions')
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': self.model,
            'messages': messages,
            'max_tokens': self.config.get('max_tokens', 1000),
            'temperature': self.config.get('temperature', 0.7)
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return ClaudeResponse(
                content=result['choices'][0]['message']['content'],
                model=result.get('model', self.model),
                usage=result.get('usage')
            )
        else:
            raise Exception(f"HTTP {response.status_code}: {response.text}")
    
    def _chat_session_cookie(self, message: str, history: Optional[List[ClaudeMessage]] = None) -> ClaudeResponse:
        """–ß–∞—Ç —á–µ—Ä–µ–∑ session cookie (claude-api-py)"""
        if not hasattr(self, 'current_conversation'):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            conversation = self.claude.start_new_conversation("GopiAI Chat", message)
            self.current_conversation = conversation['uuid']
            response_text = conversation['response']
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            response_text = self.claude.send_message(message)
        
        return ClaudeResponse(
            content=response_text,
            model="claude-session-api"
        )
    
    def _chat_free_trial(self, message: str, history: Optional[List[ClaudeMessage]] = None) -> ClaudeResponse:
        """–ß–∞—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API (free trial)"""
        messages = []
        
        if history:
            messages.extend([
                {"role": msg.role, "content": msg.content} 
                for msg in history
            ])
        
        messages.append({"role": "user", "content": message})
        
        url = urljoin(self.base_url, '/v1/messages')
        headers = {
            'x-api-key': self.api_key,
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01'
        }
        
        data = {
            'model': self.model,
            'max_tokens': self.config.get('max_tokens', 1000),
            'messages': messages
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return ClaudeResponse(
                content=result['content'][0]['text'],
                model=result.get('model', self.model),
                usage=result.get('usage')
            )
        else:
            raise Exception(f"HTTP {response.status_code}: {response.text}")
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Claude"""
        try:
            response = self.chat("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ: –ü—Ä–∏–≤–µ—Ç!")
            return not response.error and "–ø—Ä–∏–≤–µ—Ç" in response.content.lower()
        except Exception as e:
            logger.error(f"–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False
    
    def get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if self.method == "unofficial_server":
            return [
                'claude-3-5-sonnet-20240620',
                'claude-3-opus-20240229',
                'claude-3-haiku-20240307'
            ]
        elif self.method == "session_cookie":
            return ['claude-session-api']
        elif self.method == "free_trial":
            return [
                'claude-3-haiku-20240307',
                'claude-3-sonnet-20240229',
                'claude-3-opus-20240229'
            ]
        return []

class GopiAIClaudeService:
    """–°–µ—Ä–≤–∏—Å Claude –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GopiAI"""
    
    def __init__(self, config_file: str = "claude_config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_file = config_file
        self.integrator = None
        self._load_config()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                method = config.get('method', 'unofficial_server')
                self.integrator = ClaudeIntegrator(method=method, **config.get('params', {}))
                
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {method}")
            else:
                self._create_default_config()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self._create_default_config()
    
    def _create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            "method": "unofficial_server",
            "params": {
                "base_url": "http://localhost:8008",
                "api_key": "local-claude-key",
                "model": "claude-3-5-sonnet-20240620",
                "max_tokens": 1000,
                "temperature": 0.7
            },
            "alternatives": {
                "session_cookie": {
                    "method": "session_cookie",
                    "params": {
                        "session_key": "sk-ant-sid01-YOUR-SESSION-KEY",
                        "organization_uuid": "your-org-uuid"
                    }
                },
                "free_trial": {
                    "method": "free_trial",
                    "params": {
                        "anthropic_key": "sk-ant-api03-YOUR-API-KEY",
                        "model": "claude-3-haiku-20240307"
                    }
                }
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
    
    def chat(self, message: str, context: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è GopiAI
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.integrator:
            return {
                'success': False,
                'error': 'Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'response': '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude'
            }
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if context:
                full_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            else:
                full_message = message
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = self.integrator.chat(full_message)
            
            if response.error:
                return {
                    'success': False,
                    'error': response.error,
                    'response': response.content
                }
            
            return {
                'success': True,
                'response': response.content,
                'model': response.model,
                'usage': response.usage,
                'method': self.integrator.method
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat: {e}")
            return {
                'success': False,
                'error': str(e),
                'response': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Claude: {str(e)}'
            }
    
    def test_all_methods(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        results = {}
        
        methods = [
            ('unofficial_server', {
                'base_url': 'http://localhost:8008',
                'api_key': 'local-claude-key'
            }),
            ('session_cookie', {
                'session_key': 'test-key'  # –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
            }),
            ('free_trial', {
                'anthropic_key': 'test-key'  # –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
            })
        ]
        
        for method, params in methods:
            try:
                integrator = ClaudeIntegrator(method=method, **params)
                results[method] = integrator.test_connection()
            except Exception as e:
                logger.warning(f"–ú–µ—Ç–æ–¥ {method} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                results[method] = False
        
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å UnofficialClaude —Å–µ—Ä–≤–µ—Ä–æ–º
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    service = GopiAIClaudeService()
    
    # –¢–µ—Å—Ç —á–∞—Ç–∞
    result = service.chat("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    
    if result['success']:
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result['response']}")
        print(f"üìä –ú–æ–¥–µ–ª—å: {result['model']}")
        print(f"üîß –ú–µ—Ç–æ–¥: {result['method']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤:")
    test_results = service.test_all_methods()
    
    for method, status in test_results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {method}: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")