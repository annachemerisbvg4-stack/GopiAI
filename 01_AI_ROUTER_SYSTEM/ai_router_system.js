/**
 * üéØ –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê AI –†–û–¢–ê–¶–ò–ò
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
 * –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è free tier API
 */

class AIRouter {
    constructor(config) {
        this.providers = config.providers || [];
        this.usage = this.loadUsage();
        this.currentProvider = null;
        this.requestQueue = [];
        this.isProcessing = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.initializeMonitoring();
        
        console.log('üöÄ AI Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å', this.providers.length, '–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏');
    }

    /**
     * üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –í–´–ë–û–† –ü–†–û–í–ê–ô–î–ï–†–ê
     */
    selectBestProvider(taskType = 'general') {
        const now = Date.now();
        const currentMinute = Math.floor(now / 60000);
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
        this.resetCountersIfNeeded(currentMinute);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const availableProviders = this.providers.filter(provider => {
            const usage = this.usage[provider.name] || { rpm: 0, tpm: 0, currentMinute };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 20% –±—É—Ñ–µ—Ä)
            const rpmUsage = (usage.rpm / provider.limits.rpm) * 100;
            const tpmUsage = (usage.tpm / provider.limits.tpm) * 100;
            
            return rpmUsage < 80 && tpmUsage < 80 && provider.status === 'active';
        });

        if (availableProviders.length === 0) {
            console.warn('‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç—ã! –û–∂–∏–¥–∞–Ω–∏–µ...');
            return null;
        }

        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        const bestProvider = availableProviders.sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if (a.priority !== b.priority) {
                return a.priority - b.priority;
            }
            
            // –ü–æ—Ç–æ–º –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
            const aUsage = this.getProviderUsagePercent(a.name);
            const bUsage = this.getProviderUsagePercent(b.name);
            return aUsage - bUsage;
        })[0];

        this.currentProvider = bestProvider;
        console.log('üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', bestProvider.name, 
                   `(RPM: ${this.usage[bestProvider.name]?.rpm || 0}/${bestProvider.limits.rpm})`);
        
        return bestProvider;
    }

    /**
     * üí¨ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ß–ê–¢–ê
     */
    async chat(message, options = {}) {
        const provider = this.selectBestProvider(options.taskType);
        
        if (!provider) {
            throw new Error('–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
        }

        try {
            const startTime = Date.now();
            const response = await this.makeRequest(provider, message, options);
            const duration = Date.now() - startTime;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateUsage(provider.name, message, response);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
            console.log(`‚úÖ ${provider.name}: ${duration}ms, ${this.estimateTokens(response)} —Ç–æ–∫–µ–Ω–æ–≤`);
            
            return {
                response: response,
                provider: provider.name,
                model: provider.model,
                duration: duration,
                success: true
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${provider.name}:`, error.message);
            
            // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ
            if (this.isRateLimitError(error)) {
                this.markProviderExhausted(provider.name);
            } else {
                this.markProviderError(provider.name);
            }
            
            // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            return this.retryWithNextProvider(message, options, provider.name);
        }
    }

    /**
     * üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –° –î–†–£–ì–ò–ú –ü–†–û–í–ê–ô–î–ï–†–û–ú
     */
    async retryWithNextProvider(message, options, excludeProvider) {
        const availableProviders = this.providers.filter(p => 
            p.name !== excludeProvider && p.status === 'active'
        );

        if (availableProviders.length === 0) {
            throw new Error('–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...');
        return this.chat(message, options);
    }

    /**
     * üì° –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê –ö –ü–†–û–í–ê–ô–î–ï–†–£
     */
    async makeRequest(provider, message, options) {
        const requestData = this.buildRequestData(provider, message, options);
        
        const response = await fetch(provider.endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${provider.apiKey}`,
                ...provider.headers
            },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const data = await response.json();
        return this.extractResponse(provider, data);
    }

    /**
     * üèóÔ∏è –ü–û–°–¢–†–û–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê –î–õ–Ø –†–ê–ó–ù–´–• –ü–†–û–í–ê–ô–î–ï–†–û–í
     */
    buildRequestData(provider, message, options) {
        const baseRequest = {
            messages: [{ role: 'user', content: message }],
            max_tokens: options.maxTokens || 1000,
            temperature: options.temperature || 0.7
        };

        switch (provider.type) {
            case 'openai-compatible':
                return {
                    ...baseRequest,
                    model: provider.model
                };
                
            case 'gemini':
                return {
                    contents: [{ parts: [{ text: message }] }],
                    generationConfig: {
                        maxOutputTokens: options.maxTokens || 1000,
                        temperature: options.temperature || 0.7
                    }
                };
                
            case 'cohere':
                return {
                    message: message,
                    model: provider.model,
                    max_tokens: options.maxTokens || 1000,
                    temperature: options.temperature || 0.7
                };
                
            default:
                return baseRequest;
        }
    }

    /**
     * üìù –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ò–ó –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–û–í
     */
    extractResponse(provider, data) {
        switch (provider.type) {
            case 'openai-compatible':
                return data.choices?.[0]?.message?.content || data.choices?.[0]?.text || '';
                
            case 'gemini':
                return data.candidates?.[0]?.content?.parts?.[0]?.text || '';
                
            case 'cohere':
                return data.text || '';
                
            default:
                return data.response || data.text || JSON.stringify(data);
        }
    }

    /**
     * üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
     */
    updateUsage(providerName, request, response) {
        const now = Date.now();
        const currentMinute = Math.floor(now / 60000);
        
        if (!this.usage[providerName]) {
            this.usage[providerName] = { rpm: 0, tpm: 0, currentMinute };
        }

        const usage = this.usage[providerName];
        
        // –°–±—Ä–æ—Å –µ—Å–ª–∏ –Ω–æ–≤–∞—è –º–∏–Ω—É—Ç–∞
        if (usage.currentMinute !== currentMinute) {
            usage.rpm = 0;
            usage.tpm = 0;
            usage.currentMinute = currentMinute;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        usage.rpm += 1;
        usage.tpm += this.estimateTokens(request) + this.estimateTokens(response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveUsage();
    }

    /**
     * üî¢ –û–¶–ï–ù–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –¢–û–ö–ï–ù–û–í
     */
    estimateTokens(text) {
        if (!text) return 0;
        // –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è –ª–∞—Ç–∏–Ω–∏—Ü—ã, ~2 –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        const latinChars = (text.match(/[a-zA-Z0-9\s.,!?;:()\-]/g) || []).length;
        const cyrillicChars = text.length - latinChars;
        return Math.ceil(latinChars / 4 + cyrillicChars / 2);
    }

    /**
     * üîÑ –°–ë–†–û–° –°–ß–ï–¢–ß–ò–ö–û–í –ü–û –í–†–ï–ú–ï–ù–ò
     */
    resetCountersIfNeeded(currentMinute) {
        Object.keys(this.usage).forEach(providerName => {
            const usage = this.usage[providerName];
            if (usage.currentMinute !== currentMinute) {
                usage.rpm = 0;
                usage.tpm = 0;
                usage.currentMinute = currentMinute;
            }
        });
    }

    /**
     * üìà –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–¶–ï–ù–¢–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
     */
    getProviderUsagePercent(providerName) {
        const provider = this.providers.find(p => p.name === providerName);
        const usage = this.usage[providerName] || { rpm: 0, tpm: 0 };
        
        const rpmPercent = (usage.rpm / provider.limits.rpm) * 100;
        const tpmPercent = (usage.tpm / provider.limits.tpm) * 100;
        
        return Math.max(rpmPercent, tpmPercent);
    }

    /**
     * ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –õ–ò–ú–ò–¢–û–í
     */
    isRateLimitError(error) {
        const message = error.message.toLowerCase();
        return message.includes('rate limit') || 
               message.includes('quota') || 
               message.includes('429') ||
               message.includes('too many requests');
    }

    /**
     * üö´ –ü–û–ú–ï–¢–ö–ê –ü–†–û–í–ê–ô–î–ï–†–ê –ö–ê–ö –ò–°–ß–ï–†–ü–ê–ù–ù–û–ì–û
     */
    markProviderExhausted(providerName) {
        const provider = this.providers.find(p => p.name === providerName);
        if (provider) {
            const usage = this.usage[providerName] || { rpm: 0, tpm: 0 };
            usage.rpm = provider.limits.rpm; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π
            console.warn(`‚ö†Ô∏è ${providerName} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç—ã`);
        }
    }

    /**
     * üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
     */
    saveUsage() {
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem('ai_router_usage', JSON.stringify(this.usage));
        }
    }

    loadUsage() {
        if (typeof localStorage !== 'undefined') {
            const saved = localStorage.getItem('ai_router_usage');
            return saved ? JSON.parse(saved) : {};
        }
        return {};
    }

    /**
     * üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
     */
    initializeMonitoring() {
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        setInterval(() => {
            this.logStatus();
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    logStatus() {
        console.log('üìä –°—Ç–∞—Ç—É—Å AI Router:');
        this.providers.forEach(provider => {
            const usage = this.usage[provider.name] || { rpm: 0, tpm: 0 };
            const percent = this.getProviderUsagePercent(provider.name);
            const status = percent > 80 ? 'üî¥' : percent > 50 ? 'üü°' : 'üü¢';
            
            console.log(`${status} ${provider.name}: ${usage.rpm}/${provider.limits.rpm} RPM (${percent.toFixed(1)}%)`);
        });
    }

    /**
     * üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –î–õ–Ø UI
     */
    getStats() {
        return {
            providers: this.providers.map(provider => ({
                name: provider.name,
                model: provider.model,
                status: provider.status,
                usage: this.usage[provider.name] || { rpm: 0, tpm: 0 },
                limits: provider.limits,
                usagePercent: this.getProviderUsagePercent(provider.name)
            })),
            totalRequests: Object.values(this.usage).reduce((sum, u) => sum + u.rpm, 0),
            currentProvider: this.currentProvider?.name || 'auto'
        };
    }
}

// üéØ –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIRouter;
} else if (typeof window !== 'undefined') {
    window.AIRouter = AIRouter;
}

console.log('üöÄ AI Router System –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');