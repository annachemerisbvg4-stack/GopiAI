#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω—é GopiAI - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ "–¢–µ–º–∞" —É–±—Ä–∞–Ω–∞ –∏–∑ "–í–∏–¥" –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –º–æ–¥—É–ª–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
gopiai_modules_root = os.path.dirname(script_dir)

module_paths = [
    os.path.join(gopiai_modules_root, "GopiAI-Core"),
    os.path.join(gopiai_modules_root, "GopiAI-Widgets"), 
    os.path.join(gopiai_modules_root, "GopiAI-App"),
    os.path.join(gopiai_modules_root, "GopiAI-Extensions"),
    os.path.join(gopiai_modules_root, "rag_memory_system"),
    gopiai_modules_root,
]

for path in module_paths:
    if path not in sys.path:
        sys.path.insert(0, path)

from PySide6.QtWidgets import QApplication
from gopiai.ui.components.menu_bar import StandaloneMenuBar

def test_menu_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é...")
    
    app = QApplication.instance()
    if not app:
        app = QApplication([])
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    menu_bar = StandaloneMenuBar()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ–Ω—é
    menus = []
    for action in menu_bar.actions():
        if action.menu():
            menus.append(action.menu().title())
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ–Ω—é: {menus}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in menus, "‚ùå –ú–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
    print("‚úÖ –ú–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é "–í–∏–¥"
    view_menu = None
    for action in menu_bar.actions():
        if action.menu() and action.menu().title() == "–í–∏–¥":
            view_menu = action.menu()
            break
    
    if view_menu:
        view_actions = [action.text() for action in view_menu.actions() 
                       if not action.isSeparator() and not action.menu()]
        print(f"üìã –î–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é '–í–∏–¥': {view_actions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ "–¢–µ–º–∞" –ù–ï –≤ –º–µ–Ω—é "–í–∏–¥"
        assert "–¢–µ–º–∞" not in view_actions, "‚ùå –ü—É–Ω–∫—Ç '–¢–µ–º–∞' –≤—Å—ë –µ—â—ë –≤ –º–µ–Ω—é '–í–∏–¥'!"
        print("‚úÖ –ü—É–Ω–∫—Ç '–¢–µ–º–∞' —É–±—Ä–∞–Ω –∏–∑ –º–µ–Ω—é '–í–∏–¥'")
    else:
        print("‚ö†Ô∏è –ú–µ–Ω—é '–í–∏–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"  
    settings_menu = None
    for action in menu_bar.actions():
        if action.menu() and action.menu().title() == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            settings_menu = action.menu()
            break
    
    if settings_menu:
        settings_actions = [action.text() for action in settings_menu.actions() 
                           if not action.isSeparator()]
        print(f"üìã –î–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏': {settings_actions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" in settings_actions, "‚ùå '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        assert "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" in settings_actions, "‚ùå '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        print("‚úÖ –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    else:
        print("‚ùå –ú–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    required_signals = ['openSettingsRequested', 'changeThemeRequested']
    for signal_name in required_signals:
        assert hasattr(menu_bar, signal_name), f"‚ùå –°–∏–≥–Ω–∞–ª '{signal_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª '{signal_name}' –Ω–∞–π–¥–µ–Ω")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        result = test_menu_structure()
        if result:
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
