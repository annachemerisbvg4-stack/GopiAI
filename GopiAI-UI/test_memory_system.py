"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI (embedded txtai)

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ txtai.
"""

import sys
import os
from pathlib import Path
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.extend([
    str(project_root),
    str(project_root / "gopiai"),
    str(project_root / "gopiai" / "ui"),
])

class SimpleMemoryManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, data_dir: str = "conversations"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        self.chats_file = self.data_dir / "chats.json"
        self.chats = []
        self.sessions = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è txtai
        try:
            from txtai.embeddings import Embeddings
            self.embeddings = Embeddings({"path": "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"})
            print("‚úÖ txtai embeddings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except ImportError:
            self.embeddings = None
            print("‚ùå txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai sentence-transformers")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        try:
            from simple_emotion_classifier import get_emotion_classifier
            self.emotion_classifier = get_emotion_classifier()
            print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {e}")
            self.emotion_classifier = None
        
        self._load_data()
        
    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.chats_file.exists():
            try:
                with open(self.chats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.chats = data.get('chats', [])
                    self.sessions = data.get('sessions', {})
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chats)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(self.sessions)} —Å–µ—Å—Å–∏–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def create_session(self, title: str = "–ù–æ–≤—ã–π —á–∞—Ç") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        import uuid
        from datetime import datetime
        
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            'id': session_id,
            'title': title,
            'created_at': datetime.now().isoformat(),
            'message_count': 0
        }
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {title} (ID: {session_id})")
        return session_id
    
    def add_message(self, session_id: str, role: str, content: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        import uuid
        from datetime import datetime
        
        if session_id not in self.sessions:
            self.create_session(f"–ê–≤—Ç–æ—Å–µ—Å—Å–∏—è {len(self.sessions) + 1}")
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        emotion_data = {}
        if self.emotion_classifier and role == 'user':
            try:
                emotion_data = self.emotion_classifier.analyze_emotion(content)
                print(f"üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {emotion_data.get('emotion', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {emotion_data.get('confidence', 0):.2f})")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        message = {
            'id': str(uuid.uuid4()),
            'session_id': session_id,
            'role': role,
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'emotion': emotion_data.get('emotion', 'neutral'),
            'emotion_confidence': emotion_data.get('confidence', 0.0),
            'sentiment': emotion_data.get('sentiment', 'neutral')
        }
        
        self.chats.append(message)
        self.sessions[session_id]['message_count'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã txtai
        if self.embeddings:
            self._update_embeddings()
        
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é {session_id}")
        return message['id']
    
    def _update_embeddings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if not self.embeddings or not self.chats:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            texts = [msg['content'] for msg in self.chats]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if hasattr(self.embeddings, 'unindex'):
                self.embeddings.unindex(range(len(texts)))
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            self.embeddings.index([(i, text, None) for i, text in enumerate(texts)])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
    
    def search_memory(self, query: str, limit: int = 5) -> list:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        if not self.embeddings or not self.chats:
            print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: txtai –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            search_results = []
            results = self.embeddings.search(query, limit)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            for result in results:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ—Ü–µ–Ω–∫—É
                if isinstance(result, (list, tuple)) and len(result) >= 2:
                    score, idx = result[0], int(result[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ int
                if idx < len(self.chats):
                    msg = self.chats[idx]
                    search_results.append({
                        'content': msg['content'],
                        'score': float(score),
                        'session_id': msg['session_id'],
                        'role': msg['role'],
                        'timestamp': msg['timestamp']
                    })
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            return search_results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_emotional_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.chats:
            return {}
            
        emotions = {}
        sentiments = {}
        
        for msg in self.chats:
            if 'emotion' in msg:
                emotion = msg['emotion']
                emotions[emotion] = emotions.get(emotion, 0) + 1
                
            if 'sentiment' in msg:
                sentiment = msg['sentiment']
                sentiments[sentiment] = sentiments.get(sentiment, 0) + 1
                
        return {
            'emotion_distribution': emotions,
            'sentiment_distribution': sentiments,
            'emotion_analyzer_available': self.emotion_classifier is not None
        }
        
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'total_messages': len(self.chats),
            'total_sessions': len(self.sessions),
            'txtai_available': self.embeddings is not None,
            'emotion_analyzer_available': self.emotion_classifier is not None,
            'data_dir': str(self.data_dir.absolute())
        }

def test_memory_system():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI (embedded txtai)")
    print("=" * 60 + "\n")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏...")
        manager = SimpleMemoryManager()
        
        if not manager.embeddings:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å txtai. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return False
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
        session_id = manager.create_session("–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\n3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        test_messages = [
            ("user", "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."),
            ("assistant", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."),
            ("user", "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –≤ GopiAI?"),
            ("assistant", "GopiAI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç txtai –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."),
            ("user", "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞?"),
            ("assistant", "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.")
        ]
        
        for role, content in test_messages:
            manager.add_message(session_id, role, content)
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        test_queries = [
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞–º—è—Ç—å?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ txtai?",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?"
        ]
        
        for query in test_queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            results = manager.search_memory(query, limit=2)
            
            if not results:
                print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
                
            for i, result in enumerate(results, 1):
                print(f"   {i}. –°–∫–æ—Ä–∏–Ω–≥: {result.get('score', 0):.3f}")
                print(f"      {result.get('content', '')[:100]}...")
        
        # 5. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = manager.get_stats()
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        # 6. –í—ã–≤–æ–¥–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n6. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        emotion_stats = manager.get_emotional_stats()
        
        if emotion_stats.get('emotion_analyzer_available'):
            print("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π:")
            for emotion, count in emotion_stats.get('emotion_distribution', {}).items():
                print(f"      {emotion}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
            print("\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:")
            for sentiment, count in emotion_stats.get('sentiment_distribution', {}).items():
                print(f"      {sentiment}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            print("   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_memory_system()
