"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI
=============================================================

–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç embedded txtai –≤–º–µ—Å—Ç–æ RAG —Å–µ—Ä–≤–µ—Ä–∞!
"""

import logging
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)

def init_memory_system(silent: bool = True) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI —Å embedded txtai
    
    Args:
        silent: –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å)
        
    Returns:
        True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    """
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å txtai –Ω–∞–ø—Ä—è–º—É—é
        try:
            import txtai
            from txtai.embeddings import Embeddings
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ embeddings –æ–±—ä–µ–∫—Ç–∞
            embeddings = Embeddings()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            test_data = ["–¢–µ—Å—Ç txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"]
            embeddings.index(test_data)
            
            if not silent:
                print("‚úÖ txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                print(f"üìä –í–µ—Ä—Å–∏—è txtai: {getattr(txtai, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            logger.info("‚úÖ txtai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except ImportError as import_err:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ—Ç txtai
            logger.debug(f"Memory init silent mode, success=False - missing txtai: {import_err}")
            if not silent:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç txtai - {import_err}")
                print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install txtai sentence-transformers")
            return False
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ rag_memory_system (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            from rag_memory_system import get_memory_manager
            manager = get_memory_manager()
            
            if not silent:
                stats = manager.get_stats()
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ rag_memory_system –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                
        except ImportError:
            if not silent:
                print("‚ö†Ô∏è rag_memory_system –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π txtai")
        
        return True
        
    except Exception as e:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç False –ø—Ä–∏ –ª—é–±–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        logger.debug(f"Memory init silent mode, success=False - error: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        if not silent:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        return False

def get_memory_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    
    Returns:
        –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    """
    
    try:
        from rag_memory_system import get_memory_manager
        manager = get_memory_manager()
        return manager.get_stats()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "error": str(e),
            "txtai_available": False,
            "total_messages": 0,
            "total_sessions": 0
        }

def stop_memory_system():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    (–î–ª—è txtai –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å - embedded)
    """
    logger.info("üìù TxtAI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (embedded - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
# –í–ù–ò–ú–ê–ù–ò–ï: –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ VS Code

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
    
    success = init_memory_system(silent=False)
    
    if success:
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        status = get_memory_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")