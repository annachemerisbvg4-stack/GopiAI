"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI
=============================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ RAG —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è GopiAI. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ main.py –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from gopiai.ui.memory_initializer import init_memory_system

–ê–≤—Ç–æ—Ä: Crazy Coder
–î–∞—Ç–∞: 2025-01-27
"""

import os
import sys
import logging
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def init_memory_system(silent: bool = True, port: int = 8080) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ—Å—Ç–æ–≥–æ RAG —Å–µ—Ä–≤–µ—Ä–∞
    
    Args:
        silent: –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å)
        port: –ü–æ—Ä—Ç –¥–ª—è RAG —Å–µ—Ä–≤–µ—Ä–∞
        
    Returns:
        True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    """
    import subprocess
    import requests
    import time
    import os
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
        try:
            response = requests.get(f"http://127.0.0.1:{port}/health", timeout=2)
            if response.status_code == 200:
                logger.info("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
        except:
            pass
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        current_dir = Path(__file__).parent.parent.parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        rag_path = current_dir / "rag_memory_system" / "simple_rag_server.py"
        
        if not rag_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {rag_path}")
            if not silent:
                print(f"‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {rag_path}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ
        global server_process
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ë–ï–ó –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–∫–æ–Ω
        server_process = subprocess.Popen(
            [sys.executable, str(rag_path)], 
            # creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0,  # –û—Ç–∫–ª—é—á–µ–Ω–æ!
            stdout=subprocess.PIPE if silent else None,
            stderr=subprocess.PIPE if silent else None
        )
        
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω RAG —Å–µ—Ä–≤–µ—Ä (PID: {server_process.pid})")
        if not silent:
            print(f"üöÄ –ó–∞–ø—É—â–µ–Ω RAG —Å–µ—Ä–≤–µ—Ä (PID: {server_process.pid})")
        
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
        try:
            response = requests.get(f"http://127.0.0.1:{port}/health", timeout=2)
            if response.status_code == 200:
                logger.info("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                if not silent:
                    print("‚úÖ RAG —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                if not silent:
                    print(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {e}")
            if not silent:
                print(f"‚ùå RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RAG —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        if not silent:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RAG —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False


def get_memory_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    
    Returns:
        –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    """
    import requests
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ HTTP API
        response = requests.get("http://127.0.0.1:8080/health", timeout=2)
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_response = requests.get("http://127.0.0.1:8080/stats", timeout=2)
            if stats_response.status_code == 200:
                stats = stats_response.json()
                return {
                    "running": True,
                    "port": 8080,
                    "conversations": stats.get("conversations", 0),
                    "chunks": stats.get("chunks", 0),
                    "total_content_size": stats.get("total_content_size", 0)
                }
            else:
                return {
                    "running": True,
                    "port": 8080,
                    "stats_error": "Could not get stats"
                }
        else:
            return {
                "running": False,
                "error": f"Health check failed with status {response.status_code}"
            }
        
    except Exception as e:
        return {
            "running": False,
            "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}"
        }


def stop_memory_system():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ (—É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 8080)
    """
    import subprocess
    
    try:
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
        if os.name == 'nt':
            # –ù–∞—Ö–æ–¥–∏–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080
            result = subprocess.run(
                ["netstat", "-ano"], 
                capture_output=True, 
                text=True
            )
            
            for line in result.stdout.split('\n'):
                if ':8080 ' in line and 'LISTENING' in line:
                    parts = line.split()
                    if len(parts) >= 5:
                        pid = parts[-1]
                        try:
                            subprocess.run(["taskkill", "/F", "/PID", pid], check=True)
                            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å RAG —Å–µ—Ä–≤–µ—Ä–∞ (PID: {pid})")
                            return
                        except:
                            pass
        else:
            # –î–ª—è Linux/MacOS –∏—Å–ø–æ–ª—å–∑—É–µ–º lsof –∏ kill
            result = subprocess.run(
                ["lsof", "-ti:8080"], 
                capture_output=True, 
                text=True
            )
            
            if result.stdout.strip():
                pid = result.stdout.strip()
                subprocess.run(["kill", "-9", pid], check=True)
                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å RAG —Å–µ—Ä–≤–µ—Ä–∞ (PID: {pid})")
                return
        
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å RAG —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {e}")
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {e}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
# –í–ù–ò–ú–ê–ù–ò–ï: –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–∑—ã–≤–∞–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤ VS Code
# _auto_init = os.environ.get("GOPIAI_AUTO_INIT_MEMORY", "").lower() in ("1", "true", "yes")
# if _auto_init:
#     init_memory_system(silent=True)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –Ω–µ-—Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    success = init_memory_system(silent=False)
    
    if success:
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏:")
        status = get_memory_status()
        for key, value in status.items():
            print(f"  {key}: {value}")
        
        print("\n‚è≥ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        try:
            import time
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
            stop_memory_system()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏")