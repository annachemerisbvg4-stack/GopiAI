"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI
=============================================================

–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç embedded txtai –≤–º–µ—Å—Ç–æ RAG —Å–µ—Ä–≤–µ—Ä–∞!
"""

import logging
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)

def init_memory_system(silent: bool = True) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GopiAI —Å embedded txtai
    
    Args:
        silent: –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å)
        
    Returns:
        True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    """
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π txtai –º–µ–Ω–µ–¥–∂–µ—Ä
        from rag_memory_system import get_memory_manager
        
        manager = get_memory_manager()
        
        if not silent:
            stats = manager.get_stats()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        logger.info("‚úÖ TxtAI –ø–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        if not silent:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        return False

def get_memory_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    
    Returns:
        –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    """
    
    try:
        from rag_memory_system import get_memory_manager
        manager = get_memory_manager()
        return manager.get_stats()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "error": str(e),
            "txtai_available": False,
            "total_messages": 0,
            "total_sessions": 0
        }

def stop_memory_system():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    (–î–ª—è txtai –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å - embedded)
    """
    logger.info("üìù TxtAI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (embedded - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
# –í–ù–ò–ú–ê–ù–ò–ï: –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ VS Code

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
    
    success = init_memory_system(silent=False)
    
    if success:
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        status = get_memory_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")