import urllib.parse

"""
üîå CrewAI API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI —á–µ—Ä–µ–∑ REST API
"""

import requests
import requests.exceptions
import threading
import time
import json
import os


# DEBUG LOGGING PATCH - Added for hang diagnosis
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
print("üîß DEBUG logging enabled for crewai_client.py")


# --- NLP (spaCy) ---
try:
    import spacy
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏ (—Ä—É—Å—Å–∫—É—é –∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é)
    nlp_ru = spacy.load("ru_core_news_sm")
    nlp_en = spacy.load("en_core_web_sm")
    logger.info("‚úÖ spaCy –∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å spaCy –∏–ª–∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: {e}")
    nlp_ru = None
    nlp_en = None

class CrewAIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CrewAI API —Å–µ—Ä–≤–µ—Ä–æ–º

    –ü–æ–∑–≤–æ–ª—è–µ—Ç UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CrewAI,
    –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ REST API.
    """

    def __init__(self, base_url="http://127.0.0.1:5050"):
        self.base_url = base_url
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self._server_available = None  # –ö–µ—à —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self._last_check = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    def brave_search_site(self, query):
        """
        –ò—â–µ—Ç —Å–∞–π—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ Brave Search API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π url.
        """
        api_key = os.environ.get("BRAVE_API_KEY")
        if not api_key:
            logger.warning("BRAVE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
            return None
        url = "https://api.search.brave.com/res/v1/web/search"
        headers = {"Accept": "application/json", "X-Subscription-Token": api_key}
        params = {"q": query, "count": 3}
        try:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç (–Ω–µ brave.com)
                for item in data.get("web", {}).get("results", []):
                    link = item.get("url")
                    if link and not link.startswith("https://search.brave.com"):
                        return link
            else:
                logger.warning(f"Brave API error: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Brave Search: {e}")
        return None

    def is_available(self, force_check=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CrewAI API —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
        current_time = time.time()
        if not force_check and self._server_available is not None and (current_time - self._last_check) < 30:
            return self._server_available

        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=self.timeout)
            self._server_available = response.status_code == 200
            self._last_check = current_time
            return self._server_available
        except requests.RequestException:
            self._server_available = False
            self._last_check = current_time
            return False

    def process_request(self, message, force_crewai=False, timeout=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI API
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
            force_crewai: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ CrewAI (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞)
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç API —Å –ø–æ–ª—è–º–∏ 'response' –∏ 'command' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.is_available():
            return {"response": "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä CrewAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "error": "CrewAI server not available"}
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞
        if isinstance(message, str):
            try:
                message_data = json.loads(message)
                if 'message' in message_data:
                    message = message_data
            except json.JSONDecodeError:
                message = {"message": message}
        
        # –ï—Å–ª–∏ message –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –¥–µ–ª–∞–µ–º –µ–≥–æ —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(message, dict):
            message = {"message": str(message)}
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'system_prompt' not in message:
            message['system_prompt'] = (
                "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º. "
                "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
            )
            
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ CrewAI: {message}")
        
        try:
            response = requests.post(
                f"{self.base_url}/api/process",
                json=message,
                timeout=timeout or self.timeout
            )
            response.raise_for_status()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            result = response.json()
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(result, str):
                result = {"response": result}
                
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ None
            if 'response' not in result or result['response'] is None:
                result['response'] = ""
                
            return result
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ CrewAI: {str(e)}")
            return {
                "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                "error": "request_error",
                "processed_with_crewai": False
            }
            
    def index_documentation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
        if not self.is_available():
            return False
            
        try:
            response = requests.post(
                f"{self.base_url}/api/index_docs",
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("success", False)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error_message": str(e), "processed_with_crewai": False}

    def _handle_browser_command(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /browser –∏–ª–∏ /–±—Ä–∞—É–∑–µ—Ä
        
        Args:
            message: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π
            
        Returns:
            dict: –û—Ç–≤–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        """
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã
        command = message.split(' ', 1)[1] if ' ' in message else ""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
        url_match = re.search(r'(https?://[^\s]+|www\.[^\s]+)', command)
        
        # –ï—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ –µ—Å—Ç—å URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        if url_match:
            url = url_match.group(0)
            return {
                "impl": "browser-use",
                "command": "go_to_url",
                "args": {"url": url},
                "response": f"–û—Ç–∫—Ä—ã–≤–∞—é: {url}"
            }
        elif command.strip():
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã - –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
            return {
                "impl": "browser-use",
                "command": "search",
                "args": {"query": command},
                "response": f"–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {command}"
            }
        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            return {
                "response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /browser",
                "error": "invalid_browser_command"
            }

    def nlp_parse_command(self, message, lang_hint=None):
        """
        –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ NLP-–ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é spaCy.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
        lang_hint: 'ru' –∏–ª–∏ 'en' ‚Äî –µ—Å–ª–∏ —è–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏–Ω–∞—á–µ autodetect.
        """
        if nlp_ru is None or nlp_en is None:
            logger.warning("spaCy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî NLP-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ)
        lang = lang_hint
        if not lang:
            if any(ord(c) > 127 for c in message):
                lang = 'ru'
            else:
                lang = 'en'
        nlp = nlp_ru if lang == 'ru' else nlp_en
        doc = nlp(message)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        entities = [(ent.text, ent.label_) for ent in doc.ents]
        tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]
        logger.info(f"[NLP] entities: {entities}, tokens: {tokens}")
        return {"entities": entities, "tokens": tokens, "lang": lang}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
crewai_client = CrewAIClient()