import urllib.parse

"""
üîå CrewAI API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI —á–µ—Ä–µ–∑ REST API
"""

import requests
import requests.exceptions
import threading
import time
import json
import os


# DEBUG LOGGING PATCH - Added for hang diagnosis
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
print("üîß DEBUG logging enabled for crewai_client.py")


# --- NLP (spaCy) ---
try:
    import spacy
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏ (—Ä—É—Å—Å–∫—É—é –∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é)
    nlp_ru = spacy.load("ru_core_news_sm")
    nlp_en = spacy.load("en_core_web_sm")
    logger.info("‚úÖ spaCy –∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å spaCy –∏–ª–∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: {e}")
    nlp_ru = None
    nlp_en = None

class CrewAIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CrewAI API —Å–µ—Ä–≤–µ—Ä–æ–º

    –ü–æ–∑–≤–æ–ª—è–µ—Ç UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CrewAI,
    –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ REST API.
    """

    def __init__(self, base_url="http://127.0.0.1:5050"):
        self.base_url = base_url
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self._server_available = None  # –ö–µ—à —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self._last_check = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    def brave_search_site(self, query):
        """
        –ò—â–µ—Ç —Å–∞–π—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ Brave Search API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π url.
        """
        api_key = os.environ.get("BRAVE_API_KEY")
        if not api_key:
            logger.warning("BRAVE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
            return None
        url = "https://api.search.brave.com/res/v1/web/search"
        headers = {"Accept": "application/json", "X-Subscription-Token": api_key}
        params = {"q": query, "count": 3}
        try:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç (–Ω–µ brave.com)
                for item in data.get("web", {}).get("results", []):
                    link = item.get("url")
                    if link and not link.startswith("https://search.brave.com"):
                        return link
            else:
                logger.warning(f"Brave API error: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Brave Search: {e}")
        return None

    def is_available(self, force_check=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CrewAI API —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
        current_time = time.time()
        if not force_check and self._server_available is not None and (current_time - self._last_check) < 30:
            return self._server_available

        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=self.timeout)
            self._server_available = response.status_code == 200
            self._last_check = current_time
            return self._server_available
        except requests.RequestException:
            self._server_available = False
            self._last_check = current_time
            return False
    
    def process_request(self, message, force_crewai=False, timeout=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI API
        –¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π NLP-–ø–∞—Ä—Å–∏–Ω–≥–∞ (spaCy) –∏ —Ä–∞–∑–±–æ—Ä–æ–º —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        """
        if not self.is_available():
            return {
                "response": f"CrewAI API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é 'run_crewai_api_server.bat'.\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å: {message}",
                "error": "server_unavailable",
                "processed_with_crewai": False
            }
        try:
            nlp_result = self.nlp_parse_command(message)
            logger.info(f"[NLP] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {nlp_result}")
            # --- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã (–ø—Ä–æ—Å—Ç–æ–µ, –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —Å–æ—é–∑–∞–º) ---
            import re
            subcommands = re.split(r'[,.!?;\n]|\b–∏\b|\b–∑–∞—Ç–µ–º\b|\bthen\b', message, flags=re.IGNORECASE)
            subcommands = [cmd.strip() for cmd in subcommands if cmd.strip()]
            logger.info(f"[NLP] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–æ–º–∞–Ω–¥: {len(subcommands)} -> {subcommands}")
            results = []
            context = {}
            for idx, subcmd in enumerate(subcommands):
                logger.info(f"[NLP] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã {idx+1}: {subcmd}")
                # 1. –ü–æ–∏—Å–∫ —Å–∞–π—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ '–Ω–∞–π–¥–∏ —Å–∞–π—Ç', 'find site', '–Ω–∞–π–¥–∏ —Å–µ—Ä–≤–∏—Å', 'find service')
                if re.search(r'–Ω–∞–π–¥–∏ —Å–∞–π—Ç|find site|–Ω–∞–π–¥–∏ —Å–µ—Ä–≤–∏—Å|find service|–Ω–∞–π–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É|find page', subcmd, re.IGNORECASE):
                    found_url = self.brave_search_site(subcmd)
                    if found_url:
                        context['site_url'] = found_url
                        results.append({
                            "step": "site_search",
                            "query": subcmd,
                            "url": found_url,
                            "success": True
                        })
                    else:
                        results.append({
                            "step": "site_search",
                            "query": subcmd,
                            "url": None,
                            "success": False,
                            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Brave Search"
                        })
                    continue
                # 2. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å '–∑–∞–π–¥–∏', '–ø–µ—Ä–µ–π–¥–∏', '–æ—Ç–∫—Ä–æ–π', 'go to', 'open')
                if re.search(r'–∑–∞–π–¥–∏|–ø–µ—Ä–µ–π–¥–∏|–æ—Ç–∫—Ä–æ–π|go to|open', subcmd, re.IGNORECASE):
                    url = context.get('site_url')
                    if not url:
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ url –≤ —Ç–µ–∫—Å—Ç–µ
                        url_match = re.search(r'(https?://[^\s]+|www\.[^\s]+)', subcmd)
                        url = url_match.group(0) if url_match else None
                    if url:
                        results.append({
                            "step": "go_to_url",
                            "url": url,
                            "success": True
                        })
                        context['current_url'] = url
                        continue
                    else:
                        results.append({"step": "go_to_url", "error": "URL –Ω–µ –Ω–∞–π–¥–µ–Ω", "success": False})
                        continue
                # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', 'generate', '—Å–æ–∑–¥–∞–π', 'create', 'draw', '–Ω–∞—Ä–∏—Å—É–π')
                if re.search(r'—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–æ–∑–¥–∞–π|generate|create|draw|–Ω–∞—Ä–∏—Å—É–π', subcmd, re.IGNORECASE):
                    url = context.get('current_url') or context.get('site_url')
                    results.append({
                        "step": "generate",
                        "action": subcmd,
                        "on_url": url,
                        "success": bool(url)
                    })
                    continue
                # 4. Fallback: –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ browseruse/—Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
                # ...existing code for browseruse and fallback...
                # (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)
            if results:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                if len(results) == 1:
                    step = results[0]
                    if step["step"] == "site_search" and step.get("success") and step.get("url"):
                        resp = f"–ù–∞—à—ë–ª —Å–∞–π—Ç: {step['url']} ‚Äî –æ—Ç–∫—Ä—ã–≤–∞—é!"
                    elif step["step"] == "go_to_url" and step.get("success") and step.get("url"):
                        resp = f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç: {step['url']}"
                    elif step["step"] == "generate" and step.get("success"):
                        resp = f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é: {step['action']} –Ω–∞ {step.get('on_url','[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≥–¥–µ]')}"
                    else:
                        resp = step.get("error") or "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
                else:
                    # –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
                    desc = []
                    for step in results:
                        if step["step"] == "site_search" and step.get("success") and step.get("url"):
                            desc.append(f"–ù–∞—à—ë–ª —Å–∞–π—Ç: {step['url']}")
                        elif step["step"] == "go_to_url" and step.get("success") and step.get("url"):
                            desc.append(f"–ü–µ—Ä–µ—Ö–æ–∂—É: {step['url']}")
                        elif step["step"] == "generate" and step.get("success"):
                            desc.append(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é: {step['action']} –Ω–∞ {step.get('on_url','[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≥–¥–µ]')}")
                        elif step.get("error"):
                            desc.append(f"–û—à–∏–±–∫–∞: {step['error']}")
                    resp = " ‚Üí ".join(desc) if desc else "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π."
                return {
                    "response": resp,
                    "steps": results,
                    "nlp": nlp_result,
                    "processed_with_crewai": False
                }
            # –ï—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–∞–≤–Ω–∞—è ‚Äî —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä (browseruse –∏ —Ç.–¥.)
            # ...existing code for browseruse/fallback (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)...
            # (—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ process_request)
            # ---
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
            browser_commands = [
                "–æ—Ç–∫—Ä–æ–π —Å–∞–π—Ç", "–æ—Ç–∫—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—É", "–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç", "–∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç",
                "–∑–∞–≥—Ä—É–∑–∏ —Å–∞–π—Ç", "–∏–¥–∏ –Ω–∞ —Å–∞–π—Ç", "–ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞", "–æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç",
                "–æ—Ç–∫—Ä–æ–π github", "–æ—Ç–∫—Ä–æ–π –≥–∏—Ç—Ö–∞–±", "–æ—Ç–∫—Ä–æ–π google", "–æ—Ç–∫—Ä–æ–π –≥—É–≥–ª",
                "–æ—Ç–∫—Ä–æ–π youtube", "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±", "–æ—Ç–∫—Ä–æ–π stackoverflow",
                "–æ—Ç–∫—Ä–æ–π –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ", "–æ—Ç–∫—Ä–æ–π –≤–∫", "–æ—Ç–∫—Ä–æ–π telegram", "–æ—Ç–∫—Ä–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º",
                "github.com", "google.com", "youtube.com", "stackoverflow.com",
                "vk.com", "telegram.org", "habr.com", "yandex.ru",
                "–Ω–∞–π–¥–∏ –≤ google", "–ø–æ–∏—Å–∫ –≤ google", "google –ø–æ–∏—Å–∫",
                "–Ω–∞–π–¥–∏ –≤ –≥—É–≥–ª–µ", "–ø–æ–∏—â–∏ –≤ google", "–ø–æ–≥—É–≥–ª–∏"
            ]
            message_lower = message.lower()
            logger.info(f"üîç [CREWAI] –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: '{message}'")
            logger.info(f"üîç [CREWAI] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: '{message_lower}'")
            is_browser_command = False
            matched_command = None
            for cmd in browser_commands:
                if cmd in message_lower:
                    is_browser_command = True
                    matched_command = cmd
                    logger.info(f"üîç [CREWAI] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±—Ä–∞—É–∑–µ—Ä–∞: '{cmd}'")
                    break
            if not is_browser_command:
                logger.info(f"üîç [CREWAI] –ö–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            url_pattern = r'(https?://[^\s]+|www\.[^\s]+)'
            url_match = re.search(url_pattern, message)
            if url_match:
                is_browser_command = True
                matched_url = url_match.group(0)
                logger.info(f"üîç [CREWAI] ‚úÖ –ù–∞–π–¥–µ–Ω URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{matched_url}'")
            else:
                logger.info(f"üîç [CREWAI] URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            browseruse_command_map = {
                "–æ—Ç–∫—Ä–æ–π": "go_to_url",
                "–æ—Ç–∫—Ä—ã—Ç—å": "go_to_url",
                "–ø–µ—Ä–µ–π–¥–∏": "go_to_url",
                "–∏–¥–∏": "go_to_url",
                "–Ω–∞–∑–∞–¥": "go_back",
                "–≤–∫–ª–∞–¥–∫–∞": "switch_tab",
                "–∑–∞–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É": "close_tab",
                "–∫–ª–∏–∫–Ω–∏": "click_element_by_index",
                "–Ω–∞–∂–º–∏": "click_element_by_index",
                "–≤–≤–µ–¥–∏": "input_text",
                "–Ω–∞–ø–∏—à–∏": "input_text",
                "–∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª": "upload_file",
                "–ø—Ä–æ–∫—Ä—É—Ç–∏": "scroll",
                "—Å–∫—Ä–æ–ª–ª": "scroll",
                "–Ω–∞–π–¥–∏": "extract_structured_data",
                "–ø–æ–∏—Å–∫": "extract_structured_data",
                "–≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é": "select_dropdown_option",
                "–æ–ø—Ü–∏–∏": "get_dropdown_options",
                "–ø–æ–¥–æ–∂–¥–∏": "wait",
                "–∂–¥–∞—Ç—å": "wait",
                "—Å–∫—Ä–∏–Ω—à–æ—Ç": "screenshot",
                "–æ—Ç—á—ë—Ç": "extract_structured_data",
                "–æ—Ç–ø—Ä–∞–≤—å –∫–ª–∞–≤–∏—à–∏": "send_keys",
                "—Å–æ—Ö—Ä–∞–Ω–∏": "write_file",
                "–¥–æ–±–∞–≤—å –≤ —Ñ–∞–π–ª": "append_file",
                "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª": "read_file",
                "google sheets": "read_sheet_contents",
                "–≤—ã–¥–µ–ª–∏ —è—á–µ–π–∫—É": "select_cell_or_range",
                "–æ—á–∏—Å—Ç–∏ —è—á–µ–π–∫—É": "clear_cell_contents",
                "–æ–±–Ω–æ–≤–∏ —è—á–µ–π–∫—É": "update_cell_contents",
                "–≤—ã–±–µ—Ä–∏ —Ç–µ–∫—Å—Ç": "scroll_to_text",
                "open": "go_to_url",
                "go": "go_to_url",
                "back": "go_back",
                "tab": "switch_tab",
                "close tab": "close_tab",
                "click": "click_element_by_index",
                "type": "input_text",
                "upload": "upload_file",
                "scroll": "scroll",
                "search": "extract_structured_data",
                "select option": "select_dropdown_option",
                "options": "get_dropdown_options",
                "wait": "wait",
                "screenshot": "screenshot",
                "report": "extract_structured_data",
                "send keys": "send_keys",
                "save": "write_file",
                "append": "append_file",
                "read file": "read_file",
                "sheet": "read_sheet_contents",
                "select cell": "select_cell_or_range",
                "clear cell": "clear_cell_contents",
                "update cell": "update_cell_contents",
                "scroll to text": "scroll_to_text",
            }
            found_browseruse = None
            for ru, cmd in browseruse_command_map.items():
                if ru in message_lower:
                    found_browseruse = cmd
                    break
            if found_browseruse:
                logger.info(f"üåê [BROWSERUSE] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å browseruse-–∫–æ–º–∞–Ω–¥–æ–π: {found_browseruse}")
                return {
                    "impl": "browser-use",
                    "command": f"{found_browseruse} | {message}",
                    "nlp": nlp_result,
                    "processed_with_crewai": False
                }
            logger.info(f"üîç [CREWAI] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: is_browser_command={is_browser_command}")
            if is_browser_command:
                logger.info(f"üåê [CREWAI] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                user_command = message
                if "User:" in message:
                    user_command = message.split("User:")[-1].strip()
                    if "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:" in user_command:
                        user_command = user_command.split("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")[0].strip()
                    logger.info(f"üåê [CREWAI] –ò–∑–≤–ª–µ—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: '{user_command}'")
                result = {
                    "impl": "browser-use",
                    "command": user_command,
                    "nlp": nlp_result,
                    "processed_with_crewai": False
                }
                logger.info(f"üåê [CREWAI] –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {result}")
                return result
            logger.warning(f"ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: '{message}'")
            return {
                "response": "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É? –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å!",
                "error": "unrecognized_browser_command",
                "nlp": nlp_result,
                "processed_with_crewai": False
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_request: {e}")
            return {
                "response": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                "error": "internal_error",
                "processed_with_crewai": False
            }
            
    def index_documentation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
        if not self.is_available():
            return False
            
        try:
            response = requests.post(
                f"{self.base_url}/api/index_docs",
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("success", False)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error_message": str(e), "processed_with_crewai": False}

    def nlp_parse_command(self, message, lang_hint=None):
        """
        –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ NLP-–ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é spaCy.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
        lang_hint: 'ru' –∏–ª–∏ 'en' ‚Äî –µ—Å–ª–∏ —è–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏–Ω–∞—á–µ autodetect.
        """
        if nlp_ru is None or nlp_en is None:
            logger.warning("spaCy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî NLP-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ)
        lang = lang_hint
        if not lang:
            if any(ord(c) > 127 for c in message):
                lang = 'ru'
            else:
                lang = 'en'
        nlp = nlp_ru if lang == 'ru' else nlp_en
        doc = nlp(message)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        entities = [(ent.text, ent.label_) for ent in doc.ents]
        tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]
        logger.info(f"[NLP] entities: {entities}, tokens: {tokens}")
        return {"entities": entities, "tokens": tokens, "lang": lang}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
crewai_client = CrewAIClient()