"""
üîå CrewAI API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI —á–µ—Ä–µ–∑ REST API
"""

import requests
import requests.exceptions
import threading
import time
import json
import os


# DEBUG LOGGING PATCH - Added for hang diagnosis
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
print("üîß DEBUG logging enabled for crewai_client.py")


class CrewAIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CrewAI API —Å–µ—Ä–≤–µ—Ä–æ–º
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CrewAI,
    –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ REST API.
    """
    
    def __init__(self, base_url="http://127.0.0.1:5050"):
        self.base_url = base_url
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self._server_available = None  # –ö–µ—à —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self._last_check = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    def is_available(self, force_check=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CrewAI API —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
        current_time = time.time()
        if not force_check and self._server_available is not None and (current_time - self._last_check) < 30:
            return self._server_available
            
        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=self.timeout)
            self._server_available = response.status_code == 200
            self._last_check = current_time
            return self._server_available
        except requests.RequestException:
            self._server_available = False
            self._last_check = current_time
            return False
    
    def analyze_request(self, message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_available():
            return {
                "complexity": 3,
                "crew_type": "general",
                "requires_crewai": False
            }
            
        try:
            response = requests.post(
                f"{self.base_url}/api/analyze",
                json={"message": message},
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error_message": str(e), "processed_with_crewai": False}
    
    def process_request(self, message, force_crewai=False, timeout=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CrewAI API
        
        –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç,
        –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞
        """
        if not self.is_available():
            return {
                "response": f"CrewAI API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é 'run_crewai_api_server.bat'.\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å: {message}",
                "error": "server_unavailable",
                "processed_with_crewai": False
            }
            
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
            browser_commands = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                "–æ—Ç–∫—Ä–æ–π —Å–∞–π—Ç", "–æ—Ç–∫—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—É", "–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç", "–∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç",
                "–∑–∞–≥—Ä—É–∑–∏ —Å–∞–π—Ç", "–∏–¥–∏ –Ω–∞ —Å–∞–π—Ç", "–ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞", "–æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç",
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã (–±–µ–∑ .com –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏)
                "–æ—Ç–∫—Ä–æ–π github", "–æ—Ç–∫—Ä–æ–π –≥–∏—Ç—Ö–∞–±", "–æ—Ç–∫—Ä–æ–π google", "–æ—Ç–∫—Ä–æ–π –≥—É–≥–ª",
                "–æ—Ç–∫—Ä–æ–π youtube", "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±", "–æ—Ç–∫—Ä–æ–π stackoverflow",
                "–æ—Ç–∫—Ä–æ–π –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ", "–æ—Ç–∫—Ä–æ–π –≤–∫", "–æ—Ç–∫—Ä–æ–π telegram", "–æ—Ç–∫—Ä–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º",
                
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                "github.com", "google.com", "youtube.com", "stackoverflow.com",
                "vk.com", "telegram.org", "habr.com", "yandex.ru",
                
                # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                "–Ω–∞–π–¥–∏ –≤ google", "–ø–æ–∏—Å–∫ –≤ google", "google –ø–æ–∏—Å–∫",
                "–Ω–∞–π–¥–∏ –≤ –≥—É–≥–ª–µ", "–ø–æ–∏—â–∏ –≤ google", "–ø–æ–≥—É–≥–ª–∏"
            ]
            
            message_lower = message.lower()
            
            # –ò—â–µ–º –¢–û–õ–¨–ö–û –æ—á–µ–Ω—å —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            is_browser_command = False
            for cmd in browser_commands:
                if cmd in message_lower:
                    is_browser_command = True
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–ª–∏ www
            import re
            url_pattern = r'(https?://[^\s]+|www\.[^\s]+)'
            if re.search(url_pattern, message):
                is_browser_command = True
            
            if is_browser_command:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞
                return {
                    "impl": "browser-use",  # –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                    "command": message,
                    "processed_with_crewai": False
                }
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º force_crewai=False, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–ª–∞
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CrewAI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º timeout –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            request_timeout = timeout if timeout is not None else 60
            
            response = requests.post(
                f"{self.base_url}/api/process",
                json={
                    "message": message,
                    "force_crewai": False  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä force_crewai
                },
                timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CrewAI
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ data["response"]
                if "response" in data:
                    return {
                        "response": data["response"],
                        "processed_with_crewai": data.get("processed_with_crewai", False)
                    }
                elif "error_message" in data:
                    return {
                        "response": data["error_message"],
                        "error": data.get("error", "unknown_error"),
                        "processed_with_crewai": data.get("processed_with_crewai", False)
                    }
                else:
                    return {
                        "response": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
                        "error": "invalid_response_format"
                    }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return {
                    "response": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–¥ {response.status_code})",
                    "error": f"http_error_{response.status_code}"
                }
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "error_message": f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å CrewAI API: {str(e)}",
                "processed_with_crewai": False
            }
            
    def index_documentation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
        if not self.is_available():
            return False
            
        try:
            response = requests.post(
                f"{self.base_url}/api/index_docs",
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("success", False)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error_message": str(e), "processed_with_crewai": False}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
crewai_client = CrewAIClient()