import urllib.parse
import re

"""
üîå CrewAI API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CrewAI —á–µ—Ä–µ–∑ REST API
"""

import requests
import requests.exceptions
import threading
import time
import json
import logging
import logging.handlers
import os
import sys
from pathlib import Path
import base64
from typing import Dict, Any, List, Optional, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CrewAI –∫–ª–∏–µ–Ω—Ç–∞
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
from ..memory.manager import MemoryManager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é emotional_classifier
import sys
import os
print('Current working directory:', os.getcwd())
print('sys.path:', sys.path)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
gopiai_integration_path = os.path.join(project_root, 'GopiAI-CrewAI', 'tools', 'gopiai_integration')
sys.path.append(gopiai_integration_path)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
EMOTIONAL_CLASSIFIER_AVAILABLE = False
EmotionalClassifier = None
EmotionalState = None

try:
    import spacy
    try:
        from gopiai_integration.emotional_classifier import EmotionalClassifier, EmotionalState
        EMOTIONAL_CLASSIFIER_AVAILABLE = True
        logger.debug("[INIT] –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        logger.error(f"[INIT] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è emotional_classifier: {e}")
        logger.error(f"[INIT] –ü—É—Ç–∏ –≤ sys.path: {sys.path}")
        logger.error(f"[INIT] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞: {os.path.join(gopiai_integration_path, 'emotional_classifier.py')}")
        EMOTIONAL_CLASSIFIER_AVAILABLE = False
except ImportError as e:
    logger.error(f"[INIT] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è spacy: {e}")
    logger.error("[INIT] –ú–æ–¥—É–ª—å spacy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ò–ù–°–¢–†–£–ö–¶–ò–ô ===
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI-—á–∞—Ç–∞
TOOLS_INSTRUCTION_MANAGER_AVAILABLE = False
ToolsInstructionManager = None

try:
    from gopiai_integration.tools_instruction_manager import get_tools_instruction_manager
    TOOLS_INSTRUCTION_MANAGER_AVAILABLE = True
    logger.info("[INIT] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ UI-—á–∞—Ç")
except ImportError as e:
    logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
    logger.error("[INIT] UI-—á–∞—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    TOOLS_INSTRUCTION_MANAGER_AVAILABLE = False

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    logs_dir = os.path.join(app_dir, 'logs')
    print(f"[DEBUG-LOGS-PATH] CrewAIClient –ø—Ä–æ–±—É–µ–º –ø—É—Ç—å 1: {logs_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏
    os.makedirs(logs_dir, exist_ok=True)
except Exception as e:
    print(f"[DEBUG-LOGS-PATH] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø—É—Ç–∏: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    logs_dir = os.path.join(os.getcwd(), 'logs')
    print(f"[DEBUG-LOGS-PATH] CrewAIClient –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {logs_dir}")
    os.makedirs(logs_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤ CrewAI –∫–ª–∏–µ–Ω—Ç–∞
crewai_log_file = os.path.join(logs_dir, 'crewai_client.log')
file_handler = logging.FileHandler(crewai_log_file, mode='w', encoding='utf-8')  # mode='w' to overwrite

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
file_handler.setFormatter(formatter)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
file_handler.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
logger.setLevel(logging.DEBUG)

# --- NLP (spaCy) ---
try:
    import spacy
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏ (—Ä—É—Å—Å–∫—É—é –∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é)
    nlp_ru = spacy.load("ru_core_news_sm")
    nlp_en = spacy.load("en_core_web_sm")
    logger.info("‚úÖ spaCy –∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å spaCy –∏–ª–∏ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: {e}")
    nlp_ru = None
    nlp_en = None

class CrewAIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CrewAI API —Å–µ—Ä–≤–µ—Ä–æ–º

    –ü–æ–∑–≤–æ–ª—è–µ—Ç UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CrewAI,
    –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ REST API.
    """

    def __init__(self, base_url="http://127.0.0.1:5051"):  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç CrewAI API —Å–µ—Ä–≤–µ—Ä–∞
        self.base_url = base_url
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self._server_available = None
        self._last_check = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        self.emotional_classifier = None
        if EMOTIONAL_CLASSIFIER_AVAILABLE:
            try:
                self.emotional_classifier = EmotionalClassifier()
                logger.info("[INIT] ‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
                self.emotional_classifier = None

    def brave_search_site(self, query):
        """
        –ò—â–µ—Ç —Å–∞–π—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ Brave Search API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π url.
        """
        api_key = os.environ.get("BRAVE_API_KEY")
        if not api_key:
            logger.warning("BRAVE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
            return None
        url = "https://api.search.brave.com/res/v1/web/search"
        headers = {"Accept": "application/json", "X-Subscription-Token": api_key}
        params = {"q": query, "count": 3}
        try:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç (–Ω–µ brave.com)
                for item in data.get("web", {}).get("results", []):
                    link = item.get("url")
                    if link and not link.startswith("https://search.brave.com"):
                        return link
            else:
                logger.warning(f"Brave API error: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Brave Search: {e}")
        return None

    def is_available(self, force_check=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CrewAI API —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        current_time = time.time()
        cache_window = 5 if self._server_available is False else 30  # 5 —Å–µ–∫, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
        if (not force_check
                and self._server_available is not None
                and (current_time - self._last_check) < cache_window):
            return self._server_available

        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=self.timeout)
            self._server_available = response.status_code == 200
            self._last_check = current_time
            return self._server_available
        except requests.RequestException:
            self._server_available = False
            self._last_check = current_time
            return False

    def analyze_emotion(self, message_text, context=None):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        """
        if not self.emotional_classifier or not message_text or not isinstance(message_text, str):
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
            if message_text.startswith(('/', '!', '#')):
                return None
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            analysis = self.emotional_classifier.analyze_emotional_state(
                context or [], 
                message_text
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return {
                'primary_emotion': analysis.primary_emotion.value,
                'confidence': analysis.confidence,
                'intensity': analysis.emotional_intensity,
                'explanation': getattr(analysis, 'explanation', ''),
                'recommendations': getattr(analysis, 'recommendations', [])
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–º–æ—Ü–∏–π: {e}")
            return None
            
    def process_request(self, message: Union[str, Dict[str, Any]], force_crewai: bool = False, timeout: Optional[int] = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ CrewAI API –∏ –≤—ã–±–æ—Ä–æ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            message: –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ JSON —Å –¥–∞–Ω–Ω—ã–º–∏)
            force_crewai: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë –≤ CrewAI (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã)
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç API —Å –ø–æ–ª—è–º–∏ 'response', 'command' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ 'emotion_analysis' (–Ω–µ –≤—Å–µ–≥–¥–∞)
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.debug(f"[REQUEST] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â. force_crewai={force_crewai}, timeout={timeout}")
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∞—Ö –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        if isinstance(message, dict):
            msg_text = message.get('message', '')
            msg_log = f"{msg_text[:50]}..." if len(msg_text) > 50 else msg_text
        else:
            msg_log = f"{message[:50]}..." if len(str(message)) > 50 else message
            
        logger.debug(f"[REQUEST] –°–æ–æ–±—â–µ–Ω–∏–µ: {msg_log}")
        
        if not self.is_available():
            logger.error("[REQUEST-ERROR] –°–µ—Ä–≤–µ—Ä CrewAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {"response": "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä CrewAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "error": "CrewAI server not available"}
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if isinstance(message, str):
            try:
                logger.debug("[REQUEST] –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏")
                message_data = json.loads(message)
                if 'message' in message_data:
                    message = message_data
                    logger.debug("[REQUEST] –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON")
            except json.JSONDecodeError:
                logger.debug("[REQUEST] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª–æ–≤–∞—Ä—å")
                message = {"message": message}
        
        # –ï—Å–ª–∏ message –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –¥–µ–ª–∞–µ–º –µ–≥–æ —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(message, dict):
            logger.debug("[REQUEST] –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–µ-—Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª–æ–≤–∞—Ä—å")
            message = {"message": str(message)}
            
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryManager –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
        memory_manager = MemoryManager()

        # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ MCP –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if 'metadata' in message and 'tool' in message['metadata']:
            tool_type = message['metadata']['tool']
            args = message['metadata'].get('args', {})
            try:
                mcp_response = self.mcp_client.query({"type": tool_type, "args": args})
                logger.info(f"[MCP] –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {tool_type}")
                return {"response": mcp_response.get('result', ''), "from_mcp": True, "error": None}
            except Exception as e:
                logger.error(f"[MCP-ERROR] –û—à–∏–±–∫–∞: {str(e)}")
                return {"response": "", "error": str(e), "from_mcp": False}

        # === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ò–ù–°–¢–†–£–ö–¶–ò–ô –í –†–ï–ê–õ–¨–ù–´–ô UI-–ß–ê–¢ ===
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        dynamic_instructions = self._get_dynamic_tool_instructions(message.get('message', ''))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'metadata' not in message:
            message['metadata'] = {}
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        if dynamic_instructions:
            message['metadata']['dynamic_tool_instructions'] = dynamic_instructions
            logger.info(f"[DYNAMIC-TOOLS] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {len(dynamic_instructions)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            session_id = message.get('metadata', {}).get('session_id', 'default_session')
            logger.debug(f"[REQUEST] –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
            chat_history = memory_manager.get_chat_history(session_id)
            if chat_history:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                chat_history = chat_history[-20:]
                logger.info(f"[REQUEST] –ü–æ–ª—É—á–µ–Ω–æ {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                message['metadata']['chat_history'] = chat_history
                logger.debug(f"[REQUEST] –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å")
            else:
                logger.debug(f"[REQUEST] –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"[REQUEST-ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            message['metadata']['chat_history'] = []
            
        logger.debug(f"[REQUEST] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫ CrewAI API")
            
        # Process attachments if present
        attachments = message.get('metadata', {}).get('attachments', [])
        processed_attachments = []
        for att in attachments:
            path = att['path']
            att_type = att['type']
            name = os.path.basename(path)
            if att_type == 'image':
                with open(path, 'rb') as f:
                    content = base64.b64encode(f.read()).decode('utf-8')
                processed_attachments.append({'type': 'image', 'content': f'data:image/{os.path.splitext(name)[1][1:]};base64,{content}', 'name': name})
            elif att_type == 'file':
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
                processed_attachments.append({'type': 'text', 'content': content, 'name': name})
        if processed_attachments:
            message['metadata']['processed_attachments'] = processed_attachments

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
        message_text = message.get('message', '')
        logger.debug(f"[REQUEST] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:50]}..." if len(message_text) > 50 else message_text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        emotion_analysis = None
        if not any(message_text.startswith(prefix) for prefix in ('/', '!', '#')):
            logger.debug("[REQUEST] –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            emotion_analysis = self.analyze_emotion(message_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º–æ—Ü–∏—è—Ö –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            if emotion_analysis:
                logger.debug(f"[REQUEST] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {emotion_analysis['primary_emotion']}")
                if 'metadata' not in message:
                    message['metadata'] = {}
                message['metadata']['emotion_analysis'] = emotion_analysis
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        message['async_processing'] = True
        logger.debug("[REQUEST] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ async_processing=True")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        system_prompt = (
            "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º. "
            "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
        )
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if emotion_analysis:
            emotion = emotion_analysis['primary_emotion']
            logger.debug(f"[REQUEST] –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏: {emotion}")
            
            if emotion in ['depressed', 'sad', 'anxious']:
                system_prompt += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º, –ø—Ä–æ—è–≤–∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            elif emotion in ['angry', 'frustrated']:
                system_prompt += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –±—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ –≤–µ–∂–ª–∏–≤—ã–º."
            elif emotion == 'happy':
                system_prompt += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º."
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º system_prompt –≤ metadata –≤–º–µ—Å—Ç–æ –∫–æ—Ä–Ω—è –∑–∞–ø—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ message –∏ metadata
        if 'metadata' not in message:
            message['metadata'] = {}
            
        # –î–æ–±–∞–≤–ª—è–µ–º system_prompt –≤ metadata
        if 'system_prompt' in message:
            # –ï—Å–ª–∏ system_prompt —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–Ω–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ metadata
            message['metadata']['system_prompt'] = message.pop('system_prompt')
            logger.debug("[REQUEST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ metadata")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ metadata
            message['metadata']['system_prompt'] = system_prompt
            logger.debug("[REQUEST] –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ metadata")
            
        logger.debug(f"[REQUEST] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ CrewAI API")
        
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ –¥–æ–ª—å—à–µ
            first_request_timeout = max(30, (timeout or self.timeout) * 2)
            logger.debug(f"[REQUEST] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç {first_request_timeout} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            
            url = f"{self.base_url}/api/process"
            logger.debug(f"[REQUEST] –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url} —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Content-Type: application/json; charset=utf-8")
            
            response = requests.post(
                url,
                json=message,
                headers={"Content-Type": "application/json; charset=utf-8"},
                timeout=first_request_timeout
            )
            
            logger.debug(f"[REQUEST] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status_code}")
            response.raise_for_status()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            result: Dict[str, Any] = response.json()
            logger.debug(f'–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini: {result}')
            logger.debug(f"[REQUEST] –£—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç: {result}")
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(result, str):
                logger.debug("[REQUEST] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å")
                result = {"response": result}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ —Å–µ—Ä–≤–µ—Ä task_id –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if 'task_id' in result and 'status' in result:
                logger.info(f"[TASK-START] [ASYNC] –ü–æ–ª—É—á–µ–Ω task_id –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['task_id']}")
                logger.debug(f"[TASK-START] –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {result['status']}")
                return result
                
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            if 'metadata' in message and 'emotion_analysis' in message['metadata']:
                logger.debug("[REQUEST] –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                result['emotion_analysis'] = message['metadata']['emotion_analysis']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π
                recommendations = message['metadata']['emotion_analysis'].get('recommendations', [])
                if recommendations and 'metadata' not in result:
                    result['metadata'] = {}
                if recommendations:
                    logger.debug(f"[REQUEST] –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–≤–µ—Ç—É: {recommendations}")
                    result['metadata']['recommended_responses'] = recommendations
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            if isinstance(result, dict) and 'terminal_output' in result:
                term_out = result['terminal_output']
                formatted_output = f"–ö–æ–º–∞–Ω–¥–∞ '{term_out['command']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.\n–í—ã–≤–æ–¥: {term_out['output']}\n–û—à–∏–±–∫–∏: {term_out['error'] if term_out['error'] else '–ù–µ—Ç'}"
                result['response'] = formatted_output
                result['metadata'] = result.get('metadata', {})
                result['metadata']['terminal_output'] = term_out
                logger.info(f"[TERMINAL] –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {term_out['command']}")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ None
            if 'response' not in result or result['response'] is None:
                logger.debug("[REQUEST] –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'response', –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
                result['response'] = ""
            else:
                logger.debug(f"[REQUEST] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result['response'][:50]}..." if len(result['response']) > 50 else result['response'])
                
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"[REQUEST-ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ CrewAI: {str(e)}")
            return {
                "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                "error": "request_error",
                "processed_with_crewai": False
            }
            
    def check_task_status(self, task_id):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            dict: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        logger.debug(f"[TASK-CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {task_id}")
        
        if not self.is_available():
            logger.error(f"[TASK-CHECK] –°–µ—Ä–≤–µ—Ä CrewAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ {task_id}")
            return {"error": "–°–µ—Ä–≤–µ—Ä CrewAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "status": "error"}
            
        try:
            url = f"{self.base_url}/api/task/{task_id}"
            logger.debug(f"[TASK-CHECK] –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: {url}")
            
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.debug(f"[TASK-CHECK] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {result}")
                
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
                if result.get("done"):
                    logger.info(f"[TASK-COMPLETE] –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('result', {}).get('response', '')[:100]}...")
                else:
                    logger.info(f"[TASK-PROGRESS] –ó–∞–¥–∞—á–∞ {task_id} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –°—Ç–∞—Ç—É—Å: {result.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                return result
            else:
                logger.error(f"[TASK-ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: HTTP {response.status_code} - {response.text}")
                return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}", "status": "error"}
                
        except requests.RequestException as e:
            logger.error(f"[TASK-ERROR] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", "status": "error"}
            
    def index_documentation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CrewAI"""
        if not self.is_available():
            return False
            
        try:
            response = requests.post(
                f"{self.base_url}/api/index_docs",
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("success", False)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error_message": str(e), "processed_with_crewai": False}

    def _get_dynamic_tool_instructions(self, message_text: str) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å {tool_name: detailed_instructions} –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        # tools_instruction_manager –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è MCP
        if not message_text:
            return {}
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ tools_instruction_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logger.debug("[DYNAMIC-TOOLS] tools_instruction_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        return {}

    def _handle_browser_command(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /browser –∏–ª–∏ /–±—Ä–∞—É–∑–µ—Ä
        
{{ ... }}
            message: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π
            
        Returns:
            dict: –û—Ç–≤–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        """
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã
        command = message.split(' ', 1)[1] if ' ' in message else ""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
        url_match = re.search(r'(https?://[^\s]+|www\.[^\s]+)', command)
        
        # –ï—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ –µ—Å—Ç—å URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        if url_match:
            url = url_match.group(0)
            return {
                "impl": "browser-use",
                "command": "go_to_url",
                "args": {"url": url},
                "response": f"–û—Ç–∫—Ä—ã–≤–∞—é: {url}"
            }
        elif command.strip():
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã - –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
            return {
                "impl": "browser-use",
                "command": "search",
                "args": {"query": command},
                "response": f"–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {command}"
            }
        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            return {
                "response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /browser",
                "error": "invalid_browser_command"
            }

    def nlp_parse_command(self, message, lang_hint=None):
        """
        –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ NLP-–ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é spaCy.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
        lang_hint: 'ru' –∏–ª–∏ 'en' ‚Äî –µ—Å–ª–∏ —è–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏–Ω–∞—á–µ autodetect.
        """
        if nlp_ru is None or nlp_en is None:
            logger.warning("spaCy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî NLP-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ)
        lang = lang_hint
        if not lang:
            if any(ord(c) > 127 for c in message):
                lang = 'ru'
            else:
                lang = 'en'
        nlp = nlp_ru if lang == 'ru' else nlp_en
        doc = nlp(message)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        entities = [(ent.text, ent.label_) for ent in doc.ents]
        tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]
        logger.info(f"[NLP] entities: {entities}, tokens: {tokens}")
        return {"entities": entities, "tokens": tokens, "lang": lang}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
crewai_client = CrewAIClient()