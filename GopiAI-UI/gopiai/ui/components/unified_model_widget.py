#!/usr/bin/env python3
"""
Unified Model Widget –¥–ª—è GopiAI UI
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ Gemini –∏ OpenRouter
"""

import logging
import sys
import os
from typing import Dict, List, Optional, Any, Protocol, runtime_checkable
from datetime import datetime

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QListWidget, QListWidgetItem,
    QLineEdit, QPushButton, QLabel, QFrame, QSplitter, QTextEdit,
    QProgressBar, QComboBox, QCheckBox, QGroupBox, QScrollArea,
    QButtonGroup, QRadioButton
)
from PySide6.QtCore import Qt, Signal, QTimer, QThread
from PySide6.QtGui import QFont, QPixmap, QIcon
from typing import cast, Iterable
from gopiai.ui.utils.icon_helpers import create_icon_button

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
try:
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
    possible_paths = [
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))),
            "GopiAI-CrewAI",
            "tools"
        ),
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        r"c:\Users\crazy\GOPI_AI_MODULES\GopiAI-CrewAI\tools",
        # –í–∞—Ä–∏–∞–Ω—Ç 3: —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.path.join(os.environ.get('GOPI_AI_MODULES', ''), "GopiAI-CrewAI", "tools")
    ]
    
    tools_path = None
    for path in possible_paths:
        if path and os.path.exists(path):
            tools_path = path
            break
    
    if tools_path and tools_path not in sys.path:
        sys.path.append(tools_path)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ tools: {tools_path}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ModelProvider
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ModelProvider, –Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ–æ–ª–±—ç–∫–æ–º
    from gopiai_integration.model_config_manager import ModelProvider as ExternalModelProvider
    ModelProvider = ExternalModelProvider  # type: ignore[assignment]
    MODEL_PROVIDER_AVAILABLE = True
    print(f"‚úÖ ModelProvider –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: {list(ModelProvider)}")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å backend –ø—É—Ç—å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ModelProvider: {e}")
    # –°–æ–∑–¥–∞–µ–º fallback enum, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –ø–æ –∏–º–µ–Ω–∏ —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    from enum import Enum
    class ModelProvider(Enum):  # type: ignore[no-redef]
        GEMINI = "gemini"
        OPENROUTER = "openrouter"
    MODEL_PROVIDER_AVAILABLE = False

logger = logging.getLogger(__name__)

class UnifiedModelWidget(QWidget):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ Gemini –∏ OpenRouter"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    model_changed = Signal(str, str)  # provider, model_id
    provider_changed = Signal(str)   # provider
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_provider = "gemini"
        self.current_model = None
        self.available_models = {"gemini": [], "openrouter": []}
        
        # Backend –∫–ª–∏–µ–Ω—Ç—ã
        self.model_config_manager: Optional[object] = None
        self.openrouter_client: Optional[object] = None
        
        self._setup_ui()
        self._initialize_backend_clients()
        self._setup_connections()
        self._load_current_configuration()
        
        logger.info("UnifiedModelWidget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("ü§ñ –ú–æ–¥–µ–ª–∏ –ò–ò")
        layout.addWidget(title_label)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        provider_group = QGroupBox("–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        provider_layout = QHBoxLayout(provider_group)
        
        self.provider_button_group = QButtonGroup()
        
        self.gemini_radio = QRadioButton("üî∑ Gemini")
        self.gemini_radio.setChecked(True)
        self.openrouter_radio = QRadioButton("üåê OpenRouter")
        
        self.provider_button_group.addButton(self.gemini_radio, 0)
        self.provider_button_group.addButton(self.openrouter_radio, 1)
        
        provider_layout.addWidget(self.gemini_radio)
        provider_layout.addWidget(self.openrouter_radio)
        provider_layout.addStretch()
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.provider_status = QLabel("Gemini –∞–∫—Ç–∏–≤–µ–Ω")
        provider_layout.addWidget(self.provider_status)
        
        layout.addWidget(provider_group)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_group = QGroupBox("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
        model_layout = QVBoxLayout(model_group)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        model_select_layout = QHBoxLayout()
        model_select_layout.addWidget(QLabel("–ú–æ–¥–µ–ª—å:"))
        
        self.model_combo = QComboBox()
        self.model_combo.setMinimumWidth(300)
        model_select_layout.addWidget(self.model_combo)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = create_icon_button("refresh-cw", "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        model_select_layout.addWidget(self.refresh_btn)
        
        model_layout.addLayout(model_select_layout)
        
        # –ü–æ–∏—Å–∫ (–¥–ª—è OpenRouter)
        self.search_layout = QHBoxLayout()
        self.search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        self.search_layout.addWidget(self.search_input)
        
        model_layout.addLayout(self.search_layout)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è Gemini)
        self.search_input.setVisible(False)
        self.search_layout.itemAt(0).widget().setVisible(False)
        
        layout.addWidget(model_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        info_layout = QVBoxLayout(info_group)
        
        self.model_info = QTextEdit()
        self.model_info.setMaximumHeight(150)
        self.model_info.setReadOnly(True)
        info_layout.addWidget(self.model_info)
        
        layout.addWidget(info_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.test_connection_btn = create_icon_button("activity", "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        self.reset_config_btn = create_icon_button("rotate-ccw", "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        buttons_layout.addWidget(self.test_connection_btn)
        buttons_layout.addWidget(self.reset_config_btn)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        layout.addStretch()
    
    def _initialize_backend_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—ã backend"""
        try:
            # ModelConfigurationManager
            from gopiai_integration.model_config_manager import get_model_config_manager
            self.model_config_manager = get_model_config_manager()
            logger.info("‚úÖ ModelConfigurationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # OpenRouter –∫–ª–∏–µ–Ω—Ç
            from gopiai_integration.openrouter_client import OpenRouterClient
            self.openrouter_client = OpenRouterClient()
            logger.info("‚úÖ OpenRouterClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ backend –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
    
    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.provider_button_group.buttonClicked.connect(self._on_provider_changed)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        self.model_combo.currentTextChanged.connect(self._on_model_selected)
        
        # –ü–æ–∏—Å–∫ (–¥–ª—è OpenRouter)
        self.search_input.textChanged.connect(self._filter_openrouter_models)
        
        # –ö–Ω–æ–ø–∫–∏
        self.refresh_btn.clicked.connect(self._refresh_models)
        self.test_connection_btn.clicked.connect(self._test_connection)
        self.reset_config_btn.clicked.connect(self._reset_configuration)
    
    def _on_provider_changed(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if button == self.gemini_radio:
            new_provider = "gemini"
        else:
            new_provider = "openrouter"
        
        if new_provider != self.current_provider:
            self.current_provider = new_provider
            self._update_ui_for_provider()
            self._load_models_for_provider()
            self.provider_changed.emit(new_provider)
            
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {new_provider}")
    
    def _update_ui_for_provider(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if self.current_provider == "gemini":
            self.provider_status.setText("üî∑ Gemini –∞–∫—Ç–∏–≤–µ–Ω")
            self.search_input.setVisible(False)
            self.search_layout.itemAt(0).widget().setVisible(False)
        else:
            self.provider_status.setText("üåê OpenRouter –∞–∫—Ç–∏–≤–µ–Ω")
            self.search_input.setVisible(True)
            self.search_layout.itemAt(0).widget().setVisible(True)
    
    def _load_current_configuration(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self.model_config_manager:
            return
        
        try:
            current_config = getattr(self.model_config_manager, "get_current_configuration")()
            
            if current_config:
                self.current_provider = current_config.provider.value
                self.current_model = current_config.model_id
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                if self.current_provider == "gemini":
                    self.gemini_radio.setChecked(True)
                else:
                    self.openrouter_radio.setChecked(True)
                
                self._update_ui_for_provider()
                self._load_models_for_provider()
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {current_config.display_name}")
            else:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _load_models_for_provider(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if not self.model_config_manager:
            return
        
        try:
            self.model_combo.clear()
            
            if self.current_provider == "gemini":
                self._load_gemini_models()
            else:
                self._load_openrouter_models()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def _load_gemini_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ Gemini"""
        try:
            provider_enum = ModelProvider.GEMINI
            # –¢–∏–ø–æ–≤–æ–π —Ö–∏–Ω—Ç –¥–ª—è pyright: model_config_manager –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å –º–µ—Ç–æ–¥–æ–º get_configurations_by_provider
            manager = self.model_config_manager
            if manager is None:
                return
            models = cast(Iterable[Any], getattr(manager, "get_configurations_by_provider")(provider_enum))  # type: ignore[call-arg]
            available_models = [m for m in models if getattr(m, "is_available", lambda: False)()]
            
            for model in available_models:
                display_name = getattr(model, "display_name", getattr(model, "model_id", "unknown"))
                display_text = f"{display_name}"
                if getattr(model, "is_default", False):
                    display_text += " (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
                
                self.model_combo.addItem(display_text, getattr(model, "model_id", "unknown"))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            if self.current_model:
                index = self.model_combo.findData(self.current_model)
                if index >= 0:
                    self.model_combo.setCurrentIndex(index)
            
            self.available_models["gemini"] = available_models
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_models)} –º–æ–¥–µ–ª–µ–π Gemini")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π Gemini: {e}")
    
    def _load_openrouter_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ OpenRouter"""
        try:
            if not self.openrouter_client:
                return
            
            client = self.openrouter_client
            models = getattr(client, "get_models_sync")()
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            normalized: List[Dict[str, Any]] = []
            for model in models:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç dataclass/–æ–±—ä–µ–∫—Ç—ã ‚Äì –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                if isinstance(model, dict):
                    data = model
                else:
                    data = {
                        'id': getattr(model, 'id', 'unknown'),
                        'name': getattr(model, 'name', getattr(model, 'id', 'unknown')),
                        'created_by': getattr(model, 'created_by', None),
                        'pricing': getattr(model, 'pricing', None),
                    }
                normalized.append(data)
                self.model_combo.addItem(str(data.get("name", data.get("id", "unknown"))), data.get("id", "unknown"))
            
            self.available_models["openrouter"] = normalized
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(normalized)} –º–æ–¥–µ–ª–µ–π OpenRouter")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π OpenRouter: {e}")
    
    def _filter_openrouter_models(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ OpenRouter –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        if self.current_provider != "openrouter":
            return
        
        search_text = self.search_input.text().lower()
        self.model_combo.clear()
        
        models = cast(List[Dict[str, Any]], self.available_models.get("openrouter", []))
        
        for model in models:
            model_id = str(model.get('id', 'unknown'))
            model_name = str(model.get('name', model_id))
            
            if not search_text or search_text in model_name.lower() or search_text in model_id.lower():
                self.model_combo.addItem(f"{model_name}", model_id)
    
    def _on_model_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        model_id = self.model_combo.currentData()
        if model_id and model_id != self.current_model:
            try:
                if self.model_config_manager and MODEL_PROVIDER_AVAILABLE:
                    provider_enum = (
                        ModelProvider.GEMINI
                        if self.current_provider == "gemini"
                        else ModelProvider.OPENROUTER
                    )
                    
                    success = getattr(self.model_config_manager, "set_current_configuration")(  # type: ignore[call-arg]
                        provider_enum, model_id
                    )
                    
                    if success:
                        self.current_model = model_id
                        self._update_model_info()
                        self.model_changed.emit(self.current_provider, model_id)
                        
                        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.current_provider}/{model_id}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å: {model_id}")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {e}")
    
    def _update_model_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if not self.current_model:
            self.model_info.setText("–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        try:
            info_text = f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.current_provider.title()}\n"
            info_text += f"üìã ID –º–æ–¥–µ–ª–∏: {self.current_model}\n"
            info_text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n"
            
            if self.current_provider == "openrouter":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è OpenRouter
                models = cast(List[Dict[str, Any]], self.available_models.get("openrouter", []))
                current_model_data = next((m for m in models if m.get('id') == self.current_model), None)
                
                if current_model_data:
                    info_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {current_model_data.get('name', 'N/A')}\n"
                    info_text += f"üè¢ –°–æ–∑–¥–∞—Ç–µ–ª—å: {current_model_data.get('created_by', 'N/A')}\n"
                    
                    pricing = cast(Dict[str, Any], current_model_data.get('pricing', {}))
                    if pricing:
                        prompt_cost = pricing.get('prompt', 'N/A')
                        completion_cost = pricing.get('completion', 'N/A')
                        info_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prompt_cost}/{completion_cost} –∑–∞ —Ç–æ–∫–µ–Ω\n"
            
            self.model_info.setText(info_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
            self.model_info.setText(f"–û—à–∏–±–∫–∞: {e}")
    
    def _refresh_models(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"""
        self._load_models_for_provider()
        logger.info(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è {self.current_provider} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logger.info(f"–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.current_provider}")
    
    def _reset_configuration(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def get_current_model(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        return {
            'provider': self.current_provider,
            'model_id': self.current_model
        }
    
    def set_model_by_id(self, provider: str, model_id: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ ID"""
        if provider != self.current_provider:
            self.current_provider = provider
            if provider == "gemini":
                self.gemini_radio.setChecked(True)
            else:
                self.openrouter_radio.setChecked(True)
            self._update_ui_for_provider()
            self._load_models_for_provider()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        index = self.model_combo.findData(model_id)
        if index >= 0:
            self.model_combo.setCurrentIndex(index)


def test_unified_widget():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
    import sys
    from PySide6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    widget = UnifiedModelWidget()
    widget.show()
    
    sys.exit(app.exec())


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    test_unified_widget()
