# --- START OF FILE chat_browser_handler.py ---

import logging
import re
from typing import Optional
from PySide6.QtCore import QObject, QUrl
from PySide6.QtWidgets import QWidget

logger = logging.getLogger(__name__)

class ChatBrowserHandler(QObject):
    """
    Handles all browser-related commands originating from the chat.
    Finds the browser widget and executes actions like navigation, search, etc.
    """
    def __init__(self, parent_widget: QWidget):
        super().__init__(parent_widget)
        self.parent_widget = parent_widget

    def handle_command(self, command: str) -> str:
        """
        Public method to process a browser command. It finds the browser
        and executes the requested action.
        """
        logger.info(f"üåê [BROWSER HANDLER] Received command: '{command}'")
        
        browser_components = self._get_browser_components()
        if not browser_components:
            logger.warning("Browser widget not found. Cannot execute command.")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞."

        return self._execute_browser_action(browser_components, command)

    def _get_browser_components(self) -> dict | None:
        """Finds the active browser tab and its components within the main window."""
        try:
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç Tab-—ã
            main_window = self.parent_widget.window()
            if not main_window or not hasattr(main_window, 'tab_document'):
                logger.warning("Main window or 'tab_document' not found.")
                return None
            
            tab_widget = main_window.tab_document.tab_widget
            current_widget = tab_widget.currentWidget()

            if not current_widget or not hasattr(current_widget, 'property'):
                logger.warning("No active widget or it does not support properties.")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–º
            web_view = current_widget.property('_web_view')
            if web_view:
                logger.info("‚úÖ Active browser tab found.")
                return {
                    'web_view': web_view,
                    'address_bar': current_widget.property('_address_bar'),
                    'widget': current_widget
                }
            
            logger.warning("Active tab is not a browser widget.")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error getting browser components: {e}", exc_info=True)
            return None

    def _execute_browser_action(self, components: dict, command: str) -> str:
        """Executes a specific action based on the parsed command."""
        web_view = components['web_view']
        address_bar = components['address_bar']
        command_lower = command.lower()

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            if any(word in command_lower for word in ['–æ—Ç–∫—Ä–æ–π', '–ø–µ—Ä–µ–π–¥–∏', '–∑–∞–π–¥–∏']):
                url = self._extract_url_from_command(command)
                if url:
                    if address_bar: address_bar.setText(url)
                    web_view.load(QUrl(url))
                    return f"–ü–µ—Ä–µ—Ö–æ–∂—É –ø–æ –∞–¥—Ä–µ—Å—É: {url}"
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã."

            # –ü–æ–∏—Å–∫
            elif 'google' in command_lower or '–ø–æ–∏—Å–∫' in command_lower or '–Ω–∞–π–¥–∏' in command_lower:
                query = self._extract_search_query(command)
                url = f"https://www.google.com/search?q={query}"
                if address_bar: address_bar.setText(url)
                web_view.load(QUrl(url))
                return f"–ò—â—É –≤ Google: '{query}'"

            # –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
            elif '–Ω–∞–∑–∞–¥' in command_lower:
                web_view.back()
                return "–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞–∑–∞–¥."
            elif '–≤–ø–µ—Ä–µ–¥' in command_lower:
                web_view.forward()
                return "–ü–µ—Ä–µ—Ö–æ–∂—É –≤–ø–µ—Ä–µ–¥."
            elif '–æ–±–Ω–æ–≤–∏' in command_lower:
                web_view.reload()
                return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."

            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞: '{command}'"
        except Exception as e:
            logger.error(f"‚ùå Error executing browser action: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"

    def _extract_url_from_command(self, command: str) -> Optional[str]:
        """Extracts a URL from a command string."""
        match = re.search(r'https?://[^\s/$.?#].[^\s]*', command, re.IGNORECASE)
        if match:
            return match.group(0)
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
        match = re.search(r'([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}', command, re.IGNORECASE)
        if match:
            return "https://" + match.group(0)
        return None

    def _extract_search_query(self, command: str) -> str:
        """Extracts the search query from a command string."""
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        keywords = ['google', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏', '–≤']
        query = command
        for keyword in keywords:
            query = re.sub(r'\b' + re.escape(keyword) + r'\b', '', query, flags=re.IGNORECASE)
        return query.strip()

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê chat_browser_handler.py ---