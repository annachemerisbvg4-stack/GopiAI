from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QFileDialog, QLabel, QSizePolicy, QMessageBox
from PySide6.QtCore import Qt, QMimeData, Slot, QMetaObject, QTimer, Signal
from PySide6.QtGui import QIcon, QDropEvent, QDragEnterEvent, QPixmap, QTextCursor
import threading
import sys
import os
import time
import traceback
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UniversalIconManager –¥–ª—è Lucide-–∏–∫–æ–Ω–æ–∫
from gopiai.ui.components.icon_file_system_model import UniversalIconManager

# –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ CrewAI API
from .crewai_client import CrewAIClient
# –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
from .chat_context import ChatContext




# DEBUG LOGGING PATCH - Added for hang diagnosis
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
print("üîß DEBUG logging enabled for chat_widget.py")


class ChatWidget(QWidget):
    # Qt signals for thread-safe communication
    response_ready = Signal(str, bool)  # response_text, error_occurred
    def set_theme_manager(self, theme_manager):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º–æ–π (API —Å–æ–≤–º–µ—Å—Ç–∏–º —Å WebViewChatWidget)"""
        self.theme_manager = theme_manager
        self.apply_theme()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–µ–º—É –∫ —á–∞—Ç—É (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –≤—Å—ë –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è)"""
        pass


    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç-–≤–∏–¥–∂–µ—Ç –¥–ª—è GopiAI –Ω–∞ Qt —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã, –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏: "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "multiagent".
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("ChatWidget")
        self.setMinimumHeight(320)
        self.setAcceptDrops(True)
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(8, 8, 8, 8)
        self.main_layout.setSpacing(6)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CrewAIClient
        self.crew_ai_client = CrewAIClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.chat_context = ChatContext(max_messages=20, max_tokens=4000)

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.history = QTextEdit(self)
        self.history.setReadOnly(True)
        self.history.setObjectName("ChatHistory")
        self.history.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.history.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.main_layout.addWidget(self.history)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        self.history.append("<b>–°–∏—Å—Ç–µ–º–∞:</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>Enter</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ <b>Shift+Enter</b> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.bottom_panel = QHBoxLayout()

        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input = QTextEdit(self)
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)")
        self.input.setObjectName("ChatInput")
        self.input.setFixedHeight(80)  # ~–≤ 10 —Ä–∞–∑ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ QLineEdit
        self.input.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        self.bottom_panel.addWidget(self.input, 1)

        # Lucide-–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ UniversalIconManager
        icon_mgr = UniversalIconManager.instance()
        self.attach_file_btn = QPushButton(icon_mgr.get_icon("paperclip"), "", self)
        self.attach_file_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attach_file_btn.clicked.connect(self.attach_file)
        self.bottom_panel.addWidget(self.attach_file_btn)

        self.attach_image_btn = QPushButton(icon_mgr.get_icon("image"), "", self)
        self.attach_image_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.attach_image_btn.clicked.connect(self.attach_image)
        self.bottom_panel.addWidget(self.attach_image_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.clear_context_btn = QPushButton(icon_mgr.get_icon("trash-2"), "", self)
        self.clear_context_btn.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞")
        self.clear_context_btn.clicked.connect(self.clear_chat_context)
        self.bottom_panel.addWidget(self.clear_context_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.context_stats_btn = QPushButton(icon_mgr.get_icon("info"), "", self)
        self.context_stats_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        self.context_stats_btn.clicked.connect(self.show_context_stats)
        self.bottom_panel.addWidget(self.context_stats_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_btn = QPushButton(icon_mgr.get_icon("send"), "", self)
        self.send_btn.setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.send_btn.clicked.connect(self.send_message)
        self.bottom_panel.addWidget(self.send_btn)

        self.main_layout.addLayout(self.bottom_panel)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter (Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
        self.input.keyPressEvent = self._input_key_press_event

        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history.textChanged.connect(self._scroll_history_to_end)

        # Connect Qt signal for thread-safe communication
        self.response_ready.connect(self._handle_response_from_thread)

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.theme_manager = None
        self.apply_theme()
        
        # Check service availability after UI is fully initialized
        self._check_crewai_availability()

    def _input_key_press_event(self, event):
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Enter –±–µ–∑ Shift, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
            # Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
            if event.modifiers() & Qt.KeyboardModifier.ShiftModifier:
                QTextEdit.keyPressEvent(self.input, event)
            else:
                # –ü—Ä–æ—Å—Ç–æ–π Enter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message()
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            QTextEdit.keyPressEvent(self.input, event)

    @Slot(str, bool)
    def _handle_response_from_thread(self, response_text, error_occurred):
        """Handles responses from background thread via Qt signal"""
        try:
            logger.info(f"Signal received: response_len={len(response_text)}, error={error_occurred}")
            
            # Get current HTML and try to replace waiting span
            current_html = self.history.toHtml()
            
            # Try to find and replace waiting span
            waiting_patterns = [
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...",
                "<span id="
            ]
            
            replaced = False
            for pattern in waiting_patterns:
                if pattern in current_html:
                    # Style error message in red if it's an error
                    if error_occurred:
                        styled_response = f"<span style='color: red;'>{response_text}</span>"
                    else:
                        styled_response = response_text
                    
                    # For waiting text pattern
                    if pattern == "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...":
                        updated_html = current_html.replace(pattern, styled_response)
                        self.history.setHtml(updated_html)
                        replaced = True
                        break
                    # For span pattern, use regex to replace the whole span
                    elif "<span id=" in pattern:
                        import re
                        span_pattern = r"<span[^>]*id=['\"][^'\"]*['\"][^>]*>‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</span>"
                        updated_html = re.sub(span_pattern, styled_response, current_html, flags=re.DOTALL)
                        if updated_html != current_html:
                            self.history.setHtml(updated_html)
                            replaced = True
                            break
            
            # If waiting span not found, append as new message
            if not replaced:
                if error_occurred:
                    self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", f"<span style='color: red;'>{response_text}</span>")
                else:
                    self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", response_text)
            
            logger.info("‚úÖ Response handled successfully via Qt signal")
            
        except Exception as e:
            logger.error(f"‚ùå Error in signal handler: {e}", exc_info=True)
            # Fallback: append error message in red
            if error_occurred:
                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", f"<span style='color: red;'>{response_text}</span>")
            else:
                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", response_text)
        finally:
            # Always re-enable Send button and scroll to end
            self.send_btn.setEnabled(True)
            self._scroll_history_to_end()

    def _scroll_history_to_end(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω–µ—Ü"""
        scrollbar = self.history.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def _check_crewai_availability(self):
        """Checks availability of CrewAI and RAG services, showing warnings if necessary."""
        try:
            crewai_available = self.crew_ai_client.is_available()
            if crewai_available:
                logger.info("‚úÖ CrewAI API server is available.")
            else:
                logger.warning("‚ö†Ô∏è CrewAI API server is unavailable.")
                QTimer.singleShot(3000, lambda: QMessageBox.warning(
                    self,
                    "CrewAI Unavailable",
                    "CrewAI API server is unavailable.\n\n"
                    "To fully utilize multi-agent mode, run:\n"
                    "GopiAI-CrewAI/run_crewai_api_server.bat"
                ))
        except Exception as e:
            logger.error(f"‚ùå Error checking CrewAI availability: {e}", exc_info=True)
            QTimer.singleShot(3000, lambda: QMessageBox.warning(
                self,
                "CrewAI Unavailable",
                f"Error connecting to CrewAI API server: {e}\n\n"
                "To fully utilize multi-agent mode, run:\n"
                "GopiAI-CrewAI/run_crewai_api_server.bat"
            ))

        # Check RAG service
        try:
            response = requests.get("http://127.0.0.1:5051/api/health", timeout=2)
            self.rag_available = response.status_code == 200
        except requests.RequestException:
            self.rag_available = False

        if not self.rag_available:
            logger.warning("‚ö†Ô∏è RAG service is unavailable.")
            self.history.append("‚ö†Ô∏è –ü–∞–º—è—Ç—å (RAG) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        else:
            logger.info("‚úÖ RAG service is available.")

    # Drag & Drop
    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if file_path:
                    if self._is_image_file(file_path):
                        self.append_message("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", file_path)
                    else:
                        self.append_message("–§–∞–π–ª", file_path)
            event.acceptProposedAction()
        else:
            event.ignore()

    def _is_image_file(self, path):
        return any(path.lower().endswith(ext) for ext in [".png", ".jpg", ".jpeg", ".bmp", ".gif"])


    

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ CrewAI API"""
        text = self.input.toPlainText().strip()
        if text:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.chat_context.add_user_message(text)
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.append_message("–í—ã", text)
            self.input.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
            self.send_btn.setEnabled(False)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_id = f"waiting_{int(time.time())}"
            self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", f"<span id='{waiting_id}'>‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</span>")
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            def process_in_background():
                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã."
                error_occurred = False
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Ä–Ω—É—Ç—å –≤–µ—Å—å body —Ñ—É–Ω–∫—Ü–∏–∏ –≤ try/except
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
                    context_string = self.chat_context.get_context_string()
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if context_string:
                        request_with_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{context_string}\n\n–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: {text}"
                    else:
                        request_with_context = text
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CrewAI API –∫–ª–∏–µ–Ω—Ç —Å timeout –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                    process_result = self.crew_ai_client.process_request(request_with_context, timeout=120)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç CrewAI API: {process_result}")
                    
                    # Handle structured error responses from CrewAI client
                    if isinstance(process_result, dict):
                        # Check for error_message field (new structured error format)
                        if "error_message" in process_result:
                            response = process_result["error_message"]
                            error_occurred = True
                            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç API: {response}")
                        # Check for response field (normal response)
                        elif "response" in process_result:
                            response = process_result["response"]
                            # Check if there was an error flag
                            if "error" in process_result:
                                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç API: {process_result['error']}")
                                error_occurred = True
                        else:
                            response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç CrewAI API."
                            error_occurred = True
                            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {process_result}")
                    elif isinstance(process_result, str):
                        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É
                        response = process_result
                        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
                    else:
                        response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç CrewAI API."
                        error_occurred = True
                        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(process_result)}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏)
                    if not error_occurred:
                        self.chat_context.add_assistant_message(response)
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ background thread: {e}", exc_info=True)
                    response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                    error_occurred = True
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Qt signal –≤–º–µ—Å—Ç–æ QTimer.singleShot
                try:
                    logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Qt signal")
                    self.response_ready.emit(response, error_occurred)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}", exc_info=True)
                    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º QTimer –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                    def emergency_update():
                        try:
                            # Get current HTML and try to replace waiting span
                            current_html = self.history.toHtml()
                            waiting_patterns = [
                                f"<span id='{waiting_id}'>‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</span>",
                                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
                            ]
                            
                            # Try to replace waiting span with response
                            replaced = False
                            for pattern in waiting_patterns:
                                if pattern in current_html:
                                    # Style error message in red
                                    styled_response = f"<span style='color: red;'>{response}</span>" if error_occurred else response
                                    updated_html = current_html.replace(pattern, styled_response)
                                    self.history.setHtml(updated_html)
                                    replaced = True
                                    break
                            
                            # If waiting span not found, append as new message
                            if not replaced:
                                styled_response = f"<span style='color: red;'>{response}</span>" if error_occurred else response
                                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", styled_response)
                                
                        except Exception as fallback_e:
                            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback: {fallback_e}", exc_info=True)
                        finally:
                            # Always re-enable Send button
                            self.send_btn.setEnabled(True)
                    QTimer.singleShot(0, emergency_update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=process_in_background)
            thread.daemon = True
            thread.start()
    
    @Slot(str, str, bool)
    def _update_assistant_response(self, waiting_id, response, error_occurred=False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
        
        Args:
            waiting_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
            response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"_update_assistant_response: waiting_id={waiting_id}, response_len={len(response)}, error={error_occurred}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HTML
            current_html = self.history.toHtml()
            logger.info(f"–¢–µ–∫—É—â–∏–π HTML —Å–æ–¥–µ—Ä–∂–∏—Ç {len(current_html)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_patterns = [
                f"<span id='{waiting_id}'>‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</span>",
                f"<span id=\"'{waiting_id}'\">‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</span>",
                f"id='{waiting_id}'",
                f"id=\"{waiting_id}\"",
                waiting_id,
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
            ]
            
            replaced = False
            for pattern in waiting_patterns:
                if pattern in current_html:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
                    
                    # –°—Ç–∏–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–∫–∏
                    if error_occurred:
                        new_response = f"<span style='color: #d73027;'>{response}</span>"
                    else:
                        new_response = response
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π span, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
                    if "<span" in pattern and "</span>" in pattern:
                        updated_html = current_html.replace(pattern, new_response)
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
                    elif pattern == "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...":
                        updated_html = current_html.replace(pattern, new_response)
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏—â–µ–º –≤–µ—Å—å span
                        import re
                        span_pattern = f"<span[^>]*id=['\"]{waiting_id}['\"][^>]*>.*?</span>"
                        updated_html = re.sub(span_pattern, new_response, current_html, flags=re.DOTALL)
                    
                    if updated_html != current_html:
                        self.history.setHtml(updated_html)
                        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Ç–≤–µ—Ç")
                        replaced = True
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω, –Ω–æ –∑–∞–º–µ–Ω–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞: {pattern}")
                        
            if not replaced:
                # Fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                logger.debug(f"HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {current_html[:500]}")
                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", response)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            # Fallback: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", response)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        self.send_btn.setEnabled(True)
        self._scroll_history_to_end()


    def append_message(self, author, text):
        logger.info(f"append_message: author={author}, text_len={len(text)}")
        self.history.append(f"<b>{author}:</b> {text}")
        self.history.repaint()


    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            self.append_message("–°–∏—Å—Ç–µ–º–∞", f"–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {os.path.basename(file_path)}. (–î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)")
            logger.info(f"–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {file_path}")


    def attach_image(self):
        image_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", filter="Images (*.png *.jpg *.jpeg *.bmp *.gif)")
        if image_path:
            self.append_message("–°–∏—Å—Ç–µ–º–∞", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(image_path)}. (–î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {image_path}")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò (—Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≤–µ—Ç–∞–º –æ—Ç Minimax –∏ GenSpark)
    
    def get_debug_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞"""
        return {
            "crewai_client_available": self.crew_ai_client is not None,
            "crewai_server_available": self.crew_ai_client.is_available() if self.crew_ai_client else False,
            "send_button_enabled": self.send_btn.isEnabled(),
            "input_text_length": len(self.input.toPlainText()),
            "history_length": len(self.history.toPlainText())
        }
    
    def test_crewai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CrewAI API"""
        if not self.crew_ai_client:
            self.append_message("–°–∏—Å—Ç–µ–º–∞", "‚ùå CrewAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        if not self.crew_ai_client.is_available():
            self.append_message("–°–∏—Å—Ç–µ–º–∞", "‚ùå CrewAI API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            test_result = self.crew_ai_client.process_request("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            if isinstance(test_result, dict):
                # Check for structured error response
                if "error_message" in test_result:
                    self.append_message("–°–∏—Å—Ç–µ–º–∞", f"‚ùå –û—à–∏–±–∫–∞ API: {test_result['error_message']}")
                    return False
                elif "response" in test_result:
                    self.append_message("–°–∏—Å—Ç–µ–º–∞", "‚úÖ CrewAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    self.append_message("–°–∏—Å—Ç–µ–º–∞", f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {test_result}")
                    return False
            else:
                self.append_message("–°–∏—Å—Ç–µ–º–∞", f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {type(test_result)}")
                return False
        except Exception as e:
            self.append_message("–°–∏—Å—Ç–µ–º–∞", f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}")
            return False
    
    def test_timer_from_thread(self):
        """–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É QTimer.singleShot –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ QTimer –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
        
        def background_test():
            logger.info("üß™ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            time.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            
            def ui_update():
                logger.info("üéØ UI update –≤—ã–∑–≤–∞–Ω –∏–∑ QTimer!")
                self.append_message("–¢–µ—Å—Ç", "‚úÖ QTimer.singleShot —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞!")
            
            logger.info("üß™ –í—ã–∑—ã–≤–∞–µ–º QTimer.singleShot")
            QTimer.singleShot(0, ui_update)
            logger.info("üß™ QTimer.singleShot –≤—ã–∑–≤–∞–Ω")
        
        thread = threading.Thread(target=background_test)
        thread.daemon = True
        thread.start()
        
        self.append_message("–¢–µ—Å—Ç", "üß™ –¢–µ—Å—Ç QTimer –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    def clear_chat_context(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å)"""
        stats_before = self.chat_context.get_stats()
        self.chat_context.clear()
        
        self.append_message("–°–∏—Å—Ç–µ–º–∞", 
            f"üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω. –ë—ã–ª–æ: {stats_before['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
            f"~{stats_before['estimated_tokens']} —Ç–æ–∫–µ–Ω–æ–≤.")
        
        logger.info(f"Chat context cleared. Previous stats: {stats_before}")
    
    def show_context_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞"""
        stats = self.chat_context.get_stats()
        context_preview = ""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Å–æ–æ–±—â–µ–Ω–∏–π
        if stats['message_count'] > 0:
            last_messages = self.chat_context.get_last_messages(2)
            preview_parts = []
            for msg in last_messages:
                content_preview = msg.content[:50] + "..." if len(msg.content) > 50 else msg.content
                preview_parts.append(f"- {msg.role}: {content_preview}")
            context_preview = "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(preview_parts)
        
        self.append_message("–°–∏—Å—Ç–µ–º–∞", 
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']}/{stats['max_messages']}\n"
            f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {stats['total_characters']}\n"
            f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['estimated_tokens']}/{stats['max_tokens']}"
            + context_preview)
        
        logger.info(f"Context stats displayed: {stats}")
