# --- START OF FILE chat_widget.py ---

import logging
import time
import os
import html
from typing import Optional
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, 
                               QFileDialog, QSizePolicy, QMessageBox)
from PySide6.QtCore import Qt, Slot, QPoint
from PySide6.QtGui import QResizeEvent, QTextCursor, QDropEvent, QDragEnterEvent

logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
from .crewai_client import CrewAIClient
from ..memory import get_memory_manager
from .chat_async_handler import ChatAsyncHandler
from .chat_ui_assistant_handler import ChatUIAssistantHandler
from .chat_browser_handler import ChatBrowserHandler

# --- –î—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
from gopiai.ui.components.icon_file_system_model import UniversalIconManager
from .side_panel import SidePanelContainer # <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç SidePanelContainer

class ChatWidget(QWidget):
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("ChatWidget")
        self.setAcceptDrops(True)
        
        self.memory_manager = get_memory_manager()
        self.crew_ai_client = CrewAIClient()
        
        self.async_handler = ChatAsyncHandler(self.crew_ai_client, self)
        self.ui_assistant_handler = ChatUIAssistantHandler(self)
        self.browser_handler = ChatBrowserHandler(self)
        
        self.session_id = f"session_{int(time.time())}"
        self._waiting_message_id = None
        self.theme_manager = None

        self._setup_ui()
        
        self.async_handler.response_ready.connect(self._handle_response)
        self.async_handler.status_update.connect(self._update_status_message)

    def _setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."""
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(8, 8, 8, 8)
        self.main_layout.setSpacing(6)

        # 1. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã
        #    –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∞—Å—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≥–æ, –∞ –Ω–µ –≤—Å–µ–≥–æ –æ–∫–Ω–∞.
        self.chat_area_widget = QWidget()
        self.chat_area_widget.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        chat_area_layout = QVBoxLayout(self.chat_area_widget)
        chat_area_layout.setContentsMargins(0, 0, 0, 0)

        # 2. –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –í–ù–£–¢–†–¨ chat_area_layout
        self.history = QTextEdit(self)
        self.history.setReadOnly(True)
        self.history.setObjectName("ChatHistory")
        chat_area_layout.addWidget(self.history)

        # 3. –î–æ–±–∞–≤–ª—è–µ–º chat_area_widget –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout, —á—Ç–æ–±—ã –æ–Ω —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è
        self.main_layout.addWidget(self.chat_area_widget, 1)

        # 4. –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫
        bottom_container = QWidget()
        bottom_layout = QHBoxLayout(bottom_container)
        bottom_layout.setContentsMargins(0, 5, 0, 0) # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        bottom_layout.setSpacing(6)
        
        self.side_panel_container = SidePanelContainer(self)
        bottom_layout.addWidget(self.side_panel_container.trigger_button)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input = QTextEdit(self)
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        self.input.setObjectName("ChatInput")
        self.input.setFixedHeight(80)
        self.input.keyPressEvent = self._input_key_press_event
        bottom_layout.addWidget(self.input, 1)

        # –ö–Ω–æ–ø–∫–∏
        icon_mgr = UniversalIconManager.instance()
        action_buttons_layout = QVBoxLayout()
        
        self.attach_file_btn = QPushButton(icon_mgr.get_icon("paperclip"), "", self)
        self.attach_file_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attach_file_btn.clicked.connect(self.attach_file)
        action_buttons_layout.addWidget(self.attach_file_btn)
        
        self.attach_image_btn = QPushButton(icon_mgr.get_icon("image"), "", self)
        self.attach_image_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.attach_image_btn.clicked.connect(self.attach_image)
        action_buttons_layout.addWidget(self.attach_image_btn)
        
        bottom_layout.addLayout(action_buttons_layout)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_btn = QPushButton(icon_mgr.get_icon("send"), "", self)
        self.send_btn.setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.send_btn.setFixedSize(40, 80)
        self.send_btn.clicked.connect(self.send_message)
        bottom_layout.addWidget(self.send_btn)
        
        self.main_layout.addWidget(bottom_container)

        # 5. –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å. –ï–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–º –±—É–¥–µ—Ç chat_area_widget.
        #    –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –µ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ö –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
        self.side_panel_container = SidePanelContainer(self.chat_area_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä—å –ø–∞–Ω–µ–ª–∏
        stats_button = QPushButton(icon_mgr.get_icon("info"), " –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self)
        stats_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        stats_button.clicked.connect(self.show_context_stats)
        self.side_panel_container.add_button_to_panel(stats_button)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏
        self.history.textChanged.connect(self._scroll_history_to_end)
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    # send_message, _handle_response, append_message, –∏ —Ç.–¥.

    def send_message(self):
        text = self.input.toPlainText().strip()
        if not text: return
        self.append_message("–í—ã", text)
        self.input.clear()
        self.send_btn.setEnabled(False)
        self._waiting_message_id = self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        message_data = {"message": text, "metadata": {"session_id": self.session_id}}
        self.async_handler.process_message(message_data)

    @Slot(str)
    def _update_status_message(self, status_text: str):
        self._update_assistant_response(self._waiting_message_id, status_text, is_status=True)

    @Slot(object, bool)
    def _handle_response(self, result: object, is_error: bool):
        if is_error:
            response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(result)}"
        elif isinstance(result, dict) and result.get("impl") == "browser-use":
            response_text = self.browser_handler.handle_command(result.get("command", ""))
        else:
            response_text = str(result.get('response', result)) if isinstance(result, dict) else str(result)
        
        self._update_assistant_response(self._waiting_message_id, response_text)
        self.memory_manager.add_message(self.session_id, "assistant", response_text)
        self.send_btn.setEnabled(True)
        self._waiting_message_id = None

    def append_message(self, author: str, text: str) -> Optional[str]:
        self.history.append(f"<b>{author}:</b> {html.escape(text)}")
        role = 'user' if author.lower() == '–≤—ã' else 'assistant'
        return self.memory_manager.add_message(self.session_id, role, text)

    def _update_assistant_response(self, message_id: str, new_text: str, is_status: bool = False):
        cursor = self.history.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        cursor.select(QTextCursor.SelectionType.LineUnderCursor)
        cursor.removeSelectedText()
        self.history.append(f"<b>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b> {html.escape(new_text)}")
        self._scroll_history_to_end()

    def resizeEvent(self, event: QResizeEvent):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞."""
        super().resizeEvent(event)
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π, –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if hasattr(self, 'side_panel_container'):
            self.side_panel_container.update_trigger_position()

    def _scroll_history_to_end(self):
        self.history.verticalScrollBar().setValue(self.history.verticalScrollBar().maximum())

    def _input_key_press_event(self, event):
        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter) and not (event.modifiers() & Qt.KeyboardModifier.ShiftModifier):
            self.send_message()
            event.accept()
        else:
            QTextEdit.keyPressEvent(self.input, event)
            
    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            logger.info(f"üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {os.path.basename(file_path)}")

    def attach_image(self):
        image_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", filter="Images (*.png *.jpg *.jpeg)")
        if image_path:
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(image_path)}")

    def show_context_stats(self):
        QMessageBox.information(self, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")
        
    def set_theme_manager(self, theme_manager):
        self.theme_manager = theme_manager
        self.apply_theme()

    def apply_theme(self):
        logger.info("Theme applied to ChatWidget (placeholder method).")
        pass

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê chat_widget.py ---