from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, 
                              QFileDialog, QLabel, QSizePolicy, QMessageBox, QGraphicsOpacityEffect)
from PySide6.QtCore import Qt, QMimeData, Slot, QMetaObject, QTimer, QThread, Signal, QRect, QPoint
from PySide6.QtGui import QIcon, QDropEvent, QDragEnterEvent, QPixmap, QTextCursor, QPainter, QColor, QPen

# Import UI Assistant
from gopiai.ui_core.ai_tools import get_ui_assistant_tool
from typing import Optional, List, Dict, Any, Tuple, Union
import re
import threading
import time
import json
import time
import logging
import html
import uuid
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UniversalIconManager
from gopiai.ui.components.icon_file_system_model import UniversalIconManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ChatContext –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .chat_context import ChatContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CrewAIClient
from .crewai_client import CrewAIClient

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SidePanelContainer
from .side_panel import SidePanelContainer

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MemoryManager
from ..memory import get_memory_manager, MemoryManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ personality
# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ gopiai.app.prompt.personality, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
PERSONALITY_SYSTEM_PROMPT = None
try:
    from gopiai.app.prompt.personality import PERSONALITY_SYSTEM_PROMPT
except ImportError:
    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    PERSONALITY_SYSTEM_PROMPT = "–í—ã - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GopiAI. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ –∏ —Ç–æ—á–Ω–æ."

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
memory_manager = get_memory_manager()
RAG_AVAILABLE = True  # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG
logger.info("‚úÖ Memory manager initialized")

# DEBUG LOGGING PATCH - Enhanced for browser command debugging
import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create file handler for persistent logging
file_handler = logging.FileHandler('chat_debug.log', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)

print("üîß Enhanced DEBUG logging enabled for chat_widget.py (console + file)")
logger.info("=== Chat Widget Debug Session Started ===")


class ChatWidget(QWidget):
    # Qt signals for thread-safe communication
    response_ready = Signal(object, bool)  # response_data (str or dict), error_occurred
    browser_command_ready = Signal(str)  # browser_command
    def set_theme_manager(self, theme_manager):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º–æ–π (API —Å–æ–≤–º–µ—Å—Ç–∏–º —Å WebViewChatWidget)"""
        self.theme_manager = theme_manager
        self.apply_theme()

    def _init_ui_assistant(self):
        """Initialize the UI Assistant integration."""
        # Create visual feedback elements
        self._setup_visual_feedback()
        
        # Get the UI Assistant instance
        self.ui_assistant = get_ui_assistant_tool()
        
        # Connect UI Assistant signals
        self.ui_assistant.action_started.connect(self._on_assistant_action_started)
        self.ui_assistant.action_completed.connect(self._on_assistant_action_completed)
        self.ui_assistant.visual_feedback.connect(self._on_visual_feedback)
        
        # Set the main window reference
        main_window = self.window()
        if main_window:
            self.ui_assistant.set_main_window(main_window)
    
    def _setup_visual_feedback(self):
        """Set up visual feedback elements for the UI Assistant."""
        # Create a transparent overlay window for visual feedback
        self.overlay_widget = QWidget(self)
        self.overlay_widget.setWindowFlags(
            Qt.WindowType.FramelessWindowHint | 
            Qt.WindowType.WindowStaysOnTopHint |
            Qt.WindowType.Tool |
            Qt.WindowType.WindowTransparentForInput
        )
        self.overlay_widget.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.overlay_widget.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        
        # Status label for showing current action
        self.status_label = QLabel()
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: rgba(0, 0, 0, 180);
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 12px;
                margin: 10px;
            }
        """)
        self.status_label.hide()
        
        # Highlight widget for showing where actions are being performed
        self.highlight_widget = QLabel()
        self.highlight_widget.setStyleSheet("""
            QLabel {
                background-color: rgba(65, 131, 196, 40);
                border: 2px solid #4183c4;
                border-radius: 4px;
            }
        """)
        self.highlight_widget.hide()
        
        layout.addWidget(self.status_label, 0, Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignLeft)
        layout.addStretch()
        
        self.overlay_widget.setLayout(layout)
        self.overlay_widget.hide()
    
    def _on_assistant_action_started(self, message: str):
        """Handle action started signal from UI Assistant."""
        self.append_message("assistant", message)
    
    def _on_assistant_action_completed(self, message: str, success: bool):
        """Handle action completed signal from UI Assistant."""
        status = "—É—Å–ø–µ—à–Ω–æ" if success else "—Å –æ—à–∏–±–∫–æ–π"
        self.append_message("assistant", f"{message} - {status}")
    
    def _on_visual_feedback(self, feedback_type: str, data: dict):
        """Handle visual feedback from UI Assistant."""
        if feedback_type == "status_message":
            self._show_status_message(data["message"], data.get("duration", 3000))
        elif feedback_type == "highlight_element":
            rect = QRect(
                data["x"], data["y"],
                data["width"], data["height"]
            )
            self._highlight_element(rect, data.get("duration", 1000))
    
    def _show_status_message(self, message: str, duration: int = 3000):
        """Show a status message to the user."""
        if not hasattr(self, 'status_label') or not self.status_label:
            return
            
        self.status_label.setText(message)
        self.status_label.show()
        self.overlay_widget.raise_()
        
        # Hide the message after the duration
        QTimer.singleShot(duration, self.status_label.hide)
    
    def _highlight_element(self, rect: QRect, duration: int = 1000):
        """Highlight a UI element at the specified position."""
        if not hasattr(self, 'highlight_widget') or not self.highlight_widget:
            return
            
        # Convert to global coordinates if needed
        main_window = self.window()
        if main_window:
            pos = main_window.mapToGlobal(rect.topLeft())
            pos = self.overlay_widget.mapFromGlobal(pos)
            rect = QRect(pos, rect.size())
        
        self.highlight_widget.setGeometry(rect)
        self.highlight_widget.show()
        self.highlight_widget.raise_()
        
        # Hide the highlight after the duration
        QTimer.singleShot(duration, self.highlight_widget.hide)

    def apply_theme(self):
        """Apply the current theme to the chat widget."""
        # Theme is applied through global stylesheet
        pass


    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç-–≤–∏–¥–∂–µ—Ç –¥–ª—è GopiAI –Ω–∞ Qt —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã, –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏: "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "multiagent".
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("ChatWidget")
        self.setMinimumHeight(320)
        self.setAcceptDrops(True)
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(8, 8, 8, 8)
        self.main_layout.setSpacing(6)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CrewAIClient
        self.crew_ai_client = CrewAIClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
        self.memory_manager = get_memory_manager()
        self.session_id = f"session_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        
        # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAG)
        self.use_long_term_memory = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏
        self._load_chat_history()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
        self._waiting_message_id = None

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.history = QTextEdit(self)
        self.history.setReadOnly(True)
        self.history.setObjectName("ChatHistory")
        self.history.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.history.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.main_layout.addWidget(self.history)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        self.history.append("<b>–°–∏—Å—Ç–µ–º–∞:</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>Enter</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ <b>Shift+Enter</b> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.bottom_panel = QHBoxLayout()

        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input = QTextEdit(self)
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)")
        self.input.setObjectName("ChatInput")
        self.input.setFixedHeight(80)  # ~–≤ 10 —Ä–∞–∑ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ QLineEdit
        self.input.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        self.bottom_panel.addWidget(self.input, 1)

        # Lucide-–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ UniversalIconManager
        icon_mgr = UniversalIconManager.instance()
        self.attach_file_btn = QPushButton(icon_mgr.get_icon("paperclip"), "", self)
        self.attach_file_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attach_file_btn.clicked.connect(self.attach_file)
        self.bottom_panel.addWidget(self.attach_file_btn)

        self.attach_image_btn = QPushButton(icon_mgr.get_icon("image"), "", self)
        self.attach_image_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.attach_image_btn.clicked.connect(self.attach_image)
        self.bottom_panel.addWidget(self.attach_image_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.clear_context_btn = QPushButton(icon_mgr.get_icon("trash-2"), "", self)
        self.clear_context_btn.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞")
        self.clear_context_btn.clicked.connect(self.clear_chat_context)
        self.bottom_panel.addWidget(self.clear_context_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å)
        self.context_stats_btn = QPushButton(icon_mgr.get_icon("info"), "", self)
        self.context_stats_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        self.context_stats_btn.clicked.connect(self.show_context_stats)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
        self.side_panel_container = SidePanelContainer(parent=self)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        self.context_stats_btn.setText(" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        self.side_panel_container.add_button_to_panel(self.context_stats_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_btn = QPushButton(icon_mgr.get_icon("send"), "", self)
        self.send_btn.setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.send_btn.clicked.connect(self.send_message)
        self.bottom_panel.addWidget(self.send_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª—å—é
        self.main_layout.addWidget(self.side_panel_container)
        
        self.main_layout.addLayout(self.bottom_panel)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter (Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
        self.input.keyPressEvent = self._input_key_press_event

        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history.textChanged.connect(self._scroll_history_to_end)

        # Connect Qt signal for thread-safe communication
        self.response_ready.connect(self._handle_response_from_thread)
        self.browser_command_ready.connect(self._handle_browser_command_from_signal)

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.theme_manager = None
        self.apply_theme()
        
        # Initialize UI Assistant integration
        self._init_ui_assistant()
        
        # Check service availability after UI is fully initialized
        self._check_crewai_availability()

    @Slot(object, bool)
    def _handle_response_from_thread(self, response_data, error_occurred=False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ Qt signal
        
        Args:
            response_data: –û—Ç–≤–µ—Ç –æ—Ç CrewAI (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"[RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –¢–∏–ø: {type(response_data)}, –û—à–∏–±–∫–∞: {error_occurred}")
            logger.debug(f"[RESPONSE] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–∞—É–∑–µ—Ä–∞
            if isinstance(response_data, dict) and 'browser_command' in response_data:
                logger.info(f"[BROWSER] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                command = response_data['browser_command']
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                QTimer.singleShot(0, lambda: self._handle_browser_command(command))
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç CrewAI
            response_text = ""
            if isinstance(response_data, dict):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                response_text = response_data.get('response', str(response_data))
                # –ï—Å–ª–∏ response - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'response', –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Ç–∏–ø
                if isinstance(response_text, dict):
                    response_text = str(response_text)
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞)
                response_text = str(response_data)
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            if not response_text.strip():
                response_text = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            
            logger.info(f"[RESPONSE] –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            waiting_id = getattr(self, '_waiting_message_id', f"msg_{int(time.time() * 1000)}")
            logger.info(f"[RESPONSE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: {waiting_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            self._update_assistant_response(
                waiting_id,
                response_text,
                error_occurred
            )
            
            # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if hasattr(self, '_waiting_message_id'):
                del self._waiting_message_id
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
                if hasattr(self, '_waiting_message_id'):
                    self._update_assistant_response(self._waiting_message_id, error_msg, True)
                else:
                    self.append_message("–û—à–∏–±–∫–∞", error_msg)
            except Exception as inner_e:
                logger.error(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
        finally:
            # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.send_btn.setEnabled(True)
            self._scroll_history_to_end()

    def _input_key_press_event(self, event):
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Enter –±–µ–∑ Shift, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
            # Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
            if event.modifiers() & Qt.KeyboardModifier.ShiftModifier:
                QTextEdit.keyPressEvent(self.input, event)
            else:
                # –ü—Ä–æ—Å—Ç–æ–π Enter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message()
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            QTextEdit.keyPressEvent(self.input, event)

    @Slot(str, bool)
    def _update_assistant_response(self, message_id, response, error_occurred=False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ response - —Å–ª–æ–≤–∞—Ä—å
            response_text = response
            if isinstance(response, dict):
                response_text = response.get('response', str(response))
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                if 'action' in response:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –ø–æ–∏—Å–∫ –∏ —Ç.–¥.)
                    action = response.get('action')
                    if action == 'search' and 'query' in response:
                        response_text = f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {response['query']}"
                    elif action == 'navigate' and 'url' in response:
                        response_text = f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –ø–æ —Å—Å—ã–ª–∫–µ: {response['url']}"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if error_occurred:
                error_msg = ""
                if isinstance(response, dict) and 'error' in response:
                    error_msg = response['error']
                elif isinstance(response, str):
                    error_msg = response
                
                if "connection" in str(error_msg).lower():
                    response_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                else:
                    response_text = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg if error_msg else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —á–∞—Ç
            self.append_message("assistant", response_text)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
            self._scroll_history_to_end()
            
            # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if hasattr(self, '_waiting_message_id'):
                del self._waiting_message_id
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if hasattr(self, 'memory_manager') and self.memory_manager:
                try:
                    self.memory_manager.add_message(
                        role="assistant",
                        content=response_text,
                        session_id=self.session_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                self.append_message("–°–∏—Å—Ç–µ–º–∞", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass
            
    def _handle_response_from_thread(self, response_data, error_occurred=False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ Qt signal
        
        Args:
            response_data: –û—Ç–≤–µ—Ç –æ—Ç CrewAI –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"üîÑ [SIGNAL_HANDLER] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {response_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–∞—É–∑–µ—Ä–∞
            if isinstance(response_data, dict) and "impl" in response_data and response_data["impl"] == "browser-use":
                command = response_data.get("command", "")
                logger.info(f"üåê [BROWSER-USE] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {command}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –±—Ä–∞—É–∑–µ—Ä
                self.browser_command_ready.emit(command)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                response_message = response_data.get("response", f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
                self._update_assistant_response(self._waiting_message_id, response_message, False)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            elif isinstance(response_data, str):
                self._update_assistant_response(self._waiting_message_id, response_data, error_occurred)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç CrewAI
            elif isinstance(response_data, dict):
                response_text = response_data.get("response", "")
                if not response_text and "error" in response_data:
                    response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response_data['error']}"
                    error_occurred = True
                self._update_assistant_response(self._waiting_message_id, response_text, error_occurred)
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            else:
                logger.error(f"‚ùå [SIGNAL_HANDLER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                self._update_assistant_response(
                    self._waiting_message_id,
                    "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    True
                )
                
        except Exception as e:
            logger.error(f"‚ùå [SIGNAL_HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            self._update_assistant_response(
                self._waiting_message_id,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                True
            )

    @Slot(str)
    def _handle_browser_command_from_signal(self, command):
        """Handles browser command from signal in main thread"""
        logger.info(f"üîÑ [SIGNAL_HANDLER] –ü–æ–ª—É—á–µ–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª: '{command}'")
        
        try:
            # Store the result in a shared location that background thread can access
            if not hasattr(self, '_browser_command_result'):
                self._browser_command_result = {}
            
            # Execute browser command
            result = self._handle_browser_command(command)
            
            # Store result with timestamp as key
            import time
            timestamp = str(int(time.time() * 1000))  # milliseconds for uniqueness
            self._browser_command_result[timestamp] = result
            
            logger.info(f"üîÑ [SIGNAL_HANDLER] –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–¥ –∫–ª—é—á–æ–º {timestamp}: '{result}'")
            
        except Exception as e:
            logger.error(f"üîÑ [SIGNAL_HANDLER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {str(e)}", exc_info=True)
            # Store error result
            import time
            timestamp = str(int(time.time() * 1000))
            self._browser_command_result[timestamp] = f"–û—à–∏–±–∫–∞: {str(e)}"

    def _scroll_history_to_end(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω–µ—Ü"""
        scrollbar = self.history.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def _check_crewai_availability(self):
        """Checks availability of CrewAI and RAG services, showing warnings if necessary."""
        try:
            crewai_available = self.crew_ai_client.is_available()
            if crewai_available:
                logger.info("‚úÖ CrewAI API server is available.")
            else:
                logger.warning("‚ö†Ô∏è CrewAI API server is unavailable.")
                QTimer.singleShot(3000, lambda: QMessageBox.warning(
                    self,
                    "CrewAI Unavailable",
                    "CrewAI API server is unavailable.\n\n"
                    "To fully utilize multi-agent mode, run:\n"
                    "GopiAI-CrewAI/run_crewai_api_server.bat"
                ))
        except Exception as e:
            logger.error(f"‚ùå Error checking CrewAI availability: {e}", exc_info=True)
            QTimer.singleShot(3000, lambda: QMessageBox.warning(
                self,
                "CrewAI Unavailable",
                f"Error connecting to CrewAI API server: {e}\n\n"
                "To fully utilize multi-agent mode, run:\n"
                "GopiAI-CrewAI/run_crewai_api_server.bat"
            ))

        # Check embedded memory system (SimpleMemoryManager)
        try:
            from rag_memory_system import get_memory_manager
            manager = get_memory_manager()
            stats = manager.get_stats()
            self.rag_available = stats.get('txtai_available', False)
            
            if self.rag_available:
                logger.info(f"‚úÖ Embedded memory system available. Stats: {stats}")
            else:
                logger.warning("‚ö†Ô∏è Embedded memory system initialized but txtai not available.")
                
        except Exception as e:
            logger.error(f"‚ùå Error initializing embedded memory system: {e}")
            self.rag_available = False
            
        # No warning message for embedded system - it should always work

    # Drag & Drop
    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if file_path:
                    if self._is_image_file(file_path):
                        self.append_message("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", file_path)
                    else:
                        self.append_message("–§–∞–π–ª", file_path)
            event.acceptProposedAction()
        else:
            event.ignore()

    def _is_image_file(self, path):
        return any(path.lower().endswith(ext) for ext in [".png", ".jpg", ".jpeg", ".bmp", ".gif"])


    

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ CrewAI API"""
        text = self.input.toPlainText().strip()
        if not text:
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.append_message("–í—ã", text)
        self.input.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
        self.send_btn.setEnabled(False)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        self._waiting_message_id = f"msg_{int(time.time() * 1000)}"
        self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        processing_thread = threading.Thread(
            target=self._process_message_in_background,
            args=(text,),
            daemon=True
        )
        processing_thread.start()
        
    def _process_message_in_background(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
            context = ""
            if self.use_long_term_memory and hasattr(self, 'memory_manager'):
                context = self._get_rag_context(message)
                if context:
                    logger.info(f"[MEMORY] –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏: {context[:200]}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            prompt = message
            if context:
                prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n{context}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CrewAI API
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                history = []
                if hasattr(self, 'memory_manager') and self.memory_manager:
                    history = self.memory_manager.get_chat_history(
                        session_id=self.session_id,
                        limit=5  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API
                messages = [
                    {"role": "system", "content": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º."}
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                for msg in history:
                    role = "user" if msg.get("role") == "user" else "assistant"
                    messages.append({"role": role, "content": msg.get("content", "")})
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                messages.append({"role": "user", "content": message})
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CrewAI API
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º process_request
                user_message = messages[-1]["content"] if messages else message
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                message_data = {
                    "message": user_message,
                    "metadata": {
                        "session_id": self.session_id,
                        "chat_history": messages
                    }
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if context:
                    if isinstance(context, dict):
                        message_data["metadata"].update(context)
                    else:  # –ï—Å–ª–∏ context - —Å—Ç—Ä–æ–∫–∞
                        message_data["metadata"]["rag_context"] = context
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CrewAI API
                response = self.crew_ai_client.process_request(message_data)
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not response:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ CrewAI: {e}", exc_info=True)
                response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            import time
            time.sleep(0.5)
                
            self.response_ready.emit(response, False)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(error_msg, exc_info=True)
            self.response_ready.emit(error_msg, True)

    def append_message(self, author, text, **kwargs):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç–∏
        
        Args:
            author: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è (user/assistant)
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (timestamp, emotion –∏ —Ç.–¥.)
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        role = 'user' if author.lower() == 'user' else 'assistant'
        self.memory_manager.add_message(
            session_id=self.session_id,
            role=role,
            content=text,
            **kwargs
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        self.history.append(f"<b>{author}:</b> {text}")
        self._scroll_history_to_end()

    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç - —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏
            logger.info(f"üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {os.path.basename(file_path)} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path})")
            logger.info(f"–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {file_path}")

    def attach_image(self):
        image_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", filter="Images (*.png *.jpg *.jpeg *.bmp *.gif)")
        if image_path:
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç - —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(image_path)} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {image_path})")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {image_path}")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò (—Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≤–µ—Ç–∞–º –æ—Ç Minimax –∏ GenSpark)
    
    def get_debug_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞"""
        return {
            "crewai_client_available": self.crew_ai_client is not None,
            "crewai_server_available": self.crew_ai_client.is_available() if self.crew_ai_client else False,
            "send_button_enabled": self.send_btn.isEnabled(),
            "input_text_length": len(self.input.toPlainText()),
            "history_length": len(self.history.toPlainText())
        }
    
    def test_crewai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CrewAI API"""
        if not self.crew_ai_client:
            logger.error("‚ùå CrewAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
            
        if not self.crew_ai_client.is_available():
            logger.warning("‚ùå CrewAI API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            test_result = self.crew_ai_client.process_request("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            if isinstance(test_result, dict):
                # Check for structured error response
                if "error_message" in test_result:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {test_result['error_message']}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return False
                elif "response" in test_result:
                    logger.info("‚úÖ CrewAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {test_result}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {type(test_result)}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
    
    def test_timer_from_thread(self):
        """–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É QTimer.singleShot –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ QTimer –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
        
        def background_test():
            logger.info("üß™ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            time.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            
            def ui_update():
                logger.info("üéØ UI update –≤—ã–∑–≤–∞–Ω –∏–∑ QTimer!")
                self.append_message("–¢–µ—Å—Ç", "‚úÖ QTimer.singleShot —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞!")
            
            logger.info("üß™ –í—ã–∑—ã–≤–∞–µ–º QTimer.singleShot")
            QTimer.singleShot(0, ui_update)
            logger.info("üß™ QTimer.singleShot –≤—ã–∑–≤–∞–Ω")
        
        thread = threading.Thread(target=background_test)
        thread.daemon = True
        thread.start()
        
        self.append_message("–¢–µ—Å—Ç", "üß™ –¢–µ—Å—Ç QTimer –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    def clear_chat_context(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å)"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        self.session_id = f"session_{int(time.time())}"
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.history.clear()
        self.history.append("<b>–°–∏—Å—Ç–µ–º–∞:</b> –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω. –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è.")
        self.history.append("<b>–°–∏—Å—Ç–µ–º–∞:</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>Enter</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ <b>Shift+Enter</b> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.")
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'memory_manager') and self.memory_manager:
            try:
                # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ clear_session, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º clear_memory
                if hasattr(self.memory_manager, 'clear_session'):
                    self.memory_manager.clear_session(self.session_id)
                else:
                    self.memory_manager.clear_memory()
                logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –∏ —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏: {e}")
    
    def _load_chat_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏"""
        if not hasattr(self, 'memory_manager') or not self.memory_manager:
            return
            
        try:
            messages = self.memory_manager.get_chat_history(self.session_id)
            for msg in messages:
                role = msg.get('role', 'assistant')
                content = msg.get('content', '')
                if role == 'user':
                    self.append_message("User", content)
                else:
                    self.append_message("Assistant", content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")

    def show_context_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ ChatContext
            stats = self.chat_context.get_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ MemoryManager
            memory_stats = {}
            if RAG_AVAILABLE:
                try:
                    memory_stats = memory_manager.get_stats()
                except Exception as e:
                    memory_stats = {"error": str(e)}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:</b>\n"
            message += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {stats['total_messages']}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if 'total_tokens' in stats and 'max_tokens' in stats:
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}/{stats['max_tokens']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
            message += f"\n<b>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (txtai):</b>\n"
            
            if 'error' in memory_stats:
                message += f"–û—à–∏–±–∫–∞: {memory_stats['error']}\n"
            else:
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {memory_stats.get('total_messages', 0)}\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if 'total_sessions' in memory_stats:
                    message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {memory_stats['total_sessions']}\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                if 'embeddings_available' in memory_stats:
                    status = "–¥–æ—Å—Ç—É–ø–Ω—ã" if memory_stats['embeddings_available'] else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                    message += f"‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {status}\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
                if 'emotion_analyzer_available' in memory_stats:
                    status = "–¥–æ—Å—Ç—É–ø–µ–Ω" if memory_stats['emotion_analyzer_available'] else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π: {status}\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–∞–Ω–Ω—ã—Ö
                if 'data_dir' in memory_stats:
                    message += f"\n<b>–ö–∞—Ç–∞–ª–æ–≥ –¥–∞–Ω–Ω—ã—Ö:</b>\n{memory_stats['data_dir']}\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            QMessageBox.information(
                self,
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                message,
                QMessageBox.StandardButton.Ok
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}",
                QMessageBox.StandardButton.Ok
            )
            logger.info(f"Context stats displayed: {stats}")
    
    def _get_rag_context(self, query: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAG)
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.use_long_term_memory or not hasattr(self, 'memory_manager'):
            return ""
            
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
            results = self.memory_manager.search_memory(query, limit=3)
            
            if not results:
                return ""
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            context_parts = []
            for i, result in enumerate(results, 1):
                role = result.get('role', 'user')
                content = result.get('content', '')
                score = result.get('score', 0)
                
                # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(content) > 200:
                    content = content[:200] + "..."
                    
                context_parts.append(f"{i}. [{role.upper()}] {content} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f})")
            
            return "\n".join(context_parts)
            
        except Exception as e:
            logger.error(f"[RAG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–∞–º—è—Ç–∏: {e}", exc_info=True)
            return ""

    def _handle_browser_command(self, command: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä."""
        logger.info(f"üåê [BROWSER] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: '{command}'")
        
        try:
            logger.info(f"üåê [BROWSER] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç): '{command}'")
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç - –æ–Ω–∏ –æ—Ç–≤–ª–µ–∫–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info(f"üåê [BROWSER] –ü–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser_widget = self._get_embedded_browser()
            logger.info(f"üåê [BROWSER] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {browser_widget is not None}")
            
            if not browser_widget:
                logger.info(f"üåê [BROWSER] –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É...")
                try:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
                    browser_widget = self._create_browser_tab()
                    if not browser_widget:
                        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞."
                        logger.error(f"üåê [BROWSER] {error_msg}")
                        return error_msg
                    logger.info(f"üåê [BROWSER] ‚úÖ –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}"
                    logger.error(f"üåê [BROWSER] {error_msg}", exc_info=True)
                    return error_msg
            
            logger.info(f"üåê [BROWSER] –ù–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–µ—Ç–∞–ª–∏: {type(browser_widget)}")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(f"üåê [BROWSER] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            result = self._execute_browser_action(browser_widget, command)
            logger.info(f"üåê [BROWSER] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: '{result}'")
            
            logger.info(f"üåê [BROWSER] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥–∞—Ö): '{result}'")
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            
            logger.info(f"üåê [BROWSER] –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return result
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}"
            logger.error(f"üåê [BROWSER] {error_msg}", exc_info=True)
            return error_msg
    
    def _create_browser_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        logger.info(f"üÜï [CREATE_BROWSER] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        try:
            # –ò—â–µ–º tab_document —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            parent = self.parent()
            level = 0
            while parent and not hasattr(parent, 'tab_document'):
                level += 1
                logger.debug(f"üÜï [CREATE_BROWSER] –£—Ä–æ–≤–µ–Ω—å {level}: {type(parent).__name__}")
                parent = parent.parent()
                if level > 10:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    break
            
            if not parent or not hasattr(parent, 'tab_document'):
                logger.warning(f"üÜï [CREATE_BROWSER] –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç —Å tab_document")
                return None
            
            tab_document = parent.tab_document
            logger.info(f"üÜï [CREATE_BROWSER] –ù–∞–π–¥–µ–Ω tab_document: {type(tab_document)}")
            
            if not hasattr(tab_document, 'add_browser_tab'):
                logger.warning(f"üÜï [CREATE_BROWSER] tab_document –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_browser_tab")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
            logger.info(f"üÜï [CREATE_BROWSER] –í—ã–∑—ã–≤–∞–µ–º add_browser_tab...")
            browser_widget = tab_document.add_browser_tab()
            
            if browser_widget:
                logger.info(f"üÜï [CREATE_BROWSER] ‚úÖ –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç _execute_browser_action
                if hasattr(browser_widget, 'property'):
                    web_view = browser_widget.property('_web_view')
                    address_bar = browser_widget.property('_address_bar')
                    
                    if web_view:
                        result = {
                            'web_view': web_view,
                            'address_bar': address_bar,
                            'widget': browser_widget
                        }
                        logger.info(f"üÜï [CREATE_BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                        return result
                    else:
                        logger.warning(f"üÜï [CREATE_BROWSER] _web_view –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ")
                        return None
                else:
                    logger.warning(f"üÜï [CREATE_BROWSER] –°–æ–∑–¥–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞")
                    return None
            else:
                logger.warning(f"üÜï [CREATE_BROWSER] add_browser_tab –≤–µ—Ä–Ω—É–ª None")
                return None
                
        except Exception as e:
            logger.error(f"üÜï [CREATE_BROWSER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏: {e}", exc_info=True)
            return None
    
    def _get_embedded_browser(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        logger.info(f"üîç [GET_BROWSER] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞")
        
        try:
            # –ò—â–µ–º tab_document —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ _create_browser_tab)
            logger.info(f"üîç [GET_BROWSER] –ü–æ–∏—Å–∫ tab_document...")
            parent = self.parent()
            level = 0
            while parent and not hasattr(parent, 'tab_document'):
                level += 1
                logger.debug(f"üîç [GET_BROWSER] –£—Ä–æ–≤–µ–Ω—å {level}: {type(parent).__name__}")
                parent = parent.parent()
                if level > 10:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    break
            
            if not parent or not hasattr(parent, 'tab_document'):
                logger.warning(f"üîç [GET_BROWSER] –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ —Å tab_document –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            logger.info(f"üîç [GET_BROWSER] –ù–∞–π–¥–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ: {type(parent).__name__}")
            
            # –ü–æ–ª—É—á–∞–µ–º TabDocumentWidget
            tab_document = getattr(parent, 'tab_document', None)
            if not tab_document:
                logger.warning(f"üîç [GET_BROWSER] tab_document –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ")
                return None
            
            logger.info(f"üîç [GET_BROWSER] –ù–∞–π–¥–µ–Ω TabDocument: {type(tab_document).__name__}")
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
            if not hasattr(tab_document, 'tab_widget'):
                logger.warning(f"üîç [GET_BROWSER] tab_widget –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TabDocument")
                return None
                
            current_widget = tab_document.tab_widget.currentWidget()
            logger.info(f"üîç [GET_BROWSER] –¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞: {type(current_widget).__name__ if current_widget else 'None'}")
            
            if not current_widget:
                logger.warning(f"üîç [GET_BROWSER] –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π
            if hasattr(current_widget, 'property'):
                logger.info(f"üîç [GET_BROWSER] –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º _web_view")
                web_view = current_widget.property('_web_view')
                address_bar = current_widget.property('_address_bar')
                
                logger.info(f"üîç [GET_BROWSER] web_view –Ω–∞–π–¥–µ–Ω: {web_view is not None}")
                logger.info(f"üîç [GET_BROWSER] address_bar –Ω–∞–π–¥–µ–Ω: {address_bar is not None}")
                
                if web_view:
                    result = {
                        'web_view': web_view,
                        'address_bar': address_bar,
                        'widget': current_widget
                    }
                    logger.info(f"üîç [GET_BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!")
                    return result
                else:
                    logger.warning(f"üîç [GET_BROWSER] _web_view –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –≤–∫–ª–∞–¥–∫–∏")
            else:
                logger.warning(f"üîç [GET_BROWSER] –í–∫–ª–∞–¥–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ (method 'property' not found)")
            
            logger.warning(f"üîç [GET_BROWSER] –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"üîç [GET_BROWSER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}", exc_info=True)
            return None
    
    def _execute_browser_action(self, browser_widget, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã."""
        logger.info(f"‚ö° [EXECUTE_ACTION] –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: '{command}'")
        
        try:
            logger.info(f"‚ö° [EXECUTE_ACTION] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞...")
            web_view = browser_widget['web_view']
            address_bar = browser_widget['address_bar']
            
            logger.info(f"‚ö° [EXECUTE_ACTION] web_view: {type(web_view).__name__ if web_view else 'None'}")
            logger.info(f"‚ö° [EXECUTE_ACTION] address_bar: {type(address_bar).__name__ if address_bar else 'None'}")
            
            command_lower = command.lower()
            logger.info(f"‚ö° [EXECUTE_ACTION] –ö–æ–º–∞–Ω–¥–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: '{command_lower}'")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            if any(word in command_lower for word in ['–æ—Ç–∫—Ä–æ–π', '–æ—Ç–∫—Ä—ã—Ç—å', '–ø–µ—Ä–µ–π–¥–∏', '–ø–µ—Ä–µ–π—Ç–∏', '–∑–∞–π–¥–∏', '–∑–∞–π—Ç–∏']):
                url = self._extract_url_from_command(command)
                if url:
                    if address_bar:
                        address_bar.setText(url)
                    from PySide6.QtCore import QUrl
                    web_view.load(QUrl(url))
                    return f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ {url}"
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            elif any(word in command_lower for word in ['–æ–±–Ω–æ–≤–∏', '–æ–±–Ω–æ–≤–∏—Ç—å', '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏', '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å']):
                web_view.reload()
                return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
            # –ù–∞–∑–∞–¥
            elif any(word in command_lower for word in ['–Ω–∞–∑–∞–¥', 'back']):
                if web_view.history().canGoBack():
                    web_view.back()
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥"
                else:
                    return "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥"
            
            # –í–ø–µ—Ä–µ–¥
            elif any(word in command_lower for word in ['–≤–ø–µ—Ä–µ–¥', 'forward']):
                if web_view.history().canGoForward():
                    web_view.forward()
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥"
                else:
                    return "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä–µ–¥"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            elif any(word in command_lower for word in ['–∑–∞–≥–æ–ª–æ–≤–æ–∫', 'title', 'url', '–∞–¥—Ä–µ—Å']):
                current_url = web_view.url().toString()
                return f"–¢–µ–∫—É—â–∏–π URL: {current_url}"
            
            # –ü–æ–∏—Å–∫ Google
            elif 'google' in command_lower or '–ø–æ–∏—Å–∫' in command_lower:
                search_query = self._extract_search_from_command(command)
                if search_query:
                    google_url = f"https://google.com/search?q={search_query}"
                    if address_bar:
                        address_bar.setText(google_url)
                    web_view.load(QUrl(google_url))
                    return f"–ü–æ–∏—Å–∫ –≤ Google: {search_query}"
                else:
                    google_url = "https://google.com"
                    if address_bar:
                        address_bar.setText(google_url)
                    web_view.load(QUrl(google_url))
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google"
            
            else:
                # –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å browser-use
                return self._try_browser_use_command(command, web_view)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
    
    def _extract_url_from_command(self, command: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
        import re
        
        # –ü–æ–∏—Å–∫ URL –≤ –∫–æ–º–∞–Ω–¥–µ
        url_patterns = [
            r'https?://[^\s]+',  # –ü–æ–ª–Ω—ã–π URL
            r'www\.[^\s]+',      # www.example.com
            r'[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',  # example.com
        ]
        
        for pattern in url_patterns:
            match = re.search(pattern, command)
            if match:
                url = match.group(0)
                if not url.startswith(('http://', 'https://')):
                    url = 'https://' + url
                return url
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã
        sites_map = {
            'google': 'https://google.com',
            '–≥—É–≥–ª': 'https://google.com',
            'github': 'https://github.com',
            '–≥–∏—Ç—Ö–∞–±': 'https://github.com',
            'youtube': 'https://youtube.com',
            '—é—Ç—É–±': 'https://youtube.com',
        }
        
        command_lower = command.lower()
        for keyword, url in sites_map.items():
            if keyword in command_lower:
                return url
        
        return None
    
    def _extract_search_from_command(self, command: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = ['–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–ø–æ–∏—â–∏', 'google', '–≥—É–≥–ª', '–≤', '–Ω–∞']
        words = command.split()
        
        filtered_words = []
        for word in words:
            if word.lower() not in stop_words:
                filtered_words.append(word)
        
        return ' '.join(filtered_words)
    
    def _try_browser_use_command(self, command: str, web_view) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ browser-use –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å browser-use –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–ª–æ–∂–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
            
        except Exception as e:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {str(e)}"
