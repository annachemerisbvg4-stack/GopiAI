from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QFileDialog, QLabel, QSizePolicy, QMessageBox
from PySide6.QtCore import Qt, QMimeData, Slot, QMetaObject, QTimer, Signal
from PySide6.QtGui import QIcon, QDropEvent, QDragEnterEvent, QPixmap, QTextCursor
import threading
import sys
import os
import time
import traceback
import logging
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UniversalIconManager –¥–ª—è Lucide-–∏–∫–æ–Ω–æ–∫
from gopiai.ui.components.icon_file_system_model import UniversalIconManager
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
from .side_panel import SidePanelContainer

# –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ CrewAI API
from .crewai_client import CrewAIClient
# –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
from .chat_context import ChatContext

# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ GopiAI-App
    sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'GopiAI-App'))
    from gopiai.app.prompt.personality import PERSONALITY_SYSTEM_PROMPT
except ImportError:
    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    PERSONALITY_SYSTEM_PROMPT = "–í—ã - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GopiAI. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ –∏ —Ç–æ—á–Ω–æ."

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# –ü—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
import requests

def get_embedded_memory_context(query: str, max_results: int = 3) -> str:
    """Retrieve context from embedded memory system (SimpleMemoryManager).
    
    Args:
        query: The search query string
        max_results: Maximum number of context items to retrieve (default: 3)
        
    Returns:
        A string containing the retrieved context items, separated by newlines.
        Returns an empty string if memory system is unavailable or an error occurs.
    """
    try:
        from rag_memory_system import get_memory_manager
        
        # Get memory manager
        manager = get_memory_manager()
        
        # Search for relevant messages
        results = manager.search_memory(query, limit=max_results)
        
        if results:
            # Format results into context string
            context_items = []
            for result in results:
                content = result.get('content', '')
                # Include role information for better context
                role = result.get('role', 'unknown')
                if role == 'user':
                    context_items.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª: {content}")
                elif role == 'assistant':
                    context_items.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–Ω–µ–µ –æ—Ç–≤–µ—á–∞–ª: {content}")
                else:
                    context_items.append(content)
            
            return "\n\n".join(context_items)
        else:
            logger.debug(f"No memory results found for query: {query}")
            return ""
            
    except ImportError as e:
        logger.warning(f"Embedded memory system not available: {e}")
        return ""
    except Exception as e:
        logger.error(f"Unexpected error in get_embedded_memory_context: {e}")
        return ""

RAG_AVAILABLE = True  # –§—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
logger.info("‚úÖ RAG context function defined directly")




# DEBUG LOGGING PATCH - Enhanced for browser command debugging
import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create file handler for persistent logging
file_handler = logging.FileHandler('chat_debug.log', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)

print("üîß Enhanced DEBUG logging enabled for chat_widget.py (console + file)")
logger.info("=== Chat Widget Debug Session Started ===")


class ChatWidget(QWidget):
    # Qt signals for thread-safe communication
    response_ready = Signal(object, bool)  # response_data (str or dict), error_occurred
    browser_command_ready = Signal(str)  # browser_command
    def set_theme_manager(self, theme_manager):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º–æ–π (API —Å–æ–≤–º–µ—Å—Ç–∏–º —Å WebViewChatWidget)"""
        self.theme_manager = theme_manager
        self.apply_theme()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–µ–º—É –∫ —á–∞—Ç—É (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –≤—Å—ë –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è)"""
        pass


    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç-–≤–∏–¥–∂–µ—Ç –¥–ª—è GopiAI –Ω–∞ Qt —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã, –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏: "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "multiagent".
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("ChatWidget")
        self.setMinimumHeight(320)
        self.setAcceptDrops(True)
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(8, 8, 8, 8)
        self.main_layout.setSpacing(6)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CrewAIClient
        self.crew_ai_client = CrewAIClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.chat_context = ChatContext(max_messages=20, max_tokens=4000)
        
        # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAG)
        self.use_long_term_memory = True
        self.rag_context = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.history = QTextEdit(self)
        self.history.setReadOnly(True)
        self.history.setObjectName("ChatHistory")
        self.history.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.history.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.main_layout.addWidget(self.history)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        self.history.append("<b>–°–∏—Å—Ç–µ–º–∞:</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>Enter</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ <b>Shift+Enter</b> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.bottom_panel = QHBoxLayout()

        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input = QTextEdit(self)
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)")
        self.input.setObjectName("ChatInput")
        self.input.setFixedHeight(80)  # ~–≤ 10 —Ä–∞–∑ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ QLineEdit
        self.input.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        self.bottom_panel.addWidget(self.input, 1)

        # Lucide-–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ UniversalIconManager
        icon_mgr = UniversalIconManager.instance()
        self.attach_file_btn = QPushButton(icon_mgr.get_icon("paperclip"), "", self)
        self.attach_file_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attach_file_btn.clicked.connect(self.attach_file)
        self.bottom_panel.addWidget(self.attach_file_btn)

        self.attach_image_btn = QPushButton(icon_mgr.get_icon("image"), "", self)
        self.attach_image_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.attach_image_btn.clicked.connect(self.attach_image)
        self.bottom_panel.addWidget(self.attach_image_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.clear_context_btn = QPushButton(icon_mgr.get_icon("trash-2"), "", self)
        self.clear_context_btn.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞")
        self.clear_context_btn.clicked.connect(self.clear_chat_context)
        self.bottom_panel.addWidget(self.clear_context_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å)
        self.context_stats_btn = QPushButton(icon_mgr.get_icon("info"), "", self)
        self.context_stats_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        self.context_stats_btn.clicked.connect(self.show_context_stats)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
        self.side_panel_container = SidePanelContainer(parent=self)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        self.context_stats_btn.setText(" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        self.side_panel_container.add_button_to_panel(self.context_stats_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_btn = QPushButton(icon_mgr.get_icon("send"), "", self)
        self.send_btn.setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.send_btn.clicked.connect(self.send_message)
        self.bottom_panel.addWidget(self.send_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª—å—é
        self.main_layout.addWidget(self.side_panel_container)
        
        self.main_layout.addLayout(self.bottom_panel)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter (Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
        self.input.keyPressEvent = self._input_key_press_event

        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history.textChanged.connect(self._scroll_history_to_end)

        # Connect Qt signal for thread-safe communication
        self.response_ready.connect(self._handle_response_from_thread)
        self.browser_command_ready.connect(self._handle_browser_command_from_signal)

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.theme_manager = None
        self.apply_theme()
        
        # Check service availability after UI is fully initialized
        self._check_crewai_availability()

    @Slot(object, bool)
    def _handle_response_from_thread(self, response_data, error_occurred=False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ Qt signal
        
        Args:
            response_data: –û—Ç–≤–µ—Ç –æ—Ç CrewAI (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"[RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –¢–∏–ø: {type(response_data)}, –û—à–∏–±–∫–∞: {error_occurred}")
            logger.debug(f"[RESPONSE] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–∞—É–∑–µ—Ä–∞
            if isinstance(response_data, dict) and 'browser_command' in response_data:
                logger.info(f"[BROWSER] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                command = response_data['browser_command']
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                QTimer.singleShot(0, lambda: self._handle_browser_command(command))
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç CrewAI
            response_text = ""
            if isinstance(response_data, dict):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                response_text = response_data.get('response', str(response_data))
                # –ï—Å–ª–∏ response - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'response', –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Ç–∏–ø
                if isinstance(response_text, dict):
                    response_text = str(response_text)
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞)
                response_text = str(response_data)
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            if not response_text.strip():
                response_text = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            
            logger.info(f"[RESPONSE] –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            waiting_id = getattr(self, '_waiting_message_id', f"msg_{int(time.time() * 1000)}")
            logger.info(f"[RESPONSE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: {waiting_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            self._update_assistant_response(
                waiting_id,
                response_text,
                error_occurred
            )
            
            # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if hasattr(self, '_waiting_message_id'):
                del self._waiting_message_id
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
                if hasattr(self, '_waiting_message_id'):
                    self._update_assistant_response(self._waiting_message_id, error_msg, True)
                else:
                    self.append_message("–û—à–∏–±–∫–∞", error_msg)
            except Exception as inner_e:
                logger.error(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
        finally:
            # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.send_btn.setEnabled(True)
            self._scroll_history_to_end()

    def _input_key_press_event(self, event):
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Enter –±–µ–∑ Shift, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
            # Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
            if event.modifiers() & Qt.KeyboardModifier.ShiftModifier:
                QTextEdit.keyPressEvent(self.input, event)
            else:
                # –ü—Ä–æ—Å—Ç–æ–π Enter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message()
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            QTextEdit.keyPressEvent(self.input, event)

    @Slot(str, bool)
    def _handle_response_from_thread(self, response_data, error_occurred=False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ Qt signal
        
        Args:
            response_data: –û—Ç–≤–µ—Ç –æ—Ç CrewAI –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"üîÑ [SIGNAL_HANDLER] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {response_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–∞—É–∑–µ—Ä–∞
            if isinstance(response_data, dict) and "impl" in response_data and response_data["impl"] == "browser-use":
                command = response_data.get("command", "")
                logger.info(f"üåê [BROWSER-USE] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {command}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –±—Ä–∞—É–∑–µ—Ä
                self.browser_command_ready.emit(command)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                response_message = response_data.get("response", f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
                self._update_assistant_response(self._waiting_message_id, response_message, False)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            elif isinstance(response_data, str):
                self._update_assistant_response(self._waiting_message_id, response_data, error_occurred)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç CrewAI
            elif isinstance(response_data, dict):
                response_text = response_data.get("response", "")
                if not response_text and "error" in response_data:
                    response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response_data['error']}"
                    error_occurred = True
                self._update_assistant_response(self._waiting_message_id, response_text, error_occurred)
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            else:
                logger.error(f"‚ùå [SIGNAL_HANDLER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                self._update_assistant_response(
                    self._waiting_message_id,
                    "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    True
                )
                
        except Exception as e:
            logger.error(f"‚ùå [SIGNAL_HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            self._update_assistant_response(
                self._waiting_message_id,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                True
            )

    @Slot(str)
    def _handle_browser_command_from_signal(self, command):
        """Handles browser command from signal in main thread"""
        logger.info(f"üîÑ [SIGNAL_HANDLER] –ü–æ–ª—É—á–µ–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª: '{command}'")
        
        try:
            # Store the result in a shared location that background thread can access
            if not hasattr(self, '_browser_command_result'):
                self._browser_command_result = {}
            
            # Execute browser command
            result = self._handle_browser_command(command)
            
            # Store result with timestamp as key
            import time
            timestamp = str(int(time.time() * 1000))  # milliseconds for uniqueness
            self._browser_command_result[timestamp] = result
            
            logger.info(f"üîÑ [SIGNAL_HANDLER] –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–¥ –∫–ª—é—á–æ–º {timestamp}: '{result}'")
            
        except Exception as e:
            logger.error(f"üîÑ [SIGNAL_HANDLER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {str(e)}", exc_info=True)
            # Store error result
            import time
            timestamp = str(int(time.time() * 1000))
            self._browser_command_result[timestamp] = f"–û—à–∏–±–∫–∞: {str(e)}"

    def _scroll_history_to_end(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω–µ—Ü"""
        scrollbar = self.history.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def _check_crewai_availability(self):
        """Checks availability of CrewAI and RAG services, showing warnings if necessary."""
        try:
            crewai_available = self.crew_ai_client.is_available()
            if crewai_available:
                logger.info("‚úÖ CrewAI API server is available.")
            else:
                logger.warning("‚ö†Ô∏è CrewAI API server is unavailable.")
                QTimer.singleShot(3000, lambda: QMessageBox.warning(
                    self,
                    "CrewAI Unavailable",
                    "CrewAI API server is unavailable.\n\n"
                    "To fully utilize multi-agent mode, run:\n"
                    "GopiAI-CrewAI/run_crewai_api_server.bat"
                ))
        except Exception as e:
            logger.error(f"‚ùå Error checking CrewAI availability: {e}", exc_info=True)
            QTimer.singleShot(3000, lambda: QMessageBox.warning(
                self,
                "CrewAI Unavailable",
                f"Error connecting to CrewAI API server: {e}\n\n"
                "To fully utilize multi-agent mode, run:\n"
                "GopiAI-CrewAI/run_crewai_api_server.bat"
            ))

        # Check embedded memory system (SimpleMemoryManager)
        try:
            from rag_memory_system import get_memory_manager
            manager = get_memory_manager()
            stats = manager.get_stats()
            self.rag_available = stats.get('txtai_available', False)
            
            if self.rag_available:
                logger.info(f"‚úÖ Embedded memory system available. Stats: {stats}")
            else:
                logger.warning("‚ö†Ô∏è Embedded memory system initialized but txtai not available.")
                
        except Exception as e:
            logger.error(f"‚ùå Error initializing embedded memory system: {e}")
            self.rag_available = False
            
        # No warning message for embedded system - it should always work

    # Drag & Drop
    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if file_path:
                    if self._is_image_file(file_path):
                        self.append_message("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", file_path)
                    else:
                        self.append_message("–§–∞–π–ª", file_path)
            event.acceptProposedAction()
        else:
            event.ignore()

    def _is_image_file(self, path):
        return any(path.lower().endswith(ext) for ext in [".png", ".jpg", ".jpeg", ".bmp", ".gif"])


    

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ CrewAI API"""
        text = self.input.toPlainText().strip()
        if not text:
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.append_message("–í—ã", text)
        self.chat_context.add_user_message(text)
        self.input.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
        self.send_btn.setEnabled(False)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        self._waiting_message_id = f"msg_{int(time.time() * 1000)}"
        self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=self._process_message_in_background,
            args=(text,)
        )
        thread.daemon = True
        thread.start()
        
    def _process_message_in_background(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"[DEBUG] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message[:100]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            self.chat_context.add_user_message(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            chat_history = self.chat_context.get_context_for_api()
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            rag_context = ""
            if self.use_long_term_memory:
                rag_context = self._get_rag_context(message)
                if rag_context:
                    logger.info(f"[MEMORY] –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {len(rag_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            context = {
                'message': message,
                'chat_history': chat_history,
                'rag_context': rag_context
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CrewAI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            response = self.crew_ai_client.process_request(json.dumps(context))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if isinstance(response, dict):
                if response.get("impl") == "browser-use" and not response.get("response"):
                    response["response"] = f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {response.get('command', '')}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
                if 'response' in response:
                    self.chat_context.add_assistant_message(response['response'])
            
            logger.info(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: {str(response)[:200]}...")
            self.response_ready.emit(response, False)
            
        except Exception as e:
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            logger.error(f"[ERROR] {error_msg}", exc_info=True)
            error_response = {"response": error_msg, "error": str(e)}
            self.response_ready.emit(error_response, True)

    @Slot(str, str, bool)
    def _update_assistant_response(self, waiting_id, response, error_occurred=False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
        
        Args:
            waiting_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
            response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º
            error_occurred: –§–ª–∞–≥ –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            logger.info(f"[UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞. ID: {waiting_id}, –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}, –û—à–∏–±–∫–∞: {error_occurred}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ response - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            response_text = response
            if isinstance(response, dict):
                response_text = response.get("response", str(response))
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ response_text - —Å—Ç—Ä–æ–∫–∞
            if not isinstance(response_text, str):
                response_text = str(response_text)
            
            logger.debug(f"[UPDATE] –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
            
            # –°—Ç–∏–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–∫–∏
            if error_occurred:
                formatted_response = f"<span style='color: #d73027;'>{response_text}</span>"
            else:
                formatted_response = response_text
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HTML
            current_html = self.history.toHtml()
            logger.debug(f"[UPDATE] –¢–µ–∫—É—â–∏–π HTML —Å–æ–¥–µ—Ä–∂–∏—Ç {len(current_html)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_patterns = [
                f"id='{waiting_id}'",
                f'id="{waiting_id}"',
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
            ]
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            replaced = False
            
            for pattern in waiting_patterns:
                if pattern in current_html:
                    logger.info(f"[UPDATE] –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ ID, –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å span
                    if 'id=' in pattern:
                        import re
                        span_pattern = f'<span[^>]*id=["\']{waiting_id}["\'][^>]*>.*?</span>'
                        updated_html = re.sub(span_pattern, formatted_response, current_html, flags=re.DOTALL)
                    else:
                        # –ò–Ω–∞—á–µ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                        updated_html = current_html.replace("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", formatted_response)
                    
                    if updated_html != current_html:
                        logger.debug("[UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —á–∞—Ç–∞...")
                        self.history.setHtml(updated_html)
                        logger.info("[UPDATE] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        replaced = True
                        break
            
            if not replaced:
                logger.warning("[UPDATE] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", response_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if not error_occurred and hasattr(self, 'chat_context'):
                self.chat_context.add_assistant_message(response_text)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            self._scroll_history_to_end()
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            try:
                # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}" if not error_occurred else str(response)
                self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", error_msg)
            except Exception as inner_e:
                logger.error(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
        finally:
            # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.send_btn.setEnabled(True)


    def append_message(self, author, text):
        logger.info(f"append_message: author={author}, text_len={len(text)}")
        self.history.append(f"<b>{author}:</b> {text}")
        self.history.repaint()


    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç - —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏
            logger.info(f"üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {os.path.basename(file_path)} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path})")
            logger.info(f"–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {file_path}")


    def attach_image(self):
        image_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", filter="Images (*.png *.jpg *.jpeg *.bmp *.gif)")
        if image_path:
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç - —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(image_path)} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {image_path})")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {image_path}")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò (—Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≤–µ—Ç–∞–º –æ—Ç Minimax –∏ GenSpark)
    
    def get_debug_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞"""
        return {
            "crewai_client_available": self.crew_ai_client is not None,
            "crewai_server_available": self.crew_ai_client.is_available() if self.crew_ai_client else False,
            "send_button_enabled": self.send_btn.isEnabled(),
            "input_text_length": len(self.input.toPlainText()),
            "history_length": len(self.history.toPlainText())
        }
    
    def test_crewai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CrewAI API"""
        if not self.crew_ai_client:
            logger.error("‚ùå CrewAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
            
        if not self.crew_ai_client.is_available():
            logger.warning("‚ùå CrewAI API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            test_result = self.crew_ai_client.process_request("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            if isinstance(test_result, dict):
                # Check for structured error response
                if "error_message" in test_result:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {test_result['error_message']}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return False
                elif "response" in test_result:
                    logger.info("‚úÖ CrewAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {test_result}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {type(test_result)}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}")  # –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
            return False
    
    def test_timer_from_thread(self):
        """–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É QTimer.singleShot –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ QTimer –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
        
        def background_test():
            logger.info("üß™ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            time.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            
            def ui_update():
                logger.info("üéØ UI update –≤—ã–∑–≤–∞–Ω –∏–∑ QTimer!")
                self.append_message("–¢–µ—Å—Ç", "‚úÖ QTimer.singleShot —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞!")
            
            logger.info("üß™ –í—ã–∑—ã–≤–∞–µ–º QTimer.singleShot")
            QTimer.singleShot(0, ui_update)
            logger.info("üß™ QTimer.singleShot –≤—ã–∑–≤–∞–Ω")
        
        thread = threading.Thread(target=background_test)
        thread.daemon = True
        thread.start()
        
        self.append_message("–¢–µ—Å—Ç", "üß™ –¢–µ—Å—Ç QTimer –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    def clear_chat_context(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å)"""
        stats_before = self.chat_context.get_stats()
        self.chat_context.clear()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        self._save_chat_history()
        
        self.append_message("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
            f"üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å —è –Ω–∞—á–∏–Ω–∞—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
        
        logger.info(f"Chat context cleared. Previous stats: {stats_before}")
    
    def _save_chat_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            if not hasattr(self, 'chat_context') or not self.chat_context.messages:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages = [msg.to_dict() for msg in self.chat_context.messages]
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
            logger.info(f"[MEMORY] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}", exc_info=True)
    
    def show_context_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞"""
        stats = self.chat_context.get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        rag_status = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if self.use_long_term_memory else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
        rag_info = f"‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (RAG): {rag_status}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Å–æ–æ–±—â–µ–Ω–∏–π
        context_preview = ""
        if stats['message_count'] > 0:
            last_messages = self.chat_context.get_last_messages(2)
            preview_parts = []
            for msg in last_messages:
                role_display = "–í—ã" if msg.role == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                content_preview = msg.content[:50] + "..." if len(msg.content) > 50 else msg.content
                preview_parts.append(f"- {role_display}: {content_preview}")
            context_preview = "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(preview_parts)
        
        self.append_message("–°–∏—Å—Ç–µ–º–∞", 
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']}/{stats['max_messages']}\n"
            f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {stats['total_characters']}\n"
            f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['estimated_tokens']}/{stats['max_tokens']}\n"
            f"{rag_info}"
            + context_preview)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if RAG_AVAILABLE and self.use_long_term_memory:
            try:
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG
                sample_query = "—Ç–µ—Å—Ç"
                rag_context = self._get_rag_context(sample_query)
                if rag_context:
                    self.append_message("–°–∏—Å—Ç–µ–º–∞",
                        f"‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∞. "
                        f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {len(rag_context)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
                    )
                else:
                    self.append_message("–°–∏—Å—Ç–µ–º–∞",
                        "‚ö†Ô∏è –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
                        "–í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RAG: {e}", exc_info=True)
                self.append_message("–°–∏—Å—Ç–µ–º–∞",
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {str(e)}"
                )
        
        logger.info(f"Context stats displayed: {stats}")
    
    def _get_rag_context(self, query: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAG)
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG
            if not RAG_AVAILABLE:
                logger.warning("[RAG] RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏.")
                return ""
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
            rag_context = get_embedded_memory_context(query, max_results=3)
            
            if rag_context and rag_context.strip():
                logger.info(f"[RAG] –ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(rag_context)} —Å–∏–º–≤–æ–ª–æ–≤")
                return rag_context
                
            logger.info("[RAG] –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""
            
        except Exception as e:
            logger.error(f"[RAG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            return ""

    def _handle_browser_command(self, command: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä."""
        logger.info(f"üåê [BROWSER] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: '{command}'")
        
        try:
            logger.info(f"üåê [BROWSER] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç): '{command}'")
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç - –æ–Ω–∏ –æ—Ç–≤–ª–µ–∫–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info(f"üåê [BROWSER] –ü–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser_widget = self._get_embedded_browser()
            logger.info(f"üåê [BROWSER] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {browser_widget is not None}")
            
            if not browser_widget:
                logger.info(f"üåê [BROWSER] –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É...")
                try:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
                    browser_widget = self._create_browser_tab()
                    if not browser_widget:
                        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞."
                        logger.error(f"üåê [BROWSER] {error_msg}")
                        return error_msg
                    logger.info(f"üåê [BROWSER] ‚úÖ –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}"
                    logger.error(f"üåê [BROWSER] {error_msg}", exc_info=True)
                    return error_msg
            
            logger.info(f"üåê [BROWSER] –ù–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–µ—Ç–∞–ª–∏: {type(browser_widget)}")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(f"üåê [BROWSER] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            result = self._execute_browser_action(browser_widget, command)
            logger.info(f"üåê [BROWSER] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: '{result}'")
            
            logger.info(f"üåê [BROWSER] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥–∞—Ö): '{result}'")
            # –ù–ï –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            
            logger.info(f"üåê [BROWSER] –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return result
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}"
            logger.error(f"üåê [BROWSER] {error_msg}", exc_info=True)
            return error_msg
    
    def _create_browser_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        logger.info(f"üÜï [CREATE_BROWSER] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        try:
            # –ò—â–µ–º tab_document —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            parent = self.parent()
            level = 0
            while parent and not hasattr(parent, 'tab_document'):
                level += 1
                logger.debug(f"üÜï [CREATE_BROWSER] –£—Ä–æ–≤–µ–Ω—å {level}: {type(parent).__name__}")
                parent = parent.parent()
                if level > 10:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    break
            
            if not parent or not hasattr(parent, 'tab_document'):
                logger.warning(f"üÜï [CREATE_BROWSER] –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç —Å tab_document")
                return None
            
            tab_document = parent.tab_document
            logger.info(f"üÜï [CREATE_BROWSER] –ù–∞–π–¥–µ–Ω tab_document: {type(tab_document)}")
            
            if not hasattr(tab_document, 'add_browser_tab'):
                logger.warning(f"üÜï [CREATE_BROWSER] tab_document –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_browser_tab")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
            logger.info(f"üÜï [CREATE_BROWSER] –í—ã–∑—ã–≤–∞–µ–º add_browser_tab...")
            browser_widget = tab_document.add_browser_tab()
            
            if browser_widget:
                logger.info(f"üÜï [CREATE_BROWSER] ‚úÖ –í–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç _execute_browser_action
                if hasattr(browser_widget, 'property'):
                    web_view = browser_widget.property('_web_view')
                    address_bar = browser_widget.property('_address_bar')
                    
                    if web_view:
                        result = {
                            'web_view': web_view,
                            'address_bar': address_bar,
                            'widget': browser_widget
                        }
                        logger.info(f"üÜï [CREATE_BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                        return result
                    else:
                        logger.warning(f"üÜï [CREATE_BROWSER] _web_view –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ")
                        return None
                else:
                    logger.warning(f"üÜï [CREATE_BROWSER] –°–æ–∑–¥–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞")
                    return None
            else:
                logger.warning(f"üÜï [CREATE_BROWSER] add_browser_tab –≤–µ—Ä–Ω—É–ª None")
                return None
                
        except Exception as e:
            logger.error(f"üÜï [CREATE_BROWSER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏: {e}", exc_info=True)
            return None
    
    def _get_embedded_browser(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        logger.info(f"üîç [GET_BROWSER] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞")
        
        try:
            # –ò—â–µ–º tab_document —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ _create_browser_tab)
            logger.info(f"üîç [GET_BROWSER] –ü–æ–∏—Å–∫ tab_document...")
            parent = self.parent()
            level = 0
            while parent and not hasattr(parent, 'tab_document'):
                level += 1
                logger.debug(f"üîç [GET_BROWSER] –£—Ä–æ–≤–µ–Ω—å {level}: {type(parent).__name__}")
                parent = parent.parent()
                if level > 10:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    break
            
            if not parent or not hasattr(parent, 'tab_document'):
                logger.warning(f"üîç [GET_BROWSER] –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ —Å tab_document –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            logger.info(f"üîç [GET_BROWSER] –ù–∞–π–¥–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ: {type(parent).__name__}")
            
            # –ü–æ–ª—É—á–∞–µ–º TabDocumentWidget
            tab_document = getattr(parent, 'tab_document', None)
            if not tab_document:
                logger.warning(f"üîç [GET_BROWSER] tab_document –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ")
                return None
            
            logger.info(f"üîç [GET_BROWSER] –ù–∞–π–¥–µ–Ω TabDocument: {type(tab_document).__name__}")
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
            if not hasattr(tab_document, 'tab_widget'):
                logger.warning(f"üîç [GET_BROWSER] tab_widget –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TabDocument")
                return None
                
            current_widget = tab_document.tab_widget.currentWidget()
            logger.info(f"üîç [GET_BROWSER] –¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞: {type(current_widget).__name__ if current_widget else 'None'}")
            
            if not current_widget:
                logger.warning(f"üîç [GET_BROWSER] –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π
            if hasattr(current_widget, 'property'):
                logger.info(f"üîç [GET_BROWSER] –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º _web_view")
                web_view = current_widget.property('_web_view')
                address_bar = current_widget.property('_address_bar')
                
                logger.info(f"üîç [GET_BROWSER] web_view –Ω–∞–π–¥–µ–Ω: {web_view is not None}")
                logger.info(f"üîç [GET_BROWSER] address_bar –Ω–∞–π–¥–µ–Ω: {address_bar is not None}")
                
                if web_view:
                    result = {
                        'web_view': web_view,
                        'address_bar': address_bar,
                        'widget': current_widget
                    }
                    logger.info(f"üîç [GET_BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!")
                    return result
                else:
                    logger.warning(f"üîç [GET_BROWSER] _web_view –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –≤–∫–ª–∞–¥–∫–∏")
            else:
                logger.warning(f"üîç [GET_BROWSER] –í–∫–ª–∞–¥–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ (method 'property' not found)")
            
            logger.warning(f"üîç [GET_BROWSER] –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"üîç [GET_BROWSER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}", exc_info=True)
            return None
    
    def _execute_browser_action(self, browser_widget, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã."""
        logger.info(f"‚ö° [EXECUTE_ACTION] –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: '{command}'")
        
        try:
            logger.info(f"‚ö° [EXECUTE_ACTION] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞...")
            web_view = browser_widget['web_view']
            address_bar = browser_widget['address_bar']
            
            logger.info(f"‚ö° [EXECUTE_ACTION] web_view: {type(web_view).__name__ if web_view else 'None'}")
            logger.info(f"‚ö° [EXECUTE_ACTION] address_bar: {type(address_bar).__name__ if address_bar else 'None'}")
            
            command_lower = command.lower()
            logger.info(f"‚ö° [EXECUTE_ACTION] –ö–æ–º–∞–Ω–¥–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: '{command_lower}'")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            if any(word in command_lower for word in ['–æ—Ç–∫—Ä–æ–π', '–æ—Ç–∫—Ä—ã—Ç—å', '–ø–µ—Ä–µ–π–¥–∏', '–ø–µ—Ä–µ–π—Ç–∏', '–∑–∞–π–¥–∏', '–∑–∞–π—Ç–∏']):
                url = self._extract_url_from_command(command)
                if url:
                    if address_bar:
                        address_bar.setText(url)
                    from PySide6.QtCore import QUrl
                    web_view.load(QUrl(url))
                    return f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ {url}"
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            elif any(word in command_lower for word in ['–æ–±–Ω–æ–≤–∏', '–æ–±–Ω–æ–≤–∏—Ç—å', '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏', '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å']):
                web_view.reload()
                return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
            # –ù–∞–∑–∞–¥
            elif any(word in command_lower for word in ['–Ω–∞–∑–∞–¥', 'back']):
                if web_view.history().canGoBack():
                    web_view.back()
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥"
                else:
                    return "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥"
            
            # –í–ø–µ—Ä–µ–¥
            elif any(word in command_lower for word in ['–≤–ø–µ—Ä–µ–¥', 'forward']):
                if web_view.history().canGoForward():
                    web_view.forward()
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥"
                else:
                    return "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä–µ–¥"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            elif any(word in command_lower for word in ['–∑–∞–≥–æ–ª–æ–≤–æ–∫', 'title', 'url', '–∞–¥—Ä–µ—Å']):
                current_url = web_view.url().toString()
                return f"–¢–µ–∫—É—â–∏–π URL: {current_url}"
            
            # –ü–æ–∏—Å–∫ Google
            elif 'google' in command_lower or '–ø–æ–∏—Å–∫' in command_lower:
                search_query = self._extract_search_from_command(command)
                if search_query:
                    google_url = f"https://google.com/search?q={search_query}"
                    if address_bar:
                        address_bar.setText(google_url)
                    web_view.load(QUrl(google_url))
                    return f"–ü–æ–∏—Å–∫ –≤ Google: {search_query}"
                else:
                    google_url = "https://google.com"
                    if address_bar:
                        address_bar.setText(google_url)
                    web_view.load(QUrl(google_url))
                    return "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google"
            
            else:
                # –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å browser-use
                return self._try_browser_use_command(command, web_view)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
    
    def _extract_url_from_command(self, command: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
        import re
        
        # –ü–æ–∏—Å–∫ URL –≤ –∫–æ–º–∞–Ω–¥–µ
        url_patterns = [
            r'https?://[^\s]+',  # –ü–æ–ª–Ω—ã–π URL
            r'www\.[^\s]+',      # www.example.com
            r'[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',  # example.com
        ]
        
        for pattern in url_patterns:
            match = re.search(pattern, command)
            if match:
                url = match.group(0)
                if not url.startswith(('http://', 'https://')):
                    url = 'https://' + url
                return url
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã
        sites_map = {
            'google': 'https://google.com',
            '–≥—É–≥–ª': 'https://google.com',
            'github': 'https://github.com',
            '–≥–∏—Ç—Ö–∞–±': 'https://github.com',
            'youtube': 'https://youtube.com',
            '—é—Ç—É–±': 'https://youtube.com',
        }
        
        command_lower = command.lower()
        for keyword, url in sites_map.items():
            if keyword in command_lower:
                return url
        
        return None
    
    def _extract_search_from_command(self, command: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = ['–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–ø–æ–∏—â–∏', 'google', '–≥—É–≥–ª', '–≤', '–Ω–∞']
        words = command.split()
        
        filtered_words = []
        for word in words:
            if word.lower() not in stop_words:
                filtered_words.append(word)
        
        return ' '.join(filtered_words)
    
    def _try_browser_use_command(self, command: str, web_view) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ browser-use –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å browser-use –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–ª–æ–∂–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
            
        except Exception as e:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {str(e)}"
