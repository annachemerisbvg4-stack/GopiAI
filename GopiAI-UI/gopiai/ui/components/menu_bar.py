"""
Menu Bar Component –¥–ª—è GopiAI Standalone Interface
============================================

–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

from PySide6.QtWidgets import QMenuBar, QMenu
from PySide6.QtCore import Signal
from PySide6.QtGui import QIcon
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫
try:
    from .icon_file_system_model import UniversalIconManager as AutoIconSystem
except ImportError:
    AutoIconSystem = None


class StandaloneMenuBar(QMenuBar):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω—é
    newFileRequested = Signal()
    openFileRequested = Signal()
    openFolderRequested = Signal()
    saveRequested = Signal()
    saveAsRequested = Signal()
    exitRequested = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã –º–µ–Ω—é –≤–∏–¥–∞
    openTextEditorRequested = Signal()
    openChatRequested = Signal()
    openBrowserRequested = Signal()
    openTerminalRequested = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    toggleProductivityExtension = Signal()
    toggleVoiceExtension = Signal()
    toggleAiToolsExtension = Signal()
    
    # –°–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    openSettingsRequested = Signal()
    changeThemeRequested = Signal(str)  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã

    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–∫–æ–Ω–æ–∫
        self._setup_icon_system()
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é
        self._build_menu()

    def _setup_icon_system(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫"""
        if AutoIconSystem:
            self.icon_system = AutoIconSystem()
        else:
            # Fallback - –ø—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫
            self.icon_system = self._create_simple_icon_manager()

    def _create_simple_icon_manager(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∫–æ–Ω–æ–∫ –∫–∞–∫ fallback"""
        class SimpleIconManager:
            def __init__(self):
                self.icons_path = Path(__file__).parent.parent / "assets" / "icons" / "lucide"
                self._icon_cache = {}
                
            def get_icon(self, icon_name: str):
                """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏"""
                if icon_name in self._icon_cache:
                    return self._icon_cache[icon_name]
                
                svg_path = self.icons_path / f"{icon_name}.svg"
                print(f"üîç –ò—â–µ–º –∏–∫–æ–Ω–∫—É: {svg_path}")
                if svg_path.exists():
                    icon = QIcon(str(svg_path))
                    self._icon_cache[icon_name] = icon
                    print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {icon_name}")
                    return icon
                else:
                    print(f"‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {svg_path}")
                
                return QIcon()  # –ü—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞
            
            def get_icon_for_action_name(self, action_name: str):
                """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
                # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–º—è –∏–∫–æ–Ω–∫–∏
                icon_name = action_name.replace('_action', '')
                return self.get_icon(icon_name)
                
        return SimpleIconManager()

    def _build_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é"""
        # –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
        file_menu = self.addMenu("–§–∞–π–ª")
        self._setup_file_menu(file_menu)
        
        # –ú–µ–Ω—é –ø—Ä–∞–≤–∫–∏
        edit_menu = self.addMenu("–ü—Ä–∞–≤–∫–∞")
        self._setup_edit_menu(edit_menu)
        
        # –ú–µ–Ω—é –≤–∏–¥–∞
        view_menu = self.addMenu("–í–∏–¥")
        self._setup_view_menu(view_menu)
        
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_menu = self.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self._setup_settings_menu(settings_menu)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫
        self.file_menu = file_menu
        self.edit_menu = edit_menu
        self.view_menu = view_menu
        self.settings_menu = settings_menu
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –º–µ–Ω—é
        self._update_menu_icons()
        self._update_menu_bar_icons()

    def _setup_file_menu(self, file_menu):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        self.new_action = file_menu.addAction("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π")
        self.open_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        self.open_folder_action = file_menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        file_menu.addSeparator()
        self.save_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_as_action = file_menu.addAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫")
        file_menu.addSeparator()
        self.exit_action = file_menu.addAction("–í—ã—Ö–æ–¥")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.new_action.triggered.connect(self.newFileRequested.emit)
        self.open_action.triggered.connect(self.openFileRequested.emit)
        self.open_folder_action.triggered.connect(self.openFolderRequested.emit)
        self.save_action.triggered.connect(self.saveRequested.emit)
        self.save_as_action.triggered.connect(self.saveAsRequested.emit)
        self.exit_action.triggered.connect(self.exitRequested.emit)

    def _setup_edit_menu(self, edit_menu):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø—Ä–∞–≤–∫–∏"""
        self.undo_action = edit_menu.addAction("–û—Ç–º–µ–Ω–∞")
        self.redo_action = edit_menu.addAction("–ü–æ–≤—Ç–æ—Ä")
        edit_menu.addSeparator()
        self.cut_action = edit_menu.addAction("–í—ã—Ä–µ–∑–∞—Ç—å")
        self.copy_action = edit_menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        self.paste_action = edit_menu.addAction("–í—Å—Ç–∞–≤–∏—Ç—å")
        self.delete_action = edit_menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        edit_menu.addSeparator()
        self.select_all_action = edit_menu.addAction("–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë")

    def _setup_view_menu(self, view_menu):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –≤–∏–¥–∞ (–±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞)"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞)
        self.chat_action = view_menu.addAction("–ò–ò —á–∞—Ç")
        self.browser_action = view_menu.addAction("–ë—Ä–∞—É–∑–µ—Ä")
        self.terminal_action = view_menu.addAction("–¢–µ—Ä–º–∏–Ω–∞–ª")
        self.text_editor_action = view_menu.addAction("–†–µ–¥–∞–∫—Ç–æ—Ä")

        view_menu.addSeparator()

        # –ü–æ–¥–º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        extensions_menu = view_menu.addMenu("–†–∞—Å—à–∏—Ä–µ–Ω–∏—è")
        self.extensions_menu = extensions_menu  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏

        self.productivity_action = extensions_menu.addAction("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        self.voice_action = extensions_menu.addAction("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.ai_tools_action = extensions_menu.addAction("–ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

        # –î–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π checkable
        self.productivity_action.setCheckable(True)
        self.voice_action.setCheckable(True)
        self.ai_tools_action.setCheckable(True)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
        self.productivity_action.setChecked(True)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∏–¥–∞
        self.chat_action.triggered.connect(self.openChatRequested.emit)
        self.browser_action.triggered.connect(self.openBrowserRequested.emit)
        self.terminal_action.triggered.connect(self.openTerminalRequested.emit)
        self.text_editor_action.triggered.connect(self._on_text_editor_toggle)

    def _on_text_editor_toggle(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
        # –ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å tab_document
        main_window = self.parent()
        while main_window is not None and not hasattr(main_window, 'tab_document'):
            main_window = main_window.parent() if hasattr(main_window, 'parent') else None
        def show_frameless_message(parent, title, text):
            from PySide6.QtWidgets import QMessageBox
            from PySide6.QtCore import Qt
            box = QMessageBox(parent)
            box.setWindowTitle(title)
            box.setText(text)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º WindowType –¥–ª—è PySide6
            flags = box.windowFlags() | Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint
            box.setWindowFlags(flags)
            box.exec()

        if main_window is not None and hasattr(main_window, 'tab_document'):
            tab_document = getattr(main_window, 'tab_document', None)
            tab_widget = getattr(tab_document, 'tab_widget', None) if tab_document else None
            if tab_widget and tab_widget.count() > 0:
                # –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                visible = any(tab_widget.isTabVisible(i) if hasattr(tab_widget, 'isTabVisible') else tab_widget.widget(i).isVisible() for i in range(tab_widget.count()))
                for i in range(tab_widget.count()):
                    widget = tab_widget.widget(i)
                    widget.setVisible(not visible)
            else:
                show_frameless_message(self, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é '–§–∞–π–ª' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        else:
            show_frameless_message(self, "–ù–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", "–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ.")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        self.productivity_action.triggered.connect(self.toggleProductivityExtension.emit)
        self.voice_action.triggered.connect(self.toggleVoiceExtension.emit)
        self.ai_tools_action.triggered.connect(self.toggleAiToolsExtension.emit)

    def _setup_settings_menu(self, settings_menu):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_action = settings_menu.addAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.settings_action.triggered.connect(self.openSettingsRequested.emit)

    def _update_menu_icons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –≤ –º–µ–Ω—é"""
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –∫ –∏–∫–æ–Ω–∫–∞–º
        icon_mapping = {
            # –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
            'new_action': 'file-plus',
            'open_action': 'folder-open',
            'open_folder_action': 'folder-open',
            'save_action': 'save',
            'save_as_action': 'save-all',
            'exit_action': 'x',
            
            # –ú–µ–Ω—é –ø—Ä–∞–≤–∫–∏
            'undo_action': 'undo',
            'redo_action': 'redo',
            'cut_action': 'scissors',
            'copy_action': 'copy',
            'paste_action': 'clipboard',
            'delete_action': 'trash-2',
            'select_all_action': 'text-select',
            
            # –ú–µ–Ω—é –≤–∏–¥–∞
            'chat_action': 'message-circle',
            'browser_action': 'globe',
            'terminal_action': 'terminal',
            'text_editor_action': 'file-text',
            
            # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            'settings_action': 'settings',
            'change_theme_action': 'palette',
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
            'productivity_action': 'briefcase',
            'voice_action': 'mic',
            'ai_tools_action': 'cpu',
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
        for action_name, icon_name in icon_mapping.items():
            if hasattr(self, action_name):
                action = getattr(self, action_name)
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –º–µ—Ç–æ–¥–æ–º get_icon
                    if hasattr(self.icon_system, 'get_icon'):
                        icon = self.icon_system.get_icon(icon_name)
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø icon_system: {type(self.icon_system)}")
                        continue
                        
                    if not icon.isNull():
                        action.setIcon(icon)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è {action_name}: {e}")

    def _update_menu_bar_icons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Å–∞–º–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é (File, Edit, View, Settings)"""
        try:
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –º–µ–Ω—é
            menu_icons = {
                'file_menu': 'folder',
                'edit_menu': 'pencil',
                'view_menu': 'eye',
                'settings_menu': 'settings',
            }
            
            for menu_name, icon_name in menu_icons.items():
                if hasattr(self, menu_name):
                    menu = getattr(self, menu_name)
                    if hasattr(self.icon_system, 'get_icon'):
                        icon = self.icon_system.get_icon(icon_name)
                        if not icon.isNull():
                            menu.setIcon(icon)
            
            # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            if hasattr(self, 'extensions_menu') and hasattr(self.icon_system, 'get_icon'):
                extensions_icon = self.icon_system.get_icon('puzzle')
                if not extensions_icon.isNull():
                    self.extensions_menu.setIcon(extensions_icon)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫ –º–µ–Ω—é: {e}")

    def refresh_icons(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫ –≤ –º–µ–Ω—é"""
        self._update_menu_icons()
        self._update_menu_bar_icons()
        print("üîÑ –ò–∫–æ–Ω–∫–∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã")