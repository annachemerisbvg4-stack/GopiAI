"""
WebView Chat Widget –¥–ª—è GopiAI UI
===============================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç –≤–∏–¥–∂–µ—Ç —Å puter.js –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ GopiAI.
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π chat_widget.py –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—à–æ–≤–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ–º.
"""

from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QFrame
from PySide6.QtCore import Qt, Signal, QObject, Slot
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWebEngineCore import QWebEngineSettings, QWebEnginePage
from PySide6.QtWebChannel import QWebChannel
from pathlib import Path
import json

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
try:
    import sys
    webview_path = Path(__file__).parent.parent.parent.parent / "GopiAI-WebView"
    if webview_path.exists():
        sys.path.insert(0, str(webview_path))
    from gopiai.webview.chat_memory import create_memory_manager
    MEMORY_AVAILABLE = True
    print("‚úÖ Chat memory system imported successfully")
except ImportError as e:
    MEMORY_AVAILABLE = False
    print(f"‚ö†Ô∏è Chat memory system not available: {e}")


class PuterWebEnginePage(QWebEnginePage):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è pop-up –æ–∫–æ–Ω puter.js"""
    
    def createWindow(self, window_type):
        """–†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–∫–æ–Ω (pop-up) –¥–ª—è puter.js –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        new_page = PuterWebEnginePage(self.parent())
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        settings = new_page.settings()
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanOpenWindows, True)
        
        return new_page


class WebViewChatBridge(QObject):
    """Bridge –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É Python –∏ JavaScript"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    message_sent = Signal(str)
    ai_response_received = Signal(str, str)  # model, response
    model_changed = Signal(str)
    error_occurred = Signal(str)
    
    def __init__(self, parent=None):
            super().__init__(parent)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π WebViewChatWidget
            self._parent_widget = parent
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
            self._memory_manager = None
            if MEMORY_AVAILABLE:
                try:
                    self._memory_manager = create_memory_manager()
                    print("‚úÖ Memory system initialized in WebViewChatBridge")
                except Exception as e:
                    print(f"‚ö†Ô∏è Failed to initialize memory system: {e}")
                    self._memory_manager = None

    
    @Slot(str)
    def send_message(self, message: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç JavaScript"""
        print(f"üîÑ Bridge: received message from JS: {message[:50]}...")
        self.message_sent.emit(message)
    
    @Slot(str, str)
    def receive_ai_message(self, model: str, response: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò –æ—Ç JavaScript"""
        print(f"ü§ñ Bridge: received AI response from {model}: {response[:50]}...")
        self.ai_response_received.emit(model, response)
    
    @Slot(str)
    def change_model(self, model: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ò–ò"""
        print(f"üîß Bridge: model changed to {model}")
        self.model_changed.emit(model)
    
    @Slot(str)
    def log_error(self, error: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        print(f"‚ùå Bridge: error from JS: {error}")
        self.error_occurred.emit(error)
    
    @Slot()
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        print("üßπ Bridge: chat cleared")
    
    @Slot(result=str)
    def get_chat_history_json(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        print("üìú Bridge: chat history requested")
        return json.dumps([])
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
    
    @Slot(str, result=str)
    def enrich_message(self, message: str) -> str:
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫ –ò–ò.
        """
        if self._memory_manager:
            try:
                enriched = self._memory_manager.enrich_message(message)
                print(f"üß† Memory: enriched message ({len(message)} -> {len(enriched)} chars)")
                return enriched
            except Exception as e:
                print(f"‚ùå Memory enrichment error: {e}")
                return message
        return message

    @Slot(str, str, result=str)
    def save_chat_exchange(self, user_message: str, ai_response: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç—å.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò.
        """
        if self._memory_manager:
            try:
                success = self._memory_manager.save_chat_exchange(user_message, ai_response)
                status = "OK" if success else "ERROR"
                print(f"üíæ Memory: saved exchange ({status})")
                return status
            except Exception as e:
                print(f"‚ùå Memory save error: {e}")
                return "ERROR"
        return "OK"

    @Slot(result=str)
    def start_new_chat_session(self) -> str:
        """
        –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞.
        –û—á–∏—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é RAG —Å–µ—Å—Å–∏—é.
        """
        if self._memory_manager:
            try:
                self._memory_manager.start_new_session()
                print(f"üÜï Memory: new session {self._memory_manager.session_id}")
                return self._memory_manager.session_id
            except Exception as e:
                print(f"‚ùå New session error: {e}")
        return "default_session"

    @Slot(result=str)
    def get_memory_stats(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        if self._memory_manager:
            try:
                stats = self._memory_manager.get_memory_stats()
                return json.dumps(stats, ensure_ascii=False)
            except Exception as e:
                print(f"‚ùå Memory stats error: {e}")
        
        return json.dumps({
            "memory_available": False,
            "error": "Memory system not initialized"
        })

    @Slot(result=bool)
    def is_memory_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏."""
        return self._memory_manager is not None

    # ==============================================
    # BROWSER AUTOMATION METHODS
    # ==============================================

    @Slot(result=str)
    def get_browser_automation_capabilities(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö browser automation —Ñ—É–Ω–∫—Ü–∏–π"""
        capabilities = {
            "available": True,
            "functions": [
                "navigate", "click", "type", "screenshot", "get_text", 
                "get_source", "scroll", "wait", "execute_script"
            ],
            "engine": "QWebEngineView",
            "version": "1.0"
        }
        print("üåê Bridge: browser automation capabilities requested")
        return json.dumps(capabilities, ensure_ascii=False)

    @Slot(str, str, result=str)
    def execute_browser_action(self, action: str, params: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ browser automation –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            params_dict = json.loads(params) if params else {}
            print(f"ü§ñ Bridge: executing browser action '{action}' with params: {params_dict}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π WebViewChatWidget
            widget = self._parent_widget
            
            if not widget or not hasattr(widget, 'web_view'):
                raise Exception("WebView not available")
        
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if action == "navigate":
                url = params_dict.get("url", "")
                if url:
                    widget.web_view.setUrl(url)
                    result_data = {"message": f"Navigated to {url}"}
                else:
                    raise Exception("URL parameter required for navigate action")
                    
            elif action == "get_url":
                current_url = widget.web_view.page().url().toString()
                result_data = {"url": current_url}
                
            elif action == "get_title":
                title = widget.web_view.page().title()
                result_data = {"title": title}
                
            elif action == "reload":
                widget.web_view.reload()
                result_data = {"message": "Page reloaded"}
                
            elif action == "back":
                widget.web_view.back()
                result_data = {"message": "Navigated back"}
                
            elif action == "forward":
                widget.web_view.forward()
                result_data = {"message": "Navigated forward"}
                
            elif action == "execute_script":
                script = params_dict.get("script", "")
                if script:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤ WebView
                    widget.web_view.page().runJavaScript(script)
                    result_data = {"message": f"Script executed: {script[:50]}..."}
                else:
                    raise Exception("Script parameter required for execute_script action")
                    
            elif action == "screenshot":
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è screenshot
                result_data = {"message": "Screenshot functionality not implemented yet"}
                
            else:
                raise Exception(f"Unknown action: {action}")
            
            result = {
                "success": True,
                "action": action,
                "params": params_dict,
                "result": result_data,
                "timestamp": "2025-01-16T12:00:00Z"
            }
            
            return json.dumps(result, ensure_ascii=False)
            
        except Exception as e:
            error_result = {
                "success": False,
                "error": str(e),
                "action": action,
                "timestamp": "2025-01-16T12:00:00Z"
            }
            print(f"‚ùå Bridge: browser action error: {e}")
            return json.dumps(error_result, ensure_ascii=False)

    @Slot(result=str)
    def get_browser_page_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π WebViewChatWidget
            widget = self._parent_widget
            
            if widget and hasattr(widget, 'web_view') and widget.web_view.page():
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                page = widget.web_view.page()
                url = page.url().toString() if page.url() else "about:blank"
                title = page.title() if page.title() else "Untitled"
                
                page_info = {
                    "url": url,
                    "title": title,
                    "ready": True,
                    "loading": False,
                    "engine": "QWebEngineView",
                    "timestamp": "2025-01-16T12:00:00Z"
                }
            else:
                # –ï—Å–ª–∏ WebView –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                page_info = {
                    "url": "about:blank",
                    "title": "GopiAI Chat",
                    "ready": True,
                    "loading": False,
                    "engine": "QWebEngineView",
                    "timestamp": "2025-01-16T12:00:00Z"
                }
            
            print(f"üìÑ Bridge: page info - {page_info['title']} ({page_info['url']})")
            return json.dumps(page_info, ensure_ascii=False)
            
        except Exception as e:
            error_info = {
                "error": str(e),
                "url": "about:blank",
                "timestamp": "2025-01-16T12:00:00Z"
            }
            print(f"‚ùå Bridge: page info error: {e}")
            return json.dumps(error_info, ensure_ascii=False)

    @Slot(str, result=str)
    def browser_automation_result(self, result_data: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ browser automation"""
        try:
            result = json.loads(result_data)
            print(f"üìä Bridge: browser automation result received: {result}")
            return "OK"
        except Exception as e:
            print(f"‚ùå Bridge: result processing error: {e}")
            return f"ERROR: {e}"


class WebViewChatWidget(QWidget):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –≤–∏–¥–∂–µ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π puter.js –¥–ª—è GopiAI UI
    """
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    message_sent = Signal(str)
    response_received = Signal(str, str)  # model, response
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.bridge = WebViewChatBridge(self)
        self.theme_manager = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ
        
        self._setup_ui()
        self._setup_web_engine()
        self._setup_connections()
        self._load_chat_interface()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # WebView –¥–ª—è —á–∞—Ç–∞
        self.web_view = QWebEngineView(self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ layout
        layout.addWidget(self.web_view)
    
    def _setup_web_engine(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebEngine"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è pop-up –æ–∫–æ–Ω
        page = PuterWebEnginePage(self.web_view)
        self.web_view.setPage(page)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–¥–≤–∏–∂–∫–∞
        settings = self.web_view.settings()
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessRemoteUrls, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessFileUrls, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.AllowRunningInsecureContent, True)
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–∞–∑—Ä–µ—à–∞–µ–º pop-up –æ–∫–Ω–∞ –¥–ª—è puter.js –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanOpenWindows, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.AllowWindowActivationFromJavaScript, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebChannel –¥–ª—è —Å–≤—è–∑–∏ —Å JavaScript
        self.channel = QWebChannel()
        self.channel.registerObject("bridge", self.bridge)
        page.setWebChannel(self.channel)
    
    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç bridge
        self.bridge.message_sent.connect(self.message_sent.emit)
        self.bridge.ai_response_received.connect(self.response_received.emit)
    
    def _load_chat_interface(self):
            """–ó–∞–≥—Ä—É–∑–∫–∞ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
            # –ù–∞–π–¥–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è GopiAI-UI –∏ GopiAI-WebView)
            current_file = Path(__file__).resolve()
            root_path = current_file
            
            # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –¥–µ—Ä–µ–≤—É –ø–∞–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º GopiAI-WebView
            while root_path.parent != root_path:
                if (root_path / 'GopiAI-WebView').exists():
                    break
                root_path = root_path.parent
            
            assets_path = root_path / "GopiAI-WebView" / "gopiai" / "webview" / "assets"
            html_path = assets_path / "chat.html"
            
            print(f"üîç Checking HTML path: {html_path}")
            print(f"üîç HTML exists: {html_path.exists()}")
            
            if html_path.exists():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Ñ–∞–π–ª
                file_url = html_path.as_uri()
                print(f"üìÅ Loading main HTML from: {file_url}")
                self.web_view.load(file_url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
                self.web_view.loadFinished.connect(self._on_page_loaded)
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π HTML
                print("‚ö†Ô∏è Main HTML not found, using fallback")
                self._create_fallback_html()


    
    def _on_page_loaded(self, success):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if success:
            print("WebView page loaded successfully")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if self.theme_manager:
                self._apply_theme_to_webview()
        else:
            print("WebView page failed to load")
    
    def _create_fallback_html(self):
            """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–º—è—Ç–∏"""
            html_content = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>GopiAI Chat with Memory</title>
                <script src="https://js.puter.com/v2/"></script>
                <script src="qrc:///qtwebchannel/qwebchannel.js"></script>
                <style>
                    body {
                        margin: 0;
                        padding: 20px;
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: var(--chat-bg, #1e1e1e);
                        color: var(--chat-text, #ffffff);
                    }
                    .chat-container {
                        max-width: 800px;
                        margin: 0 auto;
                        height: 100vh;
                        display: flex;
                        flex-direction: column;
                    }
                    .memory-status {
                        padding: 8px 12px;
                        margin-bottom: 10px;
                        border-radius: 4px;
                        font-size: 12px;
                        background: var(--chat-ai-bg, #404040);
                        border-left: 3px solid var(--accent-primary, #0078d4);
                    }
                    .memory-available {
                        border-left-color: #00cc66;
                    }
                    .memory-unavailable {
                        border-left-color: #ff4444;
                    }
                    .messages-container {
                        flex: 1;
                        overflow-y: auto;
                        padding: 10px;
                        margin-bottom: 10px;
                        border: 1px solid var(--chat-border, #333);
                        border-radius: 8px;
                        background: var(--chat-messages-bg, #2d2d2d);
                    }
                    .message {
                        margin-bottom: 15px;
                        padding: 10px;
                        border-radius: 8px;
                        max-width: 80%;
                        word-wrap: break-word;
                    }
                    .user-message {
                        background: var(--chat-user-bg, #0078d4);
                        margin-left: auto;
                        text-align: right;
                        color: var(--user-message-text, #ffffff);
                    }
                    .ai-message {
                        background: var(--chat-ai-bg, #404040);
                        color: var(--ai-message-text, #ffffff);
                    }
                    .memory-enhanced {
                        border-left: 3px solid #00cc66;
                        background: var(--chat-ai-bg, #404040);
                        font-style: italic;
                        opacity: 0.8;
                        margin-bottom: 5px;
                        padding: 8px;
                        font-size: 11px;
                    }
                    .input-container {
                        display: flex;
                        gap: 10px;
                        align-items: center;
                    }
                    #message-input {
                        flex: 1;
                        padding: 10px;
                        border: 1px solid var(--chat-border, #333);
                        border-radius: 4px;
                        background: var(--chat-input-bg, #2d2d2d);
                        color: var(--chat-text, #ffffff);
                    }
                    #send-btn {
                        padding: 10px 20px;
                        background: var(--chat-btn-bg, #0078d4);
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                    }
                    #send-btn:hover {
                        background: var(--chat-btn-hover, #106ebe);
                    }
                    #send-btn:disabled {
                        background: #555;
                        cursor: not-allowed;
                    }
                    .typing-indicator {
                        display: none;
                        font-style: italic;
                        color: var(--text-muted, #888);
                        padding: 5px 10px;
                    }
                    .typing-indicator.active {
                        display: block;
                    }
                </style>
            </head>
            <body>
                <div class="chat-container">
                    <div id="memory-status" class="memory-status memory-unavailable">
                        üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...
                    </div>
                    
                    <div id="messages-container" class="messages-container">
                        <div class="message ai-message">
                            ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GopiAI Chat! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ puter.js –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º.
                            <br><br>
                            üí° <strong>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</strong> –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –ø–∞–º—è—Ç—å! –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –º–æ–≥—É —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
                        </div>
                    </div>
                    
                    <div class="typing-indicator" id="typing-indicator">
                        –ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...
                    </div>
                    
                    <div class="input-container">
                        <input type="text" id="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">
                        <button id="send-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </div>
                
                <script>
                    let bridge = null;
                    let currentModel = 'claude-sonnet-4';
                    let memoryAvailable = false;
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebChannel
                    if (typeof QWebChannel !== 'undefined' && typeof qt !== 'undefined') {
                        try {
                            new QWebChannel(qt.webChannelTransport, (channel) => {
                                bridge = channel.objects.bridge;
                                console.log('üîó WebChannel bridge connected:', bridge);
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
                                checkMemoryAvailability();
                            });
                        } catch (error) {
                            console.error('‚ùå Error initializing WebChannel:', error);
                        }
                    } else {
                        console.warn('‚ö†Ô∏è QWebChannel or qt not available');
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
                    async function checkMemoryAvailability() {
                        if (bridge && typeof bridge.is_memory_available === 'function') {
                            try {
                                bridge.is_memory_available((available) => {
                                    memoryAvailable = available;
                                    updateMemoryStatus();
                                });
                            } catch (error) {
                                console.warn('‚ö†Ô∏è Memory check failed:', error);
                                updateMemoryStatus();
                            }
                        } else {
                            updateMemoryStatus();
                        }
                    }
                    
                    function updateMemoryStatus() {
                        const statusEl = document.getElementById('memory-status');
                        if (memoryAvailable) {
                            statusEl.className = 'memory-status memory-available';
                            statusEl.innerHTML = 'üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞ - –≤–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤';
                        } else {
                            statusEl.className = 'memory-status memory-unavailable';
                            statusEl.innerHTML = 'üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–∞–±–æ—Ç–∞—é –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ';
                        }
                    }
                    
                    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ puter.js
                    async function waitForPuter() {
                        return new Promise((resolve, reject) => {
                            if (typeof puter !== 'undefined') {
                                resolve();
                            } else {
                                let attempts = 0;
                                const maxAttempts = 50;
                                const checkInterval = setInterval(() => {
                                    attempts++;
                                    if (typeof puter !== 'undefined') {
                                        clearInterval(checkInterval);
                                        resolve();
                                    } else if (attempts >= maxAttempts) {
                                        clearInterval(checkInterval);
                                        reject(new Error('puter.js failed to load'));
                                    }
                                }, 100);
                            }
                        });
                    }
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
                    document.addEventListener('DOMContentLoaded', async () => {
                        const messageInput = document.getElementById('message-input');
                        const sendBtn = document.getElementById('send-btn');
                        const messagesContainer = document.getElementById('messages-container');
                        const typingIndicator = document.getElementById('typing-indicator');
                        
                        try {
                            await waitForPuter();
                            console.log('‚úÖ puter.js loaded successfully');
                        } catch (error) {
                            console.error('‚ùå Failed to load puter.js:', error);
                            addMessage('ai', '‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å puter.js. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                        sendBtn.addEventListener('click', sendMessage);
                        messageInput.addEventListener('keydown', (e) => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                sendMessage();
                            }
                        });
                        
                        async function sendMessage() {
                            const message = messageInput.value.trim();
                            if (!message) return;
                            
                            // –ë–ª–æ–∫–∏—Ä—É–µ–º UI –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                            messageInput.disabled = true;
                            sendBtn.disabled = true;
                            messageInput.value = '';
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            addMessage('user', message);
                            
                            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            if (bridge && typeof bridge.send_message === 'function') {
                                try {
                                    bridge.send_message(message);
                                } catch (error) {
                                    console.error('‚ùå Error calling bridge.send_message:', error);
                                }
                            }
                            
                            try {
                                let finalMessage = message;
                                
                                // üß† –®–ê–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–ê–ú–Ø–¢–ò - –í–°–ï–ì–û 2 –°–¢–†–û–ß–ö–ò!
                                // –®–∞–≥ 1: –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏
                                if (memoryAvailable && bridge && typeof bridge.enrich_message === 'function') {
                                    try {
                                        bridge.enrich_message(message, (enriched) => {
                                            if (enriched && enriched !== message) {
                                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–æ –ø–∞–º—è—Ç—å—é
                                                addMemoryContext(enriched);
                                                finalMessage = enriched;
                                            }
                                            
                                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫ –ò–ò
                                            sendToAI(finalMessage, message);
                                        });
                                        return; // –ñ–¥–µ–º callback
                                    } catch (error) {
                                        console.warn('‚ö†Ô∏è Memory enrichment failed:', error);
                                    }
                                }
                                
                                // –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                sendToAI(finalMessage, message);
                                
                            } catch (error) {
                                addMessage('ai', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                                console.error('‚ùå Send message error:', error);
                            } finally {
                                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
                                messageInput.disabled = false;
                                sendBtn.disabled = false;
                                messageInput.focus();
                            }
                        }
                        
                        async function sendToAI(finalMessage, originalMessage) {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
                            typingIndicator.classList.add('active');
                            
                            try {
                                const response = await puter.ai.chat(finalMessage, {
                                    model: currentModel,
                                    stream: true
                                });
                                
                                const messageElement = addMessage('ai', '', true);
                                let fullResponse = '';
                                
                                for await (const part of response) {
                                    if (part?.text) {
                                        fullResponse += part.text;
                                        updateMessage(messageElement, fullResponse);
                                    }
                                }
                                
                                // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç—å
                                if (memoryAvailable && bridge && fullResponse && typeof bridge.save_chat_exchange === 'function') {
                                    try {
                                        bridge.save_chat_exchange(originalMessage, fullResponse, (status) => {
                                            if (status === 'OK') {
                                                console.log('üíæ Chat exchange saved to memory');
                                            } else {
                                                console.warn('‚ö†Ô∏è Failed to save to memory:', status);
                                            }
                                        });
                                    } catch (error) {
                                        console.warn('‚ö†Ô∏è Memory save failed:', error);
                                    }
                                }
                                
                                // –£–≤–µ–¥–æ–º–ª—è–µ–º Python –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
                                if (bridge && fullResponse && typeof bridge.receive_ai_message === 'function') {
                                    try {
                                        bridge.receive_ai_message(currentModel, fullResponse);
                                    } catch (error) {
                                        console.error('‚ùå Error calling bridge.receive_ai_message:', error);
                                    }
                                }
                                
                            } catch (error) {
                                addMessage('ai', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                                if (bridge && typeof bridge.log_error === 'function') {
                                    try {
                                        bridge.log_error(error.message);
                                    } catch (bridgeError) {
                                        console.error('‚ùå Error calling bridge.log_error:', bridgeError);
                                    }
                                }
                            } finally {
                                // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
                                typingIndicator.classList.remove('active');
                            }
                        }
                        
                        function addMemoryContext(enrichedMessage) {
                            const contextDiv = document.createElement('div');
                            contextDiv.className = 'message memory-enhanced';
                            contextDiv.innerHTML = 'üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤';
                            messagesContainer.appendChild(contextDiv);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }
                        
                        function addMessage(type, content, isStreaming = false) {
                            const messageDiv = document.createElement('div');
                            messageDiv.className = `message ${type}-message`;
                            messageDiv.innerHTML = content.replace(/\\n/g, '<br>');
                            
                            if (isStreaming) {
                                messageDiv.classList.add('streaming');
                            }
                            
                            messagesContainer.appendChild(messageDiv);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            return messageDiv;
                        }
                        
                        function updateMessage(messageElement, content) {
                            messageElement.innerHTML = content.replace(/\\n/g, '<br>');
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }
                    });
                </script>
            </body>
            </html>
            """
            
            self.web_view.setHtml(html_content)


    
    def set_theme_manager(self, theme_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º–æ–π"""
        print(f"üé® WebView chat: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ theme_manager: {theme_manager}")
        self.theme_manager = theme_manager
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏–≥–Ω–∞–ª—É —Å–º–µ–Ω—ã —Ç–µ–º—ã –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if hasattr(theme_manager, 'theme_changed'):
            theme_manager.theme_changed.connect(self._on_theme_changed)
            print("üé® WebView chat: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏–≥–Ω–∞–ª—É theme_changed")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        print("üé® WebView chat: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É...")
        self._apply_theme_to_webview()
    
    def _on_theme_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        print("Theme changed, updating WebView chat...")
        self._apply_theme_to_webview()
    
    def _apply_theme_to_webview(self):
            """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã –∫ WebView —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π"""
            print("üé® WebView chat: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã...")
            if not self.theme_manager:
                print("‚ö†Ô∏è WebView chat: theme_manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebView –∑–∞–≥—Ä—É–∂–µ–Ω
            if not hasattr(self, 'web_view') or not self.web_view.page():
                print("‚ö†Ô∏è WebView chat: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self._theme_pending = True
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            theme_colors = self._get_theme_colors()
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            css_variables = self._generate_css_variables(theme_colors)
            
            # –ò–Ω—ä–µ–∫—Ü–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ WebView
            css_injection = f"""
            :root {{
                {css_variables}
            }}
            
            /* –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã */
            *, *::before, *::after {{
                transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
            }}
            """
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            script = f"""
            (function() {{
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                const existingThemeStyles = document.querySelectorAll('[data-gopiai-theme]');
                existingThemeStyles.forEach(style => style.remove());
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∏–ª–µ–π
                const style = document.createElement('style');
                style.setAttribute('data-gopiai-theme', 'true');
                style.textContent = `{css_injection}`;
                document.head.appendChild(style);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if (window.gopiaiChat && window.gopiaiChat.onThemeUpdated) {{
                    window.gopiaiChat.onThemeUpdated();
                }}
                
                console.log('GopiAI theme applied to WebView chat');
            }})();
            """
            
            self.web_view.page().runJavaScript(script)

    
    def _generate_css_variables(self, theme_colors: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–º—ã"""
        variables = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
        variables.append(f"--bg-primary: {theme_colors.get('background', '#1e1e1e')};")
        variables.append(f"--bg-secondary: {theme_colors.get('header_bg', '#2d2d2d')};")
        variables.append(f"--bg-tertiary: {theme_colors.get('input_bg', '#2a2a2a')};")
        
        # –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        variables.append(f"--text-primary: {theme_colors.get('text', '#ffffff')};")
        variables.append(f"--text-secondary: {theme_colors.get('text_secondary', theme_colors.get('text', '#ffffff'))};")
        variables.append(f"--text-muted: {self._adjust_opacity(theme_colors.get('text', '#ffffff'), 0.6)};")
        
        # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
        variables.append(f"--accent-primary: {theme_colors.get('accent_color', '#0078d4')};")
        variables.append(f"--accent-secondary: {self._darken_color(theme_colors.get('accent_color', '#0078d4'), 0.1)};")
        
        # –ì—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–º–∫–∏
        variables.append(f"--border-color: {theme_colors.get('border', '#333333')};")
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        variables.append(f"--user-message-bg: {theme_colors.get('user_message', theme_colors.get('accent_color', '#0078d4'))};")
        variables.append(f"--user-message-text: {theme_colors.get('user_message_text', '#ffffff')};")
        variables.append(f"--ai-message-bg: {theme_colors.get('ai_message', theme_colors.get('messages_bg', '#2d2d2d'))};")
        variables.append(f"--ai-message-text: {theme_colors.get('ai_message_text', theme_colors.get('text', '#ffffff'))};")
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        variables.append(f"--input-bg: {theme_colors.get('input_bg', theme_colors.get('background', '#1e1e1e'))};")
        variables.append(f"--input-text: {theme_colors.get('text', '#ffffff')};")
        
        # –ö–Ω–æ–ø–∫–∏
        variables.append(f"--button-bg: {theme_colors.get('button', theme_colors.get('control_color', '#0078d4'))};")
        variables.append(f"--button-hover-bg: {theme_colors.get('button_hover', self._lighten_color(theme_colors.get('control_color', '#0078d4'), 0.1))};")
        variables.append(f"--button-active-bg: {theme_colors.get('button_active', self._darken_color(theme_colors.get('control_color', '#0078d4'), 0.1))};")
        variables.append(f"--button-text: {theme_colors.get('button_text', '#ffffff')};")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        variables.append(f"--header-bg: {theme_colors.get('header_bg', theme_colors.get('header_color', '#2d2d2d'))};")
        variables.append(f"--header-text: {theme_colors.get('header_text', theme_colors.get('text', '#ffffff'))};")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
        variables.append(f"--error-color: #ff4444;")
        variables.append(f"--success-color: #00cc66;")
        variables.append(f"--warning-color: #ffaa00;")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        variables.append(f"--typing-indicator-color: {theme_colors.get('accent_color', '#0078d4')};")
        
        # –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        variables.append(f"--modal-overlay: rgba(0, 0, 0, 0.5);")
        variables.append(f"--modal-bg: {theme_colors.get('background', '#1e1e1e')};")
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        variables.append(f"--scrollbar-track: {theme_colors.get('header_bg', '#2d2d2d')};")
        variables.append(f"--scrollbar-thumb: {theme_colors.get('border', '#333333')};")
        variables.append(f"--scrollbar-thumb-hover: {self._lighten_color(theme_colors.get('border', '#333333'), 0.2)};")
        
        # –¢–µ–Ω–∏
        shadow_color = "0, 0, 0" if self._is_dark_theme(theme_colors.get('background', '#1e1e1e')) else "0, 0, 0"
        variables.append(f"--shadow-light: 0 2px 8px rgba({shadow_color}, 0.1);")
        variables.append(f"--shadow-medium: 0 4px 16px rgba({shadow_color}, 0.2);")
        
        return '\n            '.join(variables)
    
    def _adjust_opacity(self, hex_color: str, opacity: float) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = hex_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º RGBA
            return f"rgba({r}, {g}, {b}, {opacity})"
        except:
            return f"rgba(255, 255, 255, {opacity})"
    
    def _is_dark_theme(self, bg_color: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π –ª–∏ —Ç–µ–º—ã"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = bg_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å (luminance)
            luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
            
            return luminance < 0.5
        except:
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ç–µ–º–Ω–æ–π
    
    def _get_theme_colors(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã GopiAI-UI —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º"""
        if not self.theme_manager:
            return self._get_fallback_colors()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            theme_data = None
            if hasattr(self.theme_manager, 'get_current_theme_data'):
                theme_data = self.theme_manager.get_current_theme_data()
            elif hasattr(self.theme_manager, 'load_theme'):
                theme_data = self.theme_manager.load_theme()
            
            if not theme_data:
                return self._get_fallback_colors()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã GopiAI
            main_color = theme_data.get('main_color', '#1e1e1e')
            text_color = theme_data.get('text_color', '#ffffff')
            header_color = theme_data.get('header_color', '#2d2d2d')
            control_color = theme_data.get('control_color', '#0078d4')
            accent_color = theme_data.get('accent_color', '#7a4c8f')
            button_color = theme_data.get('button_color', '#3d6281')
            button_hover_color = theme_data.get('button_hover_color', '#4d6d88')
            button_active_color = theme_data.get('button_active_color', control_color)
            border_color = theme_data.get('border_color', '#75777b')
            titlebar_background = theme_data.get('titlebar_background', header_color)
            titlebar_text = theme_data.get('titlebar_text', text_color)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞
            chat_colors = {
                'background': main_color,
                'text': text_color,
                'text_secondary': self._adjust_brightness(text_color, -0.2),
                'border': border_color,
                'header_bg': header_color,
                'header_color': header_color,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'header_text': titlebar_text,
                
                # –¶–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
                'messages_bg': self._lighten_color(main_color, 0.03),
                'user_message': control_color,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π control_color –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'ai_message': self._lighten_color(main_color, 0.08),
                
                # –ü–æ–ª—è –≤–≤–æ–¥–∞
                'input_bg': self._lighten_color(main_color, 0.05),
                
                # –ö–Ω–æ–ø–∫–∏ - —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ GopiAI
                'button': control_color,
                'control_color': control_color,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'button_hover': button_hover_color,
                'button_active': button_active_color,
                
                # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
                'accent_color': accent_color,
                
                # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                'user_message_text': self._get_contrast_text(control_color),
                'ai_message_text': text_color,
                'button_text': self._get_contrast_text(control_color),
                'header_text': titlebar_text,
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                'system_message': self._lighten_color(button_color, 0.2),
                
                # –°—Ç–∞—Ç—É—Å-–±–∞—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                'scrollbar_track': self._lighten_color(main_color, 0.1),
                'scrollbar_thumb': border_color,
            }
            
            return chat_colors
            
        except Exception as e:
            print(f"Error getting theme colors: {e}")
            return self._get_fallback_colors()
    
    def _adjust_brightness(self, hex_color: str, factor: float) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π factor = —Å–≤–µ—Ç–ª–µ–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = —Ç–µ–º–Ω–µ–µ)"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = hex_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            if factor > 0:
                # –û—Å–≤–µ—Ç–ª—è–µ–º
                r = min(255, int(r + (255 - r) * factor))
                g = min(255, int(g + (255 - g) * factor))
                b = min(255, int(b + (255 - b) * factor))
            else:
                # –ó–∞—Ç–µ–º–Ω—è–µ–º
                factor = abs(factor)
                r = max(0, int(r * (1 - factor)))
                g = max(0, int(g * (1 - factor)))
                b = max(0, int(b * (1 - factor)))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return hex_color
    
    def _get_fallback_colors(self) -> dict:
        """–ó–∞–ø–∞—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        return {
            'background': '#1e1e1e',
            'text': '#ffffff',
            'border': '#333333',
            'header_bg': '#2d2d2d',
            'messages_bg': '#252525',
            'user_message': '#0078d4',
            'ai_message': '#2d2d2d',
            'input_bg': '#2a2a2a',
            'button': '#0078d4',
            'button_hover': '#106ebe',
            'button_active': '#005a9e',
            'system_message': '#505050',
            'user_message_text': '#ffffff',
            'ai_message_text': '#ffffff',
            'button_text': '#ffffff'
        }
    
    def _lighten_color(self, hex_color: str, factor: float) -> str:
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = hex_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # –û—Å–≤–µ—Ç–ª—è–µ–º
            r = min(255, int(r + (255 - r) * factor))
            g = min(255, int(g + (255 - g) * factor))
            b = min(255, int(b + (255 - b) * factor))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return hex_color
    
    def _darken_color(self, hex_color: str, factor: float) -> str:
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = hex_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # –ó–∞—Ç–µ–º–Ω—è–µ–º
            r = max(0, int(r * (1 - factor)))
            g = max(0, int(g * (1 - factor)))
            b = max(0, int(b * (1 - factor)))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return hex_color
    
    def _get_contrast_text(self, bg_color: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ–Ω–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex_color = bg_color.lstrip('#')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å (luminance)
            luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è—Ä–∫–æ—Å—Ç–∏
            return '#000000' if luminance > 0.5 else '#ffffff'
        except:
            return '#ffffff'
    
    def send_message_to_ai(self, message: str):
        """–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        script = f"""
        if (window.gopiaiChat) {{
            window.gopiaiChat.messageInput.value = `{message}`;
            window.gopiaiChat.sendMessage();
        }}
        """
        self.web_view.page().runJavaScript(script)
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        script = """
        if (window.gopiaiChat) {
            window.gopiaiChat.clearChat();
        }
        """
        self.web_view.page().runJavaScript(script)
    
    def change_model(self, model: str):
        """–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –ò–ò"""
        script = f"""
        if (window.gopiaiChat) {{
            window.gopiaiChat.changeModel('{model}');
        }}
        """
        self.web_view.page().runJavaScript(script)