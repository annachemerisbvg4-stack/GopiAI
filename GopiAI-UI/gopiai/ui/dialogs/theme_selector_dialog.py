"""
Theme Selector Dialog –¥–ª—è GopiAI Standalone Interface
==================================================

–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ GopiAI —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º.
"""

import os
from typing import Optional, Dict, Any
from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, 
    QComboBox, QFrame, QGridLayout, QWidget, QScrollArea,
    QButtonGroup, QRadioButton, QGroupBox, QMessageBox
)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QPixmap, QPainter, QColor


class ThemePreviewWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º—ã"""
    
    def __init__(self, theme_data: Dict[str, Any], mode: str = "light"):
        super().__init__()
        self.theme_data = theme_data
        self.mode = mode
        self.setFixedSize(120, 80)
        self.setFrameStyle(QFrame.Shape.Box)
        self._setup_preview()
    
    def _setup_preview(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º—ã"""
        if not self.theme_data or self.mode not in self.theme_data:
            self.setStyleSheet("background-color: #cccccc; border: 1px solid #888;")
            return
        
        colors = self.theme_data[self.mode]
        
        style = f"""
        QFrame {{
            background-color: {colors.get('main_color', '#ffffff')};
            border: 2px solid {colors.get('border_color', '#cccccc')};
        }}
        """
        self.setStyleSheet(style)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–ü—Ä–∏–º–µ—Ä")
        header.setStyleSheet(f"color: {colors.get('titlebar_text', '#000000')}; font-weight: bold;")
        layout.addWidget(header)
        
        # –ö–Ω–æ–ø–∫–∞
        button = QPushButton("–ö–Ω–æ–ø–∫–∞")
        button.setStyleSheet(f"""
        QPushButton {{
            background-color: {colors.get('button_color', '#0078d4')};
            color: {colors.get('button_text', '#ffffff')};
            border: none;
            padding: 2px 8px;
            border-radius: 2px;
        }}
        """)
        layout.addWidget(button)


class ThemeSelectorDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã GopiAI"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    theme_applied = Signal(dict, str)  # theme_data, mode
    
    def __init__(self, parent=None, current_theme=None):
        super().__init__(parent)
        self.current_theme = current_theme
        self.selected_theme = None
        self.selected_mode = "light"
        self._setup_ui()
        self._load_themes()
        self._connect_signals()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        self.setWindowTitle("üé® –í—ã–±–æ—Ä —Ç–µ–º—ã GopiAI")
        self.setModal(True)
        self.resize(600, 500)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowType.WindowContextHelpButtonHint)
        
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ GopiAI")
        title.setStyleSheet("font-size: 16px; font-weight: bold; margin-bottom: 10px;")
        main_layout.addWidget(title)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        content_layout = QHBoxLayout()
        main_layout.addLayout(content_layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        left_panel = QGroupBox("–¢–µ–º—ã")
        left_layout = QVBoxLayout(left_panel)
        
        self.theme_combo = QComboBox()
        self.theme_combo.setMinimumHeight(30)
        left_layout.addWidget(self.theme_combo)
        
        # –†–µ–∂–∏–º —Ç–µ–º—ã
        mode_group = QGroupBox("–†–µ–∂–∏–º")
        mode_layout = QVBoxLayout(mode_group)
        
        self.mode_group = QButtonGroup(self)
        self.light_radio = QRadioButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")
        self.dark_radio = QRadioButton("üåô –¢—ë–º–Ω–∞—è")
        
        self.mode_group.addButton(self.light_radio, 0)
        self.mode_group.addButton(self.dark_radio, 1)
        
        mode_layout.addWidget(self.light_radio)
        mode_layout.addWidget(self.dark_radio)
        
        left_layout.addWidget(mode_group)
        left_layout.addStretch()
        
        content_layout.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        right_panel = QGroupBox("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        right_layout = QVBoxLayout(right_panel)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ layout –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_layout = right_layout
        
        self.preview_widget = ThemePreviewWidget({})
        right_layout.addWidget(self.preview_widget, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
        self.theme_info = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        self.theme_info.setWordWrap(True)
        self.theme_info.setStyleSheet("padding: 10px; background-color: #f5f5f5; border-radius: 4px;")
        right_layout.addWidget(self.theme_info)
        
        right_layout.addStretch()
        content_layout.addWidget(right_panel)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_layout = QHBoxLayout()
        
        self.apply_btn = QPushButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        self.apply_btn.setMinimumHeight(35)
        self.apply_btn.setStyleSheet("""
        QPushButton {
            background-color: #0078d4;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #106ebe;
        }
        """)
        
        self.preview_btn = QPushButton("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        self.preview_btn.setMinimumHeight(35)
        
        cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        cancel_btn.setMinimumHeight(35)
        
        button_layout.addWidget(self.preview_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.apply_btn)
        button_layout.addWidget(cancel_btn)
        
        main_layout.addLayout(button_layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.apply_btn.clicked.connect(self._apply_theme)
        self.preview_btn.clicked.connect(self._preview_theme)
        cancel_btn.clicked.connect(self.reject)
          # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        self.light_radio.setChecked(True)
        
    def _load_themes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã –∏–∑ GopiAI-Core
        themes = []
        try:
            # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ sys.path (—Ç–∞–∫ –∫–∞–∫ –≤ –ø—É—Ç—è—Ö –µ—Å—Ç—å –¥–µ—Ñ–∏—Å—ã)
            import sys
            import os
            theme_path = os.path.join(os.path.dirname(__file__), '..', 'GopiAI-Core', 'gopiai', 'core')
            if theme_path not in sys.path:
                sys.path.append(theme_path)
            from utils.simple_theme_manager import THEME_COLLECTION
        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å THEME_COLLECTION ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–º—ã")
            THEME_COLLECTION = [
                {
                    "name": "Material Sky",
                    "description": "–¢–µ–º–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ Material Design",
                    "light": {
                        "main_color": "#fcf8f8",
                        "text_color": "#1c1b1c",
                        "button_color": "#3d6281",
                        "button_text": "#ffffff",
                        "border_color": "#75777b",
                        "titlebar_text": "#001d31"
                    },
                    "dark": {
                        "main_color": "#131314",
                        "text_color": "#e5e2e2",
                        "button_color": "#a5caee",
                        "button_text": "#ffffff",
                        "border_color": "#8f9195",
                        "titlebar_text": "#cde5ff"
                    }
                },
                {
                    "name": "Emerald Garden",
                    "description": "–ó–µ–ª—ë–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–Ω–∞—è —Ç–µ–º–∞",
                    "light": {
                        "main_color": "#f8fff8",
                        "text_color": "#1b5e20",
                        "button_color": "#4caf50",
                        "button_text": "#ffffff",
                        "border_color": "#c8e6c9",
                        "titlebar_text": "#2e7d32"
                    },
                    "dark": {
                        "main_color": "#0d1f0d",
                        "text_color": "#c8e6c9",
                        "button_color": "#4caf50",
                        "button_text": "#ffffff",
                        "border_color": "#2e7d32",
                        "titlebar_text": "#a5d6a7"
                    }
                }
            ]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ç–µ–º
        for theme_data in THEME_COLLECTION:
            theme_name = theme_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
            themes.append((theme_name, theme_data))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(themes)} —Ç–µ–º –∏–∑ THEME_COLLECTION")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –≤ –∫–æ–º–±–æ–±–æ–∫—Å
        for name, theme_data in themes:
            emoji = self._get_theme_emoji(theme_data)
            self.theme_combo.addItem(f"{emoji} {name}", theme_data)
    
    def _get_theme_emoji(self, theme_data):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—è"""
        name = theme_data.get("name", "").lower()
        
        emoji_map = {
            "material sky": "‚òÅÔ∏è",
            "emerald garden": "üåø", 
            "crimson relic": "üåπ",
            "golden ember": "üî•",
            "sunlit meadow": "üåª",
            "mint frost": "üå®Ô∏è",
            "violet dream": "üíú",
            "indigo candy": "üç≠",
            "pink mirage": "üå∏",
            "olive library": "üìö",
            "lavender mist": "üåæ",
            "graphite night": "üåô",
            "pumpkin field": "üéÉ",
            "scarlet fire": "‚ù§Ô∏è",
            "tropical bouquet": "üå∫",
        }
        
        return emoji_map.get(name, "üé®")
    
    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.theme_combo.currentIndexChanged.connect(self._on_theme_changed)
        self.mode_group.buttonClicked.connect(self._on_mode_changed)
    
    def _on_theme_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        self.selected_theme = self.theme_combo.currentData()
        self._update_preview()
        self._update_theme_info()
    def _on_mode_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        self.selected_mode = "light" if self.light_radio.isChecked() else "dark"
        self._update_preview()
    
    def _update_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if self.selected_theme:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ layout mangling
            self.preview_widget.deleteLater()
            self.preview_widget = ThemePreviewWidget(self.selected_theme, self.selected_mode)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
            if hasattr(self, 'preview_layout'):
                self.preview_layout.addWidget(self.preview_widget, alignment=Qt.AlignmentFlag.AlignCenter)
    
    def _update_theme_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ"""
        if self.selected_theme:
            name = self.selected_theme.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
            description = self.selected_theme.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            mode_colors = self.selected_theme.get(self.selected_mode, {})
            
            info_text = f"""
            <b>{name}</b><br>
            <i>{description}</i><br><br>
            <b>–†–µ–∂–∏–º:</b> {"–°–≤–µ—Ç–ª—ã–π" if self.selected_mode == "light" else "–¢—ë–º–Ω—ã–π"}<br>
            <b>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç:</b> {mode_colors.get('main_color', 'N/A')}<br>
            <b>–¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫:</b> {mode_colors.get('button_color', 'N/A')}
            """
            
            self.theme_info.setText(info_text)
        else:
            self.theme_info.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    def _preview_theme(self):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ)"""
        if self.selected_theme:
            self.theme_applied.emit(self.selected_theme, self.selected_mode)
            QMessageBox.information(self, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", 
                f"–¢–µ–º–∞ '{self.selected_theme['name']}' –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    def _apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        if self.selected_theme:
            self.theme_applied.emit(self.selected_theme, self.selected_mode)
            self.accept()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É")
    
    def get_selected_theme(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        return self.selected_theme, self.selected_mode


def show_theme_selector(parent=None, current_theme=None):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    
    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        current_theme: –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞
        
    Returns:
        Tuple (theme_data, mode) –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    dialog = ThemeSelectorDialog(parent, current_theme)
    
    if dialog.exec() == QDialog.DialogCode.Accepted:
        return dialog.get_selected_theme()
    
    return None
