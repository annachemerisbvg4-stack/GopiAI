"""–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GopiAI"""

from PySide6.QtWidgets import (
    QDialog,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QComboBox,
    QPushButton,
    QTabWidget,
    QWidget,
    QGroupBox,
    QCheckBox,
    QSlider,
    QSpinBox,
    QLineEdit,
    QTextEdit,
    QScrollArea,
    QFrame,
    QSizePolicy,
    QGridLayout,
    QFormLayout,
    QSpacerItem,
)
from PySide6.QtCore import Qt, Signal, QSize
from PySide6.QtGui import QFont, QIcon, QPixmap
from pathlib import Path


class SettingsCard(QFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def __init__(self, title: str, description: str = "", parent=None):
        super().__init__(parent)
        self.setFrameStyle(QFrame.Shape.StyledPanel)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º objectName –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setObjectName("SettingsCard")
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
        self.setContentsMargins(16, 16, 16, 16)

        layout = QVBoxLayout(self)
        layout.setSpacing(8)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(10)
        title_label.setFont(title_font)
        layout.addWidget(title_label)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if description:
            desc_label = QLabel(description)
            desc_label.setWordWrap(True)
            desc_label.setObjectName("DescriptionLabel")
            # –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –∏–∑ —Ç–µ–º—ã
            layout.addWidget(desc_label)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_layout = QVBoxLayout()
        layout.addLayout(self.content_layout)

    def add_content(self, widget):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É"""
        self.content_layout.addWidget(widget)



# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_qt_object_valid(obj):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Qt –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç sip"""
    if obj is None:
        return False
    try:
        # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —É –≤—Å–µ—Ö QObject
        # isVisible() - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        return (
            obj.isVisible() or True
        )  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–≤–∏–¥–∏–º, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
    except RuntimeError:
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–ª RuntimeError, –∑–Ω–∞—á–∏—Ç C++ –æ–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω
        return False
    except Exception:
        # –ü—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
        return False


class GopiAISettingsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GopiAI"""

    settings_applied = Signal(dict)  # –°–∏–≥–Ω–∞–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    themeChanged = Signal(str)  # –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã

    # –ö–æ–¥—ã –¥–∏–∞–ª–æ–≥–∞
    class DialogCode:
        Accepted = 1
        Rejected = 0

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
    def _is_light_color(self, color):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç —Å–≤–µ—Ç–ª—ã–º"""
        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
        if color.startswith("#"):
            color = color[1:]

        # –î–ª—è HEX —Ñ–æ—Ä–º–∞—Ç–∞ #RRGGBB
        if len(color) == 6:
            r = int(color[0:2], 16)
            g = int(color[2:4], 16)
            b = int(color[4:6], 16)  # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
            brightness = (r * 299 + g * 587 + b * 114) / 1000
            return brightness > 128
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å–≤–µ—Ç–ª—ã–º
    
    def __init__(self, theme_manager=None, parent=None):
            print("üîß GopiAISettingsDialog.__init__ –Ω–∞—á–∞—Ç")
            super().__init__(parent)
            print("üîß super().__init__ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.setWindowFlags(self.windowFlags() | Qt.WindowType.FramelessWindowHint)
            self.theme_manager = theme_manager
            self.settings = {}
    
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
            self._drag_position = None
    
            print("üîß –í—ã–∑—ã–≤–∞–µ–º setup_ui()")
            self.setup_ui()
            print("üîß setup_ui() –∑–∞–≤–µ—Ä—à–µ–Ω")
            print("üîß –í—ã–∑—ã–≤–∞–µ–º load_current_settings()")
            self.load_current_settings()
            print("üîß load_current_settings() –∑–∞–≤–µ—Ä—à–µ–Ω")
            print("üîß GopiAISettingsDialog.__init__ –∑–∞–≤–µ—Ä—à–µ–Ω")    
    def _get_theme_colors_for_dialog(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.theme_manager:
            return {
                'bg_color': '#f8f9fa',
                'text_color': '#212529',
                'border_color': '#dee2e6',
                'hover_color': '#e9ecef',
                'selected_color': '#007bff',
                'button_color': '#6c757d',
                'accent_color': '#007bff'
            }
        
        theme_data = self.theme_manager.get_current_theme_data()
        if not theme_data:
            return {
                'bg_color': '#f8f9fa',
                'text_color': '#212529',
                'border_color': '#dee2e6',
                'hover_color': '#e9ecef',
                'selected_color': '#007bff',
                'button_color': '#6c757d',
                'accent_color': '#007bff'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ simple_theme_manager)
        bg_color = theme_data.get('main_color', '#f8f9fa')
        text_color = theme_data.get('text_color', '#212529')
        button_color = theme_data.get('button_color', '#6c757d')
        border_color = theme_data.get('border_color', '#dee2e6')
        accent_color = theme_data.get('accent_color', '#007bff')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        hover_color = theme_data.get('button_hover_color', button_color)
        selected_color = theme_data.get('button_active_color', accent_color)
        
        # –ï—Å–ª–∏ button_hover_color –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        if 'button_hover_color' not in theme_data:
            is_light = self._is_light_color(button_color)
            if is_light:
                hover_color = self._darken_color(button_color, 0.1)
            else:
                hover_color = self._lighten_color(button_color, 0.1)
        
        # –ï—Å–ª–∏ button_active_color –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º control_color –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        if 'button_active_color' not in theme_data:
            selected_color = theme_data.get('control_color', accent_color)
        
        return {
            'bg_color': bg_color,
            'text_color': text_color,
            'border_color': border_color,
            'hover_color': hover_color,
            'selected_color': selected_color,
            'button_color': button_color,
            'accent_color': accent_color
        }

    
    def _darken_color(self, color, amount):
        """–ó–∞—Ç–µ–º–Ω—è–µ—Ç —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É"""
        try:
            if color.startswith('#'):
                color = color[1:]
            
            r = int(color[0:2], 16)
            g = int(color[2:4], 16)
            b = int(color[4:6], 16)
            
            r = max(0, int(r * (1 - amount)))
            g = max(0, int(g * (1 - amount)))
            b = max(0, int(b * (1 - amount)))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return color
    
    def _lighten_color(self, color, amount):
        """–û—Å–≤–µ—Ç–ª—è–µ—Ç —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É"""
        try:
            if color.startswith('#'):
                color = color[1:]
            
            r = int(color[0:2], 16)
            g = int(color[2:4], 16)
            b = int(color[4:6], 16)
            
            r = min(255, int(r + (255 - r) * amount))
            g = min(255, int(g + (255 - g) * amount))
            b = min(255, int(b + (255 - b) * amount))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return color
        
    def _apply_theme_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ç–µ–º–æ–π –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""
        colors = self._get_theme_colors_for_dialog()
        is_light_bg = self._is_light_color(colors['bg_color'])
        button_text_color = "#1a1a1a" if is_light_bg else "#ffffff"
        self.setStyleSheet(f"""
            QDialog {{
                background-color: {colors['bg_color']};
                color: {colors['text_color']};
                border: 1px solid {colors['border_color']};
                border-radius: 8px;
            }}
            QWidget {{
                background-color: {colors['bg_color']};
                color: {colors['text_color']};
            }}
            QLabel {{
                color: {colors['text_color']};
                background-color: transparent;
            }}
            QPushButton {{
                background-color: {colors['button_color']};
                color: {button_text_color};
                border: 1px solid {colors['border_color']};
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: 500;
                min-width: 80px;
            }}
            QPushButton:hover {{
                background-color: {colors['hover_color']};
                border-color: {colors['accent_color']};
            }}
            QPushButton:pressed {{
                background-color: {colors['selected_color']};
            }}
            QTabWidget::pane {{
                border: 1px solid {colors['border_color']};
                border-radius: 6px;
                background-color: {colors['bg_color']};
                top: -1px;
            }}
            QTabBar::tab {{
                background-color: {colors['button_color']};
                color: {colors['text_color']};
                padding: 10px 20px;
                margin-right: 2px;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
                border: 1px solid {colors['border_color']};
                border-bottom: none;
            }}
            QTabBar::tab:selected {{
                background-color: {colors['bg_color']};
                border-bottom: 1px solid {colors['bg_color']};
            }}
            QTabBar::tab:hover {{
                background-color: {colors['hover_color']};
            }}
            /* –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫–∏ –∏ —Ñ–æ–Ω —É –≤—Å–µ—Ö QFrame, QGroupBox, SettingsCard */
            QFrame, QGroupBox, QFrame#SettingsCard {{
                background: transparent;
                border: none;
                box-shadow: none;
            }}
            QLabel#DescriptionLabel {{
                color: {colors['text_color']};
                background-color: transparent;
                font-size: 9pt;
            }}
            QComboBox {{
                background-color: {colors['button_color']};
                color: {colors['text_color']};
                border: 1px solid {colors['border_color']};
                border-radius: 4px;
                padding: 6px;
                min-width: 120px;
            }}
            QComboBox:hover {{
                border-color: {colors['accent_color']};
                background-color: {colors['hover_color']};
            }}
            QComboBox:focus {{
                border-color: {colors['accent_color']};
                border-width: 2px;
            }}
            QComboBox::drop-down {{
                border: none;
                background-color: transparent;
            }}
            QComboBox::down-arrow {{
                width: 12px;
                height: 12px;
            }}
            QComboBox QAbstractItemView {{
                background-color: {colors['button_color']};
                color: {colors['text_color']};
                border: 1px solid {colors['border_color']};
                selection-background-color: {colors['accent_color']};
            }}
            QCheckBox {{
                color: {colors['text_color']};
                spacing: 8px;
                background-color: transparent;
            }}
            QCheckBox::indicator {{
                width: 18px;
                height: 18px;
                border: 2px solid {colors['border_color']};
                border-radius: 4px;
                background-color: {colors['button_color']};
            }}
            QCheckBox::indicator:hover {{
                border-color: {colors['accent_color']};
                background-color: {colors['hover_color']};
            }}
            QCheckBox::indicator:checked {{
                background-color: {colors['accent_color']};
                border-color: {colors['accent_color']};
            }}
            QCheckBox::indicator:checked:hover {{
                background-color: {colors['selected_color']};
            }}
            QSpinBox, QLineEdit, QTextEdit {{
                background-color: {colors['button_color']};
                color: {colors['text_color']};
                border: 1px solid {colors['border_color']};
                border-radius: 4px;
                padding: 6px;
            }}
            QSpinBox:hover, QLineEdit:hover, QTextEdit:hover {{
                border-color: {colors['accent_color']};
                background-color: {colors['hover_color']};
            }}
            QSpinBox:focus, QLineEdit:focus, QTextEdit:focus {{
                border-color: {colors['accent_color']};
                border-width: 2px;
            }}
            QScrollArea {{
                background-color: {colors['bg_color']};
                border: none;
            }}
            QScrollArea > QWidget > QWidget {{
                background-color: {colors['bg_color']};
            }}
            QScrollBar:vertical {{
                background-color: {colors['button_color']};
                width: 12px;
                border-radius: 4px;
            }}
            QScrollBar::handle:vertical {{
                background-color: {colors['border_color']};
                border-radius: 4px;
                min-height: 20px;
            }}
            QScrollBar::handle:vertical:hover {{
                background-color: {colors['accent_color']};
            }}
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{
                border: none;
                background: none;
            }}
            QFormLayout, QVBoxLayout, QHBoxLayout, QGridLayout {{
                background-color: transparent;
            }}
        """)


    def _apply_close_button_style(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –∫ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ç–µ–º—ã"""
        colors = self._get_theme_colors_for_dialog()
        
        self.close_button.setStyleSheet(f"""
            QPushButton {{
                background-color: transparent;
                color: {colors['text_color']};
                font-weight: bold;
                border: none;
                border-radius: 1px;
            }}
            QPushButton:hover {{
                background-color: #ff6b6b;
                color: white;
            }}
            QPushButton:pressed {{
                background-color: #ff5252;
            }}
        """)
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GopiAI")
        self.setMinimumSize(600, 500)
        self.resize(800, 600)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ç–µ–º–æ–π
        self._apply_theme_styles()

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(16)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        title_label = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(16)
        title_label.setFont(title_font)
        header_layout.addWidget(title_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.close_button = QPushButton("‚úï")
        self.close_button.setMaximumSize(30, 30)
        self.close_button.clicked.connect(self.reject)
        self._apply_close_button_style()  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ç–µ–º—ã
        header_layout.addWidget(self.close_button)

        main_layout.addLayout(header_layout)

        # Tabs
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_appearance_tab()
        self.create_interface_tab()
        self.create_advanced_tab()

        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        button_layout.addStretch()

        self.apply_button = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        self.apply_button.clicked.connect(self.apply_settings)
        button_layout.addWidget(self.apply_button)

        self.ok_button = QPushButton("OK")
        self.ok_button.clicked.connect(self.accept_settings)
        button_layout.addWidget(self.ok_button)

        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)

        main_layout.addLayout(button_layout)

    def create_appearance_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
        tab = QWidget()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setWidget(tab)

        layout = QVBoxLayout(tab)
        layout.setSpacing(12)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–º—ã
        theme_card = SettingsCard(
            "–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        )

        theme_layout = QVBoxLayout()

        # –í—ã–±–æ—Ä —Ç–µ–º—ã
        theme_combo_layout = QHBoxLayout()
        theme_label = QLabel("–¢–µ–º–∞:")
        theme_combo_layout.addWidget(theme_label)

        self.theme_combo = QComboBox()
        self.theme_combo.setMinimumWidth(200)
        print(f"üîß theme_combo —Å–æ–∑–¥–∞–Ω: {self.theme_combo}")

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º
        if self.theme_manager:
            themes = self.theme_manager.get_theme_display_names()
            for theme_key, display_name in themes.items():
                self.theme_combo.addItem(display_name, theme_key)
            print(f"üîß theme_combo –∑–∞–ø–æ–ª–Ω–µ–Ω, count = {self.theme_combo.count()}")

        theme_combo_layout.addWidget(self.theme_combo)
        print(f"üîß theme_combo –¥–æ–±–∞–≤–ª–µ–Ω –≤ layout")
        theme_combo_layout.addStretch()
        theme_layout.addLayout(theme_combo_layout)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        dark_mode_layout = QHBoxLayout()
        dark_mode_layout.addWidget(QLabel("–¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º:"))

        self.dark_mode_check = QCheckBox()
        self.dark_mode_check.setToolTip("–í–∫–ª—é—á–∏—Ç—å —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        dark_mode_layout.addWidget(self.dark_mode_check)
        dark_mode_layout.addStretch()
        theme_layout.addLayout(dark_mode_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É
        theme_widget = QWidget()
        theme_widget.setLayout(theme_layout)
        theme_card.add_content(theme_widget)
        layout.addWidget(theme_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        font_card = SettingsCard("–®—Ä–∏—Ñ—Ç—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞ —à—Ä–∏—Ñ—Ç–æ–≤")

        font_layout = QFormLayout()

        self.font_size_spin = QSpinBox()
        self.font_size_spin.setRange(8, 72)
        self.font_size_spin.setValue(10)
        font_layout.addRow("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:", self.font_size_spin)

        self.font_family_combo = QComboBox()
        self.font_family_combo.addItems(
            [
                "System Default",
                "Arial",
                "Helvetica",
                "Times New Roman",
                "Courier New",
                "Verdana",
                "Georgia",
                "Comic Sans MS",
            ]
        )
        font_layout.addRow("–°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–∞:", self.font_family_combo)

        font_widget = QWidget()
        font_widget.setLayout(font_layout)
        font_card.add_content(font_widget)
        layout.addWidget(font_card)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ TabWidget
        self.tab_widget.addTab(scroll, "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥")

    def create_interface_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        tab = QWidget()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setWidget(tab)

        layout = QVBoxLayout(tab)
        layout.setSpacing(12)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_card = SettingsCard(
            "–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        )

        toolbar_layout = QVBoxLayout()

        self.show_toolbar_check = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        self.show_toolbar_check.setChecked(True)
        toolbar_layout.addWidget(self.show_toolbar_check)
        # –†–∞–∑–º–µ—Ä –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_size_layout = QHBoxLayout()
        toolbar_size_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–æ–∫:"))

        self.toolbar_size_combo = QComboBox()
        self.toolbar_size_combo.addItems(["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"])
        self.toolbar_size_combo.setCurrentText("–°—Ä–µ–¥–Ω—è—è")
        toolbar_size_layout.addWidget(self.toolbar_size_combo)
        toolbar_size_layout.addStretch()
        toolbar_layout.addLayout(toolbar_size_layout)

        toolbar_layout.addStretch()

        toolbar_widget = QWidget()
        toolbar_widget.setLayout(toolbar_layout)
        toolbar_card.add_content(toolbar_widget)
        layout.addWidget(toolbar_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        status_card = SettingsCard(
            "–°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"
        )

        status_layout = QVBoxLayout()

        self.show_status_check = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É")
        self.show_status_check.setChecked(True)
        status_layout.addWidget(self.show_status_check)

        self.show_memory_check = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        self.show_memory_check.setChecked(False)
        status_layout.addWidget(self.show_memory_check)

        status_widget = QWidget()
        status_widget.setLayout(status_layout)
        status_card.add_content(status_widget)
        layout.addWidget(status_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–∫–æ–Ω
        windows_card = SettingsCard("–û–∫–Ω–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–∫–æ–Ω")

        windows_layout = QVBoxLayout()

        self.remember_geometry_check = QCheckBox("–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–æ–Ω")
        self.remember_geometry_check.setChecked(True)
        windows_layout.addWidget(self.remember_geometry_check)

        self.minimize_to_tray_check = QCheckBox("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π")
        self.minimize_to_tray_check.setChecked(False)
        windows_layout.addWidget(self.minimize_to_tray_check)

        windows_widget = QWidget()
        windows_widget.setLayout(windows_layout)
        windows_card.add_content(windows_widget)
        layout.addWidget(windows_card)

        layout.addStretch()
        self.tab_widget.addTab(scroll, "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

    def create_advanced_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        tab = QWidget()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setWidget(tab)

        layout = QVBoxLayout(tab)
        layout.setSpacing(12)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_card = SettingsCard(
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        )

        perf_layout = QFormLayout()

        self.animation_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")
        self.animation_check.setChecked(True)
        perf_layout.addRow("–ê–Ω–∏–º–∞—Ü–∏–∏:", self.animation_check)

        self.cache_size_spin = QSpinBox()
        self.cache_size_spin.setRange(10, 1000)
        self.cache_size_spin.setValue(100)
        self.cache_size_spin.setSuffix(" –ú–ë")
        perf_layout.addRow("–†–∞–∑–º–µ—Ä –∫—ç—à–∞:", self.cache_size_spin)

        perf_widget = QWidget()
        perf_widget.setLayout(perf_layout)
        performance_card.add_content(perf_widget)
        layout.addWidget(performance_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging_card = SettingsCard("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤")

        log_layout = QFormLayout()

        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR"])
        self.log_level_combo.setCurrentText("INFO")
        log_layout.addRow("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", self.log_level_combo)

        self.log_to_file_check = QCheckBox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª")
        self.log_to_file_check.setChecked(True)
        log_layout.addRow("–í —Ñ–∞–π–ª:", self.log_to_file_check)

        log_widget = QWidget()
        log_widget.setLayout(log_layout)
        logging_card.add_content(log_widget)
        layout.addWidget(logging_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        reset_card = SettingsCard(
            "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )

        reset_layout = QHBoxLayout()
        self.reset_button = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.reset_button.clicked.connect(self.reset_settings)
        reset_layout.addWidget(self.reset_button)
        reset_layout.addStretch()

        reset_widget = QWidget()
        reset_widget.setLayout(reset_layout)
        reset_card.add_content(reset_widget)
        layout.addWidget(reset_card)

        layout.addStretch()
        self.tab_widget.addTab(scroll, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")

    def load_current_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("üîß load_current_settings() –Ω–∞—á–∞—Ç")
        try:
            if self.theme_manager:
                print("üîß theme_manager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                current_theme = self.theme_manager.get_current_theme()
                print(f"üîß current_theme = {current_theme}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ theme_combo —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                if hasattr(self, "theme_combo") and self.theme_combo:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
                        if not is_qt_object_valid(self.theme_combo):
                            print(
                                "‚ö†Ô∏è theme_combo –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"
                            )
                            return

                        print(f"üîß theme_combo —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.theme_combo}")
                        count = self.theme_combo.count()
                        print(f"üîß theme_combo.count() = {count}")

                        # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
                        for i in range(count):
                            try:
                                if self.theme_combo.itemData(i) == current_theme:
                                    self.theme_combo.setCurrentIndex(i)
                                    print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã: {i}")
                                    break
                            except Exception as e:
                                print(
                                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ theme_combo: {e}"
                                )
                                break
                    except RuntimeError as e:
                        if "Internal C++ object" in str(e):
                            print(f"‚ö†Ô∏è C++ –æ–±—ä–µ–∫—Ç QComboBox —É–∂–µ —É–¥–∞–ª–µ–Ω: {e}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å theme_combo: {e}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å theme_combo: {e}")
                        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
                else:
                    print("‚ùå theme_combo –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω!")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç
                try:
                    if hasattr(self, "dark_mode_check") and hasattr(
                        self.theme_manager, "_current_variant"
                    ):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dark_mode_check –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                        if not is_qt_object_valid(self.dark_mode_check):
                            print(
                                "‚ö†Ô∏è dark_mode_check –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
                            )
                            return

                        self.dark_mode_check.setChecked(
                            self.theme_manager._current_variant == "dark"
                        )
                        print(
                            f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º: {self.theme_manager._current_variant == 'dark'}"
                        )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        print("üîß load_current_settings() –∑–∞–≤–µ—Ä—à–µ–Ω")

    def collect_settings(self) -> dict:
        """–°–±–æ—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        settings = {}
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤
            if is_qt_object_valid(self.theme_combo):
                settings["theme"] = self.theme_combo.currentData()
            if is_qt_object_valid(self.dark_mode_check):
                settings["dark_mode"] = self.dark_mode_check.isChecked()
            if is_qt_object_valid(self.font_size_spin):
                settings["font_size"] = self.font_size_spin.value()
            if is_qt_object_valid(self.font_family_combo):
                settings["font_family"] = self.font_family_combo.currentText()
            if is_qt_object_valid(self.show_toolbar_check):
                settings["show_toolbar"] = self.show_toolbar_check.isChecked()
            if is_qt_object_valid(self.toolbar_size_combo):
                settings["toolbar_size"] = self.toolbar_size_combo.currentText()
            if is_qt_object_valid(self.show_status_check):
                settings["show_status"] = self.show_status_check.isChecked()
            if is_qt_object_valid(self.show_memory_check):
                settings["show_memory"] = self.show_memory_check.isChecked()
            if is_qt_object_valid(self.remember_geometry_check):
                settings["remember_geometry"] = self.remember_geometry_check.isChecked()
            if is_qt_object_valid(self.minimize_to_tray_check):
                settings["minimize_to_tray"] = self.minimize_to_tray_check.isChecked()
            if is_qt_object_valid(self.animation_check):
                settings["animations"] = self.animation_check.isChecked()
            if is_qt_object_valid(self.cache_size_spin):
                settings["cache_size"] = self.cache_size_spin.value()
            if is_qt_object_valid(self.log_level_combo):
                settings["log_level"] = self.log_level_combo.currentText()
            if is_qt_object_valid(self.log_to_file_check):
                settings["log_to_file"] = self.log_to_file_check.isChecked()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        return settings

    # –°–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–≥–æ –æ–∫–Ω–∞
    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.button() == Qt.MouseButton.LeftButton:
            self._drag_position = (
                event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            )
            event.accept()

    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞"""
        if (
            event.buttons() & Qt.MouseButton.LeftButton
            and self._drag_position is not None
        ):
            self.move(event.globalPosition().toPoint() - self._drag_position)
            event.accept()

    def mouseReleaseEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.button() == Qt.MouseButton.LeftButton:
            self._drag_position = None
            event.accept()

    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.settings = self.collect_settings()

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∏ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if self.theme_manager and "theme" in self.settings:
                theme_name = self.settings.get("theme")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—ã–π/—Å–≤–µ—Ç–ª—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Ç–µ–º
                if (
                    hasattr(self.theme_manager, "_current_variant")
                    and "dark_mode" in self.settings
                ):
                    self.theme_manager._current_variant = (
                        "dark" if self.settings.get("dark_mode", False) else "light"
                    )

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
                self.theme_manager.apply_theme(theme_name)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Ç–∞–∫–∂–µ –∫ –¥–∏–∞–ª–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self._update_dialog_theme()

                # –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
                self.themeChanged.emit(theme_name)

            # –ò—Å–ø—É—Å–∫–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.settings_applied.emit(self.settings)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def _update_dialog_theme(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–∏–º–µ–Ω—è—è —Ç–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∏–ª–µ–π —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
            self._apply_theme_styles()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            if hasattr(self, 'close_button'):
                self._apply_close_button_style()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
            for child in self.findChildren(QWidget):
                if is_qt_object_valid(child):
                    try:
                        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä QListView) —Ç—Ä–µ–±—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è update()
                        # –ü–æ—ç—Ç–æ–º—É –≤—ã–∑—ã–≤–∞–µ–º repaint() –∫–æ—Ç–æ—Ä—ã–π –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
                        child.repaint()
                    except Exception:
                        # –ï—Å–ª–∏ –∏ repaint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        pass
    
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–∞–º –¥–∏–∞–ª–æ–≥
            self.repaint()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞: {e}")




    def accept_settings(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞"""
        try:
            self.apply_settings()
            self.accept()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–æ—Å —Ç–µ–º—ã
            if is_qt_object_valid(self.theme_combo) and self.theme_combo.count() > 0:
                self.theme_combo.setCurrentIndex(0)

            # –°–±—Ä–æ—Å —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if is_qt_object_valid(self.dark_mode_check):
                self.dark_mode_check.setChecked(False)

            # –°–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if is_qt_object_valid(self.font_size_spin):
                self.font_size_spin.setValue(10)
            if is_qt_object_valid(self.font_family_combo):
                self.font_family_combo.setCurrentIndex(0)
            if is_qt_object_valid(self.show_toolbar_check):
                self.show_toolbar_check.setChecked(True)
            if is_qt_object_valid(self.toolbar_size_combo):
                self.toolbar_size_combo.setCurrentText("–°—Ä–µ–¥–Ω—è—è")
            if is_qt_object_valid(self.show_status_check):
                self.show_status_check.setChecked(True)
            if is_qt_object_valid(self.show_memory_check):
                self.show_memory_check.setChecked(False)
            if is_qt_object_valid(self.remember_geometry_check):
                self.remember_geometry_check.setChecked(True)
            if is_qt_object_valid(self.minimize_to_tray_check):
                self.minimize_to_tray_check.setChecked(False)
            if is_qt_object_valid(self.animation_check):
                self.animation_check.setChecked(True)            
            if is_qt_object_valid(self.cache_size_spin):
                self.cache_size_spin.setValue(100)
            if is_qt_object_valid(self.log_level_combo):
                self.log_level_combo.setCurrentText("INFO")
            if is_qt_object_valid(self.log_to_file_check):
                self.log_to_file_check.setChecked(True)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
