"""
–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º URL
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Brave API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
"""
import re
import requests
from typing import Optional, Dict, Any
import logging
from urllib.parse import urlparse, urljoin


class SmartURLDetector:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, brave_api_key: str):
        self.brave_api_key = brave_api_key
        self.base_search_url = "https://api.search.brave.com/res/v1/web/search"
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.command_patterns = {
            'go_to_site': [
                r'–∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç (.+)',
                r'–æ—Ç–∫—Ä–æ–π —Å–∞–π—Ç (.+)',
                r'–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ (.+)',
                r'go to (.+)',
                r'open (.+)',
                r'visit (.+)',
                r'navigate to (.+)'
            ],
            'search_for': [
                r'–Ω–∞–π–¥–∏ (.+)',
                r'–ø–æ–∏—â–∏ (.+)',
                r'search for (.+)',
                r'look for (.+)'
            ]
        }
    
    def extract_query_from_command(self, command: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        command = command.lower().strip()
        
        for command_type, patterns in self.command_patterns.items():
            for pattern in patterns:
                match = re.search(pattern, command, re.IGNORECASE)
                if match:
                    query = match.group(1).strip()
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
                    query = re.sub(r'\b(—Å–∞–π—Ç|website|site)\b', '', query, flags=re.IGNORECASE).strip()
                    return query
        
        return None
    
    def is_valid_url(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º URL"""
        try:
            result = urlparse(text)
            return all([result.scheme, result.netloc])
        except:
            return False
    
    def search_url_with_brave(self, query: str) -> Optional[str]:
        """–ò—â–µ—Ç URL —á–µ—Ä–µ–∑ Brave API"""
        try:
            params = {
                'q': query,
                'count': 1,
                'safesearch': 'moderate'
            }
            
            headers = {
                'X-Subscription-Token': self.brave_api_key,
                'Accept': 'application/json'
            }
            
            response = requests.get(self.base_search_url, params=params, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'web' in data and 'results' in data['web'] and data['web']['results']:
                    return data['web']['results'][0]['url']
            
            logging.warning(f"Brave API search failed: {response.status_code}")
            return None
            
        except Exception as e:
            logging.error(f"Error searching with Brave API: {e}")
            return None
    
    def detect_url(self, command: str) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ URL
        if self.is_valid_url(command):
            return command
        
        # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'https?://[^\s]+'
        url_match = re.search(url_pattern, command)
        if url_match:
            return url_match.group()
        
        # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        query = self.extract_query_from_command(command)
        if not query:
            return None
        
        # 4. –ò—â–µ–º —á–µ—Ä–µ–∑ Brave API
        url = self.search_url_with_brave(query)
        return url


class SmartBrowserAgent:
    """–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º URL"""
    
    def __init__(self, brave_api_key: str, browser_use_agent=None):
        self.url_detector = SmartURLDetector(brave_api_key)
        self.browser_agent = browser_use_agent
        self.session_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def process_command(self, command: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL
        url = self.url_detector.detect_url(command)
        
        if url:
            self.logger.info(f"‚úÖ URL –Ω–∞–π–¥–µ–Ω: {url}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.session_history.append({
                'command': command,
                'detected_url': url,
                'timestamp': self._get_timestamp()
            })
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å browser agent, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if self.browser_agent:
                try:
                    result = self.browser_agent.navigate_to(url)
                    return {
                        'success': True,
                        'url': url,
                        'message': f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à—ë–ª –Ω–∞ {url}',
                        'browser_result': result
                    }
                except Exception as e:
                    return {
                        'success': False,
                        'url': url,
                        'message': f'–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}',
                        'error': str(e)
                    }
            else:
                return {
                    'success': True,
                    'url': url,
                    'message': f'URL –Ω–∞–π–¥–µ–Ω: {url} (browser agent –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)'
                }
        else:
            self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã: {command}")
            return {
                'success': False,
                'url': None,
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã: "{command}"'
            }
    
    def _get_timestamp(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def get_session_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏"""
        return self.session_history
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏"""
        self.session_history = []


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    brave_api_key = "BSAEcqmI0ZUDsktUV1FKYYYq7HaQlnt"
    agent = SmartBrowserAgent(brave_api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_commands = [
        "–∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç leonardo ai",
        "–æ—Ç–∫—Ä–æ–π github",
        "–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ https://google.com",
        "visit stackoverflow",
        "–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é python"
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartBrowserAgent:\n")
    
    for command in test_commands:
        print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
        result = agent.process_command(command)
        
        if result['success']:
            print(f"‚úÖ {result['message']}")
        else:
            print(f"‚ùå {result['message']}")
        
        print("-" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    print("\nüìù –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏:")
    for entry in agent.get_session_history():
        print(f"- {entry['command']} ‚Üí {entry['detected_url']}")
